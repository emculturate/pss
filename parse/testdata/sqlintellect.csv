"member_master_id","member_name","mbr_sk","mbr_uid","data_space_id","data_space_name","parent_data_space_id","parent_data_space_name","domain_id","entity_type","qry_text","task_name"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"college_lkp","select 
college_cd,
college_desc,
college_desc
 from atlantatech.osf_cll_college_lkp","SSF_college_lkp"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.SectionTime","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
),

SECTLIST AS (
   SELECT SEC_TERM+'_'+SEC_NAME AS nk1,
          CASE
           WHEN CSM_START_TIME IS NOT NULL AND CSM_END_TIME IS NOT NULL THEN
              REPLACE(CONVERT(VARCHAR,CSM_START_TIME,108)+'$$'+CONVERT(VARCHAR,CSM_END_TIME,108),':','')
           ELSE '$$'
         END AS nk2,
          CONVERT(VARCHAR,CSM_START_TIME,108) AS from_tm,
         CONVERT(VARCHAR,CSM_END_TIME,108) AS to_tm,
         CASE
           WHEN CSM_BLDG = CSM_ROOM THEN CSM_BLDG
           WHEN CSM_BLDG = 'WEB' THEN 'WEB'
          ELSE CSM_BLDG+' '+CSM_ROOM
         END AS location,
         CSM_MONDAY,
         CSM_TUESDAY,
         CSM_WEDNESDAY,
         CSM_THURSDAY,
         CSM_FRIDAY,
         CSM_SATURDAY,
         CSM_SUNDAY
     FROM COURSE_SECTIONS JOIN COURSE_SEC_MEETING
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_MEETING.CSM_COURSE_SECTION
    WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST)
      AND SEC_CRED_TYPE = 'I'
      AND SEC_NAME IS NOT NULL
),

BAD_WEB AS (
SELECT nk1+'$$1$$'+nk2 AS nk,nk1 as section,'1' as day_of_week,from_tm,to_tm,location,'T' as is_active 
  from SECTLIST
 WHERE CSM_SUNDAY IS NOT NULL
UNION
SELECT nk1+'$$2$$'+nk2 AS nk,nk1 as section,'2' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_MONDAY IS NOT NULL
UNION
SELECT nk1+'$$3$$'+nk2 AS nk,nk1 as section,'3' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_TUESDAY IS NOT NULL
UNION
SELECT nk1+'$$4$$'+nk2 AS nk,nk1 as section,'4' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_WEDNESDAY IS NOT NULL
UNION
SELECT nk1+'$$5$$'+nk2 AS nk,nk1 as section,'5' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_THURSDAY IS NOT NULL
UNION
SELECT nk1+'$$6$$'+nk2 AS nk,nk1 as section,'6' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_FRIDAY IS NOT NULL
UNION
SELECT nk1+'$$7$$'+nk2 AS nk,nk1 as section,'7' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_SATURDAY IS NOT NULL
UNION
SELECT nk1+'$$8$$'+nk2 AS nk,nk1 as section,'8' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_MONDAY IS NULL
   AND CSM_TUESDAY IS NULL
   AND CSM_WEDNESDAY IS NULL
   AND CSM_THURSDAY IS NULL
   AND CSM_FRIDAY IS NULL
   AND CSM_SATURDAY IS NULL
   AND CSM_SUNDAY IS NULL)

   SELECT 
   nk,
   section,
   day_of_week,
   from_tm,
   to_tm,
   CASE WHEN (location = 'WEB') THEN 'NET' ELSE location END
   location,
   is_active
   FROM BAD_WEB
   order by location","SectionTime"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.seatsavail","SELECT
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_seats_avail avail_seats, 
  'T' is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
                  JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                              AND ssbsect_term_code = ssrmeet_term_code
WHERE spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code >= '201015'
  AND ssbsect_ssts_code = 'A'
  AND ssbsect_crn NOT LIKE '500%' 
  AND ssbsect_crn NOT LIKE '600%'","Seats Avail"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.Section","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'P'
 order by nk desc)

SELECT 
 nk,
 substr(nk, 0, instr(nk, '$$')-1) as cd,
  case
    when instr(course, '$$') > 0 then substr(course, 0, instr(course, '$$')-1)
    else course
  end as course,
 term,
 campus,
 max_seats as seats_offered,
 CASE 
   WHEN nvl(max_seats,0) = 0 and nvl(waitlist_capacity,0) = 0 THEN 'T'
   ELSE 'F'
 END AS is_unlimited_seating,
 waitlist_capacity as waitlist_capacity,
 instuctor_name as instructor_name,
 COALESCE(class_start_dt, '') as class_start_dt,
 COALESCE(class_end_dt, '') as class_end_dt,
 COALESCE(drop_start_dt, '') as drop_start_dt,
 COALESCE(drop_end_dt, '') as drop_end_dt,
 '' as withdraw_end_dt,
 CASE 
   WHEN is_active = 'Y' THEN 'T'
   ELSE 'F'
 END AS is_active
FROM EAB_SECT
WHERE campus LIKE 'P%'
  and term in (select nk from cur_terms)","Section"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"student_term_data","select student_id,
term_id,
key,
value,
chksum
 from atlantatech.osf_sts_student_term_supplement","SSF_student_term_data"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"event.TaskStatusFeed","with cur_terms as (
select distinct nk
  from eab_trm
 where to_date(term_start_dt,'YYYY-MM-DD') >= sysdate-3*365
   and college = 'CC'
 order by nk desc),

cur_stu as (
select distinct id as stu_id
  from eab_stdnt_active
 where current_enroll_pc = 'Y'
   and academic_period in (select nk from cur_terms)),
   
this_term as (
  select MIN(NK)
    from eab_trm
   where to_date(term_end_dt,'YYYY-MM-DD') > sysdate
     and college = 'CC'
)
select id||'$$E_ORIENTATION$$' as nk,
       id as student,
       'E_ORIENTATION' as event,
       '' as repeated_by_nk,
       'COMPLETED' as status,
       '1900-01-01T00:00:00' as status_changed_ts,
       'T' as is_active
  from eab_stdnt_active
 WHERE home_college = 'CC'
   and ID in (select * from cur_stu)
 order by ID, ACADEMIC_PERIOD","TaskStatusFeed"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.StudentTerm","WITH 
-- ALL
-- 7.7M   35s
t1 AS( -- added coalescee as per request NAVBA-512 
SELECT DISTINCT  COALESCE(SUBSTR(STUDENT_TERMS_ID,1,INSTR(STUDENT_TERMS_ID,'*')-1)
                      ,SUBSTR(STUDENT_PROGRAMS_ID,1,INSTR(STUDENT_PROGRAMS_ID,'*')-1))
                      ||'$$'||
                      COALESCE(SUBSTR(STUDENT_TERMS_ID,INSTR(STUDENT_TERMS_ID,'*')+1,INSTR(STUDENT_TERMS_ID,'*',1,2)-(INSTR(STUDENT_TERMS_ID,'*')+1))
                      ,'NA')                                                                      AS nk,
    COALESCE(SUBSTR(STUDENT_TERMS_ID,1,INSTR(STUDENT_TERMS_ID,'*')-1)
                      ,SUBSTR(STUDENT_PROGRAMS_ID,1,INSTR(STUDENT_PROGRAMS_ID,'*')-1))            AS student,
    COALESCE(SUBSTR(STUDENT_TERMS_ID,INSTR(STUDENT_TERMS_ID,'*')+1,INSTR(STUDENT_TERMS_ID,'*',1,2)-(INSTR(STUDENT_TERMS_ID,'*')+1))
                      ,'NA')                                                                                                   AS term,
    replace(STUDENT_PROGRAMS.STPR_STU_PGM_IDX, '*', '$$') AS program,
    'T' AS is_active
 FROM COLL_PRODUCTION.STUDENT_TERMS 
   RIGHT JOIN COLL_PRODUCTION.STUDENT_PROGRAMS  --added right join instead of join as per  NAVBA-512 
       ON SUBSTR(STUDENT_TERMS_ID, 1,    INSTR(STUDENT_TERMS_ID, '*') - 1) =
          SUBSTR(STUDENT_PROGRAMS_ID, 1, INSTR(STUDENT_PROGRAMS_ID, '*') - 1)
   -- JOIN COLL_PRODUCTION.TERMS ON TERMS_ID = SUBSTR(STUDENT_TERMS_ID,INSTR(STUDENT_TERMS_ID,'*')+1,INSTR(STUDENT_TERMS_ID,'*',1,2)-(INSTR(STUDENT_TERMS_ID,'*')+1))      
     --    AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
  --    OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
   --   OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
   --   OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
    --  OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
   --   OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
  --    OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
  --    OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
  --    OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
      ),
 
-- LAST 3 YEARS         
-- 1M   17s          
--t2 as ( SELECT t1.* FROM t1 JOIN COLL_PRODUCTION.TERMS on TERMS.TERMS_ID = term AND TO_CHAR(TERMS.TERM_START_DATE, --'YYYY') > TO_CHAR(sysdate, 'YYYY')-3),

-- No Non-Degree or Continuing Ed
-- 900k
t3 as ( SELECT t1.* from t1 where 
PROGRAM like 'AA.%' or PROGRAM like 'AS.%' or PROGRAM like 'AAS.%' or PROGRAM like 'CAS.%' or PROGRAM like 'DAS.%' )

SELECT * FROM t3 where student not in ('0229963',
'0288667',
'0002038',
'0194013',
'0190026',
'0387002',
'0385969',
'0182976',
'0004840',
'0004915',
'0208083',
'0039024',
'0002256',
'0020173',
'0117528',
'0429379',
'0575407',
'0002154',
'0595955') ","StudentTerm"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.section","with instructor as (
select a.crse_id, a.class_section, a.strm, a.session_code, a.emplid, a.instr_role,a.crse_offer_nbr,b.name 
from PS_CLASS_INSTR a
left join PS_PERSONAL_DATA b
on a.emplid = b.emplid
where 1=1
and INSTR_ROLE = 'PI'
--and a.class_section = '001M'
--and a.crse_id = '245006'
--and a.strm = '2154'
),

location_pop as (
select
distinct a.facility_id as nk

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('A','L','M','N','W','H')
and a.setid = 'NV280'
and a.effdt = (select max(c.effdt) 
                from ps_facility_tbl c 
                where a.facility_id = c.facility_id 
                and a.setid = c.setid) 
),
dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'NV280'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

),

course_bank as (

select course_cd,
sum(institution_count) as inst
from (
      SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','') as course_cd,
      case when c.institution = 'NV280' then '1' else '0' end as institution_count
      from (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.acad_org <> 'LCREDIT'
                    and o.crse_offer_nbr <> 1
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
                    ) C
        )
group by course_cd

)

select distinct section.crse_id || '$$' 
                || section.strm || '$$' 
                || section.session_code || '$$'
                || dates.date_diff || '$$'
                || section.CLASS_SECTION as nk
, section.CLASS_NBR || ' - ' || section.CLASS_SECTION || ' - ' || weeks_of_instruct || 'W' as cd
, REPLACE(section.SUBJECT, ' ','') || REPLACE(section.CATALOG_NBR, ' ','') as COURSE
, section.strm as TERM
--, case when section.session_code = '1' then section.strm
--  else section.strm || '-' || section.session_code end as TERM
, case 
--when section.instruction_mode = 'HY' 
        --then 'ONL-P'
        when section.instruction_mode = 'WW'
        then 'ONL'
        else section.CAMPUS 
  end as CAMPUS
, section.enrl_cap as seats_offered
, case when section.enrl_cap in ('0') then 'Y'
else 'N' end as is_unlimited_seating
, nvl(instructor.name, 'TBD') as instructor_name
, to_char(section.start_dt,'YYYY-MM-DD') as class_start_date
, to_char(section.end_dt,'YYYY-MM-DD') as class_end_date
, to_char(dates.FIRST_ENRL_DT,'YYYY-MM-DD') as drop_start_date
, to_char(dates.sixty_PCT_DT,'YYYY-MM-DD') as drop_end_date
, to_char(dates.last_wait_dt,'YYYY-MM-DD') as withdraw_end_dt
, CASE WHEN CLASS_STAT = 'A'  and meetings.facility_id in (select * from location_pop)
then 'T'
else 'F' end as is_active
from PS_CLASS_TBL section
left join PS_CLASS_MTG_PAT meetings on section.strm = meetings.strm
                  and section.session_code = meetings.session_code
                  and section.class_section = meetings.class_section
                  and section.crse_offer_nbr = meetings.crse_offer_nbr
                  and section.crse_id = meetings.crse_id
left join instructor on section.crse_id = instructor.crse_id 
          and section.strm = instructor.strm 
          and section.session_code = instructor.session_code
          and section.class_section = instructor.class_section
          and section.crse_offer_nbr = instructor.crse_offer_nbr
left join dates on section.strm = dates.strm
and section.session_code = dates.session_code


inner join (
        SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION 
                FROM PS_CRSE_OFFER o
                WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.INSTITUTION = 'NV280'
                    --and o.acad_career = 'CRED'
                and o.acad_org <> 'LCREDIT'
                and o.crse_offer_nbr <> '1'
                and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
) course on section.crse_id = course.crse_id


where 1=1
and section.institution = 'NV280' --member specific
and section.start_dt > sysdate-365 --designed to limit the sections to only relevant ones in the present and future
--and meetings.facility_id in (select * from location_pop)","Section"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.Department","-- Fields: nk,name,is_active
-- Model Name: cat.Department
-- Name: Department
-- Output: Department_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get department data from Banner 
WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM department
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Departments"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"core.FacultyType","-- Extract faculty type data from the Faculty Staff Type validation table
WITH staffType AS (
SELECT stvfstp_code AS nk
  , stvfstp_code AS \\\""type\\\""
  , stvfstp_desc AS description
FROM stvfstp  
),

-- Extract Faculty category data from the Faculty Category validation table
facultyCategory AS (
SELECT stvfctg_code AS nk
  , stvfctg_code AS \\\""type\\\""
  , stvfctg_desc AS description
FROM stvfctg
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'Staff' AS nk
  , 'Staff' AS \\\""type\\\""
  , 'Staff' AS description
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM staffType
UNION
SELECT * FROM facultyCategory
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Faculty Type"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.SeatsAvail","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
),

COURSES_TEMP AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk 
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
 --       APPROVAL_STATUS.CRS_STATUS = 'A'
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
        COURSES.CRS_MIN_CRED > 0 
		AND CRS_ACAD_LEVEL = 'UG'
       AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
--			 AND CRS_DEPTS IN (SELECT DISTINCT DEPTS_ID
--									 FROM    DEPTS
--									 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A')
),

SEC_LIST AS 
(
SELECT distinct SEC_TERM+'-'+SEC_NAME nk
  FROM COURSE_SECTIONS LEFT OUTER JOIN COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1'
  LEFT JOIN COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
	 LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
  WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST) AND COURSES.CRS_NAME IN (SELECT * FROM COURSES_TEMP))

SELECT CS_TERM+'-'+CS_NAME AS nk,
       CASE
         WHEN CS_CAPACITY - CS_COUNT_ACTIVE_STUDENTS >= 0 THEN CS_CAPACITY - CS_COUNT_ACTIVE_STUDENTS
         ELSE 0
       END AS avail_seats,
       CASE
         WHEN CS_STATUS = 'A' THEN 'Y'
         ELSE 'N'
       END AS is_active
  FROM COURSE_SECTIONS_DETAILS_VIEW
 WHERE CS_TERM+'-'+CS_NAME IN (SELECT * FROM SEC_LIST)","SeatsAvailable"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.StudentTerm","-- GET ALL STUDENTS WITH ACTIVE PROGRAM
WITH 

defaultValues AS (
	SELECT
	'default' nk,
	'default' student,
	'2013SP'  term,
	'ST$$2012' program,
	'F'       is_active 
),

STUDENTS_ACTIVE_PROGRAM AS (

SELECT DISTINCT
   SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)+'$$'+TERMS.TERMS_ID  nk,
   SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)   student,
   TERMS.TERMS_ID  term
FROM
   STUDENT_PROGRAMS SP
      LEFT OUTER JOIN STUDENT_PROGRAMS_LS SPL ON -- if multiple programs and not code as prim or secon pull pos 1
         SPL.STUDENT_PROGRAMS_ID = SP.STUDENT_PROGRAMS_ID
            AND
         SPL.POS = 1
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'
   ,
   ( -- FIND LAST TERM REGISTERED FOR
      SELECT DISTINCT 
         SUBSTRING(ST.STUDENT_TERMS_ID,1,7) AS ID,
         MAX(DATEDIFF(DAY, '19000101', TERM_START_DATE)) AS TERMSTART
      FROM
         STUDENT_TERMS ST
            JOIN TERMS ON
               SUBSTRING(ST.STUDENT_TERMS_ID,9,6) = TERMS.TERMS_ID
        GROUP BY SUBSTRING(ST.STUDENT_TERMS_ID,1,7)
   ) STUTERM
      LEFT OUTER JOIN TERMS ON
         STUTERM.TERMSTART = DATEDIFF(DAY, '19000101', TERMS.TERM_START_DATE)
   WHERE
      SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7) = STUTERM.ID
),

-- GET ALL FUTURE APPLICANTS, WE'LL GET TERM AND PROGRAM LATER AS CAN HAVE MULTIPLE OPEN APPS AND WE ONLY WANT LATEST???
APPLICANTS AS (
SELECT DISTINCT
   A.APPL_APPLICANT student  
FROM
   APPLICATIONS A,
   APPL_STATUSES AS APPS,
   TERMS T
WHERE
   T.TERM_START_DATE >= GETDATE()
      AND
   A.APPL_START_TERM = T.TERMS_ID
      AND
   A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
      AND
   APPS.POS = 1
      AND
   APPS.APPL_STATUS IN ('ACC', 'MOVE')
      AND
   A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      AND
   A.APPL_APPLICANT NOT IN 
   (
      SELECT
         student
      FROM
         STUDENTS_ACTIVE_PROGRAM
   )
),

STUDENTS_AND_APPLICANTS as (SELECT nk,student,term FROM STUDENTS_ACTIVE_PROGRAM UNION SELECT null, student,null from APPLICANTS),

-- GETS STUDENTS PRIMARY CODED PROGRAM
PRIMARY_PROGRAM as (SELECT 
    nk,student,term,SUBSTRING(SP.STUDENT_PROGRAMS_ID,9,20) program
	FROM
   STUDENTS_AND_APPLICANTS
      JOIN STUDENT_PROGRAMS SP ON      
         STUDENTS_AND_APPLICANTS.student = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
            AND 
         SP.STPR_ADMIT_STATUS = 'PRIM' 
            AND
         SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, LEN(SP.STUDENT_PROGRAMS_ID)) NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN STPR_STATUSES SS ON
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A'      
      LEFT JOIN ACAD_PROGRAMS ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID 
      LEFT OUTER JOIN ACAD_PROGRAMS_LS ON 
         ACAD_PROGRAMS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS_LS.ACAD_PROGRAMS_ID 
            AND 
         ACAD_PROGRAMS_LS.POS = '1' 
),

-- GETS STUDENTS SECONDARY CODED PROGRAM
SECONDARY_PROGRAM as (SELECT 
    nk,student,term,SUBSTRING(SP.STUDENT_PROGRAMS_ID,9,20) program
	FROM
    STUDENTS_AND_APPLICANTS
      JOIN STUDENT_PROGRAMS SP ON      
         STUDENTS_AND_APPLICANTS.student = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
            AND 
         SP.STPR_ADMIT_STATUS = 'SECON' 
            AND
         SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, LEN(SP.STUDENT_PROGRAMS_ID)) NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN STPR_STATUSES SS ON
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A'      
      LEFT JOIN ACAD_PROGRAMS ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID 
      LEFT OUTER JOIN ACAD_PROGRAMS_LS ON 
         ACAD_PROGRAMS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS_LS.ACAD_PROGRAMS_ID 
            AND 
         ACAD_PROGRAMS_LS.POS = '1' 
),

-- GETS STUDENTS PROGRAM IN POS ONE
POS_ONE_PROGRAM as (SELECT 
    nk,student,term,SUBSTRING(SP.STUDENT_PROGRAMS_ID,9,20) program
	FROM
    STUDENTS_AND_APPLICANTS
      JOIN STUDENT_PROGRAMS SP ON      
         STUDENTS_AND_APPLICANTS.student = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
            AND
         SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, LEN(SP.STUDENT_PROGRAMS_ID)) NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      LEFT OUTER JOIN STUDENT_PROGRAMS_LS SPL ON -- if multiple programs and not code as prim or secon pull pos 1
         SPL.STUDENT_PROGRAMS_ID = SP.STUDENT_PROGRAMS_ID
            AND
         SPL.POS = 1
      JOIN STPR_STATUSES SS ON
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A'      
      LEFT JOIN ACAD_PROGRAMS ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID 
      LEFT OUTER JOIN ACAD_PROGRAMS_LS ON 
         ACAD_PROGRAMS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS_LS.ACAD_PROGRAMS_ID 
            AND 
         ACAD_PROGRAMS_LS.POS = '1' 
),



-- DID NOT FIND PROGRAM LET LOOK AT LATEST ACC/MOVE APPLICATION
APPLICANT_PROGRAM as (SELECT 
    STUTERM.ID+'$$'+TERMS.TERMS_ID nk,
	student,
	TERMS.TERMS_ID term,
	A.APPL_ACAD_PROGRAM program,
	'T' is_active
	FROM
    STUDENTS_AND_APPLICANTS
      JOIN APPLICATIONS A ON
         A.APPL_APPLICANT = STUDENTS_AND_APPLICANTS.student
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES APPS ON
         APPS.APPLICATIONS_ID = A.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
   ,
   (
      SELECT DISTINCT 
         A.APPL_APPLICANT AS ID,
         MAX(DATEDIFF(DAY, '19000101', TERM_START_DATE)) AS TERMSTART
      FROM
         APPLICATIONS A
            JOIN APPL_STATUSES APPS ON
               APPS.APPLICATIONS_ID = A.APPLICATIONS_ID
                  AND
               APPS.POS = 1
                  AND
               APPS.APPL_STATUS IN ('ACC', 'MOVE')
            JOIN TERMS ON
               A.APPL_START_TERM = TERMS.TERMS_ID
      WHERE         
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      GROUP BY A.APPL_APPLICANT
   ) STUTERM
      JOIN TERMS ON
         STUTERM.TERMSTART = DATEDIFF(DAY, '19000101', TERMS.TERM_START_DATE)
WHERE
   STUDENTS_AND_APPLICANTS.student = STUTERM.ID
      AND
   TERMS.TERMS_ID = A.APPL_START_TERM
     AND
   STUDENTS_AND_APPLICANTS.nk is null)
   ,

   CURRENT_STUDENTS AS (

SELECT
   sa.nk nk,
   sa.student student,
   sa.term term,
   isnull(pp.program, isnull(sp.program, isnull(pop.program, ''))) program,
   'T' is_active
FROM
    STUDENTS_AND_APPLICANTS sa
	left outer join PRIMARY_PROGRAM pp on pp.student = sa.student
	left outer join SECONDARY_PROGRAM sp on sp.student = sa.student
	left outer join POS_ONE_PROGRAM pop on pop.student = sa.student

	WHERE sa.nk is not  null),

ST_TM_BAD_PROGRAM AS (
	SELECT nk,student,term,program,is_active FROM CURRENT_STUDENTS 
	UNION  
	SELECT nk,student,term,program,is_active FROM APPLICANT_PROGRAM 
),

dailyStudentTerm AS (
SELECT 
app.nk nk,
app.student student,
app.term term,
REPLACE(req.ACAD_PROGRAM_REQMTS_ID , '*','$$') program,
app.is_active 

FROM ST_TM_BAD_PROGRAM app
LEFT OUTER JOIN ACAD_PROGRAMS acad on acad.ACAD_PROGRAMS_ID = app.program
LEFT OUTER JOIN TERMS t on t.TERMS_ID = app.term
LEFT OUTER JOIN ACAD_PROGRAM_REQMTS req
      ON SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = acad.ACAD_PROGRAMS_ID
WHERE
req.ACAD_PROGRAM_REQMTS_ID = 
(
select top 1 ACAD_PROGRAM_REQMTS_ID
FROM ACAD_PROGRAM_REQMTS
WHERE SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = acad.ACAD_PROGRAMS_ID
AND RIGHT(ACAD_PROGRAM_REQMTS_ID, 4 ) < t.TERM_REPORTING_YEAR
ORDER BY ACAD_PROGRAM_REQMTS_ID desc
))

SELECT dst.* FROM dailyStudentTerm dst
JOIN PERSON p on dst.student = p.ID
WHERE p.PERSON_CHANGE_DATE > GETDATE() - 1
UNION
SELECT * FROM defaultValues","StudentTerm"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"","select top 10 ACAD_PROGRAMS_ID,ACPG_DESC,ACPG_TITLE from dbo.ACAD_PROGRAMS","Test txn for connection with sql server database"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"core.student","WITH pop AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)))),


dual_enrollment as (
select sgbstdn_pidm pidm
from sgbstdn a
left join STVSTYP
on sgbstdn_styp_code = stvstyp_code
where 1=1
and sgbstdn_term_code_eff = (select max(sgbstdn_term_code_eff)
                            from sgbstdn b
                            where a.sgbstdn_pidm = b.sgbstdn_pidm)
and stvstyp_desc like lower('%concurrent%')                           
),

veterans as (
select distinct sgrvetn_pidm
from sgrvetn

)


select spriden_id nk,
       spriden_id username,
       --nvl((select gobtpac_external_user from gobtpac where gobtpac_pidm = spriden_pidm), spriden_id) username,
               coalesce(( 
                select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'O365'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'O365'
              and goremal_preferred_ind = 'N'
              ),
               lower(spriden_id) || '@missingemail.org') email,
       spriden_first_name first_name,
       spriden_last_name last_name,
       nvl(to_char(spbpers_birth_date,'YYYY-MM-DD'),'2000-01-01') birthdate,
       case when spriden_pidm in (select * from dual_enrollment) then 'DE'
       else null end as enrollment_status,
       case when spriden_pidm in (select * from veterans) then 'Y'
       else 'N' end as veteran_ind,
'T' as is_active
  from spriden
  join spbpers on spriden_pidm = spbpers_pidm
  --right join pop on spriden_pidm = pop.pidm
 where spriden_change_ind is null
 --and spriden_id in (select * from pilot_pop)
 --and spriden_pidm in (select * from pop)
AND spriden_entity_ind = 'P'
and spriden_create_date > sysdate-8 -- Incremental extract for changes within the last week","Student"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.studentterm","with program_bank as (
select DISTINCT ACAD_PLAN as pgrm, 
                EFFDT as effective_dt,
                ACAD_YEAR as CATALOG_YR
from ps_acad_plan_tbl a
left join ps_term_tbl b 
on effdt < term_end_dt and b.institution = a.institution
where 1=1
--and acad_plan = '1190'
and a.institution = 'NV280'
and a.acad_plan_type = 'MAJ'
--and a.acad_plan in ('1880')
and b.ACAD_YEAR = (select min(ACAD_YEAR) 
                  from ps_term_tbl 
                  where institution = 'NV280' and effdt < term_end_dt)
                  
),



pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select emplid, max(strm)
              from ps_stdnt_car_term b
              where institution = 'NV280'
              and ACAD_CAREER = 'CRED'
             -- and WITHDRAWN_CODE <> 'NWD'
              group by emplid) b
              on a.emplid = b.emplid         
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid  
WHERE  1=1
        and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      ) 
        and acad_plan in ('2120','2124','2130','3400','2990')
--eff sequence if there is a tie on effdt
--plan sequence if they have more than one major, minimum plan sequence is the primary major
--stdnt_car_nbr is used differently at different schools, such as is they are pursuing majors at a different institution, a new number is coded here
)                  
select distinct
pop.student_id || '$$' || pop.max_term as nk,
pop.student_id as student,
pop.max_term as term,

(select pgrm || '$$' || max(b.catalog_yr) from program_bank b
            where to_char(pop.declare_dt,'YYYY') > b.catalog_yr
            and pop.acad_plan = b.pgrm
            group by pgrm) as program,
'T' as is_active


from pop

--left join pop on student_id = a.emplid and strm = max_term
where 1=1

order by 1,3 desc","Student_Term"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.Subject","-- Fields: nk,name,is_active
-- Model Name: cat.Subject
-- Name: Subject
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get subject data from Banner  
WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  'T' AS is_active
FROM stvsubj
),

-- Assign default values
\\\""default\\\"" AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM subject
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Subjects"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.SectionTime","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
),

COURSES_TEMP AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk 
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
 --       APPROVAL_STATUS.CRS_STATUS = 'A'
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
        COURSES.CRS_MIN_CRED > 0 
    AND CRS_ACAD_LEVEL = 'UG'
        AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
      -- AND CRS_DEPTS IN (SELECT DISTINCT DEPTS_ID
        --           FROM    DEPTS
          --         WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A')
),

SECTION_TEMP AS (SELECT distinct SEC_TERM+'-'+SEC_NAME nk
  FROM COURSE_SECTIONS LEFT OUTER JOIN COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1'
  LEFT JOIN COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
  WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST) AND COURSES.CRS_NAME IN (SELECT * FROM COURSES_TEMP)),

SECTLIST AS (
   SELECT SEC_TERM+'-'+SEC_NAME AS nk1,
          CASE
           WHEN CSM_START_TIME IS NOT NULL AND CSM_END_TIME IS NOT NULL THEN
              REPLACE(CONVERT(VARCHAR,CSM_START_TIME,108)+'$$'+CONVERT(VARCHAR,CSM_END_TIME,108),':','')
           ELSE '$$'
         END AS nk2,
          CONVERT(VARCHAR,CSM_START_TIME,108) AS from_tm,
         CONVERT(VARCHAR,CSM_END_TIME,108) AS to_tm,
         CASE
           WHEN CSM_BLDG = CSM_ROOM THEN CSM_BLDG
           WHEN CSM_BLDG = 'WEB' THEN 'WEB'
          ELSE CSM_BLDG+' '+CSM_ROOM
         END AS location,
         CSM_MONDAY,
         CSM_TUESDAY,
         CSM_WEDNESDAY,
         CSM_THURSDAY,
         CSM_FRIDAY,
         CSM_SATURDAY,
         CSM_SUNDAY
     FROM COURSE_SECTIONS JOIN COURSE_SEC_MEETING
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_MEETING.CSM_COURSE_SECTION
    WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST)
      AND SEC_TERM+'-'+SEC_NAME IN (SELECT * FROM SECTION_TEMP)
)

SELECT nk1+'$$1$$'+nk2 AS nk,nk1 as section,'1' as day_of_week,from_tm,to_tm,location,'T' as is_active 
  from SECTLIST
 WHERE CSM_SUNDAY IS NOT NULL
UNION
SELECT nk1+'$$2$$'+nk2 AS nk,nk1 as section,'2' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_MONDAY IS NOT NULL
UNION
SELECT nk1+'$$3$$'+nk2 AS nk,nk1 as section,'3' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_TUESDAY IS NOT NULL
UNION
SELECT nk1+'$$4$$'+nk2 AS nk,nk1 as section,'4' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_WEDNESDAY IS NOT NULL
UNION
SELECT nk1+'$$5$$'+nk2 AS nk,nk1 as section,'5' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_THURSDAY IS NOT NULL
UNION
SELECT nk1+'$$6$$'+nk2 AS nk,nk1 as section,'6' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_FRIDAY IS NOT NULL
UNION
SELECT nk1+'$$7$$'+nk2 AS nk,nk1 as section,'7' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_SATURDAY IS NOT NULL
UNION
SELECT nk1+'$$8$$'+nk2 AS nk,nk1 as section,'8' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_MONDAY IS NULL
   AND CSM_TUESDAY IS NULL
   AND CSM_WEDNESDAY IS NULL
   AND CSM_THURSDAY IS NULL
   AND CSM_FRIDAY IS NULL
   AND CSM_SATURDAY IS NULL
   AND CSM_SUNDAY IS NULL
 order by 1, 2","SectionTime"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"catcc.PriorityRegSlot","WITH getLastXTerms AS (
  SELECT stvterm_code
    FROM stvterm
   WHERE stvterm_code <= (select stvterm_code
                            from stvterm
                           where stvterm_start_date < sysdate
                             and stvterm_end_date > sysdate
                             and substr(stvterm_code, -1, 1) IN ('0','9')
                             and rownum = 1)
     AND ROWNUM < 6
   ORDER BY 1 DESC
),

priorityRegTimestamp AS (
  SELECT sfrwctl_term_code
    , sfrwctl_priority
    , sfrwctl_seq_no
    , TO_CHAR (sfrwctl_begin_date,'yyyy-mm-dd')||'T'||SUBSTR(sfrwctl_hour_begin,0,2)||':'||SUBSTR(sfrwctl_hour_begin,-2,2)||':00' AS beginTimestamp
    , TO_CHAR (sfrwctl_end_date,'yyyy-mm-dd')||'T'||SUBSTR(sfrwctl_hour_end,0,2)||':'||SUBSTR(sfrwctl_hour_end,-2,2)||':00' AS endTimestamp
  FROM sfrwctl
),

-- Extract priority registration slots
finalDataSet AS (SELECT
  sfrwctl.sfrwctl_term_code || '$$' || sfrwctl.sfrwctl_priority AS nk
  , sfrwctl.sfrwctl_term_code AS term
  , priorityRegTimestamp.beginTimestamp AS start_ts
  , priorityRegTimestamp.endTimestamp AS end_ts
  , 'T' AS is_active
FROM sfrwctl
  JOIN priorityRegTimestamp ON (priorityRegTimestamp.sfrwctl_term_code = sfrwctl.sfrwctl_term_code
                                AND priorityRegTimestamp.sfrwctl_priority = sfrwctl.sfrwctl_priority
                                AND priorityRegTimestamp.sfrwctl_seq_no = sfrwctl.sfrwctl_seq_no
                                )
  where sfrwctl.sfrwctl_term_code in (select * from getLastXTerms)
  )

-- Wrapper query
SELECT * FROM finalDataSet","priorityRegSlot"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"core.Student","

 SELECT DISTINCT ltrim(SUBSTRING(PERSON.ID,1,7)) as nk,
                PERSON_PIN.PERSON_PIN_USER_ID as username,
                CASE
                    WHEN PEOPLE_EMAIL.PERSON_EMAIL_TYPES = 'STU'
                        THEN ISNULL(PEOPLE_EMAIL.PERSON_EMAIL_ADDRESSES,'') 
                    WHEN PEOPLE_EMAIL.PERSON_EMAIL_TYPES = 'STA'
                        THEN ISNULL(PEOPLE_EMAIL.PERSON_EMAIL_ADDRESSES,'')
                    WHEN PEOPLE_EMAIL.PERSON_EMAIL_ADDRESSES IS NOT NULL
                        THEN PEOPLE_EMAIL.PERSON_EMAIL_ADDRESSES                        
                    ELSE PERSON_PIN.PERSON_PIN_USER_ID+'@missinG.westernwyoming.edu'
                END as email,
                REPLACE(PERSON.FIRST_NAME, '`', '``') as first_name,
                PERSON.LAST_NAME as last_name,
                REPLACE(CONVERT(CHAR(10), PERSON.BIRTH_DATE, 111) , '/','-') as birthdate,
                'T' as is_active
FROM PERSON PERSON
    LEFT OUTER JOIN PERSON_PIN PERSON_PIN
        ON PERSON.ID = PERSON_PIN.PERSON_PIN_ID AND
            PERSON_PIN.PERSON_PIN_USER_ID <> ' '
    LEFT OUTER JOIN PEOPLE_EMAIL PEOPLE_EMAIL
        ON PERSON.ID = PEOPLE_EMAIL.ID AND
            PEOPLE_EMAIL.POS = '1'
WHERE PERSON.ID IS NOT NULL and
        PERSON_PIN.PERSON_PIN_USER_ID IS NOT NULL and
        UPPER(PERSON.LAST_NAME) <> 'DO NOT USE' AND
        PERSON.BIRTH_DATE IS NOT NULL  

		order by 1","Student"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.SectionTime","with ssbsect_terms as (
  select distinct ssbsect_term_code
    from ssbsect
),
shrtckn_list as (
  select shrtckn_crn,
        shrtckn_term_code,
        shrtckn_subj_code,
        shrtckn_crse_numb,
        SHRTCKN_PTRM_START_DATE,
        SHRTCKN_PTRM_END_DATE,
        SHRTCKN_SCHD_CODE,
        SHRTCKN_CAMP_CODE
    from shrtckn
   where shrtckn_term_code not in (select * from ssbsect_terms)
     and shrtckn_dept_code is not null
   group by shrtckn_crn,
            shrtckn_term_code,
            shrtckn_subj_code,
            shrtckn_crse_numb,
            SHRTCKN_PTRM_START_DATE,
            SHRTCKN_PTRM_END_DATE,
            SHRTCKN_SCHD_CODE,
            SHRTCKN_CAMP_CODE
),
crse_list as (
  select distinct
      ssbsect_subj_code,
      ssbsect_crse_numb,
      ssbsect_schd_code
    from ssbsect
),
link_lab_list as (
  select ssbsect_subj_code as subj_code,
         ssbsect_crse_numb as crse_numb,
         count(*) as link_lab
    from crse_list
   group by ssbsect_subj_code, ssbsect_crse_numb
)
SELECT /*csv*/
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_crn cd, 
  case
    when upper(trim(ssbsect_schd_code)) = 'LAB' and link_lab > 1 then ssbsect_subj_code||ssbsect_crse_numb||'L'
    else ssbsect_subj_code||ssbsect_crse_numb
  end as course,
  ssbsect_term_code term,
  ssbsect_camp_code campus,
  ssbsect_max_enrl seats_offered,
  CASE 
    WHEN ssbsect_max_enrl IS NOT NULL THEN 'F'
    ELSE 'T'
  END is_unlimited_seating,
  CASE
    WHEN spriden_last_name IS NULL THEN 'STAFF'
    ELSE spriden_last_name || ', ' || spriden_first_name
  END AS instructor_name,
  NVL(to_char(ssrmeet_start_date, 'YYYY-MM-DD'), '2000-01-01') class_start_dt,
  NVL(to_char(ssrmeet_end_date, 'YYYY-MM-DD'), '2000-01-02') class_end_dt,
  to_char(ssrmeet_start_date, 'YYYY-MM-DD') drop_start_dt,
  -- There is a bug that when this value is null it defaults to today's date.
  COALESCE(to_char(ssbsect_drop_cut_off_date, 'YYYY-MM-DD'),
           to_char(ssrmeet_start_date + 30, 'YYYY-MM-DD')) drop_end_dt,
  '' withdraw_end_dt, 
  CASE
    WHEN ssbsect_ssts_code = 'A'
     AND ssrmeet_start_date >= sysdate-150 THEN 'T'
    ELSE 'F'
  END is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
                              AND spriden_change_ind IS NULL
             LEFT JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                              AND ssbsect_term_code = ssrmeet_term_code
             left join link_lab_list on ssbsect_subj_code = subj_code
                                    and ssbsect_crse_numb = crse_numb 

union
-- Historical sections
select shrtckn_crn||'$$'||shrtckn_term_code as nk,
       shrtckn_crn as cd,
       shrtckn_subj_code||shrtckn_crse_numb as course,
       shrtckn_term_code as term,
       nvl(SHRTCKN_CAMP_CODE, 'XX') as campus,
       0 as seats_offered,
       'F' as is_unlimited_seating,
       'STAFF' as instructor_name,
       nvl(to_char(SHRTCKN_PTRM_START_DATE, 'YYYY-MM-DD'), SUBSTR(shrtckn_term_code,1,4)||'-01-01') as class_start_dt,
       nvl(to_char(SHRTCKN_PTRM_END_DATE, 'YYYY-MM-DD'), SUBSTR(shrtckn_term_code,1,4)||'-01-02') as class_start_dt,
       '' as drop_start_dt,
       '' as drop_end_dt,
       '' as withdraw_end_dt,
       'F' as is_active
  from shrtckn_list
 where shrtckn_subj_code||shrtckn_crse_numb in (select scbcrse_subj_code||scbcrse_crse_numb
                                                  from scbcrse
                                                 where scbcrse_csta_code = 'A')","Section Time"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.Course","-- Fields: nk,cd,level,subject,department,title,desc,course_type,credits,is_active
-- Model Name: cat.Course
-- Name: Course
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version: pjf4g1
-- Author: James DeBolt
-- Query:

WITH 

defaultValues as (
  SELECT 
    'default' nk,
    null      cd,
    '1'       \\\""level\\\"",
    'default' subject,
    'default' dept,
    'default' title,
    null      as \\\""desc\\\"",
    null      as course_type,
    null      as credits,
    'F'       is_active
    FROM DUAL
),

departments as (
  SELECT DISTINCT 
    DEPTS_ID id
  FROM   COLL_PRODUCTION.DEPTS
),

validCourses as (
  SELECT DISTINCT COURSES.CRS_NAME nk,  
      COURSES.CRS_NAME cd, 
       '1'  \\\""level\\\"",
      CRS_SUBJECT subject, 
      CRS_DEPTS   department,  
      CASE
        WHEN CRS_TITLE IS NULL
          THEN 
          RTRIM(REPLACE(NVL(TO_CHAR(CRS_SHORT_TITLE),''), chr(253) , ' ' )) 
      ELSE
          RTRIM(REPLACE(CRS_TITLE, chr(253) , ' ' ))  
      END title,
      
      rtrim(REPLACE(REPLACE(REPLACE(TO_CHAR(COURSES.CRS_DESC), 
            chr(253) , ' ' ), chr(10), ''), chr(13), '')) as \\\""desc\\\"",
      
      CRS_CRED_TYPE as course_type,
      SUBSTR(SUBSTR(CRS_MIN_CRED, GREATEST(-LENGTH(CRS_MIN_CRED), -8)), 1, 4) credits,
      CASE
        when APPROVAL_STATUS.CRS_STATUS = 'AC' THEN 'T'
      ELSE 'F'
      END is_active  
      
  FROM COLL_PRODUCTION.COURSES
    Join COLL_PRODUCTION.APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' AND APPROVAL_STATUS.CRS_STATUS = 'AC'
    Join COLL_PRODUCTION.COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
    Join departments
      ON CRS_DEPTS = departments.id
  Where 
      CRS_ACAD_LEVEL = 'UG'
  AND CRS_NO <> '999' AND CRS_NO <> '998' AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' 
  AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' 
  AND CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' 
  AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
  AND COURSES.CRS_NAME IS NOT NULL
  AND CRS_DEPTS != 'OLD'
),

finalDataSet AS (
  SELECT * FROM validCourses 
  UNION 
  SELECT * FROM defaultValues
)

SELECT * FROM finalDataSet","Course"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.SectionTime","SELECT ssbsect_crn || '$$' || ssbsect_term_code || '$$' || decode(day_of_week, 'Sunday', 1, 'Monday', 2, 'Tuesday', 3, 'Wednesday', 4, 'Thursday', 5, 'Friday', 6, 'Saturday', 7, 8) || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') nk, 
       ssbsect_crn || '$$' || ssbsect_term_code section,
       decode(day_of_week, 'Sunday', 1, 'Monday', 2, 'Tuesday', 3, 'Wednesday', 4, 'Thursday', 5, 'Friday', 6, 'Saturday', 7, 8) as day_of_week,
       CASE 
         WHEN ssrmeet_begin_time IS NOT NULL THEN SUBSTR(ssrmeet_begin_time, 1, 2) || ':' || SUBSTR(ssrmeet_begin_time, 3, 2) || ':00'
         ELSE NULL
       END from_tm, 
       CASE 
         WHEN ssrmeet_end_time IS NOT NULL THEN SUBSTR(ssrmeet_end_time, 1, 2) || ':' || SUBSTR(ssrmeet_end_time, 3, 2) || ':00'
         ELSE NULL
      END to_tm,
      CASE 
        WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code || '$$' || ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code 
        ELSE 'WEB' 
      END location,
      CASE 
        WHEN ssbsect_ssts_code = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
FROM ssrmeet JOIN ssbsect ON ssbsect_term_code = ssrmeet_term_code
                         AND ssbsect_crn = ssrmeet_crn
        LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                         AND ssbsect_crn = sirasgn_crn
        LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
     UNPIVOT EXCLUDE NULLS
     (
       VAL FOR ( day_of_week ) IN 
          (
             ssrmeet_sun_day AS 'Sunday', 
             ssrmeet_mon_day AS 'Monday', 
             ssrmeet_tue_day AS 'Tuesday',
             ssrmeet_wed_day AS 'Wednesday',
             ssrmeet_thu_day AS 'Thursday',
             ssrmeet_fri_day AS 'Friday', 
             ssrmeet_sat_day AS 'Saturday'
          )
     )
WHERE ssbsect_term_code >= '201015'
  AND spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  and substr(ssbsect_term_code, -1, 1) IN ('0','9')
ORDER BY ssbsect_crn, ssbsect_term_code, day_of_week","SectionTime"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"reg.StudentTestScore","
-- get last five terms based on current term
WITH getLastXTerms AS (
  SELECT stvterm_code
    FROM stvterm
   WHERE stvterm_code <= (SELECT MIN(stvterm_code)
                            FROM stvterm
                           WHERE stvterm_start_date > sysdate)
     AND ROWNUM < 6
   ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
    FROM sfrstcr JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
   WHERE 1=1
     AND sfrstcr_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE')
     and sfrstcr_levl_code in ('50', '54')
     and sfrstcr_term_code >= '201212'  
  UNION
  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
    FROM saradap JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
   WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT spriden_id || '$$' || stvtesc_code AS nk
       , spriden_id AS student
       , stvtesc_code AS test_subject
       , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
       , 'T' AS is_active
  FROM sortest JOIN spriden ON spriden_pidm = sortest_pidm
               JOIN stvtesc ON stvtesc_code = sortest_tesc_code
               JOIN studentPopulation ON studentPidm = sortest_pidm
 WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
   AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
   and SORTEST_TEST_DATE >= (sysdate-(5*365))
 GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","Student Test Score"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.Department","SELECT nk, name, is_active
FROM EAB_DEPARTMENT","Department"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"catcc.TestSubject","WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
--  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
  --        THEN TO_NUMBER(stvtesc_max_value) || '.00'
  --        ELSE stvtesc_max_value
--          END AS max_score
,stvtesc_max_value AS max_score
  , 'T' AS is_active
FROM stvtesc
WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')
)

-- wrapper query
SELECT * FROM testSubjects","TestSubjects"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.Term","SELECT DISTINCT SUBSTRING(TERMS_ID,1,6) nk,
      TERM_DESC name,
      CAST ( TERM_REPORTING_YEAR AS CHAR(4)) cat_yr,
      REPLACE(CONVERT(CHAR(10), TERM_REG_START_DATE, 111) , '/','-') registration_start_dt,
      REPLACE(CONVERT(CHAR(10), TERM_REG_END_DATE, 111) , '/','-') registration_end_dt,
      REPLACE(CONVERT(CHAR(10), TERM_START_DATE, 111) , '/','-') term_start_dt,
      REPLACE(CONVERT(CHAR(10), TERM_END_DATE, 111) , '/','-') term_end_dt, 
      'T' is_active 
  --as line
  FROM TERMS
    where TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          TERMS_ID is not NULL and
          TERM_REG_START_DATE is not null

","Term"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"inst.Campus","-- get campus data from Banner 
WITH campus AS (
SELECT DISTINCT szvcamp_code nk
                , szvcamp_desc \\\""name\\\""
                , CASE WHEN (szvcamp_code like '_CN' OR szvcamp_code like '_ON') -- Logic to identify online campuses. Confirm with BA.
                			THEN 'T'
                			ELSE 'F' END is_online
                , 'T' is_active
FROM stugrcccs.szvcamp
WHERE szvcamp_vpdi_code = 'ACC'
      AND szvcamp_eab_enable = 'Y'
),

-- Assign default values
defaultValues AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM campus
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Campus"
1021,"Houston Baptist University",10391,"",47987,"APS:Houston Baptist University",47975,"APS",24,"finance","define COAS_FILTER = ('1')
define FSYR_FILTER = ('09','10','11','12','13','14','15')
select  a.fgbgenl_coas_code as coas_code
, a.fgbgenl_fund_code as fund_code
, a.fgbgenl_acct_code as account_code
, a.fgbgenl_fsyr_code as fiscal_year
, a.fgbgenl_period as fiscal_period
, to_char(a.fgbgenl_activity_date, 'yyyymmdd') as activity_date
, a.fgbgenl_sum_periodic_dr as fy_debits
, a.fgbgenl_sum_periodic_cr as fy_credits
from fgbgenl a
where 1=1
and a.fgbgenl_fsyr_code in &FSYR_FILTER
and a.fgbgenl_coas_code in &COAS_FILTER;","general_ledger"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"core.Student","-- Fields: nk,username,email,first_name,last_name,birthdate,is_active
-- Model Name: core.Student
-- Name: Student
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version: pjf4g1
-- Author: James DeBolt
-- Query:

	SELECT 
	   PERSON.ID nk,
	   PERSON_PIN.PERSON_PIN_USER_ID username,
	   NVL(PEOPLE_EMAIL.PERSON_EMAIL_ADDRESSES,' ') email,
	   PERSON.FIRST_NAME first_name,
	   PERSON.LAST_NAME last_name,
	   NVL(REPLACE(TO_CHAR(TO_DATE(PERSON.BIRTH_DATE), 'yyyy-mm-dd'), '/', '-'), '1900-01-01') 
      birthdate,
	   'T' is_active
	FROM COLL_PRODUCTION.PERSON
	INNER JOIN COLL_PRODUCTION.PEOPLE_EMAIL
	ON PERSON.ID = PEOPLE_EMAIL.ID AND PEOPLE_EMAIL.PERSON_EMAIL_TYPES IN ('TTC')
	INNER JOIN COLL_PRODUCTION.PERSON_PIN
	ON PERSON.ID = PERSON_PIN.PERSON_PIN_ID
     WHERE 
        PERSON.FIRST_NAME IS NOT NULL AND 
        PERSON.LAST_NAME IS NOT NULL AND
        PEOPLE_EMAIL.PERSON_EMAIL_ADDRESSES  NOT IN ('Yolanda.Bland@tridenttech.edu',
'Karen.Wrighten@tridenttech.edu',
'Brandon.Branham@tridenttech.edu',
'Sharon.Manigault@tridenttech.edu',
'Jamella.Jaglal@tridenttech.edu',
'Kimberly.Fowler@tridenttech.edu',
'Donna.Grant@tridenttech.edu',
'Gerald.Gadsden@tridenttech.edu',
'Jewell.Dingle@tridenttech.edu',
'Chanity.Wilson@tridenttech.edu',
'Sidney.Alston@tridenttech.edu',
'Laurie.Fladd@tridenttech.edu',
'Brian.Almquist@tridenttech.edu',
'Deborah.Thompson@tridenttech.edu',
'Marshall.Connor@tridenttech.edu',
'mikepatterson@my.tridenttech.edu',
'D''jaris.Whipper-lewis@tridenttech.edu',
'Kathy.Simmons@tridenttech.edu',
'annikajessen@my.tridenttech.edu')","Student"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.Subject","
SELECT DISTINCT SUBJECTS_ID nk,
      SUBJ_DESC name,
      'T' is_active
  FROM SUBJECTS 
  where SUBJ_DESC NOT IN ('Ability to Benefit', 'Basic Math Equivalency', 'Basic Skills Development', 
                   'Communications I Equivalency', 'Communications II Equivalency', 'Course Waiver') AND
        SUBJ_DESC NOT LIKE 'DO NOT USE%' AND
        SUBJECTS_ID not in ('COMM1', 'COMM2', 'COMMFND', 'MATHALG', 'MATHPRE', 'RDGCOMM', 'RDGFUND', 'RDGNONE', 'XKAP')
                   --order by line","Subject"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"core.Student","with now_term as (
  select stvterm_code as a_term
    from stvterm
   Where Stvterm_End_Date >= Sysdate
     And Stvterm_Desc Not Like '%Non-Credit' 
     And Stvterm_Desc Not Like 'Parson%'
     and rownum = 1
   order by stvterm_code asc
),
Term_List As (
  Select stvterm_code as term
    from stvterm
   Where Stvterm_Code <= (Select * From Now_Term)
     And Stvterm_Desc Not Like '%Non-Credit' 
     And Stvterm_Desc Not Like 'Parson%'
     and rownum <= 10
   Order By Stvterm_Code Desc
),
pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where Sfrstcr_Rsts_Code In ('RE','RW')
      and sfrstcr_term_code in (select * from term_list)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select * from term_list)
)))
SELECT DISTINCT
  spriden_id nk,
  spriden_id username,
  trim(coalesce(( 
                select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'CAMP'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'PERS'
              and goremal_preferred_ind = 'Y'
              ),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              And Goremal_Emal_Code = 'CAMP'
              and goremal_preferred_ind = 'N'),
               lower(spriden_id) || '@missingemail.org')) email,
  spriden_first_name first_name,
  spriden_last_name last_name,
  NVL(to_char(spbpers_birth_date,'YYYY-MM-DD'),'2000-01-01') birthdate,
  'N' as veteran_ind,
  SGBSTDN_STYP_CODE as Enrollment_status,
  CASE 
    WHEN EXISTS (
                  SELECT 1
                  FROM sgbstdn
                ) THEN 'T' 
                  ElSE 'F' 
  END is_active
FROM spriden RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm
              LEFT JOIN goremal ON spriden_pidm = goremal_pidm
              LEFT JOIN sgbstdn ON spriden_pidm = sgbstdn_pidm
Where Spriden_Change_Ind Is Null 
  And Spriden_Entity_Ind = 'P'
  And Spriden_Pidm In (Select * From Pop)","Student"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"catcc.TestSubject","SELECT 
  UPPER(stvtesc_code) nk, 
  stvtesc_desc name,
  CASE 
    WHEN INSTR(stvtesc_max_value, '.') = 0 THEN to_number(stvtesc_max_value) || '.00'
    ELSE stvtesc_max_value
  END AS max_score,
  'T' is_active
FROM stvtesc
WHERE stvtesc_data_type = 'N'
  and stvtesc_max_value is not null","Test Subjects"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.SectionTime","-- Unpivot day of week from ssrmeet into a single column. ssrmeet stores data for each day of the week in separate columns. In naviagate, we store this data in a single column as day_of_week.
WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
        --WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NULL
        --  THEN ssrmeet_room_code
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'A' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                              AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code) -- Lookup day of week code
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. We do not need to extract sections times for past terms as section times are used for students to build their schedule.
  AND ssbsect_camp_code = 'G' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM sectionTime","Section Times"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.Subject","SELECT 
  stvsubj_code as nk,
  stvsubj_desc as name,
  'T' as is_active
FROM stvsubj
UNION
select distinct
    ssbsect_subj_code||'L' as nk,
    ssbsect_subj_code||'L Laboratory' as name,
    'T' as is_active
  from ssbsect
 where upper(trim(ssbsect_schd_code)) = 'LAB'
   and ssbsect_term_code in (select stvterm_code
                               from stvterm
                              where stvterm_start_date <= sysdate
                                and stvterm_end_date >= sysdate)","Subjects"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.StudentTerm","
-- get last five terms based on current term
WITH getLastXTerms AS (
  SELECT stvterm_code
    FROM stvterm
   WHERE stvterm_code <= (SELECT MIN(stvterm_code)
                            FROM stvterm
                           WHERE stvterm_start_date > sysdate)
     AND ROWNUM < 6
   ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
    FROM sfrstcr JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
   WHERE 1=1
     AND sfrstcr_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE')
     and sfrstcr_levl_code in ('50', '54')
     and sfrstcr_term_code >= '201212'  
  UNION
  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
    FROM saradap JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
   WHERE 1=1
),

-- get the max term for each program that has a corresponding term assigned.
getProgramMaxTerm AS (
  SELECT DISTINCT
      sobcurr_program AS prog
      , stvterm_acyr_code AS acyr
      , MAX(sobcurr_term_code_init) AS programMaxTerm
    FROM sobcurr LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
   WHERE stvterm_code IS NOT NULL
   GROUP BY sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
  SELECT sgbstdn_pidm
         , sgbstdn_program_1
         , sgbstdn_stst_code
         , sgbstdn_term_code_eff AS maxEffTerm
         , sgbstdn_term_code_ctlg_1
         , stvstst_reg_ind
    FROM sgbstdn a LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
   WHERE sgbstdn_program_1 IS NOT NULL
     AND stvstst_code IS NOT NULL
     AND sgbstdn_term_code_eff = (SELECT MAX(sgbstdn_term_code_eff)
                                    FROM sgbstdn RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                                   WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                     AND stvterm_end_date <= sysdate + 365)
),

-- final query to extract student term data
studentTerm AS (
  SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
         , spriden_id AS student
         , studentDetails.maxEffTerm AS term
         , studentDetails.sgbstdn_program_1 || '$$' || getProgramMaxTerm.acyr AS \\\""program\\\""
         , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active -- set the record active if the corresponding stvstst_reg_ind is set to 'Y'
    FROM spriden RIGHT JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
                       JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
                       JOIN studentPopulation ON studentPidm = spriden_pidm
   WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
)

-- wrapper query
select * from studentTerm","StudentTerm"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"inst.Location","WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- Assign default values
defaultValues AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Locations"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"core.studentxstudentcategory","WITH pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,b.max_term as max_term_2
        ,a.acad_plan
        , TO_CHAR(a.declare_dt,'YYYY-MM-DD') as declare_dt
from ps_acad_plan a
inner join (select student_id, max_term
            from (
                  select b.emplid as student_id
                  , min(b.strm) as term
                  , max(b.strm) as max_term
                  --, b.strm as strm
                  from ps_stdnt_car_term b
                  where 1=1
                  and institution = 'DC279'
                  and ACAD_CAREER = 'CRED'
                  group by b.emplid
                  ) car_term
            where 1=1
            and term > 2154
           ) b
           on b.student_id = a.emplid
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid       
WHERE  1=1
        --and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
union --applicant pop
SELECT DISTINCT A.EMPLID student_id
, B.req_term as max_term
, B.REQ_TERM as max_term_2
, B.ACAD_PLAN
, TO_CHAR(A.ADM_APPL_DT,'YYYY-MM-DD') as declare_dt
  FROM PS_ADM_APPL_DATA A, PS_ADM_APPL_PLAN B 

  WHERE ( A.INSTITUTION = 'DC279' 
     AND A.EMPLID = B.EMPLID 
     AND A.ACAD_CAREER = B.ACAD_CAREER 
     AND A.STDNT_CAR_NBR = B.STDNT_CAR_NBR 
     AND A.ADM_APPL_NBR = B.ADM_APPL_NBR 
     AND B.EFFDT = 
        (SELECT MAX(B_ED.EFFDT) FROM PS_ADM_APPL_PLAN B_ED 
        WHERE B.EMPLID = B_ED.EMPLID 
          AND B.ACAD_CAREER = B_ED.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ED.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ED.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ED.APPL_PROG_NBR 
          AND B_ED.EFFDT <= SYSDATE) 
    AND B.EFFSEQ = 
        (SELECT MAX(B_ES.EFFSEQ) FROM PS_ADM_APPL_PLAN B_ES 
        WHERE B.EMPLID = B_ES.EMPLID 
          AND B.ACAD_CAREER = B_ES.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ES.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ES.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ES.APPL_PROG_NBR 
          AND B.EFFDT = B_ES.EFFDT) 
     AND B.REQ_TERM > '2154' 
     AND NOT EXISTS (SELECT 'X' 
  FROM PS_STDNT_ENRL C 
  WHERE A.INSTITUTION = C.INSTITUTION 
     AND C.STDNT_ENRL_STATUS = 'E' 
     AND A.EMPLID = C.EMPLID) )
     AND B.ACAD_CAREER = 'CRED'
     and a.emplid not in (select distinct emplid from ps_acad_plan)

)  

select pop.student_id || '$$' || 'SA' as nk
, pop.student_id as student
, 'SA' as \\\""category\\\""
, case when acad_plan = '191' then 'T' 
else 'F' end as is_active
from pop","StudentXStudentCategory"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"core.Student ","-- Full range of terms to include
with all_terms as (
  select distinct nk
    from eab_trm
   where to_date(term_start_dt,'YYYY-MM-DD') >= sysdate-3*365
     and college = 'CC'
),
-- Terms where a student is considered active
cur_terms as (
  select distinct nk
    from eab_trm
   where to_date(TERM_END_DT, 'YYYY-MM-DD') >= SYSDATE
     and college = 'CC'
),
-- Grab all students from the full range
all_enr_list as (
  select id as stu_id
    from eab_stdnt_active
   where current_enroll_cc = 'Y'
     and academic_period in (select nk from all_terms)
),
-- Grab currently enrolled students
cur_enr_list as (
  select id as stu_id
    from eab_stdnt_active
   where current_enroll_cc = 'Y'
     and academic_period in (select nk from cur_terms)
),
-- Get students who have applied for current and future terms
cur_app_list as (
  select esa.id as stu_id
    from saradap s join eab_stdnt_active esa on s.saradap_pidm = esa.person_uid
                                             and ( esa.home_college = 'CC' OR username like '%email.cerrocoso.edu')
   where s.saradap_term_code_entry in (select * from cur_terms)
),
-- Get all students
all_stu as (
  select stu_id from all_enr_list
  union
  select stu_id from cur_app_list
),
-- Get current students
cur_stu as (
  select stu_id from cur_enr_list
  union
  select stu_id from cur_app_list
),
-- CREATE A BASE LIST OF STUDENTS
stu_list as (
  select id as nk,
         username,
         email,
         replace(first_name, unistr('\\\\0027'), chr(39)) first_name,
         replace(last_name, unistr('\\\\0027'), chr(39)) last_name,
         birthdate,
         case
           when stu_id is not null then 'T'
           else 'F'
         end as is_active
   FROM EAB_STDNT_ACTIVE left join cur_stu on id = stu_id
  WHERE id in (select stu_id from all_stu)
    and upper(last_name) not like '**%**'
)
-- Create unique list of students
SELECT distinct nk,
       coalesce(username, first_name||substr(last_name,1,4)||'@noemail.com') username,
       coalesce(email, first_name||substr(last_name,1,4)||'@noemail.com') email,
       first_name,
       last_name,
       birthdate, 
       is_active
  from stu_list
  --where rownum <= 1000","Student"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.StudentCourse","-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE SUBSTR(stvterm_code, 1, 5) <= (SELECT MIN(SUBSTR(stvterm_code, 1, 5))
                                     FROM stvterm
                                     WHERE stvterm_start_date > sysdate)
AND stvterm_desc like 'CCC%' -- Scope the query to only CCC terms
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- Force the query optimizer to read this view once into memory and use it in other statements below
CCCD_EAB_GENERAL_PERSON_cte AS (
SELECT *
  FROM CCCD_EAB_GENERAL_PERSON
    WHERE spriden_pidm IN (SELECT studentPidm
                          FROM studentPopulation
                          )
    AND spriden_change_ind IS NULL
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM CCCD_EAB_GENERAL_PERSON_cte -- Custom view at Coastline that replaces SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

/*-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM ODSSRC.CCCD_TEST_EAB_GENERAL_PERSON -- Custom view at Coastline that replaces SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
),*/

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN CCCD_EAB_GENERAL_PERSON_cte ON spriden_pidm = studentDroppedCrse.pidm -- Custom view at Coastline that replaces SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
--UNION
--SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","Student Courses (Current & Dropped Courses)"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.course","with course_bank as (

select course_cd,
sum(institution_count) as inst
from (
      SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','') as course_cd,
      case when c.institution = 'DC279' then '1' else '0' end as institution_count
      from (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)

                    and o.acad_career = 'CRED'
                    --and o.crse_offer_nbr <> 1
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
                    ) C
        )
group by course_cd

)

SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','')
 --|| '-' || REPLACE(b.SSR_COMPONENT, ' ','')
 || REPLACE('-' || C.institution, '-DC279', '') as NK
, C.CRSE_ID as cd
, case when acad_group = 'DEV' then '0' else '1' end  as \\\""level\\\""
, REPLACE(c.SUBJECT, ' ','') as SUBJECT
, '1'                                                                               AS DEPARTMENT_CD 
, nvl(b.DESCRLONG,  b.DESCR)                                                        as \\\""desc\\\""
, b.SSR_COMPONENT COURSE_TYPE
, nvl(b.COURSE_TITLE_LONG, b.descr)                                                 AS TITLE
, b.UNITS_ACAD_PROG                                                                   AS CREDITS
, case when b.crse_repeatable = 'N' then 0
else crse_repeat_limit - 1 end                                                      AS REPEATABLE_COUNT
, case when b.EFF_STATUS = 'A' 
        and C.INSTITUTION = 'DC279' 
        then 'T' 
        else 'F' 
  end                                                                               AS IS_ACTIVE 
FROM (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION 
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.INSTITUTION = 'DC279'
                    and o.acad_career = 'CRED'
                    --and o.acad_org <> 'LCREDIT'
                    --and o.crse_offer_nbr <> '1'
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from PS_CRSE_OFFER x where o.crse_id = x.crse_id
                                              and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))

                    ) C

LEFT JOIN (SELECT mainB.CRSE_ID 
               , UNITS_ACAD_PROG
               , COURSE_TITLE_LONG 
               , DESCR
               , DESCRLONG
               , EFF_STATUS
               , CRSE_REPEATABLE
               , CRSE_REPEAT_LIMIT
               , SSR_COMPONENT
        FROM   PS_CRSE_CATALOG mainB 
        WHERE  mainB.EFFDT = (SELECT Max(EFFDT) 
                              FROM   PS_CRSE_CATALOG c 
                              WHERE  c.crse_id = mainb.crse_id)) B
        on B.CRSE_ID = C.CRSE_ID
WHERE  1 = 1 

ORDER  BY 1, 2","Course"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"cat.subject","WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  'T' AS is_active
FROM stvsubj
),

-- Assign default values
defaultValues AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM subject
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Subject"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"reg.StudentTestScore","-- get last five terms based on current term
WITH getLastFiveTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastFiveTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastFiveTerms ON getLastFiveTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastFiveTerms ON getLastFiveTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","Student Test Score"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.CourseType","-- Fields: nk,name,is_active
-- Model Name: cat.CourseType
-- Name: Course Type
-- Output: Course_Type_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get courseType data from Banner  
WITH courseType AS (
SELECT 
  stvschd_code nk,
  stvschd_desc \\\""name\\\"",
  'T' is_active
FROM stvschd
),

-- Assign default values
\\\""default\\\"" AS (
Select 
'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM courseType
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Course Type"
1021,"Houston Baptist University",10391,"",47987,"APS:Houston Baptist University",47975,"APS",24,"hr","with step1 as (
select a.nhrdist_fund_code as fund_code, 
       a.nhrdist_orgn_code as organization_code,
       a.NHRDIST_ACCT_CODE AS ACCOUNT_CODE,
       a.nhrdist_prog_code as program_code,
       a.nhrdist_actv_code as ACTIVITY_CODE,
       a.NHRDIST_LOCN_CODE AS LOCATION_CODE,
       a.nhrdist_pidm AS EMPLOYEE_ID, 
       a.nhrdist_fisc_code as fiscal_year,
       a.NHRDIST_PAYNO as PAY_NO,
       a.NHRDIST_SEQ_NO as SEQUENCE_NO,
       a.NHRDIST_HIST_TYPE_IND as EVENT_TYPE,
       a.nhrdist_rucl_code as RULE_CLASS_CODE,
       a.NHRDIST_TRANS_DATE,
         (Select NBRJOBS_POSN from NBRJOBS b1 
        WHERE 
          a.nhrdist_posn = b1.nbrjobs_posn and
          a.nhrdist_pidm = b1.nbrjobs_pidm and
          a.nhrdist_suff = b1.nbrjobs_suff and                
          b1.nbrjobs_effective_date = 
                           (select  max(nbrjobs_effective_date) 
                            FROM    NBRJOBS c 
                            where   b1.nbrjobs_posn = c.nbrjobs_posn
                            and     b1.nbrjobs_pidm = c.nbrjobs_pidm 
                            and     b1.nbrjobs_suff = c.nbrjobs_suff
                            and     c.nbrjobs_effective_date <= a.NHRDIST_TRANS_DATE)
       )
       as position_code, 
       a.NHRDIST_SUFF AS POSITION_SUFFIX_CODE,
       a.NHRDIST_EARN_CODE AS EARNING_CLASS_CODE,
       (Select nbrjobs_desc from NBRJOBS b1 
        WHERE 
          a.nhrdist_posn = b1.nbrjobs_posn and
          a.nhrdist_pidm = b1.nbrjobs_pidm and
          a.nhrdist_suff = b1.nbrjobs_suff and                
          b1.nbrjobs_effective_date = 
                           (select  max(nbrjobs_effective_date) 
                            FROM    NBRJOBS c 
                            where   b1.nbrjobs_posn = c.nbrjobs_posn
                            and     b1.nbrjobs_pidm = c.nbrjobs_pidm 
                            and     b1.nbrjobs_suff = c.nbrjobs_suff
                            and     c.nbrjobs_effective_date <= a.NHRDIST_TRANS_DATE)
       )
       as position_title,
       (select        f.NBBPOSN_TITLE
        from          nbbposn f
        where         f.NBBPOSN_POSN     = a.nhrdist_posn
        and           f.nbbposn_Begin_Date = 
                              ( select  max(x.nbbposn_begin_date) 
                                from    nbbposn x 
                                where   x.nbbposn_begin_date <= a.NHRDIST_TRANS_DATE
                                and     x.NBBPOSN_POSN        = a.nhrdist_posn ) 
       )    AS POSITION_TITLE_2,
       a.NHRDIST_HRS, 
       nhrdist_amt,
       e.PTREARN_LONG_DESC AS EARNING_CODE_DESC,
       e.PTREARN_UNIT_IND AS UNITS_OR_HOURS_INDICATOR,
       a.NHRDIST_SOURCE as SOURCE_OF_RATE, 
       d.NBRBJOB_CONTRACT_TYPE AS JOB_TYPE,
       a.nhrdist_dr_cr_ind
from nhrdist a 
left outer join NBRBJOB d on a.nhrdist_posn = d.nbrbjob_posn and
                  a.nhrdist_pidm = d.nbrbjob_pidm and
                  a.nhrdist_suff = d.nbrbjob_suff
left outer join PTREARN e on a.nhrdist_earn_code = e.ptrearn_code
where 1=1 
      and a.NHRDIST_TRANS_DATE > to_date('30-06-2009','DD-MM-YYYY')  
      and a.nhrdist_coas_code = '1'
      and a.nhrdist_pidm is not NULL )
select fund_code, 
       organization_code,
       ACCOUNT_CODE,
       program_code,
       ACTIVITY_CODE,
       LOCATION_CODE,
       EMPLOYEE_ID, 
       fiscal_year,
       PAY_NO,
       SEQUENCE_NO,
       EVENT_TYPE,
       RULE_CLASS_CODE,
       max(NHRDIST_TRANS_DATE) AS MAX_TRANSACTION_DATE,
       position_code,
       POSITION_SUFFIX_CODE,
       EARNING_CLASS_CODE,
       position_title,
       POSITION_TITLE_2,
       sum(NHRDIST_HRS) as HOURS_OR_UNITS,
       sum(DECODE(nhrdist_dr_cr_ind,'D','+','C','-') || nhrdist_amt) as Amount_Decoded,
       EARNING_CODE_DESC,
       UNITS_OR_HOURS_INDICATOR,
       SOURCE_OF_RATE, 
       JOB_TYPE
from step1      
group by fund_code, 
       organization_code,
       ACCOUNT_CODE,
       program_code,
       ACTIVITY_CODE,
       LOCATION_CODE,
       EMPLOYEE_ID, 
       fiscal_year,
       PAY_NO,
       SEQUENCE_NO,
       EVENT_TYPE,
       RULE_CLASS_CODE,
       position_code,
       POSITION_SUFFIX_CODE,
       EARNING_CLASS_CODE,
       position_title,
       POSITION_TITLE_2,
       EARNING_CODE_DESC,
       UNITS_OR_HOURS_INDICATOR,
       SOURCE_OF_RATE, 
       JOB_TYPE;","hr_payroll"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"inst.Location","WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- Assign default values
defaultValues AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Location"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"reg.StudentTestScore","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','KV','KO')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","StudentTestScore"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.StudentCourse","-- Fields  nk,student,term,course,section,grade_cd,grade_points,credits_attempted,credits_earned,status,is_active
-- ModelName cat.StudentCourse
-- Name    Course
-- Output  Student_Course_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:


-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
\\\""final\\\"" AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Student Courses"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"reg.studenttestscore","with pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select emplid, max(strm)
              from ps_stdnt_car_term b
              where institution = 'NV280'
              and ACAD_CAREER = 'CRED'
             -- and WITHDRAWN_CODE <> 'NWD'
              group by emplid) b
              on a.emplid = b.emplid         
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid  
WHERE  1=1
        and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      ) 
        and acad_plan in ('2120','2124','2130','3400','2990')

)                  
       
select distinct emplid || '$$' || a.test_id || '_' || a.test_component as nk
, a.emplid as student
, a.test_id || '_' || a.test_component as test_subject
, a.score as score
, 'T' as is_active

from ps_stdnt_test_comp a
--left join PS_SA_TEST_TBL b on a.test_id = b.test_id
where a.emplid in (select student_id from pop)","StudentTestScore"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Program","SELECT
  NK,
  CD,
  CAT_YR,
  \\\""NAME\\\"",
 \\\""DESC\\\"",
  CREDITS,
  ENROLLMENT_NOTES,
  AREA_OF_STUDY,
  CONCENTRATION,
  \\\""CREDENTIAL\\\"",
  CIP,
  IS_TRANSFER,
  IS_ACTIVE
FROM
  ZST_EAB_PROGRAM_EXTRACT
where MULTI_SOURCE = 'PPCC'","Programs"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.CourseType","SELECT DISTINCT 
  course_type nk, 
    course_type name, 
      is_active
      FROM EAB_CRSE","Course Type"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"core.Advisor","-- Fields  nk,username,email,first_name,last_name,is_active
-- Model Name  core.Advisor
-- Name  Advisor
-- Output  Advisor_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom) Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes

-- compute max term advisor record
WITH advisorMaxTerm AS (
SELECT sibinst_pidm
FROM sibinst baseTable
WHERE sibinst_fcst_code IN ('AD', 'FU')
  AND sibinst_advr_ind = 'Y'
  AND sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                              FROM sibinst compTable
                              WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                              )
),

-- extract advisor data
\\\""advisor\\\"" AS (
SELECT spriden_id AS nk
  , spriden_id AS username
  , COALESCE((SELECT goremal_email_address
              FROM goremal
                WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'GSU' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y') -- try to get campus email if active and preferred. Confirm email_code with BA/Member.
              , (SELECT goremal_email_address
                FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'GSU' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N') -- try to get campus email if active and not preferred. Confirm email_code with BA/Member.
              , LOWER(spriden_id) || '@missingemail.org') AS email -- Set default email address if none above are available.
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , 'T' AS is_active
FROM spriden
JOIN advisorMaxTerm ON advisorMaxTerm.sibinst_pidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent advisor record is extracted
)
-- Wrapper query
SELECT * FROM \\\""advisor\\\""","Advisor"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"noah_standardterm","select stvterm_code term_id,
          stvterm_desc period_desc,
          stvterm_acyr_code period_type,
          to_char(stvterm_start_date,'YYYY-MM-DD') term_start_dt,
          to_char(stvterm_end_date,'YYYY-MM-DD') term_end_dt

  from stvterm
  where substr(stvterm_code,5,2) not in ('70','80','90') ","Standard Term"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Section","-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date, Sfrrsts_vpdi_Code
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
      AND SFRRSTS_VPDI_CODE = 'PCC'
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date, Sfrrsts_vpdi_Code
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WW') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
      AND SFRRSTS_VPDI_CODE = 'PCC'
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code
                      AND ssbsect_vpdi_code = sobptrm_vpdi_code)
WHERE ssbsect_vpdi_code = 'PCC'
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
      AND sirasgn_vpdi_code = 'PCC'
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , szvterm_code AS term
  , NVL(szvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(SSBSECT_CENSUS_ENRL_DATE,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(SSBSECT_CENSUS_2_DATE,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , CASE WHEN ssbsect_ssts_code = 'O' and ssbsect_voice_avail = 'Y'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- Identify if section is active by comparing the value in ssbsect_ssts_code. The default is 'A'. Confirm with BA/Member if this is different at their college.
FROM ssbsect
  JOIN stugrcccs.szvcamp ON szvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN szvterm ON (szvterm_code = ssbsect_term_code AND -- term lookup
                   szvterm_vpdi_code = ssbsect_vpdi_code)
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn -- meeting lookup
                        AND ssrmeet_vpdi_code = ssbsect_vpdi_code) 
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code -- drop dates loookup
                                AND sfrrstsDropDates.sfrrsts_vpdi_code = ssbsect_vpdi_code) 
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code-- withdraw dates lookup
                                    AND sfrrstsWithdrawDates.sfrrsts_vpdi_code = ssbsect_vpdi_code)
  WHERE ssbsect_vpdi_code = 'PCC'
        AND szvcamp_vpdi_code = 'PCC'
        AND szvcamp_eab_enable = 'Y' 
        AND SUBSTR(szvterm_code, 1, 1) NOT IN ('6', '7', '8')

-- WHERE ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Comented out by default. Confirm with BA/Member.
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Sections"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"reg.courseelement","With Coreq_Data_Bank As (

select scbcrse_subj_code || scbcrse_crse_numb as course
, case when ssbsect_schd_code = 'B' then scbcrse_subj_code || scbcrse_crse_numb || ssbsect_schd_code
	Else Null End As Coreq
, ssbsect_schd_code


from (
  SELECT a.SCBCRSE_EFF_TERM
  		,a.scbcrse_coll_code
  		, a.scbcrse_dept_code
  		, a.scbcrse_subj_code
  		, a.scbcrse_crse_numb
  FROM scbcrse a
  WHERE 1=1
  and a.SCBCRSE_CSTA_CODE = 'A'
  and a.SCBCRSE_EFF_TERM = (  --DEDUPING LOGIC
    SELECT max(SCBCRSE_EFF_TERM)
    FROM scbcrse b 
    WHERE b.scbcrse_subj_code = a.scbcrse_subj_code
      And B.Scbcrse_Crse_Numb = A.Scbcrse_Crse_Numb
      )) Course
  Left Join (Select Ssbsect_Subj_Code
            , ssbsect_crse_numb
            , Ssbsect_Schd_Code
            --, Count(Ssbsect_Schd_Code)
            , Stvschd_Desc 
            from ssbsect
            Left Join Stvschd On Ssbsect_Schd_Code = Stvschd_Code
            Where 1=1
            And Ssbsect_Term_Code = (Select Max(Ssbsect_Term_Code)
                                    From Ssbsect B
                                    Where B.Ssbsect_Crse_Numb = Ssbsect.Ssbsect_Crse_Numb
                                    And B.Ssbsect_Subj_Code = Ssbsect.Ssbsect_Subj_Code
                                    And B.Ssbsect_Schd_Code = Ssbsect.Ssbsect_Schd_Code
                                    )
            ) Section
  On Course.Scbcrse_Subj_Code = Section.Ssbsect_Subj_Code
  And Course.Scbcrse_Crse_Numb = Section.Ssbsect_Crse_Numb

) 
  
SELECT 
Course || '$$' || 0 || '$$COREQ' As Nk
,Course || '$$' || 0 || '$$COREQ' As Cd
,0 As Cat_Yr
,'' As \\\""Name\\\""
,'Lec-Lab Combo' As \\\""desc\\\""
, 'all(course(\\\""' || course || '\\\""),course(\\\""' || coreq || '\\\""))' as formula
, 'T' As Is_Active
From Coreq_Data_Bank
Where 1=1
and coreq is not null

union

SELECT 
coreq || '$$' || 0 || '$$COREQ' As Nk
,coreq || '$$' || 0 || '$$COREQ' As Cd
,0 As Cat_Yr
,'' As \\\""Name\\\""
,'Lec-Lab Combo' As \\\""desc\\\""
, 'all(course(\\\""' || course || '\\\""),course(\\\""' || coreq || '\\\""))' as formula
, 'T' As Is_Active
From Coreq_Data_Bank
Where 1=1
and coreq is not null","CourseElement"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"core.Student","SELECT DISTINCT
a.BannerID nk,
a.UserName username,
a.UserName || '@mycom.marin.edu' email,
a.FirstName first_name,
a.LastName last_name,
NVL(TO_CHAR(b.spbpers_birth_date,'YYYY-MM-DD'),'2000-01-01') birthdate,
'T' is_active
FROM MARINCUS.AD_USER_EVENT a
LEFT OUTER JOIN SATURN.SPBPERS b on b.spbpers_pidm = a.pidm
WHERE a.Sent = 1
AND a.Student = 1
ORDER BY UPPER(a.LastName), UPPER(a.FirstName), UPPER(a.BannerID)","core.Student"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"student_exam","select student_id,
exam_cd,
exam_desc,
exam_subject_cd,
exam_score,
exam_date,
exam_min_score,
exam_max_score,
admission_request_ind
 from atlantatech.osf_se_student_exam","SSF_student_exam"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.SectionTime","-- Unpivot day of week from ssrmeet into a single column. ssrmeet stores data for each day of the week in separate columns. In naviagate, we store this data in a single column as day_of_week.
WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  , ssrmeet_vpdi_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
    LEFT JOIN slbbldg ON slbbldg_bldg_code = ssrmeet_bldg_code                                       
    LEFT JOIN STUGRCCCS.SZVCAMP ON slbbldg_camp_code = SZVCAMP_CODE 
  WHERE ssrmeet_vpdi_code = 'ACC'
        AND SZVCAMP_VPDI_CODE = 'ACC'
        AND SZVCAMP_EAB_ENABLE = 'Y'
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
         WHEN ssbsect_camp_code = 'ACN' THEN 'ACC'  WHEN ssbsect_camp_code = 'AON' THEN 'AON' 
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'O' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                               AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code -- Lookup day of week code
                               AND unpivotDayOfWeek.ssrmeet_vpdi_code = ssbsect_vpdi_code)
LEFT JOIN STUGRCCCS.SZVCAMP ON ssbsect_camp_code = SZVCAMP_CODE 
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. We do not need to extract sections times for past terms as section times are used for students to build their schedule.
  AND ssbsect_vpdi_code = 'ACC'
  AND SUBSTR(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND szvcamp_vpdi_code = 'ACC'
  AND szvcamp_eab_enable = 'Y'
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM sectionTime","Section Times"
1219,"Broward College",10510,"",48378,"Navigate:Broward College",47972,"Navigate",20,"cat.CourseType","select 
code AS nk
, description AS name
,'T' AS is_active
FROM UTL_CODE_TABLE 

WHERE 1=1
AND TABLE_NAME = 'CRS-TYPE'
","Course Type"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"core.Faculty","SELECT spriden.spriden_id AS nk,
       spriden.spriden_first_name AS first_name,
       spriden.spriden_last_name AS last_name,
       spriden.spriden_id as username,
       coalesce((select goremal_email_address 
                   from goremal
                  where goremal_pidm = spriden_pidm 
                    and goremal_status_ind = 'A'
                    and goremal_preferred_ind = 'Y'
                    and rownum = 1),
                (select goremal_email_address
                   from goremal
                  where goremal_pidm = spriden_pidm
                    and goremal_status_ind = 'A'
                    and goremal_preferred_ind = 'N'
                    and rownum = 1),
                  lower(spriden_id) || '@missingemail.org') email,
       '' prefix,
       '' suffix,
       COALESCE(sibinstTot.sibinst_fstp_code,
                sibinstTot.sibinst_fctg_code,
                'Staff') AS faculty_type,
       CASE 
		 WHEN FCSTstatus.STVFCST_ACTIVE_IND = 'A' THEN 'T'
		 ELSE 'F'
	   END As is_active
  FROM (SELECT *
  	      FROM spriden
  	     WHERE spriden.spriden_change_ind IS NULL) spriden
 INNER JOIN (SELECT *
 			 FROM sibinst a
 			WHERE sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
											 FROM sibinst
											WHERE sibinst_pidm = a.sibinst_pidm)) sibinstTot
 	   ON spriden.spriden_pidm = sibinstTot.sibinst_pidm
  LEFT JOIN (SELECT STVFCST_CODE,
  					STVFCST_DESC,
  					STVFCST_ACTIVE_IND
		       FROM STVFCST
		      WHERE 1=1) FCSTstatus
	   ON sibinstTot.SIBINST_FCST_CODE = FCSTstatus.stvfcst_code
  LEFT JOIN (SELECT *
  	           FROM SIRDPCL a
		      WHERE SIRDPCL_ACTIVITY_DATE = (SELECT MAX(SIRDPCL_ACTIVITY_DATE)
		      	                               FROM SIRDPCL
		      	                              WHERE a.SIRDPCL_PIDM = SIRDPCL_PIDM)) SIRDPCL
	   ON SIRDPCL.SIRDPCL_PIDM = spriden_pidm  
ORDER BY 3","Faculty"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.programcredential","SELECT DISTINCT 
	sobcurr_degc_code AS nk
	, sobcurr_degc_code AS short_credential
	, 'T' AS is_active
FROM sobcurr","Program Credential"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.studentcourse","with now_term as (
  select stvterm_code as a_term
    From Stvterm
   Where Stvterm_start_Date >= Sysdate
     And Stvterm_Desc Not Like '%Non-Credit' 
     And Stvterm_Desc Not Like 'Parson%'
     and rownum = 1
   order by stvterm_code asc
),
Term_List As (
  Select stvterm_code as term
    from stvterm
   Where Stvterm_Code <= (Select * From Now_Term)
     And Stvterm_Desc Not Like '%Non-Credit' 
     And Stvterm_Desc Not Like 'Parson%'
     and rownum <= 10
   Order By Stvterm_Code Desc
),
pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where Sfrstcr_Rsts_Code In ('RE','RW')
      and sfrstcr_term_code in (select * from term_list)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select * from term_list)
))),

audit_bank as (
select a.pidm,a.term,a.audit_record,b.course_record from (
select 
        distinct sfrstca_pidm as pidm,
         sfrstca_crn as crn,
       sfrstca_term_code term,
       ssbsect_subj_code || ssbsect_crse_numb as audit_record

from sfrstca
left join ssbsect 
on ssbsect_crn = sfrstca_crn 
  and ssbsect_term_code = sfrstca_term_code
 ) a 
left join (
select distinct sfrstcr_pidm pidm, 
      sfrstcr_crn crn,
      sfrstcr_term_code term, 
      ssbsect_subj_code || ssbsect_crse_numb as course_record
from sfrstcr
left join ssbsect
on ssbsect_crn = sfrstcr_crn
) b
on a.pidm = b.pidm
and a.audit_record = b.course_record
and a.term = b.term
where b.course_record is null
order by 1,2,3
),
stdnt_crse as (
SELECT 
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || ssbsect_crse_numb nk, 
  spriden_id student,
  stvterm_code term, 
  ssbsect_subj_code || ssbsect_crse_numb course,
  ssbsect.ssbsect_crn || '$$' || ssbsect_term_code section,
  sfrstcr_grde_code grade_cd,
  CASE 
    WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'A' THEN 4.0
    WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'B' THEN 3.0
    WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'C' THEN 2.0
    WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'D' THEN 1.0
    WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'S' THEN 2.0
    WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'PA' THEN 2.0
    WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'CR' THEN 2.0
    WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code IS NULL THEN 0.0
    ELSE 0.0
  END grade_points,
  COALESCE(sfrstcr_credit_hr, 0) credits_attempted,
  CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RT') AND sfrstcr_grde_code IN ('A', 'B', 'C', 'D', 'S', 'PA', 'CR') 
    THEN sfrstcr_credit_hr 
    else 0 end credits_earned,
  CASE
    WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RT') AND stvterm_start_date > sysdate THEN 'REGISTERED'      
    WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RT') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate THEN 'IN_PROGRESS'
    WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RT') AND sfrstcr_grde_code IN ('A', 'B', 'C', 'D', 'S', 'PA', 'CR') THEN 'COMPLETED'
    ELSE 'UNKNOWN'
  END status,
  'T' Is_Active
FROM spriden JOIN sfrstcr ON spriden_pidm = sfrstcr_pidm
             Join Stvterm On Stvterm_Code = Sfrstcr_Term_Code
       Right Join Ssbsect On Ssbsect_Crn = Sfrstcr_Crn
                         AND ssbsect_term_code = sfrstcr_term_code
             JOIN stvrsts ON sfrstcr_rsts_code = stvrsts_code
        LEFT JOIN sirasgn ON ssbsect.ssbsect_term_code = sirasgn_term_code
                         AND ssbsect.ssbsect_crn = sirasgn_crn
Where Spriden_Change_Ind Is Null
  And Ssbsect.Ssbsect_Crn Not Like '600%'
  And Spriden_Pidm In (Select * From Pop)

union

select spriden_id || '$$' || audit_bank.term || '$$' || audit_bank.audit_record as NK,
       spriden_id Student,
       audit_bank.term term,
        audit_bank.audit_record course,
       '' as section,
       '' As Grade_Cd,
       0.0 as grade_points,
       0 as Credits_Attemtped,
       0 as Credits_Earned,
       'UNKNOWN' As Status,
       'T' As Is_Active
from audit_bank
left join spriden on spriden_pidm = audit_bank.pidm
where audit_bank.pidm in (select * from pop)
and spriden_change_ind is NULL

UNION

Select Spriden_Id || '$$' || SHRTRCE_TERM_CODE_EFF || '$$' || SHRTRCE_SUBJ_CODE || SHRTRCE_CRSE_NUMB As Nk,
       Spriden_id Student,
       SHRTRCE_TERM_CODE_EFF Term,
       SHRTRCE_SUBJ_CODE || SHRTRCE_CRSE_NUMB as course,
       '' As Section,
       SHRTRCE_GRDE_CODE As Grade_Cd,
       0.0 As Grade_Points,
       Shrtrce_Credit_Hours As Credits_Attemtped,
       SHRTRCE_CREDIT_HOURS As Credits_Earned,
       'COMPLETED' As Status,
       'T' As Is_Active
From Shrtrce
Left Join Spriden On Spriden_Pidm = Shrtrce_Pidm
                 and spriden_change_ind is null
Where Shrtrce_Pidm In (Select * From Pop)
And Spriden_Change_Ind Is Null
)
Select *
  From Stdnt_Crse
where course is not null
order by student, term","Student Course 1"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"inst.campus","select stvcamp_code nk,
          stvcamp_desc name,
          nvl( ( select 'T' from dual where stvcamp_code in  ('ONL') ),'F') is_online,
          'T' is_active 
from stvcamp
where 1=1
and stvcamp_code not in ('XXX','CC','OWC','1MC','2NE','3SE','4WC','GCC','JRA','NSB','OSA')
union
select 'DEFAULT' nk,
          'EAB Default Code' name,
          'F' is_online,
          'F' is_active
from dual","Campus"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"core.faculty","With Advr_Pidm As (
Select Sibinst_Pidm
From Sibinst a
Where Sibinst_Fcst_Code = 'AC'
And Sibinst_Advr_Ind = 'Y'
And Sibinst_Term_Code_Eff = (Select Max(Sibinst_Term_Code_Eff) From Sibinst B Where A.Sibinst_Pidm = B.Sibinst_Pidm)
)
SELECT spriden.spriden_id AS nk
	,spriden.spriden_first_name AS first_name
	,spriden.spriden_last_name AS last_name
	,spriden.spriden_id as username
	,nvl(goremal.goremal_email_address,spriden_id || '@tulsamissingemail.edu') AS email
	,'' prefix
	,'' suffix
	,COALESCE(sibinstTot.sibinst_fstp_code, sibinstTot.sibinst_fctg_code, 'Staff') AS faculty_type --LAST RESORT PERBFAC_ACADEMIC_TITLE
	,CASE 
		WHEN FCSTstatus.STVFCST_ACTIVE_IND = 'A'   
			THEN 'Y'
		ELSE 'N'
		End As is_active                      -- MODIFY PER MEMBER
--	,SIRDPCL.SIRDPCL_DEPT_CODE AS STAFF_DEPT
	
--	,SIRDPCL.SIRDPCL_COLL_CODE AS STAFF_COLL
FROM (
	SELECT *
	FROM spriden
	WHERE spriden.spriden_change_ind IS NULL
	) spriden
	
	INNER JOIN ( --Instructor detail table
		SELECT *
		FROM sibinst a
		WHERE sibinst_term_code_eff = (
				SELECT MAX(sibinst_term_code_eff)
				FROM sibinst
				WHERE sibinst_pidm = a.sibinst_pidm
				)
		) sibinstTot
		ON spriden.spriden_pidm = sibinstTot.sibinst_pidm
		
	LEFT JOIN (
		SELECT  STVFCST_CODE       --Active Ind. Whether a faculty member is in a group that is considered active. 
			   ,STVFCST_DESC
			   ,STVFCST_ACTIVE_IND
		FROM STVFCST
		WHERE 1=1
		)FCSTstatus
		ON sibinstTot.SIBINST_FCST_CODE = FCSTstatus.stvfcst_code
		
	LEFT JOIN ( --email table
		SELECT *
		FROM goremal
		WHERE goremal_emal_code in ('TCC','O365') -- MODIFY PER MEMBER
			AND goremal_status_ind = 'A'
			AND goremal_preferred_ind = 'Y'
		) goremal
		On Spriden.Spriden_Pidm = Goremal.Goremal_Pidm
	/*	--this is a secondary source of SSO ID - we can use the spriden ID for this
	LEFT JOIN gobtpac
		ON spriden.spriden_pidm = gobtpac.gobtpac_pidm
	*/ 	
	LEFT JOIN (
		SELECT * FROM SIRDPCL a
		WHERE SIRDPCL_ACTIVITY_DATE = (
		  SELECT MAX(SIRDPCL_ACTIVITY_DATE) FROM SIRDPCL WHERE a.SIRDPCL_PIDM = SIRDPCL_PIDM)
		) SIRDPCL
		  ON SIRDPCL.SIRDPCL_PIDM = spriden_pidm
		  
WHERE 1 = 1
and spriden_pidm not in (select * from Advr_Pidm)
ORDER BY 3","Faculty"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.StudentTerm","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE SUBSTR(stvterm_code, 1, 5) <= (SELECT MIN(SUBSTR(stvterm_code, 1, 5))
                                     FROM stvterm
                                     WHERE stvterm_start_date > sysdate)
AND stvterm_desc like 'CCC%' -- Scope the query to only CCC terms
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- Force the query optimizer to read this view once into memory and use it in other statements below
CCCD_EAB_GENERAL_PERSON_cte AS (
SELECT *
  FROM CCCD_EAB_GENERAL_PERSON
),

-- get the max term for each program that has a corresponding term assigned.
/*getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
  LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
WHERE stvterm_code IS NOT NULL
  GROUP BY  sobcurr_program, stvterm_acyr_code
), */

getProgramMaxTerm AS (
SELECT sobcurr_program AS prog
  , substr(max(sobcurr_term_code_init),1,4) AS ACYR
FROM sobcurr 
  GROUP BY sobcurr_program
),

-- get student details and compute max term for a student
studentDetails AS (
SELECT sgbstdn_pidm
  , sgbstdn_program_1
  , sgbstdn_stst_code
  , sgbstdn_term_code_eff AS maxEffTerm
  , sgbstdn_term_code_ctlg_1
  , stvstst_reg_ind
  , getProgramMaxTerm.acyr AS ACYR
FROM sgbstdn a
  LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
  LEFT JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = a.sgbstdn_program_1
WHERE sgbstdn_program_1 IS NOT NULL
  AND stvstst_code IS NOT NULL
  AND sgbstdn_term_code_eff = (
                               SELECT MAX(sgbstdn_term_code_eff)
                               FROM sgbstdn
                                RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                               WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                AND stvterm_end_date <= sysdate + 365
                              )
),

-- final query to extract student term data
studentTerm AS (
SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
  , spriden_id AS student
  , studentDetails.maxEffTerm AS term
  , studentDetails.sgbstdn_program_1 || '$$' || studentDetails.acyr AS \\\""program\\\""
  , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active -- set the record active if the corresponding stvstst_reg_ind is set to 'Y'
FROM CCCD_EAB_GENERAL_PERSON_cte -- Custom view at Coastline replacing SPRIDEN
  JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
  JOIN studentPopulation ON studentPidm = spriden_pidm
--  LEFT JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
)

-- wrapper query
select * from studentTerm","Student Terms"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.StudentCourse","WITH

TERMS_TEMP as (

SELECT DISTINCT SUBSTRING(TERMS_ID,1,6) nk
  FROM TERMS
    where TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          TERMS_ID is not NULL and
          TERM_REG_START_DATE is not null
),

validDepartments AS (
SELECT DISTINCT DEPTS_ID  nk
 FROM    DEPTS
 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A'
),

validSubjects AS (
  SELECT DISTINCT SUBJECTS_ID nk
  FROM SUBJECTS 
  where SUBJ_DESC NOT IN ('Ability to Benefit', 'Basic Math Equivalency', 'Basic Skills Development', 
                   'Communications I Equivalency', 'Communications II Equivalency', 'Course Waiver') AND
        SUBJ_DESC NOT LIKE 'DO NOT USE%' AND
        SUBJECTS_ID not in ('COMM1', 'COMM2', 'COMMFND', 'MATHALG', 'MATHPRE', 'RDGCOMM', 'RDGFUND', 'RDGNONE', 'XKAP')
),

validCourses AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
    Join validSubjects on validSubjects.nk = CRS_SUBJECT
    Join validDepartments on validDepartments.nk = CRS_DEPTS
  Where 
        COURSES.CRS_MIN_CRED > 0 
       AND CRS_NO <> '999' AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG')  ,

validSections as (
			SELECT distinct 
      COURSE_SECTIONS.COURSE_SECTIONS_ID nk

  FROM COURSE_SECTIONS
   LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
   LEFT OUTER JOIN COURSE_SECTIONS_LS
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND
         COURSE_SECTIONS_LS.POS = '1'
    JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID AND
          TERMS_LS.POS = '1'
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1' AND
          (SEC_STATUS = 'A' OR 
           SEC_STATUS = 'C' OR
           SEC_STATUS = 'GH')
    Where (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )
       AND (SEC_NO < '600' OR SEC_NO > '799')

			)

SELECT DISTINCT 
      STC_PERSON_ID + '$$' + ISNULL(STC_TERM, '000001') + '$$' + ISNULL(STC_COURSE_NAME, '') nk, 
      STC_PERSON_ID student, 
      ISNULL(STC_TERM, '000001') term, 
      ISNULL(STC_COURSE_NAME, '') course, 
      ISNULL(vs.nk, '') section, 
      ISNULL(GRD_GRADE, '') grade_cd,
      cast(ISNULL(cast(GRD_VALUE as numeric(7,2)), '0') AS VARCHAR)   grade_points, 
      CASE
         WHEN STC_CMPL_CRED = 0 THEN cast(ISNULL(cast(STC_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE  cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)),0)  AS VARCHAR)
       END  credits_attempted, 
      
      CASE
         WHEN STC_VERIFIED_GRADE IS NOT NULL THEN cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       END  credits_earned, 

      case 
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'A' THEN 'REGISTERED'
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'N' THEN 'REGISTERED'
         WHEN GRD_GRADE = 'I' THEN 'IN_PROGRESS'    
         WHEN GRD_GRADE = 'S' THEN 'COMPLETED'  
         WHEN GRD_GRADE = 'T' THEN 'COMPLETED'
       ELSE 'COMPLETED'
       END    status, 
      'T' is_active  

  FROM STUDENT_ACAD_CRED
    JOIN STC_STATUSES
      ON STC_STATUSES.STUDENT_ACAD_CRED_ID = STUDENT_ACAD_CRED.STUDENT_ACAD_CRED_ID AND
         POS = '1'
    LEFT OUTER JOIN COURSE_SECTIONS
      ON SEC_TERM = STC_TERM AND
         (SEC_NO < '600' OR SEC_NO > '799') AND
         SEC_SUBJECT = STC_SUBJECT AND  
         SEC_NO = STC_SECTION_NO AND
         SEC_COURSE_NO = PARSENAME(REPLACE(STC_COURSE_NAME,'-', '.'),1)     
         
    LEFT OUTER JOIN GRADES
      ON GRD_GRADE_SCHEME = STUDENT_ACAD_CRED.STC_GRADE_SCHEME AND
         GRADES_ID = ISNULL(STUDENT_ACAD_CRED.STC_VERIFIED_GRADE,'0') 
	JOIN TERMS_TEMP on STC_TERM = TERMS_TEMP.nk
	JOIN validCourses on STC_COURSE_NAME = validCourses.nk
	LEFT OUTER JOIN validSections vs on vs.nk = COURSE_SECTIONS_ID
  WHERE STUDENT_ACAD_CRED.STC_PERSON_ID IS NOT NULL AND
        STC_STATUS NOT IN ('C','D','W','DG','X','NC') AND
        STC_REPL_CODE IS NULL AND
        (ISNULL(STC_SECTION_NO, '') < '600' OR ISNULL(STC_SECTION_NO, '') > '799')
        AND ISNULL(GRD_GRADE,'') NOT IN ('AU','U','W','F','DP','NC','EX','NR','PR','WD','WO','CT','CS','CW','AD','NC','WP','WF','CT') 

 --     I use this subquery to ONLY pull people's ENTIRE TRANSCRIPT who have registration from this semester
         AND EXISTS (SELECT 1 FROM STUDENT_ACAD_CRED X
                       JOIN STC_STATUSES Y
                            ON X.STUDENT_ACAD_CRED_ID = Y.STUDENT_ACAD_CRED_ID
						JOIN TERMS T ON T.TERMS_ID = X.STC_TERM 
									AND T.TERM_END_DATE > DATEADD(mm, -6,GETDATE()) AND T.TERM_END_DATE < DATEADD(mm, 6,GETDATE())
                     WHERE 
                           (X.STC_SECTION_NO < '600' OR X.STC_SECTION_NO > '799') AND
                           Y.POS= 1    AND 
                           (Y.STC_STATUS='N' OR
                            Y.STC_STATUS='A') AND
                           STUDENT_ACAD_CRED.STC_PERSON_ID = X.STC_PERSON_ID) 
						   


/*SELECT DISTINCT 
      STC_PERSON_ID + '$$' + ISNULL(STC_TERM, '000001') + '$$' + ISNULL(STC_COURSE_NAME, '') nk, 
      STC_PERSON_ID student, 
      ISNULL(STC_TERM, '000001') term, 
      ISNULL(STC_COURSE_NAME, '') course, 
      ISNULL(COURSE_SECTIONS_ID, '') section, 
      ISNULL(GRD_GRADE, '') grade_cd,
      cast(ISNULL(cast(GRD_VALUE as numeric(7,2)), '0') AS VARCHAR)   grade_points, 
      CASE
         WHEN STC_CMPL_CRED = 0 THEN cast(ISNULL(cast(STC_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE  cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)),0)  AS VARCHAR)
       END  credits_attempted, 
      
      CASE
         WHEN STC_VERIFIED_GRADE IS NOT NULL THEN cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       END  credits_earned, 

      case 
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'A' THEN 'REGISTERED'
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'N' THEN 'REGISTERED'
         WHEN GRD_GRADE = 'I' THEN 'IN_PROGRESS'    
         WHEN GRD_GRADE = 'S' THEN 'COMPLETED'  
         WHEN GRD_GRADE = 'T' THEN 'COMPLETED'
       ELSE 'COMPLETED'
       END    status, 
      'T' is_active

  FROM STUDENT_ACAD_CRED
    JOIN STC_STATUSES
      ON STC_STATUSES.STUDENT_ACAD_CRED_ID = STUDENT_ACAD_CRED.STUDENT_ACAD_CRED_ID AND
         POS = '1'
    LEFT OUTER JOIN COURSE_SECTIONS
      ON SEC_TERM = STC_TERM AND
         (SEC_NO < '600' OR SEC_NO > '799') AND
         SEC_SUBJECT = STC_SUBJECT AND  
         SEC_NO = STC_SECTION_NO AND
         SEC_COURSE_NO = PARSENAME(REPLACE(STC_COURSE_NAME,'-', '.'),1)     
         
    LEFT OUTER JOIN GRADES
      ON GRD_GRADE_SCHEME = STUDENT_ACAD_CRED.STC_GRADE_SCHEME AND
         GRADES_ID = ISNULL(STUDENT_ACAD_CRED.STC_VERIFIED_GRADE,'0') 
  WHERE STUDENT_ACAD_CRED.STC_PERSON_ID IS NOT NULL AND
        STC_STATUS NOT IN ('C','D','W','DG','X','NC') AND
        STC_REPL_CODE IS NULL AND
        (ISNULL(STC_SECTION_NO, '') < '600' OR ISNULL(STC_SECTION_NO, '') > '799')
        AND ISNULL(GRD_GRADE,'') NOT IN ('AU','U','W','F','DP','NC','EX','NR','PR','WD','WO','CT','CS','CW','AD','NC','WP','WF','CT')

 --     I use this subquery to ONLY pull people's ENTIRE TRANSCRIPT who have registration from this semester
         AND EXISTS (SELECT 1 FROM STUDENT_ACAD_CRED X
                       JOIN STC_STATUSES Y
                            ON X.STUDENT_ACAD_CRED_ID = Y.STUDENT_ACAD_CRED_ID
						JOIN TERMS T ON T.TERMS_ID = X.STC_TERM 
									AND T.TERM_END_DATE > DATEADD(mm, -12,GETDATE()) AND T.TERM_END_DATE < DATEADD(mm, 12,GETDATE()) -- changed from -6 and 6 to -12 and 12 to pull in more terms
                     WHERE 
                           (X.STC_SECTION_NO < '600' OR X.STC_SECTION_NO > '799') AND
                           Y.POS= 1    AND 
                           (Y.STC_STATUS='N' OR
                            Y.STC_STATUS='A') AND
                           STUDENT_ACAD_CRED.STC_PERSON_ID = X.STC_PERSON_ID) */","StudentCourse"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.studentterm","with program_bank as (
select DISTINCT ACAD_PLAN as pgrm, 
                EFFDT as effective_dt,
                ACAD_YEAR as CATALOG_YR
from ps_acad_plan_tbl a
left join ps_term_tbl b 
on effdt < term_end_dt and b.institution = a.institution
where 1=1
--and acad_plan = '1190'
and a.institution = 'NV280'
and a.acad_plan_type = 'MAJ'
--and a.acad_plan in ('1880')
and b.ACAD_YEAR = (select min(ACAD_YEAR) 
                  from ps_term_tbl 
                  where institution = 'NV280' and effdt < term_end_dt)
                  
),



pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select emplid, max(strm)
              from ps_stdnt_car_term b
              where institution = 'NV280'
              and ACAD_CAREER = 'CRED'
             -- and WITHDRAWN_CODE <> 'NWD'
              group by emplid) b
              on a.emplid = b.emplid         
 WHERE  1=1
        and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
        and a.acad_plan in ('2120','2124','2130','3400')
)                  
select distinct
pop.student_id || '$$' || pop.max_term as nk,
pop.student_id as student,
pop.max_term as term,

(select pgrm || '$$' || max(b.catalog_yr) from program_bank b
            where to_char(pop.declare_dt,'YYYY') > b.catalog_yr
            and pop.acad_plan = b.pgrm
            group by pgrm) as program,
'T' as is_active


from pop

--left join pop on student_id = a.emplid and strm = max_term
where 1=1

order by 1,3 desc","Student Term"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.CourseType","-- Fields: nk,name,is_active
-- Model Name: cat.CourseType
-- Name: Course Type
-- Output: Course_Type_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get courseType data from Banner  
WITH courseType AS (
SELECT 
  stvschd_code nk,
  stvschd_desc \\\""name\\\"",
  'T' is_active
FROM stvschd
),

-- Assign default values
\\\""default\\\"" AS (
Select 
'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM courseType
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Course Type"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.Section","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Section File

Fields: nk,cd,course,term,campus,seats_offered,waitlist_capacity,is_unlimited_seating,instructor_name
        ,class_start_dt,class_end_dt,drop_start_dt,drop_end_dt,withdraw_end_dt,is_active
*/

SELECT NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
       || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')              AS nk  --course code + section number + term
       , NVL(TRIM(sr.crs_no), '') || NVL(TRIM(sr.sec_no), '')                   AS cd
       , NVL(TRIM(sr.crs_no), '') || NVL(TRIM(mr.im), '')                       AS course
       , NVL(sr.yr, '') || '$$' || NVL(TRIM(sr.sess), '')                       AS term
       , NVL(TRIM(mr.campus), 'NA')                                             AS campus
       , NVL(sr.max_reg, 0)                                                     AS seats_offered
       , NVL(sr.max_wait, 0)                                                    AS waitlist_capacity
       , 'N'                                                                    AS is_unlimited_seating  --Should this be adjusted?
       , NVL(TRIM(idr.fullname), 'No Instructor Listed')                        AS instructor_name
       , NVL(TO_CHAR(sr.beg_date, '%Y-%m-%d'), '')                              AS class_start_dt
       , NVL(TO_CHAR(sr.end_date, '%Y-%m-%d'), '')                              AS class_end_dt
       , TRIM('')   AS drop_start_dt  --What should these fields be?
       , TRIM('')   AS drop_end_dt
       , TRIM('')   AS withdraw_end_dt
       , 'T'                                                                    AS is_active  --Should this be updated based on sr.stat field?
FROM informix.sec_rec sr
--Section meetings
LEFT JOIN informix.secmtg_rec smr
       ON smr.crs_no = sr.crs_no
          AND smr.yr = sr.yr
          AND smr.sess = sr.sess
          AND smr.sec_no = sr.sec_no  
--Meeting details          
LEFT JOIN informix.mtg_rec mr
       ON mr.mtg_no = smr.mtg_no  
--instructor/meeting assignments       
LEFT JOIN informix.instr_rec ir
       ON ir.mtg_no = mr.mtg_no 
--instructor name info
LEFT JOIN informix.id_rec idr
       ON idr.id = ir.id
WHERE 1=1
--ORDER BY 1   ","Sections"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.seatsavail","select 

a.SSBSECT_CRN || '$$' ||a.SSBSECT_TERM_CODE AS NK,
a.SSBSECT_SEATS_AVAIL AVAIL_SEATS,
'T' AS IS_ACTIVE
from SSBSECT a
where a.SSBSECT_SSTS_CODE = 'A'
and a.SSBSECT_TERM_CODE > 201510
--and SSBSECT_VOICE_AVAIL = 'Y'","SeatsAvail"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.SectionTime","SELECT ssbsect_crn || '$$' || ssbsect_term_code || '$$' || COALESCE(day_of_week, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') || '$$' nk, 
       ssbsect_crn || '$$' || ssbsect_term_code section,
       CASE day_of_week
         WHEN 'Sunday' THEN 1
         WHEN 'Monday' THEN 2
         WHEN 'Tuesday' THEN 3
         WHEN 'Wednesday' THEN 4
         WHEN 'Thursday' THEN 5
         WHEN 'Friday' THEN 6
         WHEN 'SATURDAY' THEN 7
         ELSE 8
       END day_of_week,
       CASE 
         WHEN ssrmeet_begin_time IS NOT NULL THEN SUBSTR(ssrmeet_begin_time, 1, 2) || ':' || SUBSTR(ssrmeet_begin_time, 3, 2) || ':00'
         ELSE NULL
       END from_tm, 
       CASE 
         WHEN ssrmeet_end_time IS NOT NULL THEN SUBSTR(ssrmeet_end_time, 1, 2) || ':' || SUBSTR(ssrmeet_end_time, 3, 2) || ':00'
         ELSE NULL
      END to_tm,
      CASE 
        WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code || '$$' || ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code 
        ELSE 'WEB' 
      END location,
      CASE 
        WHEN ssbsect_ssts_code = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
FROM ssrmeet JOIN ssbsect ON ssbsect_term_code = ssrmeet_term_code
                         AND ssbsect_crn = ssrmeet_crn
        LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                         AND ssbsect_crn = sirasgn_crn
        LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
     UNPIVOT EXCLUDE NULLS
     (
       VAL FOR ( day_of_week ) IN 
          (
             ssrmeet_sun_day AS 'Sunday', 
             ssrmeet_mon_day AS 'Monday', 
             ssrmeet_tue_day AS 'Tuesday',
             ssrmeet_wed_day AS 'Wednesday',
             ssrmeet_thu_day AS 'Thursday',
             ssrmeet_fri_day AS 'Friday', 
             ssrmeet_sat_day AS 'Saturday'
          )
     )
WHERE ssbsect_term_code >= '201015'
  AND spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
ORDER BY ssbsect_crn, ssbsect_term_code, day_of_week
","Section Time"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.course","SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','')
 --|| '-' || REPLACE(b.SSR_COMPONENT, ' ','')
 || REPLACE('-' || C.institution, '-NV280', '') as NK
, C.CRSE_ID as cd
, case when acad_group = 'DEV' then '0' else '1' end  as \\\""level\\\""
, REPLACE(c.SUBJECT, ' ','') as SUBJECT
, c.crse_offer_nbr                                                                  AS DEPARTMENT_CD 
, nvl(b.DESCRLONG, b.DESCR)                                                               as \\\""desc\\\""
, b.SSR_COMPONENT COURSE_TYPE
, nvl(b.COURSE_TITLE_LONG, b.DESCR)                                                                       AS TITLE
, b.UNITS_MINIMUM                                                                   AS CREDITS
, case when b.crse_repeatable = 'N' then 0
else crse_repeat_limit - 1 end                                                      AS REPEATABLE_COUNT
, case when b.EFF_STATUS = 'A' 
        and C.INSTITUTION = 'NV280' 
        then 'T' 
        else 'F' 
  end                                                                               AS IS_ACTIVE 
FROM (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION 
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.INSTITUTION = 'NV280'
                    --and o.acad_career = 'CRED'
                    and o.acad_org <> 'LCREDIT'
                    and o.crse_offer_nbr = '1') C

LEFT JOIN (SELECT mainB.CRSE_ID 
               , UNITS_MAXIMUM 
               , UNITS_MINIMUM 
               , COURSE_TITLE_LONG 
               , DESCR
               , DESCRLONG
               , EFF_STATUS
               , CRSE_REPEATABLE
               , CRSE_REPEAT_LIMIT
               , SSR_COMPONENT
        FROM   PS_CRSE_CATALOG mainB 
        WHERE  mainB.EFFDT = (SELECT Max(EFFDT) 
                              FROM   PS_CRSE_CATALOG c 
                              WHERE  c.crse_id = mainb.crse_id)) B
        on B.CRSE_ID = C.CRSE_ID
WHERE  1 = 1 
--and a.institution = 'NV280'
--and  b.EFF_STATUS = 'A'
ORDER  BY 1, 2","Course"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"inst.Campus","WITH campus AS (
SELECT DISTINCT stvcamp_code nk
                , stvcamp_desc \\\""name\\\""
                , CASE WHEN stvcamp_code = 'O' -- Logic to identify online campuses. Confirm with BA.
                			THEN 'T'
                			ELSE 'F' END is_online
                , 'T' is_active
FROM stvcamp
),

-- Assign default values
defaultValues AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM campus
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Campus"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Term","-- get Terms from Banner
WITH term AS (
  SELECT 
  szvterm_code nk, 
  szvterm_desc \\\""name\\\"", 
  szvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(szvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and szvterm. If not available, assign default date
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(szvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and szvterm. If not available, assign default date
  to_char(szvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(szvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case 
    When (szvterm_Desc Like '%Fall%'
    or szvterm_Desc Like '%Winter%'
    or szvterm_Desc Like '%Spring%'
    or szvterm_Desc Like '%Summer%') 
    and szvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM szvterm 
  JOIN sfrrsts ON szvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code = 'RW' -- Confirm registration codes to include with BA/Member
  AND sfrrsts_ptrm_code = 'F15' -- Confirm ptrm code to include with BA/Member
  AND substr(szvterm_code,1,1) NOT IN ('6', '7', '8')
  AND szvterm_vpdi_code = 'ACC'
  AND sfrrsts.SFRRSTS_VPDI_CODE = 'ACC'
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in szvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
SELECT
  szvterm_code nk,
  szvterm_desc \\\""name\\\"",
  szvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(szvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(szvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case
    When (szvterm_Desc Like '%Fall%'
    or szvterm_Desc Like '%Winter%'
    or szvterm_Desc Like '%Spring%'
    or szvterm_Desc Like '%Summer%') 
    and szvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM szvterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = szvterm_code
                   AND sfrrsts_rsts_code = 'RW' -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_ptrm_code = 'F15'    -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_vpdi_code = 'ACC') 
      AND szvterm_vpdi_code = 'ACC'             
      AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8', '0')
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM finalDataSet ","Terms"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.Term","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Terms File

Fields: nk,name,cat_yr,registration_start_dt,registration_end_dt,term_start_dt,term_end_dt,is_active
*/

SELECT NVL(REPLACE(acr.yr, ' ', ''), '') || '$$' || NVL(REPLACE(acr.sess, ' ', ''), '') AS nk
       , NVL(TRIM(st.txt), '') || ' ' || NVL(acr.yr, '') AS name
       , CASE
           WHEN acr.yr <= '2000' THEN '19' || SUBSTR(acr.acyr, 1, 2)
           ELSE '20' || SUBSTR(acr.acyr, 1, 2)
         END                                             AS cat_yr  --gives only the first of 2 years from the acyr field.
       --, SUBSTR(TO_CHAR(beg_date, '%Y-%m-%d'), 1, 2) || SUBSTR(acr.acyr, 1, 2) || '-' 
       --  || SUBSTR(TO_CHAR(beg_date, '%Y-%m-%d'), 1, 2) || SUBSTR(acr.acyr, 3, 2) AS cat_yr  --gives a yyyy-yyyy pattern for spanning multiple years
       , NVL(TO_CHAR(first_reg_date, '%Y-%m-%d'), '')    AS registration_start_dt
       , NVL(TO_CHAR(last_add_date, '%Y-%m-%d'), '')     AS registration_end_dt  --update per Jim Wallace at MHCC, 2017-02-07
	   --, NVL(TO_CHAR(last_reg_date, '%Y-%m-%d'), '')     AS registration_end_dt
       , NVL(TO_CHAR(beg_date, '%Y-%m-%d'), '')          AS term_start_dt
       , NVL(TO_CHAR(end_date, '%Y-%m-%d'), '')          AS term_end_dt
       , 'T'                                             AS is_active
FROM informix.acad_cal_rec acr
JOIN informix.sess_table st
  ON st.sess = acr.sess
WHERE 1=1
   AND acr.prog = 'UNDG'
   AND acr.subsess = ''
   
ORDER BY 3 DESC, 1 DESC","Terms"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"core.FacultyType","SELECT distinct  CASE WHEN FAC_ADVISE_FLAG = 'Y' THEN 'ADVR'
				ELSE ISNULL(FAC_CONTRACT_TYPE,'INST') end as nk  
				,CASE WHEN FAC_ADVISE_FLAG = 'Y' THEN 'ADVR'
				ELSE ISNULL(FAC_CONTRACT_TYPE,'INST') end as \\\""type\\\""
				,'' as \\\""desc\\\""
  
  FROM FACULTY
 ","FacultyType"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"reg.StudentTestScore","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE SUBSTR(stvterm_code, 1, 5) <= (SELECT MIN(SUBSTR(stvterm_code, 1, 5))
                                     FROM stvterm
                                     WHERE stvterm_start_date > sysdate)
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN CCCD_EAB_GENERAL_PERSON ON spriden_pidm = sortest_pidm  -- Custom view at Coastline replacing SPRIDEN
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
    and sortest_tsrc_code = 'TAPE'
  and sortest_tesc_code in
    (
        select stvtesc_code from stvtesc where stvtesc_code like '1P%'
        UNION
        select stvtesc_code from stvtesc where stvtesc_code like '2P%'
        UNION
        select stvtesc_code from stvtesc where stvtesc_code like '3P%'
    )



GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","Student Test Scores"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.term","WITH REG_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, sfrrsts_start_Date, sfrrsts_end_date, p.sobptrm_Start_Date , p.sobptrm_end_Date
From Sfrrsts rsts
join sobptrm p on p.sobptrm_term_code = rsts.sfrrsts_term_code 
where rsts.Sfrrsts_rsts_code in ('RW')
and rsts.sfrrsts_ptrm_code = '16'
and p.sobptrm_ptrm_code = rsts.sfrrsts_ptrm_code
--AND p.SOBPTRM_TERM_cODE ='201720'
)

select stvterm_code nk,
          stvterm_desc name,
          stvterm_acyr_code cat_yr,
          -- TODO change this dates
        coalesce(to_char(reg_Dates.sfrrsts_Start_Date,'YYYY-MM-DD'),'1900-01-01') registration_start_dt,
          coalesce(to_char(reg_Dates.sfrrsts_end_Date,'YYYY-MM-DD'),'1900-01-02') registration_end_dt,
          to_char(coalesce(reg_Dates.sobptrm_start_date,stvterm_Start_Date),'YYYY-MM-DD') term_start_dt,
          to_char(coalesce(reg_Dates.sobptrm_end_date,stvterm_end_Date),'YYYY-MM-DD') term_end_dt,
          nvl((select 'F' from dual where substr(stvterm_code,5,2) in ('70','80','90')) ,'T') is_active
  from stvterm
  left join REG_DATES on stvterm_code = sfrrsts_term_code","Terms"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.StudentTerm","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm 
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND (sfrstcr_rsts_code LIKE ('R%') OR sfrstcr_rsts_code LIKE ('K%'))
  
/* UNION

SELECT DISTINCT saradap_pidm AS studentPidm 
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1 */
),

-- get the max term for each program that has a corresponding term assigned.
getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
  LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
left join smbpgen ON sobcurr_program = smbpgen_program
WHERE stvterm_code IS NOT NULL
and smbpgen_active_ind = 'Y'
  GROUP BY  sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
SELECT sgbstdn_pidm
  , sgbstdn_program_1
  , sgbstdn_stst_code
  , sgbstdn_term_code_eff AS maxEffTerm
  , sgbstdn_term_code_ctlg_1
  , stvstst_reg_ind
FROM sgbstdn a
LEFT JOIN sfrstcr b ON sgbstdn_pidm = sfrstcr_pidm
  LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
WHERE sgbstdn_program_1 IS NOT NULL
  AND stvstst_code IS NOT NULL
  AND sgbstdn_term_code_eff = (
                               SELECT MAX(sgbstdn_term_code_eff)
                               FROM sgbstdn
                                RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                               WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                AND stvterm_end_date <= sysdate + 365
                              )
   AND   SFrstcr_TERM_CODE = ( select max(SFRSTCR_TERM_CODE)
   from SFRSTCR bb
   where b.sfrstcr_pidm = bb.sfrstcr_pidm
   )                         

),

-- final query to extract student term data
studentTerm AS (
SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
  , spriden_id AS student
  , studentDetails.maxEffTerm AS term
  , studentDetails.sgbstdn_program_1 || '$$' || getProgramMaxTerm.acyr AS \\\""program\\\""
  , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active 
FROM spriden
  RIGHT JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
  JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
  JOIN studentPopulation ON studentPidm = spriden_pidm
WHERE spriden_change_ind IS NULL 
)

-- wrapper query
select * from studentTerm","StudentTerm"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.Department","SELECT DISTINCT DEPTS_ID  nk, 
       DEPTS_DESC  name,
        'T' is_active
 FROM    DEPTS

 WHERE  DEPTS_ACTIVE_FLAG='A' 
 -- AND DEPTS_TYPE='A'

--select * from DEPTs
  --AND DEPTS_TYPE='A'","Department"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"reg.StudentTestScore","-- Fields	nk,student,test_subject,score,is_active
-- Model Name	reg.StudentTestScore
-- Name	Student Test Score
-- Output	Student_Test Score_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.1.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 7
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore

--  Notes: => DATA examples nk = 'W00018623$$SATI',
--                    student = 'W00018623',
--                    test_subject = 'SATI',
--                    score = '1170'
--  
-- Change log:
--        Developer: Doug Menezes
--        Change version: Nav.1.1.0 (04/12/2016)
--        Description: Updated getLastXTerms logic to match with studentCourse.","StudentTestScore"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"reg.StudentTestScore","WITH TMP_1 AS (
SELECT DISTINCT
   P.ID student
FROM
   PERSON P
  JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'

),

TMP_2 AS (
SELECT DISTINCT
   P.ID  
FROM
   PERSON P
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         A.APPL_APPLICANT NOT IN 
         (
            SELECT
               student
            FROM
               TMP_1
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
         JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()-365
            AND
         A.APPL_START_TERM = T.TERMS_ID
),

TMP_3 AS (SELECT * FROM TMP_1 UNION SELECT * FROM TMP_2)

SELECT
   TS.student+'$$'+SNC.STNC_NON_COURSE as nk,
   TS.student,
   SNC.STNC_NON_COURSE AS test_subject,
   ISNULL(CAST(COALESCE(SNC.STNC_SCORE,0) AS NUMERIC(7,2)),99) AS score,
   'T' AS is_active
FROM
   TMP_3 TS,
   STUDENT_NON_COURSES SNC
WHERE 1=1
    AND TS.student = SNC.STNC_PERSON_ID
    AND SNC.STNC_STATUS = 'A'
	--AND TS.student = '0003263'","StudentTestScore"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"reg.studenttestscore","with pop as (
select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select emplid, max(strm)
              from ps_stdnt_car_term b
              where institution = 'NV280'
              and ACAD_CAREER = 'CRED'
             -- and WITHDRAWN_CODE <> 'NWD'
              group by emplid) b
              on a.emplid = b.emplid         
 WHERE  1=1
        and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
        and a.acad_plan in ('2120','2124','2130','3400')

)                  
       
select distinct emplid || '$$' || a.test_id || '_' || a.test_component as nk
, a.emplid as student
, a.test_id || '_' || a.test_component as test_subject
, a.score as score
, 'T' as is_active

from ps_stdnt_test_comp a
--left join PS_SA_TEST_TBL b on a.test_id = b.test_id
where a.emplid in (select student_id from pop)","Student Test Score"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"core.studentcategory","

Select Stvmedi_Code As Nk
, Stvmedi_Desc As \\\""Name\\\""
, 'T' As Is_Active
From Stvmedi

Union 
Select Stvdisa_Code As Nk
, STVDISA_DESC As \\\""Name\\\""
, 'T' As Is_Active
from STVDISA ","StudentCategory"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"reg.AccountHold","with now_term as (
  select stvterm_code as a_term
    from stvterm
   Where Stvterm_End_Date >= Sysdate
     And Stvterm_Desc Not Like '%Non-Credit' 
     And Stvterm_Desc Not Like 'Parson%'
     and rownum = 1
   order by stvterm_code asc
),
Term_List As (
  Select stvterm_code as term
    from stvterm
   Where Stvterm_Code <= (Select * From Now_Term)
     And Stvterm_Desc Not Like '%Non-Credit' 
     And Stvterm_Desc Not Like 'Parson%'
     and rownum <= 10
   Order By Stvterm_Code Desc
),
studentPop as (
  select distinct pidm from (
        Select Sfrstcr_Pidm pidm, 
               Sfrstcr_Term_Code term
        From Sfrstcr
        Where Sfrstcr_Rsts_Code In ('RE','RW')
        and sfrstcr_term_code in (select * from term_list)
  UNION (
  select  saradap_pidm pidm,
          saradap_term_code_entry term
  from saradap
  Where Saradap_Term_Code_Entry In (Select * From Term_List)
  ))
),
holds AS (
SELECT DISTINCT
  spriden_id || '$$' || sprhold_hldd_code AS nk
  , spriden_id AS student
  , sprhold_hldd_code AS \\\""identifier\\\""
  , stvhldd_desc AS message
  , 'T' AS is_active
FROM sprhold
  join stvhldd on stvhldd_code = sprhold_hldd_code
  JOIN studentPop ON studentPop.pidm = sprhold_pidm
  JOIN spriden ON studentPop.pidm = spriden_pidm
WHERE sprhold_from_date < sysdate 
  AND (sprhold_to_date > sysdate and sprhold_to_date is not null)
  AND spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
  and sprhold_hldd_code in ('AI','AM','AP','AR','AT','BO',
                            'DM','FA','HO','RH','TB','TR')
)

Select * From Holds","AccountHold"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.ProgramCredential","SELECT DISTINCT 
	sobcurr_degc_code AS nk
	, sobcurr_degc_code AS short_credential
	, 'T' AS is_active
FROM sobcurr","Program Credential"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.StudentTerm","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
),

PROGLIST AS (
SELECT DISTINCT REPLACE(ACAD_PROGRAM_REQMTS_ID , '*','$$') as PROG_ID
  FROM ACAD_PROGRAM_REQMTS
  LEFT OUTER JOIN ACAD_PROGRAMS
    ON SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
    LEFT OUTER JOIN PROGRAM_STATUS
      ON PROGRAM_STATUS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
 WHERE SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) NOT IN ('CE', 'NS.NDS')
),

STULIST AS (
SELECT DISTINCT ltrim(SUBSTRING(PERSON.ID,1,7)) as PERSON_ID
FROM PERSON
LEFT OUTER JOIN PERSON_PIN PERSON_PIN
        ON PERSON.ID = PERSON_PIN.PERSON_PIN_ID AND
            PERSON_PIN.PERSON_PIN_USER_ID <> ' '
WHERE PERSON.ID IS NOT NULL
      and PERSON_PIN_USER_ID IS NOT NULL
    and PERSON.LAST_NAME <> 'DO NOT USE'
    AND PERSON.BIRTH_DATE IS NOT NULL
),

STUTRMLIST AS (
SELECT DISTINCT  parsename(replace(STUDENT_TERMS_ID,'*','.'), 3)+'$$'+parsename(replace(STUDENT_TERMS_ID,'*','.'),2) as nk,
    parsename(replace(STUDENT_TERMS_ID, '*', '.'), 3) as student,
    parsename(replace(STUDENT_TERMS_ID, '*', '.'), 2) as term,
    replace(STUDENT_PROGRAMS.STPR_STU_PGM_IDX, '*', '$$') as program,
    'T' as is_active   
 FROM STUDENT_TERMS        
    LEFT OUTER JOIN STUDENT_PROGRAMS
       ON SUBSTRING(STUDENT_TERMS_ID, 1,    CHARINDEX('*', STUDENT_TERMS_ID) - 1) =
          SUBSTRING(STUDENT_PROGRAMS_ID, 1, (CHARINDEX('*', STUDENT_PROGRAMS_ID) - 1))
    LEFT OUTER JOIN STPR_STATUSES
       ON STPR_STATUSES.STUDENT_PROGRAMS_ID = STUDENT_PROGRAMS.STUDENT_PROGRAMS_ID
          AND  STPR_STATUSES.POS = '1' AND STPR_STATUSES.STPR_STATUS = 'A'
)

SELECT nk,student,term,program,is_active
  FROM STUTRMLIST
 WHERE term IN (SELECT SEC_TERM FROM TERMLIST)
   AND student IN (SELECT PERSON_ID FROM STULIST)
   AND program IN (SELECT PROG_ID FROM PROGLIST) 
and program not like 'HS%'","StudentTerm"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"event.TaskStatusFeed","-- Fields  nk,student,event,repeated_by_nk,status,status_changed_ts,is_active
-- Model Name  event.TaskStatusFeed
-- Name  TaskStatusFeed
-- Output  TaskStatusFeed_{data#DateStamp}.csv
-- Goal: To mark students that satisfy the following events: orientation, meeting their advisor, placement, and applying for financial aid
-- Query:


-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
  (SELECT stvterm_code
  FROM stvterm
  WHERE stvterm_code <=
                        (SELECT MIN(stvterm_code)
                        FROM stvterm
                        WHERE stvterm_start_date > sysdate)
  ORDER BY 1 DESC)
WHERE ROWNUM < 6), -- LH change needed: only want current and next term


-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
  FROM sfrstcr  
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
  WHERE 1=1
    AND sfrstcr_rsts_code IN ('RE', 'RS','RW', 'RA') -- Marin registration codes
    
  UNION

  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
  FROM saradap
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
  WHERE 1=1),


-- Extract E_ORIENTATION related events - no repeat
E_ORIENTATION AS (
  SELECT spriden_id || '$$E_ORIENTATION$$' AS nk
  , spriden_id AS student
  , 'E_ORIENTATION' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status           
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN SPRIDEN 
    ON SPRIDEN.spriden_pidm = studentPopulation.studentPidm
  JOIN SVRORNT
    ON SVRORNT_PIDM = studentPopulation.studentPidm
  JOIN (Select COM_UTILITY.f_get_orientation(SPRIDEN.spriden_pidm) OS, SPRIDEN_PIDM from SPRIDEN) EO  -- The function for Yes or No Orientation
    ON SPRIDEN.spriden_pidm = EO.SPRIDEN_PIDM
  WHERE EO.OS = 'Y'),


-- Extract E_FIRST_ADVISOR_MEET related events - no repeat
E_FIRST_ADVISOR_MEET AS (
SELECT DISTINCT
  spriden_id || '$$E_FIRST_ADVISOR_MEET$$' AS nk
  , spriden_id AS student
  , 'E_FIRST_ADVISOR_MEET' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN SPRIDEN
    ON SPRIDEN.spriden_pidm = studentPopulation.studentPidm
  JOIN SVREDPL
    ON SVREDPL_PIDM = studentPopulation.studentPidm
  JOIN (Select COM_UTILITY.f_get_ed_plans(SVREDPL_pidm, SVREDPL_term_code) AM, SVREDPL_PIDM from SVREDPL where svredpl_term_code in (select stvterm_code from getLastXTerms)) AD -- The function needed to have term_id added and limited to reduce run time
    ON SPRIDEN.spriden_pidm = AD.SVREDPL_PIDM
WHERE AD.AM = 'Y'),


-- Extract E_PLACEMENT related events - no repeat
E_PLACEMENT AS (
SELECT
  spriden_id || '$$E_PLACEMENT$$' AS nk
  , spriden_id AS student
  , 'E_PLACEMENT' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN SPRIDEN 		
    ON SPRIDEN.spriden_pidm = studentPopulation.studentPidm
  JOIN SORTEST
    ON SORTEST_PIDM = studentPopulation.studentPidm
  JOIN (Select COM_UTILITY.f_get_assessment(spriden_pidm) EP, SPRIDEN_PIDM from spriden) PL
    ON studentPopulation.studentPidm = PL.SPRIDEN_PIDM
WHERE PL.EP = 'Y'), 


-- Extract Financial Aid runs in prod
E_FINANCIAL2_AID_REMINDER AS (
  SELECT
  spriden_id || '$$E_FINANCIAL2_AID_REMINDER$$' AS nk
  , spriden_id AS student
  , 'E_FINANCIAL2_AID_REMINDER' AS event
  , STVTERM_CODE AS repeated_by_nk          -- LH Change: Make a reminder on the current date for that term. Add repeater for each term since this is a reminder. so it would read as the term like 2015FALL
  , 'COMPLETED' AS status           
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM (        -- This is the query provided in the JIRA ticket
    SELECT spriden_id                           Spriden_ID
  , spriden_last_name                           LastName
  , spriden_first_name                          FirstName
  , STVTERM.STVTERM_CODE
  , RCRAPP1_INFC_CODE
  FROM RCRAPP1
  INNER JOIN SPRIDEN
    ON SPRIDEN_PIDM = RCRAPP1_PIDM
    AND SPRIDEN_CHANGE_IND IS NULL
  JOIN SVREDPL     -- table with SID and term in it LH 011817
    ON SVREDPL_PIDM = SPRIDEN_PIDM
  JOIN STVTERM    -- LH join for term 011817
    ON STVTERM.STVTERM_CODE = SVREDPL.SVREDPL_TERM_CODE
  where 1=1
  and rcrapp1_aidy_code = '1617' 
  and RCRAPP1_INFC_CODE like 'EDE' 
  and RCRAPP1_CURR_REC_IND = 'Y'
  order by 2,3)),
  
/* LH 011817 NEW Below */

-- Extract each student's FIRST_TERM
FIRST_TERM AS(
select
    spriden_id
    ,saradap_pidm as student_pidm
    ,min(saradap_term_code_entry) as first_term_code
  from studentPopulation
  JOIN SPRIDEN
    ON SPRIDEN.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  WHERE spriden_change_ind IS NULL
   -- AND spriden_entity_ind = 'P'
 group by spriden_id, saradap_pidm
),

-- Extract each student's NEXT_TERM
NEXT_TERM AS(
select
  spriden_id
  ,saradap_pidm as student_pidm   
	,LEAD(STVTERM.STVTERM_CODE, 1) OVER(PARTITION BY spriden_id, SARADAP_PIDM ORDER BY STVTERM.STVTERM_CODE) AS NEXT_TERM_CODE
  from studentPopulation
  JOIN SPRIDEN
    ON SPRIDEN.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  JOIN STVTERM
    ON STVTERM.STVTERM_CODE = saradap.saradap_term_code_entry
  WHERE SYSDATE BETWEEN STVTERM.STVTERM_START_DATE AND STVTERM.STVTERM_END_DATE
    and spriden_change_ind IS NULL
    --AND spriden_entity_ind = 'P'
),

-- Get students who have registered
REGISTERED_STUDENTS AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm 
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE', 'RS','RW', 'RA') -- Marin registration codes
),

-- Extract E_REGISTER_FIRST_TERM related events - repeats on first term registration
E_REGISTER_FIRST_TERM AS (
SELECT DISTINCT
  SPRIDEN.spriden_id || '$$E_REGISTER_FIRST_TERM$$' || FIRST_TERM.FIRST_TERM_CODE AS nk
  , SPRIDEN.spriden_id AS student
  , 'E_REGISTER_FIRST_TERM' AS event
  , FIRST_TERM.FIRST_TERM_CODE  AS repeated_by_nk	
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN SPRIDEN
    ON SPRIDEN.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN FIRST_TERM
    ON FIRST_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE spriden_change_ind IS NULL
	--AND spriden_entity_ind = 'P'
),

-- Extract E_REGISTER_NEXT_TERM related events - repeats each next term
E_REGISTER_NEXT_TERM AS (
SELECT DISTINCT
  SPRIDEN.spriden_id || '$$E_REGISTER_NEXT_TERM$$' || NEXT_TERM.NEXT_TERM_CODE AS nk
  , SPRIDEN.spriden_id AS student
  , 'E_REGISTER_NEXT_TERM' AS event
  , NEXT_TERM.NEXT_TERM_CODE AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN SPRIDEN
    ON SPRIDEN.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN NEXT_TERM
    ON NEXT_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE NEXT_TERM.NEXT_TERM_CODE IS NOT NULL
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


finalDataSet AS (         -- Union all table results together
  SELECT * FROM E_ORIENTATION
  UNION
  SELECT * FROM E_FIRST_ADVISOR_MEET
  UNION
  SELECT * FROM E_PLACEMENT    
  UNION
  SELECT * FROM E_FINANCIAL2_AID_REMINDER
  UNION
  SELECT * FROM E_REGISTER_FIRST_TERM
  UNION
  SELECT * FROM E_REGISTER_NEXT_TERM
  )

SELECT * from finalDataSet  -- Display final result","TaskStatusFeed"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Department"," 
-- get subject data from Banner  
WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",  
  DECODE(STVSUBJ_DISP_WEB_IND, 'Y', 'T',
                               'N', 'F') is_active
FROM stvsubj 
WHERE LENGTH(stvsubj_CODE) = 3
),

-- Assign default values
defaultValues AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM subject
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Departments"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.StudentTerm","WITH PMT as ( --this is the lookup of program codes so we pull in the right program code from PRGM lkp
select * from (select distinct sobcurr_program as pgrm,
                               max(sobcurr_term_code_init) as prog_max_term,
                               stvterm_acyr_code as acyr
                 from sobcurr left join stvterm on stvterm_code = sobcurr_term_code_init
                where stvterm_code is not null
                group by sobcurr_program, stvterm_acyr_code) b
 where prog_max_term = (select max(sobcurr_term_code_init)
                        from sobcurr
                       where sobcurr.sobcurr_program = b.pgrm)),
--
SGB as ( --this is the list of students and terms and appropriate program information
select * from (select sgbstdn_pidm,
                      sgbstdn_program_1,
                      sgbstdn_stst_code,
                      sgbstdn_term_code_eff as max_eff_term,
                      sgbstdn_term_code_ctlg_1,
                      stvstst_reg_ind
                 from sgbstdn
                 left join stvstst on stvstst_code = sgbstdn_stst_code
                where sgbstdn_program_1 is not null and stvstst_code is not null) a
 where max_eff_term = (select max(sgbstdn_term_code_eff)
                         from sgbstdn right join stvterm on sgbstdn_term_code_eff = stvterm_code
                        where a.sgbstdn_pidm = sgbstdn_pidm 
                          and stvterm_end_date <= sysdate + 365)
 order by 1,4),
--
term_list as (
  select distinct stvterm_code as term_code
    from stvterm join sfrrsts on stvterm_code = sfrrsts_term_code
   where sfrrsts_rsts_code in ('RA', 'RW', 'RE')
     and SFRRSTS_PTRM_CODE = '1'
     and substr(stvterm_code, -1, 1) IN ('0','9')
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-(365*2)
   order by stvterm_code desc
),
--
pop AS (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
  FROM sfrstcr  
    JOIN term_list ON term_list.stvterm_code = sfrstcr_term_code
  WHERE 1=1
    AND sfrstcr_rsts_code IN ('RE','RW', 'RA') -- Marin registration codes
    
  UNION

  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
  FROM saradap
    JOIN  term_list ON term_list.stvterm_code.stvterm_code = saradap_term_code_entry
  WHERE 1=1),

select spriden_id || '$$' || SGB.max_eff_term nk,
       spriden_id student,
       SGB.max_eff_term term,
       SGB.sgbstdn_program_1 || '$$' || PMT.acyr \\\""program\\\"",
       decode(stvstst_reg_ind,'Y','T','F') is_active
  from spriden
 right join SGB on spriden_pidm = SGB.sgbstdn_pidm 
  join PMT on SGB.sgbstdn_program_1 = PMT.pgrm 
 where spriden_change_ind is null
   and spriden_entity_ind = 'P'
   AND EXISTS (SELECT 1 -- Just wants any results
                 FROM sgbstdn
                WHERE sgbstdn_program_1 IS NOT NULL
                  And Sgbstdn_Stst_Code = 'AS')
   And Spriden_Pidm In (Select * From Pop)
   And UPPER(spriden_id) NOT LIKE 'DELET%' 
 order by 2","Student Term"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"inst.campus","-- Fields nk,name,is_online,is_active
-- Model Name inst.Campus
-- Name Campus
-- Script Version (Product.Major.Minor.Custom) Nav.1.0.0
-- schema spec version
-- Author Doug Menezes
-- Query

-- get campus data from Banner 
WITH campus AS (
SELECT DISTINCT stvcamp_code nk
                , stvcamp_desc AS \\\""name\\\""
                , CASE WHEN stvcamp_code = 'O' -- Logic to identify online campuses. Confirm with BA.
                			THEN 'T'
                			ELSE 'F' END is_online
                , 'T' is_active
FROM stvcamp 
WHERE stvcamp_code in ('3','A','1','S','B')
),

-- Assign default values
defaultValues AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' AS  \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM campus
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet 

-- Notes => DATA examples nk = 'A'
-- 						name = 'Aviation'

-- Change log
--				Developer
--				Change version
--				Description","Campus"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.StudentCourse","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') > TRUNC(sysdate, 'YYYY')-2*365
   and substr(college, 0, 1) = 'C'
 order by nk desc),

cur_stu as (
select distinct id as stu_id,
       academic_period as term_code
  from eab_stdnt_active
 where current_enroll_cc = 'Y'
   and academic_period in (select nk from cur_terms)
)

select distinct
  a.nk,
  student,
  a.term,
  case
    when instr(course, '$$') > 0 then substr(course, 0, instr(course, '$$')-1)
    else course
  end course,
  a.section,
  grade_cd,
  grade_points,
  credits_attempted,
  credits_earned,
  replace(a.status, '-', '_') status,
  CASE 
    WHEN a.is_active = 'Y' THEN 'T'
    ELSE 'F'
  END as is_active
  FROM EAB_STDNT_COURSE a LEFT JOIN EAB_CRSE b on a.course = b.nk and a.term = b.term
  join (select * from cur_stu) c on c.term_code = a.academic_period and c.stu_id = a.student
 where b.college = 'CC'
   and a.current_enroll_cc = 'Y'","Student Course A"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"core.student","WITH pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW')
      and sfrstcr_term_code in (
      Select Term From (           
                Select Stvterm_Code Term From Stvterm 
                Where Stvterm_Code <= (
                      Select min(Stvterm_Code) From Stvterm 
                      where sysdate <= stvterm_start_date
                      And Stvterm_Desc Not Like '%Non-Credit' 
                      And Stvterm_Desc Not Like 'Parson%')
                And Stvterm_Desc Not Like '%Non-Credit' 
                And Stvterm_Desc Not Like 'Parson%'
                And Rownum < 5
                Order By 1 Desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      Select Term From (           
                Select Stvterm_Code Term From Stvterm 
                Where Stvterm_Code <= (
                      Select min(Stvterm_Code) From Stvterm 
                      where sysdate <= stvterm_start_date
                      And Stvterm_Desc Not Like '%Non-Credit' 
                      And Stvterm_Desc Not Like 'Parson%')
                And Stvterm_Desc Not Like '%Non-Credit' 
                And Stvterm_Desc Not Like 'Parson%'
                And Rownum < 5
                Order By 1 Desc)
))))

SELECT DISTINCT
  spriden_id nk,
  spriden_id username,
  trim(coalesce(( 
                select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'CAMP'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'PERS'
              and goremal_preferred_ind = 'Y'
              ),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              And Goremal_Emal_Code = 'CAMP'
              and goremal_preferred_ind = 'N'),
               lower(spriden_id) || '@missingemail.org')) email,
  spriden_first_name first_name,
  spriden_last_name last_name,
  NVL(to_char(spbpers_birth_date,'YYYY-MM-DD'),'2000-01-01') birthdate,
  CASE 
    WHEN EXISTS (
                  SELECT 1
                  FROM sgbstdn
                  -- WHERE sgbstdn_program_1 IN ('AA_LAR_LART', 'APP_NUR_NURA', 'AS_BUS_BADM', 'AA_SOC_PSYC', 'AS_HSC_PRNU', 'AAS_NUR_NURS', 'AS_PRE_PPMD', 'AA_EDU_EDUC', 'AAS_BUS_BUSN', 'AS_SCI_BIOL', 'AS_EGR_ENMC', 'AA_SOC_CRJT', 'AS_BUS_ACCT', 'AS_EGR_ENGR', 'AS_PPH_PPHM', 'APP_RAD_RADA', 'APP_DHG_DHYA', 'AA_ART_ART', 'AS_BUS_MGMT', 'AA_MUS_MUSC', 'AAS_PTA_PTHA', 'APP_PTA_PTAA', 'AA_COM_ENGL', 'AS_HSV_HSSW', 'AA_SOC_HIST', 'AAS_CHD_CDED', 'AS_PRE_PPVM', 'AS_CHD_ECEO', 'AA_SOC_SOCI', 'AAS_IND_INTD', 'AS_PRE_PPDE', 'AA_SOC_POSC', 'APP_VET_VETA', 'AAS_AVS_AVPP', 'AS_EGR_ENEE', 'AS_SCI_CHEM', 'AAS_CIS_CSPR', 'AA_LAN_SPAN', 'AAS_BUS_BADC', 'AAS_HR_HRES', 'AAS_DGM_DMSP', 'APP_OTA_OTAA', 'CER_CHD_CDCM', 'AS_MTH_MATH', 'AS_BUS_MIS', 'AA_SOC_PLGL', 'AAS_ACC_ACAS', 'AS_CHD_ECEN', 'AAS_VET_VETT', 'AA_COM_INED')
               ) THEN 'T'  
    ELSE 'F' 
  END is_active
FROM spriden RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm
              LEFT JOIN goremal ON spriden_pidm = goremal_pidm
                   JOIN sgbstdn ON spriden_pidm = sgbstdn_pidm
Where Spriden_Change_Ind Is Null 

  And Spriden_Entity_Ind = 'P'
  And Spriden_Pidm In (Select * From Pop)","Student"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"inst.Location","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Locations File

Fields: nk,campus,name,latitude,longitude,address,comments,is_active
*/

--Campus, Building, and Room
SELECT NVL(TRIM(ft.campus), '') || '$$' || NVL(TRIM(ft.bldg), '') || '$$' || NVL(TRIM(ft.room), '') AS nk
       , NVL(TRIM(ft.campus), '')                                 AS campus
       , NVL(TRIM(bt.txt), '') || ' ' || NVL(TRIM(ft.room), '')   AS name
       , '' AS latitude
       , '' AS longitude
       , '' AS address
       , '' AS comments
       , CASE 
           WHEN ft.inactive_date IS NULL THEN 'T'
           ELSE 'F'
         END                                                      AS is_active
FROM informix.facil_table ft
LEFT JOIN informix.bldg_table bt
       ON ft.bldg = bt.bldg
          AND ft.campus = bt.campus
WHERE 1=1
   AND ft.room <> ''

UNION

--Campus and Building
SELECT NVL(TRIM(ft.campus), '') || '$$' || NVL(TRIM(ft.bldg), '') AS nk
       , NVL(TRIM(ft.campus), '')                                 AS campus
       , NVL(TRIM(bt.txt), '')                                    AS name
       , '' AS latitude
       , '' AS longitude
       , '' AS address
       , '' AS comments
       , CASE 
           WHEN ft.inactive_date IS NULL THEN 'T'
           ELSE 'F'
         END                                                      AS is_active
FROM informix.facil_table ft
LEFT JOIN informix.bldg_table bt
       ON ft.bldg = bt.bldg
          AND ft.campus = bt.campus
WHERE 1=1
   AND ft.room = ''
   AND ft.bldg <> ''

UNION

--Just Campus
SELECT NVL(TRIM(ft.campus), '')                                   AS nk
       , NVL(TRIM(ft.campus), '')                                 AS campus
       , NVL(TRIM(ct.txt), '')                                    AS name
       , '' AS latitude
       , '' AS longitude
       , '' AS address
       , '' AS comments
       , CASE 
           WHEN ft.inactive_date IS NULL THEN 'T'
           ELSE 'F'
         END                                                      AS is_active
FROM informix.facil_table ft
LEFT JOIN informix.bldg_table bt
       ON ft.bldg = bt.bldg
          AND ft.campus = bt.campus
LEFT JOIN informix.campus_table ct  
       ON ft.campus = ct.campus     
WHERE 1=1
   AND ft.room = ''
   AND ft.bldg = ''
   
ORDER BY 1       ","Locations"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.seatsavail","select 
--a.SSBSECT_SUBJ_CODE || '$$' || a.SSBSECT_CRSE_NUMB  || '$$' || a.SSBSECT_TERM_CODE AS NK,
a.SSBSECT_CRN || '$$' ||a.SSBSECT_TERM_CODE AS NK,
a.SSBSECT_SEATS_AVAIL AVAIL_SEATS,
'T' AS IS_ACTIVE
from SSBSECT a
  left join scrlevl
  on a.SSBSECT_SUBJ_CODE = scrlevl_subj_code
  and a.SSBSECT_CRSE_NUMB = scrlevl_crse_numb
where 1=1
and SCRLEVL_LEVL_CODE = 'NC' 
and a.SSBSECT_SSTS_CODE = 'A'
and a.SSBSECT_TERM_CODE > 201510
and a.ssbsect_camp_code = 'NCC'","SeatsAvail"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"catcc.TestSubject","WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
          THEN TO_NUMBER(stvtesc_max_value) || '.00'
          ELSE stvtesc_max_value
          END AS max_score
  , 'T' AS is_active
FROM stvtesc
WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')
)

-- wrapper query
SELECT * FROM testSubjects","TestSubject"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Course","-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
WHERE substr(scbcrse_eff_term, 1, 1) NOT IN ('6', '7', '8')
      AND LENGTH(scbcrse_subj_code) = 3
      AND LENGTH(scbcrse_crse_numb) = 3
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk -- This nk does not use the standard $$ concatenation since the platform currently shows the nk field in the UI. This affects the following dependent scripts that need to be in sync - section, studentCourse
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  ,CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE  WHEN SSBSECT_CRN IS NULL THEN 'F'
          WHEN scbcrse.scbcrse_csta_code IN ('A', 'P') THEN 'T' ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active. This may be member specific. Confirm code with BA/Member.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                      AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN SSBSECT ON (scbcrse.scbcrse_subj_code = ssbsect.ssbsect_subj_code 
                 AND scbcrse.scbcrse_crse_numb = ssbsect.ssbsect_crse_numb
                 AND ssbsect.ssbsect_vpdi_code = 'PCC')                                  
WHERE 
      (
       (scbdesc.scbdesc_term_code_eff = (SELECT MAX(scbdesc2.scbdesc_term_code_eff)
                                          FROM scbdesc scbdesc2
                                          WHERE scbdesc2.scbdesc_subj_code = scbdesc.scbdesc_subj_code AND 
                                                scbdesc2.scbdesc_crse_numb = scbdesc.scbdesc_crse_numb
                                                AND scbdesc2.scbdesc_term_code_eff <= maxEffectiveTerm.maxTerm)
                                      )
        OR
        scbdesc.scbdesc_term_code_eff IS NULL)
),

-- Assign default values
defaultValues AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM course
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Courses"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.SeatsAvail","-- extract seats available from banner
WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk.
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
WHERE szvcamp_vpdi_code = 'ACC'
  AND szvcamp_eab_enable = 'Y'
  AND ssbsect_ssts_code = 'O' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. we do not need to extract seats available for past terms.
  AND ssbsect_vpdi_code = 'ACC'
  AND SUBSTR(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM seatsAvail","Seats Available"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.StudentCourse","WITH 

coursesTemp AS (
  SELECT distinct NVL(COURSES.CRS_NAME,'') nk 
  FROM COLL_PRODUCTION.COURSES
    Join COLL_PRODUCTION.COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
   CRS_ACAD_LEVEL = 'UG'
    AND CRS_DEPTS IN (
        SELECT DISTINCT DEPTS_ID
        FROM   COLL_PRODUCTION. DEPTS
        WHERE  DEPTS_ACTIVE_FLAG='A')
),

termTemp AS (   
SELECT DISTINCT TERMS_ID nk
     FROM COLL_PRODUCTION.TERMS
    WHERE TERMS_ID IS NOT NULL AND
      TERM_REPORTING_YEAR > EXTRACT (YEAR FROM SYSDATE) - 10  AND
      TERM_REPORTING_YEAR    <= EXTRACT (YEAR FROM SYSDATE) + 10 AND
      (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
),

validStudents AS (
   SELECT DISTINCT X.STC_PERSON_ID nk 
   FROM COLL_PRODUCTION.STUDENT_ACAD_CRED X
   JOIN COLL_PRODUCTION.STC_STATUSES Y
        ON X.STUDENT_ACAD_CRED_ID = Y.STUDENT_ACAD_CRED_ID
   INNER JOIN COLL_PRODUCTION.PEOPLE_EMAIL PE
   ON X.STC_PERSON_ID = PE.ID     
   WHERE EXTRACT(YEAR FROM X.STUDENT_ACAD_CRED_CHGDATE) > EXTRACT(YEAR FROM SYSTIMESTAMP) - 2 AND PE.PERSON_EMAIL_ADDRESSES  NOT IN ('Yolanda.Bland@tridenttech.edu',
'Karen.Wrighten@tridenttech.edu',
'Brandon.Branham@tridenttech.edu',
'Sharon.Manigault@tridenttech.edu',
'Jamella.Jaglal@tridenttech.edu',
'Kimberly.Fowler@tridenttech.edu',
'Donna.Grant@tridenttech.edu',
'Gerald.Gadsden@tridenttech.edu',
'Jewell.Dingle@tridenttech.edu',
'Chanity.Wilson@tridenttech.edu',
'Sidney.Alston@tridenttech.edu',
'Laurie.Fladd@tridenttech.edu',
'Brian.Almquist@tridenttech.edu',
'Deborah.Thompson@tridenttech.edu',
'Marshall.Connor@tridenttech.edu',
'mikepatterson@my.tridenttech.edu',
'D''jaris.Whipper-lewis@tridenttech.edu',
'Kathy.Simmons@tridenttech.edu',
'annikajessen@my.tridenttech.edu'
)),

validStudentCourses AS (

SELECT DISTINCT 
      STC_PERSON_ID || '$$' || NVL(STC_TERM, '000001') || '$$' || NVL(STC_COURSE_NAME, '') nk, 
      STC_PERSON_ID student, 
      STC_TERM term, 
      STC_COURSE_NAME course, 
      CASE 
        WHEN SEC_TERM IS NOT NULL AND SEC_NAME IS NOT NULL THEN SEC_TERM || '-' || SEC_NAME 
        ELSE null
      END section, 
      GRD_GRADE              grade_cd,
     -- cast(GRD_VALUE AS numeric(7,2))   grade_points, 
      GRD_VALUE  grade_points, 
      CASE
   --      WHEN STC_CMPL_CRED = 0 THEN NVL(cast(STC_CRED AS numeric(7,2)), 0)
          WHEN STC_CMPL_CRED = 0 THEN NVL(STC_CRED, 0)
      -- ELSE  NVL(cast(STC_CMPL_CRED AS numeric(7,2)),0)
       ELSE  NVL(STC_CMPL_CRED,0)
       END  credits_attempted, 
      
     -- NVL(cast(STC_CMPL_CRED AS numeric(7,2)), 0)  credits_earned, 
      NVL(STC_CMPL_CRED, 0)  credits_earned, 

      case 
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'A' THEN 'REGISTERED'
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'N' THEN 'REGISTERED'
         WHEN GRD_GRADE = 'I' THEN 'IN_PROGRESS'  
       ELSE 'COMPLETED'
       END    status, 

      'T' is_active

  FROM COLL_PRODUCTION.STUDENT_ACAD_CRED
    JOIN COLL_PRODUCTION.STC_STATUSES
      ON STC_STATUSES.STUDENT_ACAD_CRED_ID = STUDENT_ACAD_CRED.STUDENT_ACAD_CRED_ID AND
         POS = '1'
    LEFT OUTER JOIN COLL_PRODUCTION.COURSE_SECTIONS  
      ON 
          SEC_TERM = STC_TERM AND
          EXTRACT(YEAR FROM SEC_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2 AND
         (SEC_NO < '600' OR SEC_NO > '799') AND
         SEC_SUBJECT = STC_SUBJECT AND  
         SEC_NO = STC_SECTION_NO AND
         SEC_COURSE_NO = SUBSTR(STC_COURSE_NAME,INSTR(STC_COURSE_NAME,'-')+1)
    LEFT OUTER JOIN COLL_PRODUCTION.GRADES
      ON GRD_GRADE_SCHEME = STUDENT_ACAD_CRED.STC_GRADE_SCHEME AND
         GRADES_ID = NVL(STUDENT_ACAD_CRED.STC_VERIFIED_GRADE,'0') 
     JOIN coursesTemp on STC_COURSE_NAME = coursesTemp.nk
     JOIN termTemp on STC_TERM = termTemp.nk
   JOIN validStudents on  STUDENT_ACAD_CRED.STC_PERSON_ID = validStudents.nk
  WHERE STUDENT_ACAD_CRED.STC_PERSON_ID IS NOT NULL AND
        STC_STATUS NOT IN ('C','D','W','DG','X','NC') AND
        STC_REPL_CODE IS NULL AND
        (NVL(STC_SECTION_NO, '') < '600' OR NVL(STC_SECTION_NO, '') > '799')
        AND (GRD_GRADE IS NULL OR GRD_GRADE NOT IN ('AU','U','W','F','DP','NC','EX','NR','PR','WD','WO','CT','CS','CW','AD','NC','WP','WF','CT'))
  )
   
    SELECT * FROM validStudentCourses  ","StudentCourse"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.program","WITH max_eff AS (
SELECT max(SOBCURR.SOBCURR_TERM_CODE_INIT) max_eff, SOBCURR.SOBCURR_PROGRAM pgrm
  FROM SOBCURR SOBCURR
  GROUP BY SOBCURR.SOBCURR_PROGRAM
)

SELECT DISTINCT
SOBCURR.SOBCURR_PROGRAM || '$$' || STVTERM.STVTERM_ACYR_CODE AS Nk,
SOBCURR.SOBCURR_PROGRAM AS cd,
to_number(STVTERM.STVTERM_ACYR_CODE) AS cat_yr,
--SMRPRLE.SMRPRLE_PROGRAM_DESC AS \\\""name\\\"", -- Old logic
DBMS_LOB.SUBSTR (customProgram.zcbprgm_short_desc, 50) AS \\\""name\\\"", -- limiting to 50 characters as spec supports 50 characters. This is a custom Wallace table.
--SMRPRLE.SMRPRLE_PROGRAM_DESC AS \\\""desc\\\"", -- Old logic
COALESCE(DBMS_LOB.SUBSTR (customProgram.zcbprgm_desc, 3000), 'No Description Available') AS \\\""desc\\\"", -- Limiting CLOB to 3000 characters as oracle won't allow selecting the entire feed. This may be adjusted as necessary. This is a custom Wallace table.
-- DECODE (SOBCURR.SOBCURR_DEGC_CODE, 'AS', 60,
--                                     'AAS', 67,
--                                     'STC', 9,
--                                     'CERT', 50,
--                                     99) AS credits, -- Confirm with BA -- Old logic
COALESCE (customProgram.zcbprgm_hours, 0) AS credits,
'' AS enrollment_notes,
'' AS registration_notes,
COALESCE (SUBSTR(SOBCURR.SOBCURR_PROGRAM, CAST(INSTR(SOBCURR.SOBCURR_PROGRAM, '-', -1) AS NUMBER) +1), '') AS area_of_study,
'' AS concentration,
SOBCURR.SOBCURR_DEGC_CODE AS \\\""credential\\\"",
DECODE (STVMAJR.STVMAJR_CIPC_CODE, NULL, NULL,
                                    SUBSTR(STVMAJR.STVMAJR_CIPC_CODE,1,2) || '.' || SUBSTR(STVMAJR.STVMAJR_CIPC_CODE,3)
                                    ) AS CIP,
CASE WHEN SOBCURR.SOBCURR_DEGC_CODE IN ('AA','AS') THEN 'T' ELSE 'F' END AS is_transfer, -- Need to confirm
--CASE WHEN SOBCURR.SOBCURR_TERM_CODE_INIT = max_eff.max_eff THEN 'T' ELSE 'F' END AS is_active -- Removed this logic for Wallace and implemented custom logic below.
CASE WHEN (sormcrl_rec_ind = 'Y'
          and sormcrl_adm_ind = 'Y'
          and sormcrl_stu_ind = 'Y'
          and sormcrl_his_ind = 'Y'
          and sormcrl_dau_ind = 'Y') THEN 'T'
      ELSE 'F' END AS is_active
FROM SOBCURR SOBCURR
  LEFT JOIN STVTERM STVTERM ON SOBCURR.SOBCURR_TERM_CODE_INIT = STVTERM.stvterm_code
  LEFT JOIN SMRPRLE SMRPRLE ON SMRPRLE.SMRPRLE_PROGRAM = SOBCURR.SOBCURR_PROGRAM
  LEFT JOIN max_eff max_eff ON max_eff.pgrm = SOBCURR.SOBCURR_PROGRAM
--  LEFT JOIN SGBSTDN SGBSTDN ON SGBSTDN.SGBSTDN_PROGRAM_1 = SOBCURR.SOBCURR_PROGRAM
--  JOIN (
--        SELECT DISTINCT SGBSTDN_1.SGBSTDN_PROGRAM_1, max(SGBSTDN_1.SGBSTDN_TERM_CODE_EFF) AS max_eff_term
--          FROM SGBSTDN SGBSTDN_1
--          GROUP BY SGBSTDN_1.SGBSTDN_PROGRAM_1
--        ) T ON T.SGBSTDN_PROGRAM_1 = SGBSTDN.SGBSTDN_PROGRAM_1 AND T.max_eff_term = SGBSTDN.SGBSTDN_TERM_CODE_EFF
  LEFT JOIN STVMAJR STVMAJR ON STVMAJR.STVMAJR_CODE = (SUBSTR(SOBCURR.SOBCURR_PROGRAM, CAST(INSTR(SOBCURR.SOBCURR_PROGRAM, '-', -1) AS NUMBER) +1))
  LEFT JOIN SORMCRL ON sobcurr_curr_rule = sormcrl_curr_rule -- Added to implement logic for determining current programs at Wallace.
  LEFT JOIN WSCC.ZCBPRGM customProgram ON customProgram.zcbprgm_program = SOBCURR_PROGRAM -- Custom logic implemented at Wallace to store program description and credits. 
  WHERE SOBCURR.SOBCURR_PROGRAM NOT LIKE '%UNDC%' -- Exclude undeclared programs","Programs"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"core.Student","-- Full range of terms to include
with all_terms as (
  select distinct nk
    from eab_trm
   where to_date(term_start_dt,'YYYY-MM-DD') >= sysdate-3*365
     and college = 'CC'
),
-- Terms where a student is considered active
cur_terms as (
  select distinct nk
    from eab_trm
   where to_date(TERM_END_DT, 'YYYY-MM-DD') >= SYSDATE
     and college = 'CC'
),
-- Grab all students from the full range
all_enr_list as (
  select id as stu_id
    from eab_stdnt_active
   where current_enroll_cc = 'Y'
     and academic_period in (select nk from all_terms)
),
-- Grab currently enrolled students
cur_enr_list as (
  select id as stu_id
    from eab_stdnt_active
   where current_enroll_cc = 'Y'
     and academic_period in (select nk from cur_terms)
),
-- Get students who have applied for current and future terms
cur_app_list as (
  select esa.id as stu_id
    from saradap s join eab_stdnt_active esa on s.saradap_pidm = esa.person_uid
                                            and esa.current_enroll_cc = 'Y'
   where s.saradap_term_code_entry in (select * from cur_terms)
),
-- Get all students
all_stu as (
  select stu_id from all_enr_list
  union
  select stu_id from cur_app_list
),
-- Get current students
cur_stu as (
  select stu_id from cur_enr_list
  union
  select stu_id from cur_app_list
),
-- CREATE A BASE LIST OF STUDENTS
stu_list as (
  select id as nk,
         username,
         email,
         replace(first_name, unistr('\\\\0027'), chr(39)) first_name,
         replace(last_name, unistr('\\\\0027'), chr(39)) last_name,
         birthdate,
         case
           when stu_id is not null then 'T'
           else 'F'
         end as is_active
   FROM EAB_STDNT_ACTIVE left join cur_stu on id = stu_id
  WHERE id in (select stu_id from all_stu)
    and upper(last_name) not like '**%**'
)
-- Create unique list of students
SELECT distinct nk,
       coalesce(username, first_name||substr(last_name,1,4)||'@noemail.com') username,
       coalesce(email, first_name||substr(last_name,1,4)||'@noemail.com') email,
       first_name,
       last_name,
       birthdate, 
       is_active
  from stu_list","Student"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"reg.AccountHold","SELECT A.EMPLID||'$$'||A.SRVC_IND_CD AS NK,
       A.EMPLID AS STUDENT,
       A.SRVC_IND_CD AS IDENTIFIER,
       TRIM(COALESCE(A.SRVC_IND_REASON, A.SRVC_IND_CD)) AS MESSAGE,
       CASE
         WHEN A.SCC_SI_END_DT IS NOT NULL THEN
           CASE
             WHEN A.SRVC_IND_ACTIVE_DT < SYSDATE AND A.SCC_SI_END_DT > SYSDATE THEN 'T'
             ELSE 'F'
           END
         ELSE
           CASE
             WHEN A.SRVC_IND_ACTIVE_DT < SYSDATE THEN 'T'
             ELSE 'F'
           END
       END AS IS_ACTIVE
  FROM PS_SRVC_IND_DATA A JOIN PS_PERSONAL_DATA B ON A.EMPLID = B.EMPLID
   WHERE A.INSTITUTION = 'DC279' 
     AND A.SRVC_IND_ACTIVE_DT >= to_date('2016-06-01', 'YYYY-MM-DD')
  ORDER BY 1","AccountHolds"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.StudentCourse","/*
Student Course  I confirmed grades that should correspond to status of 'complete'
--  A, B, C, D, and anything with a 'P' PA, PB, etc
*/

WITH

TERMS_TEMP as (

SELECT DISTINCT SUBSTRING(TERMS_ID,1,6) nk
  FROM TERMS
    where TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          TERMS_ID is not NULL and
          TERM_REG_START_DATE is not null
		  and TERMS_ID NOT LIKE 'P%'
		  AND TERMS_ID NOT LIKE '%E'
		  AND TERMS_ID NOT LIKE '%C2'
		  AND TERMS_ID NOT LIKE '%CL'

		--  SELECT * FROM TERMS
),

validDepartments AS (
SELECT DISTINCT DEPTS_ID  nk
 FROM    DEPTS
 WHERE  DEPTS_ACTIVE_FLAG='A' 
 --AND DEPTS_TYPE='A'
),

validSubjects AS (
  SELECT DISTINCT SUBJECTS_ID nk
  FROM SUBJECTS 
  where SUBJ_DESC NOT IN ('Ability to Benefit', 'Basic Math Equivalency', 'Basic Skills Development', 
                   'Communications I Equivalency', 'Communications II Equivalency', 'Course Waiver') AND
        SUBJ_DESC NOT LIKE 'DO NOT USE%' 
		--AND SUBJECTS_ID not in ('COMM1', 'COMM2', 'COMMFND', 'MATHALG', 'MATHPRE', 'RDGCOMM', 'RDGFUND', 'RDGNONE', 'XKAP')
),

validCourses AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
    Join validSubjects on validSubjects.nk = CRS_SUBJECT
    Join validDepartments on validDepartments.nk = CRS_DEPTS
  Where 
        COURSES.CRS_MIN_CRED > 0 
     --  AND CRS_NO <> '999' AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
      --      CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'
	  ) 
		
	-- select * from validCourses


,validSections as (
			SELECT distinct 
      COURSE_SECTIONS.COURSE_SECTIONS_ID nk

  FROM COURSE_SECTIONS
  -- LEFT OUTER JOIN COURSE_SEC_FACULTY SELECT * FROM COURSE_SEC
  --   ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
  -- LEFT OUTER JOIN PERSON
   --  ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
   --LEFT OUTER JOIN COURSE_SECTIONS_LS
     -- ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND
      --   COURSE_SECTIONS_LS.POS = '1'
    JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID AND
          TERMS_LS.POS = '1'
		  and TERMS_ID NOT LIKE 'P%'
		  AND TERMS_ID NOT LIKE '%E'
		  AND TERMS_ID NOT LIKE '%C2'
		  AND TERMS_ID NOT LIKE '%CL'

    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1' 
		-- AND (SEC_STATUS = 'A' OR SEC_STATUS = 'C' OR SEC_STATUS = 'GH')
		and  COURSE_SECTIONS.SEC_TERM  NOT LIKE 'P%'
    Where (CAST(LEFT(REPLACE(SEC_TERM,'P010',0000),4) AS INT) > YEAR(GETDATE()) - 2 ) -- 	-- Conversion failed when converting the varchar value 'P010' to data type int
--select * from COURSE_SECTIONS
  --     AND (SEC_NO < '600' OR SEC_NO > '799')

			)
		

 -- select * from validSections
SELECT DISTINCT 
      STC_PERSON_ID + '$$' + ISNULL(STC_TERM, '000001') + '$$' + ISNULL(STC_COURSE_NAME, '') nk, 
      STC_PERSON_ID student, 
      ISNULL(STC_TERM, '000001') term, 
      ISNULL(STC_COURSE_NAME, '') course, 
      ISNULL(vs.nk, '') section, 
      ISNULL(GRD_GRADE, '') grade_cd,
      cast(ISNULL(cast(GRD_VALUE as numeric(7,2)), '0') AS VARCHAR)   grade_points, 
      CASE
         WHEN STC_CMPL_CRED = 0 THEN cast(ISNULL(cast(STC_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE  cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)),0)  AS VARCHAR)
       END  credits_attempted, 
      
      CASE
         WHEN STC_VERIFIED_GRADE IS NOT NULL THEN cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       END  credits_earned, 

      case 
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'A' THEN 'REGISTERED'
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'N' THEN 'REGISTERED'
         WHEN GRD_GRADE = 'I' THEN 'IN_PROGRESS'    
         WHEN GRD_GRADE = 'S' THEN 'COMPLETED'  
         WHEN GRD_GRADE = 'T' THEN 'COMPLETED'
		 WHEN GRD_GRADE like 'P%' THEN 'COMPLETED'
		 WHEN GRD_GRADE IN ('A', 'B','C', 'D') THEN 'COMPLETED' 
	    ELSE 'COMPLETED'
       END    status, 
      'T' is_active

  FROM STUDENT_ACAD_CRED
    JOIN STC_STATUSES
      ON STC_STATUSES.STUDENT_ACAD_CRED_ID = STUDENT_ACAD_CRED.STUDENT_ACAD_CRED_ID AND
         POS = '1'
    LEFT OUTER JOIN COURSE_SECTIONS
      ON SEC_TERM = STC_TERM 
	--   AND(SEC_NO < '600' OR SEC_NO > '799') 
		 AND
         SEC_SUBJECT = STC_SUBJECT AND  
         SEC_NO = STC_SECTION_NO 
		-- AND SEC_COURSE_NO = PARSENAME(REPLACE(STC_COURSE_NAME,'-', '.'),1)     
         
    LEFT OUTER JOIN GRADES
      ON GRD_GRADE_SCHEME = STUDENT_ACAD_CRED.STC_GRADE_SCHEME AND
         GRADES_ID = ISNULL(STUDENT_ACAD_CRED.STC_VERIFIED_GRADE,'0') 
	JOIN TERMS_TEMP on STC_TERM = TERMS_TEMP.nk
	JOIN validCourses on STC_COURSE_NAME = validCourses.nk
	LEFT OUTER JOIN validSections vs on vs.nk = COURSE_SECTIONS_ID
  WHERE STUDENT_ACAD_CRED.STC_PERSON_ID IS NOT NULL 
     -- AND STC_STATUS NOT IN ('C','D','W','DG','X','NC') 
		AND STC_REPL_CODE IS NULL
	--	 AND(ISNULL(STC_SECTION_NO, '') < '600' OR ISNULL(STC_SECTION_NO, '') > '799')
     --   AND ISNULL(GRD_GRADE,'') NOT IN ('AU','U','W','F','DP','NC','EX','NR','PR','WD','WO','CT','CS','CW','AD','NC','WP','WF','CT')

 --     I use this subquery to ONLY pull people's ENTIRE TRANSCRIPT who have registration from this semester
         AND EXISTS (SELECT 1 FROM STUDENT_ACAD_CRED X
                       JOIN STC_STATUSES Y
                            ON X.STUDENT_ACAD_CRED_ID = Y.STUDENT_ACAD_CRED_ID
						JOIN TERMS T ON T.TERMS_ID = X.STC_TERM 
									AND T.TERM_END_DATE > DATEADD(mm, -6,GETDATE()) AND T.TERM_END_DATE < DATEADD(mm, 6,GETDATE())
                     WHERE 
                         --  (X.STC_SECTION_NO < '600' OR X.STC_SECTION_NO > '799') 
						 1=1 
						 AND  Y.POS= 1    AND 
                           (Y.STC_STATUS='N' OR
                            Y.STC_STATUS='A') AND
                           STUDENT_ACAD_CRED.STC_PERSON_ID = X.STC_PERSON_ID) 
						   


/*SELECT DISTINCT 
      STC_PERSON_ID + '$$' + ISNULL(STC_TERM, '000001') + '$$' + ISNULL(STC_COURSE_NAME, '') nk, 
      STC_PERSON_ID student, 
      ISNULL(STC_TERM, '000001') term, 
      ISNULL(STC_COURSE_NAME, '') course, 
      ISNULL(COURSE_SECTIONS_ID, '') section, 
      ISNULL(GRD_GRADE, '') grade_cd,
      cast(ISNULL(cast(GRD_VALUE as numeric(7,2)), '0') AS VARCHAR)   grade_points, 
      CASE
         WHEN STC_CMPL_CRED = 0 THEN cast(ISNULL(cast(STC_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE  cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)),0)  AS VARCHAR)
       END  credits_attempted, 
      
      CASE
         WHEN STC_VERIFIED_GRADE IS NOT NULL THEN cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       END  credits_earned, 

      case 
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'A' THEN 'REGISTERED'
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'N' THEN 'REGISTERED'
         WHEN GRD_GRADE = 'I' THEN 'IN_PROGRESS'    
         WHEN GRD_GRADE = 'S' THEN 'COMPLETED'  
         WHEN GRD_GRADE = 'T' THEN 'COMPLETED'
       ELSE 'COMPLETED'
       END    status, 
      'T' is_active

  FROM STUDENT_ACAD_CRED
    JOIN STC_STATUSES
      ON STC_STATUSES.STUDENT_ACAD_CRED_ID = STUDENT_ACAD_CRED.STUDENT_ACAD_CRED_ID AND
         POS = '1'
    LEFT OUTER JOIN COURSE_SECTIONS
      ON SEC_TERM = STC_TERM AND
         (SEC_NO < '600' OR SEC_NO > '799') AND
         SEC_SUBJECT = STC_SUBJECT AND  
         SEC_NO = STC_SECTION_NO AND
         SEC_COURSE_NO = PARSENAME(REPLACE(STC_COURSE_NAME,'-', '.'),1)     
         
    LEFT OUTER JOIN GRADES
      ON GRD_GRADE_SCHEME = STUDENT_ACAD_CRED.STC_GRADE_SCHEME AND
         GRADES_ID = ISNULL(STUDENT_ACAD_CRED.STC_VERIFIED_GRADE,'0') 
  WHERE STUDENT_ACAD_CRED.STC_PERSON_ID IS NOT NULL AND
        STC_STATUS NOT IN ('C','D','W','DG','X','NC') AND
        STC_REPL_CODE IS NULL AND
        (ISNULL(STC_SECTION_NO, '') < '600' OR ISNULL(STC_SECTION_NO, '') > '799')
        AND ISNULL(GRD_GRADE,'') NOT IN ('AU','U','W','F','DP','NC','EX','NR','PR','WD','WO','CT','CS','CW','AD','NC','WP','WF','CT')

 --     I use this subquery to ONLY pull people's ENTIRE TRANSCRIPT who have registration from this semester
         AND EXISTS (SELECT 1 FROM STUDENT_ACAD_CRED X
                       JOIN STC_STATUSES Y
                            ON X.STUDENT_ACAD_CRED_ID = Y.STUDENT_ACAD_CRED_ID
						JOIN TERMS T ON T.TERMS_ID = X.STC_TERM 
									AND T.TERM_END_DATE > DATEADD(mm, -6,GETDATE()) AND T.TERM_END_DATE < DATEADD(mm, 6,GETDATE())
                     WHERE 
                           (X.STC_SECTION_NO < '600' OR X.STC_SECTION_NO > '799') AND
                           Y.POS= 1    AND 
                           (Y.STC_STATUS='N' OR
                            Y.STC_STATUS='A') AND
                           STUDENT_ACAD_CRED.STC_PERSON_ID = X.STC_PERSON_ID) */","StudentCourse"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.SectionTime","WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE null
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
        --WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NULL
        --  THEN ssrmeet_room_code
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'A' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                              AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code) -- Lookup day of week code
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. We do not need to extract sections times for past terms as section times are used for students to build their schedule.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM sectionTime","SectionTime"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"reg.StudentTestScore","
WITH TMP_1 AS (
SELECT DISTINCT
   P.ID student
FROM
   PERSON P
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'
),

TMP_2 AS (
SELECT DISTINCT
   P.ID  
FROM
   PERSON P
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         A.APPL_APPLICANT NOT IN 
         (
            SELECT
               student
            FROM
               TMP_1
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
      JOIN TERMS T ON
         A.APPL_START_TERM = T.TERMS_ID
),

TMP_3 AS (SELECT * FROM TMP_1 UNION SELECT * FROM TMP_2),

STU_TEMP AS (
SELECT DISTINCT
   substring(P.ID,1,7) stt_nk
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE_C ON    
         P.ID = PE_C.ID
            AND  
         PE_C.PERSON_EMAIL_TYPES = 'C'
      LEFT JOIN PEOPLE_EMAIL PE_O ON    
         P.ID = PE_O.ID
            AND  
         PE_O.PERSON_EMAIL_TYPES = 'O'
      LEFT JOIN PEOPLE_EMAIL PE_S ON    
         P.ID = PE_S.ID
            AND  
         PE_S.PERSON_EMAIL_TYPES = 'S'
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
           
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
		 )

SELECT
   TS.student+'$$'+SNC.STNC_NON_COURSE as nk,
   TS.student,
   SNC.STNC_NON_COURSE AS test_subject,
   CAST(COALESCE(SNC.STNC_SCORE,0) AS NUMERIC(7,2)) AS score,
   'T' AS is_active
FROM
   TMP_3 TS,
   STUDENT_NON_COURSES SNC
WHERE
   TS.student = SNC.STNC_PERSON_ID
      AND
   SNC.STNC_STATUS = 'A'
   and TS.student in (SELECT * from STU_TEMP)","Applicant - Student Test Score"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"reg.ProgramSlot","SELECT
REPLACE(a.CURRICULUM_TRACKS_ID, '*', '$$') + '$$' + CAST(b.POS AS VARCHAR(5)) as nk
, REPLACE(a.CURRICULUM_TRACKS_ID, '*', '$$') as program
, b.POS as slot
, CTK_COURSE_BLOCKS as course_group
, c.CBL_DESC as \\\""desc\\\""
, 'T' as is_active
from CURRICULUM_TRACKS a
left join CURRICULUM_TRACKS_LS b
on a.CURRICULUM_TRACKS_ID = b.CURRICULUM_TRACKS_ID  
left join COURSE_BLOCKS as c on b.CTK_COURSE_BLOCKS=c.COURSE_BLOCKS_ID","ProgramSlot"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Term","-- get Terms from Banner
WITH term AS (
  SELECT 
  szvterm_code nk, 
  szvterm_desc \\\""name\\\"", 
  szvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(szvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and szvterm. If not available, assign default date
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(szvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and szvterm. If not available, assign default date
  to_char(szvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(szvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case 
    When (szvterm_Desc Like '%Fall%'
    or szvterm_Desc Like '%Winter%'
    or szvterm_Desc Like '%Spring%'
    or szvterm_Desc Like '%Summer%') 
    and szvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM szvterm 
  JOIN sfrrsts ON szvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code = 'RW' -- Confirm registration codes to include with BA/Member
  AND sfrrsts_ptrm_code = 'F15' -- Confirm ptrm code to include with BA/Member
  AND substr(szvterm_code,1,1) NOT IN ('6', '7', '8')
  AND szvterm_vpdi_code = 'PCC'
  AND sfrrsts.SFRRSTS_VPDI_CODE = 'PCC'
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in szvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
SELECT
  szvterm_code nk,
  szvterm_desc \\\""name\\\"",
  szvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(szvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(szvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case
    When (szvterm_Desc Like '%Fall%'
    or szvterm_Desc Like '%Winter%'
    or szvterm_Desc Like '%Spring%'
    or szvterm_Desc Like '%Summer%') 
    and szvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM szvterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = szvterm_code
                   AND sfrrsts_rsts_code = 'RW' -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_ptrm_code = 'F15'    -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_vpdi_code = 'PCC') 
      AND szvterm_vpdi_code = 'PCC'             
      AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8', '0')
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM finalDataSet","Terms"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.CourseType","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Course Type File

Fields: nk,name,is_active
*/

SELECT NVL(it.im, '')      AS nk
       , NVL(it.descr, '') AS name
       , CASE
           WHEN inactive_date IS NULL THEN 'T'
           ELSE 'F'
         END               AS is_active
FROM informix.im_table it
WHERE 1=1
ORDER BY 1    ","CourseType"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"inst.Location","SELECT
  nk,
  campus,
  name,
  latitude,
  longitude,
  address,
  comments,
  is_active
FROM EAB_LOC
WHERE CAMPUS LIKE 'C%'

union

SELECT distinct
  a.nk,
  b.campus,
  b.name,
  b.latitude,
  b.longitude,
  b.address,
  b.comments,
  b.is_active
FROM (select distinct substr(location, 0, instr(location, '$')-1) as nk
        from eab_sect_time
       where substr(location, -1, 1) = '$'
       order by location) a left join EAB_LOC b on a.nk = substr(b.nk, 0, instr(b.nk, '$')-1)
WHERE CAMPUS LIKE 'C%'
order by 1","Location"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.StudentCourse","-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE SUBSTR(stvterm_code, 1, 5) <= (SELECT MIN(SUBSTR(stvterm_code, 1, 5))
                                     FROM stvterm
                                     WHERE stvterm_start_date > sysdate)
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM CCCD_EAB_GENERAL_PERSON -- Custom view at Coastline that replaces SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM CCCD_EAB_GENERAL_PERSON -- Custom view at Coastline that replaces SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN CCCD_EAB_GENERAL_PERSON ON spriden_pidm = studentDroppedCrse.pidm -- Custom view at Coastline that replaces SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","Student Courses (Current & Dropped Courses)"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.CourseType","SELECT 
  stvschd_code nk,
  stvschd_desc name,
  'T' is_active
FROM stvschd","Course Type"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.Program","-- determine most recent term for each Program by finding the max term for each program in sobcurr
WITH maxEffectiveTerm AS (
SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
  FROM sobcurr
  GROUP BY sobcurr_program
),

-- extract program data from Banner
program AS (
SELECT DISTINCT
sobcurr_program || '$$' || stvterm_acyr_code AS nk,
sobcurr_program AS cd,
TO_NUMBER(stvterm_acyr_code) AS cat_yr,
smrprle_program_desc AS \\\""name\\\"",
smrprle_program_desc AS \\\""desc\\\"",
decode (sobcurr_degc_code, 'AS', 60,
                            'AA', 60,
                            'AAS', 67,
                            'STC', 9,
                            'CERT', 50,
                              99) AS credits, -- confirm degree code to credits conversion with BA/Member. This logic may differ for different colleges and will need to be adjusted accordingly.
'' AS enrollment_notes,
'' AS registration_notes,
 -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_' Confirm with BA/Memeber.
COALESCE (substr(sobcurr_program, 1, CAST(INSTR(sobcurr_program, '_') AS NUMBER) -1), '') AS area_of_study,
'' AS concentration,
sobcurr_degc_code AS \\\""credential\\\"",
DECODE (stvmajr_cipc_code, null, null,
                                    SUBSTR(stvmajr_cipc_code,1,2) || '.' || SUBSTR(stvmajr_cipc_code,3)
                                    ) AS cip,
CASE 
  WHEN sobcurr_degc_code IN ('AST', 'AAT') THEN 'T'
  ELSE CASE
         WHEN sobcurr_program IN ('2_AA_CHEM', '2_AA_DANCE', '2_AA_FREN', '2_AA_LASD', '2_AA_LABT', '2_AA_LAMA'
                              , '2_AA_LASCI', '2_AA_LAAH', '2_AA_LASBS', '2_AA_LSEE', '2_AA_MATH', '2_AA_NURS'
                              , '2_AA_LVN', '2_AA_PEACE', '2_AA_PHYS', '2_AA_POLS', '2_AA_PSYC', '2_AA_SPAN'
                              , '2_AA_THEA', '2_AA_VIET') THEN 'T' 
         ELSE 'F' 
      END
END AS is_transfer, 
CASE WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm 
        AND sobcurr_program LIKE '2%' THEN 'T' ELSE 'F' END AS is_active
FROM sobcurr
  LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
  LEFT JOIN smrprle ON smrprle_program = sobcurr_program
  LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
  LEFT JOIN sorcmjr ON sorcmjr_curr_rule = sobcurr_curr_rule
  LEFT JOIN stvmajr ON stvmajr_code = sorcmjr_majr_code -- Coastline specific logic
WHERE smrprle_program_desc IS NOT NULL
  )

-- Wrapper query
SELECT * FROM program","Programs"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"core.Student","/*

20161219
NAVBA-339
Student --  A couple of things
They recommend using the STUDENT table for STUDENT_ID nk for us
Increase student applicant window to 2-years 8 terms in the future
 Example if we were looking from today we should have applicants included through Fall 2018
For applicants, we should exclude application statuses of 'INQO', 'AAPW', 'AAPDW'

*/

WITH CURRENT_STUDENTS AS (SELECT DISTINCT
   --substring(P.ID,1,7) nk,
   S.STUDENTS_ID nk,
   isnull(PP.PERSON_PIN_USER_ID,'') username,
   isnull(PE.PERSON_EMAIL_ADDRESSES,'') email,
   REPLACE(P.FIRST_NAME, '`', '``') FIRST_NAME,
   P.LAST_NAME last_name,
   REPLACE(CONVERT(CHAR(10), P.BIRTH_DATE, 111) , '/','-') birthdate
FROM
STUDENTS S JOIN 
   PERSON P
   ON P.ID = S.STUDENTS_ID
 
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'PRI'
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1')

SELECT nk,username,email,FIRST_NAME,last_name,birthdate, 't' is_active from CURRENT_STUDENTS

UNION 

SELECT DISTINCT
  substring(P.ID,1,7) nk,
 -- S.STUDENTS_ID nk,
   isnull(PP.PERSON_PIN_USER_ID,'') username,
   isnull(PE.PERSON_EMAIL_ADDRESSES,'') email,
   REPLACE(P.FIRST_NAME, '`', '``') FIRST_NAME,
   P.LAST_NAME last_name,
   REPLACE(CONVERT(CHAR(10), P.BIRTH_DATE, 111) , '/','-') birthdate,
   't' is_active
FROM
-- select * from STUDENTS
--STUDENTS S JOIN 
   PERSON P
  -- ON P.ID = S.STUDENTS_ID  
 JOIN PERSON_PIN PP ON      
      P.ID = PP.PERSON_PIN_ID
  LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'PRI'
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
        substring(A.APPL_APPLICANT,1,7) NOT IN 
         (
            SELECT
               nk
            FROM
               CURRENT_STUDENTS
         )
            AND 
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
		
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS NOT IN ('INQO', 'AAPW', 'AAPDW') -- 20161219 
      JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()-365
            AND
         A.APPL_START_TERM = T.TERMS_ID

		-- select * from APPL_STATUSES 'INQO', 'AAPW', 'AAPDW'


	 --	SELECT GETDATE()-365 FROM APPL_STATUSES","Student"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.StudentTerm","WITH studentTerm AS (
SELECT NK,
  STUDENT,
  TERM,
  \\\""PROGRAM\\\"",
  IS_ACTIVE
FROM zst_eab_stuterm_extract
WHERE MULTI_SOURCE = 'ACC'

)

-- wrapper query
select * from studentTerm","Student Terms"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.Program","-- determine most recent term for each Program by finding the max term for each program in sobcurr
WITH maxEffectiveTerm AS (
  SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
    FROM sobcurr
   GROUP BY sobcurr_program
),

programCredits as (
  select smbpgen.smbpgen_program,
         smbpgen.smbpgen_term_code_eff,
         smbpgen.smbpgen_active_ind,
         nvl(smbpgen.smbpgen_req_credits_overall, 0.0) as credits
    from smbpgen join (select sMBPGEN_PROGRAM, max(smbpgen_term_code_eff) max_term
                         from smbpgen
                        where smbpgen_active_ind = 'Y'
                        group by sMBPGEN_PROGRAM) s on smbpgen.smbpgen_program = s.smbpgen_program
                                                   and smbpgen.smbpgen_term_code_eff = s.max_term
),

-- Collection of program descriptions
prog_desc as (
  select smrpcmt_program, listagg(smrpcmt_text, '') within group (order by smrpcmt_text_seqno asc) smrpcmt_text -- within group (order by smrpcmt_prnt_code asc) as smrpcmt_text
    from smrpcmt s1 join (select s2.smrpcmt_program as prgm, max(s2.smrpcmt_term_code_eff) as term
                            from smrpcmt s2 group by s2.smrpcmt_program) mx on s1.smrpcmt_term_code_eff = Mx.term
                                                                           and s1.smrpcmt_program = Mx.Prgm
   where --smrpcmt_prnt_code is not null
      smrpcmt_text is not null
   group by smrpcmt_program
   order by smrpcmt_program
),

-- extract program data from Banner
program AS (
  SELECT DISTINCT
      sobcurr_program || '$$' || stvterm_acyr_code AS nk,
      sobcurr_program AS cd,
      TO_NUMBER(stvterm_acyr_code) AS cat_yr,
       smrprle_program_desc     	AS \\\""name\\\"",
      replace(replace(coalesce(smrpcmt_text, smrprle_program_desc, 'None'),chr(10)),chr(13)) AS \\\""desc\\\"",
      NVL(credits, 0.0) AS CREDITS, -- confirm degree code to credits conversion with BA/Member. This logic may differ for different colleges and will need to be adjusted accordingly.
      '' AS enrollment_notes,
      '' AS registration_notes,
       -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' --- instead of underscores '_' Confirm with BA/Memeber.
      sobcurr_program AS area_of_study,
      '' AS concentration,
      sobcurr_degc_code AS \\\""credential\\\"",
      DECODE (stvmajr_cipc_code,
              null,
              null,
              SUBSTR(stvmajr_cipc_code,1,2)||'.'||SUBSTR(stvmajr_cipc_code,3)) AS cip,
      CASE
        WHEN sobcurr_degc_code IN ('AAS','AS') THEN 'T'
        ELSE 'F'
      END AS is_transfer, -- Confirm with BA
      CASE
        WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T'
        ELSE 'F'
      END AS is_active
    FROM sobcurr LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
                 LEFT JOIN smrprle ON smrprle_program = sobcurr_program
                 LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
                 LEFT JOIN stvmajr ON stvmajr_code = sobcurr_program --(SUBSTR(sobcurr_program,1,CAST(INSTR(sobcurr_program,'_') AS NUMBER)-1))   -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_'. Confirm with BA/Memeber. Should match with area_of_study in SELECT portion of query.
                 LEFT JOIN programCredits ON sobcurr_program = smbpgen_program
                 LEFT JOIN prog_desc on sobcurr_program = smrpcmt_program
   where  smbpgen_term_code_eff >= '201212' -- per Bruce
    and  smbpgen_active_ind = 'Y' -- per Bruce
)

-- Wrapper query
SELECT * FROM program
","Programs"
1208,"Wiregrass Georgia Technical College",10505,"",48356,"Navigate:Wiregrass Georgia Technical College",47972,"Navigate",20,"cat.ProgramCredential","SELECT DISTINCT 
	sobcurr_degc_code AS nk
	, sobcurr_degc_code AS short_credential
	, 'T' AS is_active
FROM sobcurr
","ProgramCredentials"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.Course","with this_term as (
  select distinct nk
    from eab_trm
   where to_date(term_end_dt, 'YYYY-MM-DD') >= sysdate
     and college like 'P%'
     and rownum = 1
   order by nk asc
)
select distinct trim(ec1.cd) as nk,
       trim(ec1.cd) as cd,
       nvl(ec1.lvl, '1') as \\\""level\\\"",
       subject,
       case
        when department is not null then department
        when length(department) > 0 then department
        else subject
       end as dept,
       title, 
       nvl(replace(nvl(course_narrative, descr), chr(92), ''),' ') as \\\""desc\\\"",
       course_type,
       nvl(credits, 0) as credits,
       is_active
  from eab_crse ec1 join (select cd, max(term) max_term
                            from eab_crse
                           group by cd) ec2 on ec1.term = ec2.max_term
                                           and ec1.cd = ec2.cd
 WHERE college like 'P%'
   and term = (select nk from this_term)
 order by nk, is_active","Course"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"inst.Location","SELECT 
  stvbldg_code nk,
  slbbldg_camp_code campus,
  stvbldg_desc name, 
  '' latitude,
  '' longitude,
  CASE
    WHEN COALESCE(slbbldg_street_line1,
                  slbbldg_street_line2,
                  slbbldg_city,
                  slbbldg_zip,
                  'NA' ) = 'NA' then 'Address Not Available'
    ELSE slbbldg_street_line1 || ' ' ||
       slbbldg_street_line2 || ' ' ||
       slbbldg_city || ', ' ||
       slbbldg_zip
  END address,
  '' comments,
  CASE
    WHEN UPPER(slbbldg_camp_code) IN ('JB1','15M','JPA','JA3','JDM') THEN 'T' 
    ELSE 'F'
  END as is_active
FROM stvbldg LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL

UNION

SELECT DISTINCT 
  CASE 
    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code 
    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code 
  END AS nk,
  slbbldg_camp_code campus,
  CASE 
    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code 
  END AS name, 
  '' latitude,
  '' longitude,
  CASE 
    WHEN COALESCE(slbbldg_street_line1,
                  slbbldg_street_line2,
                  slbbldg_city,
                  slbbldg_zip,
                  'NA') = 'NA' then 'Address Not Available'
    ELSE slbbldg_street_line1 || ' ' ||
         slbbldg_street_line2 || ' ' ||
         slbbldg_city || ', ' ||
         slbbldg_zip
  END address, 
  '' comments,
  CASE
    WHEN UPPER(slbbldg_camp_code) IN ('JB1','15M','JPA','JA3','JDM') THEN 'T' 
    ELSE 'F'
  END as is_active
FROM stvbldg INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
             INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code 
WHERE slbbldg_camp_code IS NOT NULL

UNION 
SELECT 'INTRNT' nk, 'INTRNT' campus, 'Virtual Learning' name, '' latitude, '' longitude, 'Address not Available' address, '' comments, 'T' is_active FROM dual","Locations"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"event.TaskStatusFeed","--Fields  nk,student,event,repeated_by_nk,status,status_changed_ts,is_active
--Model Name  event.TaskStatusFeed
--Name  TaskStatusFeed
--Output  TaskStatusFeed_{data#DateStamp}.csv
--Query :


-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- Extract E_ORIENTATION related events - no repeat
E_ORIENTATION AS (
SELECT
  spriden_id || '$$E_ORIENTATION$$' AS nk
  , spriden_id AS student
  , 'E_ORIENTATION' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP -- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVRORNT
    ON SVRORNT_PIDM = studentPopulation.studentPidm
WHERE SVRORNT_DICD_CODE = 831		-- Coastline students
	AND SVRORNT_OSST_CODE IN ('ORIENT','ONLINE','LEGACY','SOAR')
--  AND SVRORNT_ACTIVITY_DATE > SYSDATE - (1/24)
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),



-- Extract each student's FIRST_TERM
FIRST_TERM AS(
select
    spriden_id
    ,saradap_pidm as student_pidm
    ,min(saradap_term_code_entry) as first_term_code
  from studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  WHERE spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
 group by spriden_id, saradap_pidm
),



-- Extract E_FIRST_ADVISOR_MEET related events - repeats on first term registration
E_FIRST_ADVISOR_MEET AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_FIRST_ADVISOR_MEET$$' || FIRST_TERM.FIRST_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_FIRST_ADVISOR_MEET' AS event
  , FIRST_TERM.FIRST_TERM_CODE  AS repeated_by_nk	
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVREDPL
    ON SVREDPL_PIDM = studentPopulation.studentPidm
  JOIN FIRST_TERM
    ON FIRST_TERM.STUDENT_PIDM = SVREDPL.SVREDPL_PIDM
    AND FIRST_TERM.FIRST_TERM_CODE = SVREDPL.SVREDPL_TERM_CODE
WHERE SVREDPL_DICD_CODE = 831		-- Coastline students
	AND SVREDPL_EPST_CODE IN ('ABBREV', 'COMPR')
--  AND SVREDPL_ACTIVITY_DATE > SYSDATE - (1/24)
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


  
-- Extract each student's NEXT_TERM
NEXT_TERM AS(
select
  spriden_id
  ,saradap_pidm as student_pidm   
	,LEAD(STVTERM.STVTERM_CODE, 1) OVER(PARTITION BY spriden_id, SARADAP_PIDM ORDER BY STVTERM.STVTERM_CODE) AS NEXT_TERM_CODE
  from studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  JOIN STVTERM
    ON STVTERM.STVTERM_CODE = saradap.saradap_term_code_entry
  WHERE SYSDATE BETWEEN STVTERM.STVTERM_START_DATE AND STVTERM.STVTERM_END_DATE
    and spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
),




-- Extract E_MEET_ADVISOR related events - repeats each next term
E_MEET_ADVISOR AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_MEET_ADVISOR$$' || NEXT_TERM.NEXT_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_MEET_ADVISOR' AS event
  , NEXT_TERM.NEXT_TERM_CODE AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVREDPL
    ON SVREDPL_PIDM = studentPopulation.studentPidm
  JOIN NEXT_TERM
    ON NEXT_TERM.STUDENT_PIDM = SVREDPL.SVREDPL_PIDM
    AND NEXT_TERM.NEXT_TERM_CODE = SVREDPL.SVREDPL_TERM_CODE
WHERE SVREDPL_DICD_CODE = 831		-- Coastline students
	AND SVREDPL_EPST_CODE IN ('ABBREV', 'COMPR')
--  AND SVREDPL_ACTIVITY_DATE > SYSDATE - (1/24)
	AND NEXT_TERM.NEXT_TERM_CODE IS NOT NULL
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),

-- Extract E_PLACEMENT related events - no repeat
E_PLACEMENT AS (
SELECT
  spriden_id || '$$E_PLACEMENT$$' AS nk
  , spriden_id AS student
  , 'E_PLACEMENT' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SORTEST
    ON SORTEST_PIDM = studentPopulation.studentPidm
WHERE SORTEST_TESC_CODE IN ('1PEN','1PES','1PRD','2PEN','2PES','2PLI','2PRD','3PEN','3PES','3PRD','6RLG','6RLL','6RLR','1PMA','2PMA','3PMA') 
  AND (SORTEST_TSRC_CODE = 'TAPE' OR SORTEST_TSRC_CODE IS NULL)
--  AND SORTEST_ACTIVITY_DATE > SYSDATE - (1/24)
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),



-- Get students who have registered
REGISTERED_STUDENTS AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm 
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
),


-- Extract E_REGISTER_FIRST_TERM related events - repeats on first term registration
E_REGISTER_FIRST_TERM AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_REGISTER_FIRST_TERM$$' || FIRST_TERM.FIRST_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_REGISTER_FIRST_TERM' AS event
  , FIRST_TERM.FIRST_TERM_CODE  AS repeated_by_nk	
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN FIRST_TERM
    ON FIRST_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


-- Extract E_REGISTER_NEXT_TERM related events - repeats each next term
E_REGISTER_NEXT_TERM AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_REGISTER_NEXT_TERM$$' || NEXT_TERM.NEXT_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_REGISTER_NEXT_TERM' AS event
  , NEXT_TERM.NEXT_TERM_CODE AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN NEXT_TERM
    ON NEXT_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE NEXT_TERM.NEXT_TERM_CODE IS NOT NULL
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),




finalDataSet AS (
SELECT * FROM E_ORIENTATION
UNION
SELECT * FROM E_FIRST_ADVISOR_MEET
UNION
SELECT * FROM E_MEET_ADVISOR
UNION
SELECT * FROM E_PLACEMENT       
UNION
SELECT * FROM E_REGISTER_FIRST_TERM    
UNION
SELECT * FROM E_REGISTER_NEXT_TERM 
)

SELECT * from finalDataSet","TaskStatusFeed"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"reg.AccountHold","with now_term as (
  select stvterm_code as a_term
    from stvterm
   where stvterm_end_date >= sysdate
     and rownum = 1
   order by stvterm_code asc
),
TERM_LIST AS (
  select stvterm_code,
         (select a_term from now_term) as now_term
    from stvterm
   where stvterm_code <= (select * from now_term)
     and rownum < 5
   order by stvterm_code desc
),
FUTR_TERM as (
  select stvterm_code
    from stvterm
   where stvterm_end_date >= sysdate
),
ACTV_TERM as (
  select stvterm_code,
         now_term,
         case
           -- summer
           when substr(now_term,-2,2) = '50' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- spring
           when substr(now_term,-2,2) = '10' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- fall
           when substr(now_term,-2,2) = '80' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              else 'F'
            end         
           -- other
           else 'F'
         end as is_active
    from term_list
),
studentPop AS (
  select sfrstcr_pidm as pidm
    from sfrstcr
   where sfrstcr_term_code in (select stvterm_code from ACTV_TERM where is_active='T')
     and sfrstcr_rsts_code IN ('RE','AU','RW','RC','R1','R2','R3','R4',
                               'R5','R6','R9','RL','U1','U2','U3','U4',
                               'U5','U6','U9')
  union
  select saradap_pidm as pidm
    from saradap
   where saradap_term_code_entry in (select stvterm_code from FUTR_TERM)
),
holds AS (
SELECT DISTINCT
  spriden_id || '$$' || sprhold_hldd_code AS nk
  , spriden_id AS student
  , sprhold_hldd_code AS identifier
  , stvhldd_desc AS message
  , 'T' AS is_active
FROM sprhold
  join stvhldd on stvhldd_code = sprhold_hldd_code
  JOIN studentPop ON studentPop.pidm = sprhold_pidm
  JOIN spriden ON studentPop.pidm = spriden_pidm
WHERE sprhold_from_date < sysdate 
  AND sprhold_to_date > sysdate
  AND spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
)
SELECT * FROM holds","AccountHold"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"catcc.testsubject","select 
       stvtesc_code nk, 
       replace(stvtesc_desc,'|','') name,
       to_number(stvtesc_max_value) max_score,
       'T' is_active
  from stvtesc
 where stvtesc_data_type = 'N'
","Test Subject"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.Section","WITH 
SFRRSTS_DROP_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.Sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('DW')

--and rsts.Sfrrsts_Term_Code = 201110 and rsts.Sfrrsts_ptrm_code = '16'
),
SFRRSTS_WITHDRAW_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('WD')
),
ptrm_desc as (
Select Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' as ptrm_desc
From Ssbsect
left join sobptrm on Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                  and ssbsect_term_code = sobptrm_term_code
),

section AS (
SELECT
  a.SSBSECT_CRN  || '$$' || a.SSBSECT_TERM_CODE  AS NK
  , a.SSBSECT_CRN AS CD
  /*, CASE WHEN a.SSBSECT_CRSE_NUMB like '%I'
          THEN a.SSBSECT_SUBJ_CODE || RTRIM(a.SSBSECT_CRSE_NUMB, 'I')
          ELSE a.SSBSECT_SUBJ_CODE || a.SSBSECT_CRSE_NUMB 
          END AS COURSE */
  , a.SSBSECT_SUBJ_CODE || a.SSBSECT_CRSE_NUMB AS COURSE
  , stvterm.stvterm_code as term 
  , CASE WHEN a.SSBSECT_CRSE_NUMB like '%I'
          THEN 'ONL'
          ELSE nvl(stvcamp_code,'DEFAULT')
          END as CAMPUS
  , a.SSBSECT_MAX_ENRL AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , CASE WHEN instructor.SPRIDEN_LAST_NAME IS NULL THEN 'TBD' 
  ELSE instructor.SPRIDEN_LAST_NAME || ', ' 
  || instructor.SPRIDEN_FIRST_NAME
  --|| ' - '
  --|| ptrm_desc.ptrm_desc
  END AS INSTRUCTOR_NAME
  , nvl(to_char(b.SSRMEET_START_DATE,'YYYY-MM-DD'),'2000-01-01') AS CLASS_START_DT
  , nvl(to_char(b.SSRMEET_END_DATE, 'YYYY-MM-DD'), '2000-01-02') AS CLASS_END_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_Start_Date,'YYYY-MM-DD'), to_char(ssrmeet_start_date, 'YYYY-MM-DD'),'2000-01-01') as DROP_START_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as DROP_END_DT
  , coalesce(to_char(SFRRSTS_WITHDRAW_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as WITHDRAW_END_DT
  , CASE WHEN (a.SSBSECT_SSTS_CODE = 'A' AND a.SSBSECT_CAMP_CODE = 'M') THEN 'T' ELSE 'F' END AS IS_ACTIVE
FROM ssbsect a
  --creating campus lookup
  join stvcamp on stvcamp_code = SSBSECT_CAMP_CODE
  --creating term lookup
  join stvterm on stvterm_code = ssbsect_term_code
  --instructor info
  LEFT OUTER JOIN (
    SELECT SIRASGN_TERM_CODE, SIRASGN_CRN, SIRASGN_PIDM, SIRASGN_PRIMARY_IND, SPRIDEN_ID, SPRIDEN_FIRST_NAME, SPRIDEN_LAST_NAME
    FROM SIRASGN a
      JOIN SPRIDEN b ON a.sirasgn_pidm = b.spriden_pidm AND b.spriden_change_ind IS NULL  
      WHERE SIRASGN_CATEGORY = '01' AND SIRASGN_PRIMARY_IND = 'Y'
    )  instructor
    ON instructor.SIRASGN_TERM_CODE = a.SSBSECT_TERM_CODE AND instructor.SIRASGN_CRN = a.SSBSECT_CRN
  --meeting info
  LEFT OUTER JOIN (
    SELECT * FROM SSRMEET)
     b ON b.SSRMEET_TERM_CODE = a.SSBSECT_TERM_CODE AND b.SSRMEET_CRN = a.SSBSECT_CRN
  --joins for drop and withdraw dates
  LEFT JOIN SFRRSTS_DROP_DATES on ssbsect_term_code = SFRRSTS_DROP_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_DROP_DATES.Sfrrsts_ptrm_code
  LEFT JOIN SFRRSTS_WITHDRAW_DATES on ssbsect_term_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_ptrm_code
  /*
  LEFT JOIN ptrm_desc on ssbsect_term_code = ptrm_desc.term
                      and ssbsect_crn = ptrm_desc.crn
                      and ssbsect_ptrm_code = ptrm_desc.ptrm
  */                    

UNION
  select 'UNKNOWN' as NK
  , 'UNKNOWN' as CD
  , 'UNKNOWN' as COURSE
  , '201410' as TERM    --[Member Specific] Change to a valid default term
  ,  'DEFAULT' as CAMPUS
  ,  0 AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , 'TBD' AS INSTRUCTOR_NAME
  , '2000-01-01' AS CLASS_START_DT
  , '2000-01-01' AS CLASS_END_DATE
  , '2000-01-01' AS DROP_START_DT
  , '2000-01-01' AS DROP_END_DT
  , '2000-01-01' AS WITHDRAW_END_DT
  , 'T' AS IS_ACTIVE
  from dual
  order by 2,4
  )
  
  SELECT * FROM section","Section"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"inst.Campus","
-- get campus data from Banner 
WITH campus AS (
SELECT DISTINCT stvcamp_code nk
                , stvcamp_desc \\\""name\\\""
                , CASE WHEN stvcamp_code = 'O' -- Logic to identify online campuses. Confirm with BA.
                			THEN 'T'
                			ELSE 'F' END is_online
                , CASE WHEN (stvcamp_code IN ('F', 'I', 'O', 'S', 'X') -- Campuses common to 2 and 4 year colleges
  						OR stvcamp_code LIKE 'P%') -- Perimeter specific campuses
  							THEN 'T' 
  							ELSE 'F' END is_active
FROM stvcamp
),

-- Assign default values
defaultValues AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM campus
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Campus"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.subject","SELECT 
  stvsubj_code nk,
  stvsubj_desc name,
  'T' is_active
FROM stvsubj
UNION
Select 'DEFAULT' as NK
, 'DEFAULT' as Name
, 'T' as IS_ACTIVE
from dual","subject"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"catcc.TestSubject","-- Fields: nk,name,max_score,is_active
-- Model Name: catcc.TestSubject
-- Name: Test Subjects
-- Output: Test_Subjects_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- extract test subjects and scores from Banner
WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
          THEN TO_NUMBER(stvtesc_max_value) || '.00'
          ELSE stvtesc_max_value
          END AS max_score -- test for decimal point and convert to decimal. This is done since navigate expects this data to be decimal and the data in banner may not be stored in decimal format.
  , 'T' AS is_active
FROM stvtesc
WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')  -- filter out any non digits. This is a decimal field in navigate and there have been instances where we have seen non-integer values in banner.
)

-- wrapper query
SELECT * FROM testSubjects


--	Notes: => DATA examples nk = 'M2', 'S01'
--	                      name = 'SatII-Mathematics Level II', 'SAT Verbal'

-- Change log:
--				Developer:
--				Change version:
--				Description","Test Subjects"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"reg.StudentTestScore","WITH TMP_1 AS (
SELECT DISTINCT
   P.ID student
FROM
   COLL_PRODUCTION.PERSON P
      JOIN COLL_PRODUCTION.STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTR(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN COLL_PRODUCTION.STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN COLL_PRODUCTION.ACAD_PROGRAMS AP ON 
         SUBSTR(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN COLL_PRODUCTION.ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'
),

TMP_2 AS (
SELECT DISTINCT
   P.ID  
FROM
   COLL_PRODUCTION.PERSON P
      JOIN COLL_PRODUCTION.APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         A.APPL_APPLICANT NOT IN 
         (
            SELECT
               student
            FROM
               TMP_1
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN COLL_PRODUCTION.APPL_STATUSES APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
      JOIN COLL_PRODUCTION.TERMS T ON
         A.APPL_START_TERM = T.TERMS_ID
),

TMP_3 AS (SELECT * FROM TMP_1 UNION SELECT * FROM TMP_2),

validStudents AS (
SELECT DISTINCT
   SUBSTR(PERSON.ID,1,7)  student
FROM COLL_PRODUCTION.PERSON
INNER JOIN COLL_PRODUCTION.PEOPLE_EMAIL PE
ON PERSON.ID = PE.ID AND PE.PERSON_EMAIL_TYPES IN ('TTC') -- configure per member
INNER JOIN COLL_PRODUCTION.PERSON_PIN PP 
ON PERSON.ID = PP.PERSON_PIN_ID  WHERE PE.PERSON_EMAIL_ADDRESSES  NOT IN ('Yolanda.Bland@tridenttech.edu',
'Karen.Wrighten@tridenttech.edu',
'Brandon.Branham@tridenttech.edu',
'Sharon.Manigault@tridenttech.edu',
'Jamella.Jaglal@tridenttech.edu',
'Kimberly.Fowler@tridenttech.edu',
'Donna.Grant@tridenttech.edu',
'Gerald.Gadsden@tridenttech.edu',
'Jewell.Dingle@tridenttech.edu',
'Chanity.Wilson@tridenttech.edu',
'Sidney.Alston@tridenttech.edu',
'Laurie.Fladd@tridenttech.edu',
'Brian.Almquist@tridenttech.edu',
'Deborah.Thompson@tridenttech.edu',
'Marshall.Connor@tridenttech.edu',
'mikepatterson@my.tridenttech.edu',
'D''jaris.Whipper-lewis@tridenttech.edu',
'Kathy.Simmons@tridenttech.edu',
'annikajessen@my.tridenttech.edu'))

SELECT
   TS.student||'$$'||SNC.STNC_NON_COURSE as nk,
   TS.student,
   SNC.STNC_NON_COURSE AS test_subject,
   CAST(COALESCE(SNC.STNC_SCORE,0) AS NUMBER(7,2)) AS score,
   'T' AS is_active
FROM
   TMP_3 TS,
   COLL_PRODUCTION.STUDENT_NON_COURSES SNC
WHERE
   TS.student = SNC.STNC_PERSON_ID
      AND
   SNC.STNC_STATUS = 'A'
      AND TS.student in (select student from validStudents )","Applicant - Student Test Score"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.programcredential","/*

Commented out in favor of member code below 

SELECT DISTINCT 
	ACPG_DEGREE AS nk
	, ACPG_DEGREE AS short_credential
	, 'T' AS is_active

  FROM ACAD_PROGRAM_REQMTS
    LEFT OUTER JOIN ACAD_PROGRAMS
      ON SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
    LEFT OUTER JOIN PROGRAM_STATUS
      ON PROGRAM_STATUS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS.ACAD_PROGRAMS_ID

*/
SELECT DISTINCT 
	isnull(DEGREES_ID,'') AS nk
	, isnull(DEG_DESC,'') AS short_credential
	, 'T' AS is_active
	from DEGREES","Program Credential"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.StudentTerm","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get the max term for each program that has a corresponding term assigned.
getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
  LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
WHERE stvterm_code IS NOT NULL
  AND sobcurr_levl_code = 'US' -- Filter GSU programs
  GROUP BY  sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
SELECT sgbstdn_pidm
  , sgbstdn_program_1
  , sgbstdn_stst_code
  , sgbstdn_term_code_eff AS maxEffTerm
  , sgbstdn_term_code_ctlg_1
  , stvstst_reg_ind
FROM sgbstdn a
  LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
WHERE sgbstdn_program_1 IS NOT NULL
  AND stvstst_code IS NOT NULL
  AND sgbstdn_term_code_eff = (
                               SELECT MAX(sgbstdn_term_code_eff)
                               FROM sgbstdn
                                RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                               WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                AND stvterm_end_date <= sysdate + 365
                              )
),

-- final query to extract student term data
studentTerm AS (
SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
  , spriden_id AS student
  , studentDetails.maxEffTerm AS term
  , studentDetails.sgbstdn_program_1 || '$$' || getProgramMaxTerm.acyr AS \\\""program\\\""
  , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active -- set the record active if the corresponding stvstst_reg_ind is set to 'Y'
FROM spriden
  RIGHT JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
  JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
  JOIN studentPopulation ON studentPidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
)

-- wrapper query
select * from studentTerm","Student Terms"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.Program","-- Fields: nk,cd,cat_yr,name,desc,credits,enrollment_notes,registration_notes,area_of_study,concentration,credential,cip,is_transfer,is_active
-- Model Name: cat.Program
-- Name: Programs
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- determine most recent term for each Program by finding the max term for each program in sobcurr
WITH maxEffectiveTerm AS (
SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
  FROM sobcurr
  GROUP BY sobcurr_program
),

-- extract program data from Banner
program AS (
SELECT DISTINCT
sobcurr_program || '$$' || stvterm_acyr_code AS nk,
sobcurr_program AS cd,
TO_NUMBER(stvterm_acyr_code) AS cat_yr,
smrprle_program_desc AS \\\""name\\\"",
smrprle_program_desc AS \\\""desc\\\"",
decode (sobcurr_degc_code, 'AS', 60,
                            'AAS', 67,
                            'STC', 9,
                            'CERT', 50,
                              99) AS credits, -- confirm degree code to credits conversion with BA/Member. This logic may differ for different colleges and will need to be adjusted accordingly.
'' AS enrollment_notes,
'' AS registration_notes,
 -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_' Confirm with BA/Memeber.
COALESCE (substr(sobcurr_program, 1, CAST(INSTR(sobcurr_program, '_') AS NUMBER) -1), '') AS area_of_study,
'' AS concentration,
sobcurr_degc_code AS \\\""credential\\\"",
DECODE (stvmajr_cipc_code, null, null,
                                    SUBSTR(stvmajr_cipc_code,1,2) || '.' || SUBSTR(stvmajr_cipc_code,3)
                                    ) AS cip,
CASE WHEN sobcurr_degc_code IN ('AA','AS') THEN 'T' ELSE 'F' END AS is_transfer, -- Confirm with BA
CASE WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T' ELSE 'F' END AS is_active
FROM sobcurr
  LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
  LEFT JOIN smrprle ON smrprle_program = sobcurr_program
  LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
  LEFT JOIN stvmajr ON stvmajr_code = (SUBSTR(sobcurr_program, 1, CAST(INSTR(sobcurr_program, '_') AS NUMBER) -1))   -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_'. Confirm with BA/Memeber. Should match with area_of_study in SELECT portion of query.
  )

-- Wrapper query
SELECT * FROM program
","Programs"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.SeatsAvail","WITH sectionList AS (SELECT distinct 
      COURSE_SECTIONS.COURSE_SECTIONS_ID nk
  FROM COURSE_SECTIONS
   LEFT OUTER JOIN COURSE_SECTIONS_LS
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND
         COURSE_SECTIONS_LS.POS = '1'
    JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID AND
          TERMS_LS.POS = '1'
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1' AND
          (SEC_STATUS = 'A' OR 
           SEC_STATUS = 'C' OR
           SEC_STATUS = 'GH')
    Where (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )
       AND (SEC_NO < '600' OR SEC_NO > '799'))

SELECT COURSE_SECTIONS_DETAILS_VIEW.COURSE_SECTIONS_ID AS nk,
       CASE
         WHEN CS_CAPACITY - CS_COUNT_STUDENTS >= 0 THEN CS_CAPACITY - CS_COUNT_STUDENTS
         ELSE 0
       END AS avail_seats,
       CASE
         WHEN CS_STATUS = 'A' THEN 'Y'
         ELSE 'N'
       END AS is_active
  FROM COURSE_SECTIONS_DETAILS_VIEW
 WHERE COURSE_SECTIONS_DETAILS_VIEW.COURSE_SECTIONS_ID IN (SELECT * FROM sectionList)","SeatsAvailable"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"noah_studentcourse","WITH population AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 30
ORDER BY 1 desc)
)

)),

audit_bank as (
select a.pidm,a.term,a.rsts_code,a.audit_record,b.course_record from (
select 
        distinct sfrstca_pidm as pidm,
         sfrstca_crn as crn,
       sfrstca_term_code term,
       ssbsect_subj_code || ssbsect_crse_numb as audit_record,
       sfrstca_rsts_code as rsts_code 

from sfrstca
left join ssbsect  --maybe an inner join, in case the CRN no longer exists in SSBSECT?
on ssbsect_crn = sfrstca_crn 
  and ssbsect_term_code = sfrstca_term_code
 ) a 
left join (
select distinct sfrstcr_pidm pidm, 
      sfrstcr_crn crn,
      sfrstcr_term_code term, 
      ssbsect_subj_code || ssbsect_crse_numb as course_record
from sfrstcr
left join ssbsect
on ssbsect_crn = sfrstcr_crn
) b
on a.pidm = b.pidm
and a.audit_record = b.course_record
and a.term = b.term
where b.course_record is null
order by 1,2,3

)


select  
       spriden_id Student
       , stvterm_code term
       , ssbsect_subj_code || ssbsect_crse_numb course_cd
       , ssbsect_crn as course_ref_no
, ssbsect_schd_code
       , sfrstcr_grde_code grade_cd
       , 0 as credits_earned
       , 'N' as transfer_course_ind
       , case when sfrstcr_rsts_code in ('RE','RW','RT') then 'Y' else 'N' end as registered_ind
       , sfrstcr_rsts_code as registration_status_code
  from population   
  left join   spriden on population.pidm = spriden_pidm
  left join   sfrstcr on population.pidm = sfrstcr_pidm
  inner join   stvterm on sfrstcr_term_code = stvterm_code
  --   stvrsts, 
  left join   ssbsect on sfrstcr_crn = ssbsect_crn and sfrstcr_term_code = ssbsect_term_code
  --   scbcrse,
  --   sobptrm
where 
   spriden_change_ind is null 

  and not exists ( select 'Y' from shrtckn 
                    where shrtckn_crn = sfrstcr_crn 
                      and shrtckn_term_code = sfrstcr_term_code 
                     and shrtckn_pidm = sfrstcr_pidm) 
 
UNION --completed courses

select
      spriden_id as Student,
      stvterm_code as term,
      shrtckn_subj_code|| shrtckn_crse_numb as course_cd,
      shrtckn_crn as course_ref_no, 
shrtckn_schd_code as course_type_code,
      shrtckg_grde_code_final as grade_cd,
      nvl(shrtckg_credit_hours,0) as credits_earned,
      'N' as transfer_course_ind,
      'Y' as registered_ind,
      'RE' as registration_status_code

from population
left join spriden on spriden_pidm = population.pidm
left join shrtckn on population.pidm = shrtckn_pidm
left join stvterm on stvterm_code = shrtckn_term_code
left join shrtckg on population.pidm = shrtckg_pidm and shrtckn_pidm = shrtckg_pidm and shrtckg_tckn_seq_no = shrtckn_seq_no and shrtckg_term_code = shrtckn_term_code 
where  shrtckg_seq_no = ( select max(shrtckg_seq_no) from shrtckg 
                          where shrtckg_pidm = spriden_pidm 
                          and shrtckg_tckn_seq_no = shrtckn_seq_no ) 
  and spriden_change_ind is null

","Student Course"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.Subject","
SELECT DISTINCT ISNULL(SUBJECTS_ID,'NA') AS nk,
      isnull(SUBJ_DESC,'NA') AS \\\""name\\\"",
      'T' AS is_active
  FROM SUBJECTS 
  where SUBJ_DESC NOT IN ('Ability to Benefit', 'Basic Math Equivalency', 'Basic Skills Development', 
                   'Communications I Equivalency', 'Communications II Equivalency', 'Course Waiver') AND
        SUBJ_DESC NOT LIKE 'DO NOT USE%' AND
        SUBJECTS_ID not in ('COMM1', 'COMM2', 'COMMFND', 'MATHALG', 'MATHPRE', 'RDGCOMM', 'RDGFUND', 'RDGNONE', 'XKAP')
                   --order by line","Subject"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"core.Faculty","select DISTINCT nk,
       first_name,
       last_name,
       username,
       email,
       prefix,
       suffix,
       faculty_type,
       is_active
  from eab_faculty
 where home_college like 'C%'
 order by nk","Faculty"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"reg.studenttestscore","WITH pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW') -- Need to confirm
      and sfrstcr_term_code in (
        select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= ( -- excluding non credit terms, we are looking at students active in the previous 5 terms relative to the current term
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE'                         -- Need to confirm
                      and stvterm_desc not like '%Continuing Education'       -- Need to confirm
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                       )
          And Rownum < 15
          order by 1 desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= (
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE' 
                      and stvterm_desc not like '%Continuing Education'
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                       )
          And Rownum < 15
          order by 1 desc))
)))


select
       spriden_id || '$$' || stvtesc_code nk,
       spriden_id student,
       --stvtesc_code || '$$' || stvtesc_desc test_subject, HP 082814
       stvtesc_code test_subject,
       max(to_number(sortest_test_score)) score,
       'T' active
from sortest, spriden, stvtesc
       -- Need to remove A, since EAB only takes integers
where stvtesc_data_type = 'N'
   and sortest_pidm = spriden_pidm
   and sortest_tesc_code = stvtesc_code
   and spriden_change_ind is null
   and spriden_pidm in (select * from pop)
   --and (stvtesc_desc LIKE '%Accup%'
    --OR stvtesc_desc LIKE '%SAT%') -- Need to confirm Test description

   group by spriden_id || '$$' || stvtesc_code,
            spriden_id,
            stvtesc_code,
            'T'","Student Test Score"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.Section","-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , NVL(stvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , CASE WHEN ssbsect_ssts_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- Identify if section is active by comparing the value in ssbsect_ssts_code. The default is 'A'. Confirm with BA/Member if this is different at their college.
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
-- WHERE ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Comented out by default. Confirm with BA/Member.
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Section"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"inst.Campus","SELECT 
 nk,
 name,
 CASE 
   WHEN is_online = 'N' THEN 'F'
   ELSE 'T'
 END AS \\\""is_online\\\"",
 CASE 
   WHEN is_active = 'N' THEN 'F'
   ELSE 'T'
 END AS \\\""is_active\\\""
FROM EAB_CAMP
WHERE nk LIKE 'P%'","Campus"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.StudentCourse","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
  -- and trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') <= TRUNC(sysdate, 'YYYY')-2*365
   and substr(college, 0, 1) = 'P'
 order by nk desc),

cur_stu as (
select distinct id as stu_id,
       academic_period as term_code
  from eab_stdnt_active
 where current_enroll_pc = 'Y'
   and academic_period in (select nk from cur_terms)
)

select distinct
  a.nk,
  student,
  a.term,
  case
    when instr(course, '$$') > 0 then substr(course, 0, instr(course, '$$')-1)
    else course
  end course,
  a.section,
  grade_cd,
  grade_points,
  credits_attempted,
  credits_earned,
  replace(a.status, '-', '_') status,
  CASE 
    WHEN a.is_active = 'Y' THEN 'T'
    ELSE 'F'
  END as is_active
  FROM EAB_STDNT_COURSE a LEFT JOIN EAB_CRSE b on a.course = b.nk and a.term = b.term
  join (select * from cur_stu) c on c.term_code = a.academic_period and c.stu_id = a.student
 where b.college = 'PC'
   and a.current_enroll_pc = 'Y'","Student Course- use this one"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Section","WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , NVL(stvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt 
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt 
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt 
  , CASE WHEN ssbsect_ssts_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active 
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Section"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.Program","WITH maxEffectiveTerm AS (
SELECT MAX( SUBSTRING(ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) + 1, 4))  cat_yr,
      ACAD_PROGRAMS.ACAD_PROGRAMS_ID area_of_study
  FROM ACAD_PROGRAM_REQMTS
    LEFT OUTER JOIN ACAD_PROGRAMS
      ON SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
    LEFT OUTER JOIN PROGRAM_STATUS
      ON PROGRAM_STATUS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
        WHERE 
          POS = 1 AND 
          SUBSTRING(ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) + 1, 4) >  (YEAR(GETDATE()) - 5) 
       --  AND  SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) <> 'NOND' and
         -- SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) <> 'UNDEC'
		  GROUP BY ACAD_PROGRAMS.ACAD_PROGRAMS_ID
)
    
SELECT DISTINCT REPLACE(APR.ACAD_PROGRAM_REQMTS_ID , '*','$$') nk, 
       SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', APR.ACAD_PROGRAM_REQMTS_ID) - 1)  cd,
       SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*', APR.ACAD_PROGRAM_REQMTS_ID) + 1, 4)  cat_yr,
       left(AP.ACPG_TITLE,50) name,
      ISNULL(REPLACE(CAST(AP.ACPG_DESC AS VARCHAR(2500)),  char(253)  , ' ' ), AP.ACPG_TITLE) as  \\\""desc\\\"",
       CAST(CAST(APR.ACPR_CRED AS DECIMAL(7,2)) AS VARCHAR)  credits,
       '' enrollment_notes,
       '' registration_notes,
      isnull(AP.ACAD_PROGRAMS_ID,'NA') area_of_study,
       '' concentration,
     ISNULL(AP.ACPG_DEGREE,APLS.ACPG_CCDS) AS \\\""credential\\\"", -- select * from ACAD_PROGRAM_REQMTS 
	                            -- select distinct ACPG_DEGREE from ACAD_PROGRAMS
							  -- 	select  * from ACAD_PROGRAMS
							    -- 	select  * from ACAD_PROGRAMS_LS

      LEFT(ACPG_CIP,5) as cip, 
      CASE 
	  WHEN ACPG_DEGREE IN
	  ('AA','AAB','AAS','AIS','ATS','AS','BRDG','DIP','APS','AGS') 
	  THEN 'T' ELSE 'F' END is_transfer,
        CASE
          WHEN PS.ACPG_STATUS not in ('A') THEN 'F' -- updated 12/19/16
          ELSE (CASE WHEN SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*', APR.ACAD_PROGRAM_REQMTS_ID) + 1, 4) = maxEffectiveTerm.cat_yr THEN 'T' ELSE 'F' END)
        END AS is_active
 FROM ACAD_PROGRAM_REQMTS APR
    LEFT OUTER JOIN ACAD_PROGRAMS AP
      ON SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*',APR.ACAD_PROGRAM_REQMTS_ID) - 1) = AP.ACAD_PROGRAMS_ID
	 LEFT OUTER JOIN ACAD_PROGRAMS_LS APLS --  ADDED  20170210 
      ON APLS.ACAD_PROGRAMS_ID = AP.ACAD_PROGRAMS_ID
		AND APLS.ACPG_CCDS IS NOT NULL 
    LEFT OUTER JOIN PROGRAM_STATUS PS
      ON PS.ACAD_PROGRAMS_ID = AP.ACAD_PROGRAMS_ID
	LEFT OUTER JOIN maxEffectiveTerm on 
        AP.ACAD_PROGRAMS_ID = maxEffectiveTerm.area_of_study
      WHERE  PS.POS = 1
 --        (ACPG_STATUS = 'A' OR ACPG_STATUS = 'P') and
          AND  SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*',APR.ACAD_PROGRAM_REQMTS_ID) + 1, 4) >  (YEAR(GETDATE()) - 5) 
		  --and
       --   SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*',APR.ACAD_PROGRAM_REQMTS_ID) - 1) <> 'NOND' and
       --   SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*',APR.ACAD_PROGRAM_REQMTS_ID) - 1) <> 'UNDEC'

/*
		  SELECT ACAD_PROGRAM_REQMTS_ID,ACPR_CRED,APR.*  FROM ACAD_PROGRAM_REQMTS APR
		  SELECT distinct ACPG_DEGREE,ACPG_DESC,ACPG_TITLE  FROM ACAD_PROGRAMS AP
		  SELECT *  FROM PROGRAM_STATUS PS
		  SELECT * 
		  */","Program"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"event.TaskStatusFeed","--Fields  nk,student,event,repeated_by_nk,status,status_changed_ts,is_active
--Model Name  event.TaskStatusFeed
--Name  TaskStatusFeed
--Output  TaskStatusFeed_{data#DateStamp}.csv
--Query :


-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- Extract E_ORIENTATION related events - no repeat
E_ORIENTATION AS (
SELECT
  spriden_id || '$$E_ORIENTATION$$' AS nk
  , spriden_id AS student
  , 'E_ORIENTATION' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP -- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVRORNT
    ON SVRORNT_PIDM = studentPopulation.studentPidm
WHERE SVRORNT_DICD_CODE = 832		-- Golden West students
	AND SVRORNT_OSST_CODE IN ('ORIENT','ONLINE','LEGACY','SOAR')
       AND SVRORNT_ACTIVITY_DATE > SYSDATE - (1/24)
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


-- Extract E_FIRST_ADVISOR_MEET related events - no repeat
E_FIRST_ADVISOR_MEET AS (
SELECT DISTINCT
  spriden_id || '$$E_FIRST_ADVISOR_MEET$$' AS nk
  , spriden_id AS student
  , 'E_FIRST_ADVISOR_MEET' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVREDPL
    ON SVREDPL_PIDM = studentPopulation.studentPidm
WHERE SVREDPL_DICD_CODE = 832		-- Golden West students
	AND SVREDPL_EPST_CODE IN ('ABBREV', 'COMPR')
        AND SVREDPL_ACTIVITY_DATE > SYSDATE - (1/24)
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


-- Extract E_MEET_COUNSELOR related events - repeats when each term starts
E_MEET_COUNSELOR AS (
SELECT DISTINCT
  spriden_id || '$$E_MEET_COUNSELOR$$' || STVTERM.STVTERM_CODE AS nk
  , spriden_id AS student
  , 'E_MEET_COUNSELOR' AS event
  ,  STVTERM.STVTERM_CODE AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVREDPL
    ON SVREDPL_PIDM = studentPopulation.studentPidm
  JOIN STVTERM
    ON STVTERM.STVTERM_CODE = SVREDPL.SVREDPL_TERM_CODE
WHERE SVREDPL_DICD_CODE = 832		-- Golden West students
	AND SVREDPL_EPST_CODE IN ('ABBREV', 'COMPR')
       AND SVREDPL_ACTIVITY_DATE > SYSDATE - (1/24)
	AND STVTERM.STVTERM_START_DATE <= sysdate		
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


-- Extract E_PLACEMENT related events - no repeat
E_PLACEMENT AS (
SELECT
  spriden_id || '$$E_PLACEMENT$$' AS nk
  , spriden_id AS student
  , 'E_PLACEMENT' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SORTEST
    ON SORTEST_PIDM = studentPopulation.studentPidm
WHERE SORTEST_TESC_CODE IN ('1PEN','1PES','1PRD','2PEN','2PES','2PLI','2PRD','3PEN','3PES','3PRD','6RLG','6RLL','6RLR','1PMA','2PMA','3PMA') 
  AND (SORTEST_TSRC_CODE = 'TAPE' OR SORTEST_TSRC_CODE IS NULL)
  AND SORTEST_ACTIVITY_DATE > SYSDATE - (1/24)
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),



-- Extract each student's FIRST_TERM
FIRST_TERM AS(
select
    spriden_id
    ,saradap_pidm as student_pidm
    ,min(saradap_term_code_entry) as first_term_code
  from studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  WHERE spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
 group by spriden_id, saradap_pidm
),



-- Extract each student's NEXT_TERM
NEXT_TERM AS(
select
  spriden_id
  ,saradap_pidm as student_pidm   
	,LEAD(STVTERM.STVTERM_CODE, 1) OVER(PARTITION BY spriden_id, SARADAP_PIDM ORDER BY STVTERM.STVTERM_CODE) AS NEXT_TERM_CODE
  from studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  JOIN STVTERM
    ON STVTERM.STVTERM_CODE = saradap.saradap_term_code_entry
  WHERE SYSDATE BETWEEN STVTERM.STVTERM_START_DATE AND STVTERM.STVTERM_END_DATE
    and spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
),





-- Get students who have registered
REGISTERED_STUDENTS AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm 
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
),


-- Extract E_REGISTER_FIRST_TERM related events - repeats on first term registration
E_REGISTER_FIRST_TERM AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_REGISTER_FIRST_TERM$$' || FIRST_TERM.FIRST_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_REGISTER_FIRST_TERM' AS event
  , FIRST_TERM.FIRST_TERM_CODE  AS repeated_by_nk	
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN FIRST_TERM
    ON FIRST_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


-- Extract E_REGISTER_NEXT_TERM related events - repeats each next term
E_REGISTER_NEXT_TERM AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_REGISTER_NEXT_TERM$$' || NEXT_TERM.NEXT_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_REGISTER_NEXT_TERM' AS event
  , NEXT_TERM.NEXT_TERM_CODE AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN NEXT_TERM
    ON NEXT_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE NEXT_TERM.NEXT_TERM_CODE IS NOT NULL
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),



finalDataSet AS (
SELECT * FROM E_ORIENTATION
UNION
SELECT * FROM E_FIRST_ADVISOR_MEET
UNION
SELECT * FROM E_MEET_COUNSELOR
UNION
SELECT * FROM E_PLACEMENT      
UNION
SELECT * FROM E_REGISTER_FIRST_TERM    
UNION
SELECT * FROM E_REGISTER_NEXT_TERM     
)

SELECT * from finalDataSet","TaskStatusFeed"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.Program","-- determine most recent term for each Program by finding the max term for each program in sobcurr
WITH maxEffectiveTerm AS (
  SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
    FROM sobcurr
   GROUP BY sobcurr_program
),

programCredits as (
  select smbpgen.smbpgen_program,
         smbpgen.smbpgen_term_code_eff,
         smbpgen.smbpgen_active_ind,
         nvl(smbpgen.smbpgen_req_credits_overall, 0.0) as credits
    from smbpgen join (select sMBPGEN_PROGRAM, max(smbpgen_term_code_eff) max_term
                         from smbpgen
                        where smbpgen_active_ind = 'Y'
                        group by sMBPGEN_PROGRAM) s on smbpgen.smbpgen_program = s.smbpgen_program
                                                   and smbpgen.smbpgen_term_code_eff = s.max_term
),

-- Collection of program descriptions
prog_desc as (
  select smrpcmt_program, listagg(smrpcmt_text, ' ') within group (order by smrpcmt_text_seqno asc) smrpcmt_text -- within group (order by smrpcmt_prnt_code asc) as smrpcmt_text
    from smrpcmt s1 join (select s2.smrpcmt_program as prgm, max(s2.smrpcmt_term_code_eff) as term
                            from smrpcmt s2 group by s2.smrpcmt_program) mx on s1.smrpcmt_term_code_eff = Mx.term
                                                                           and s1.smrpcmt_program = Mx.Prgm
   where --smrpcmt_prnt_code is not null
     smrpcmt_text is not null
   group by smrpcmt_program
   order by smrpcmt_program
),

-- extract program data from Banner
program AS (
  SELECT DISTINCT
      sobcurr_program || '$$' || stvterm_acyr_code AS nk,
      sobcurr_program AS cd,
      TO_NUMBER(stvterm_acyr_code) AS cat_yr,
       smrprle_program_desc ||' - '||
		CASE WHEN sobcurr_program LIKE '%1' THEN 'Certificate' 
		   	 WHEN (sobcurr_program LIKE '%2' or sobcurr_program LIKE '%4') then 'Diploma'
			 WHEN sobcurr_program LIKE '%3' THEN 'Degree' 
		 ELSE ''
		 END 										  	AS \\\""name\\\"",
      coalesce(smrpcmt_text, smrprle_program_desc, 'None') AS \\\""desc\\\"",
      NVL(credits, 0.0) AS CREDITS, -- confirm degree code to credits conversion with BA/Member. This logic may differ for different colleges and will need to be adjusted accordingly.
      '' AS enrollment_notes,
      '' AS registration_notes,
       -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' --- instead of underscores '_' Confirm with BA/Memeber.
      sobcurr_program AS area_of_study,
      '' AS concentration,
      sobcurr_degc_code  \\\""credential\\\"",
      DECODE (stvmajr_cipc_code,
              null,
              null,
              SUBSTR(stvmajr_cipc_code,1,2)||'.'||SUBSTR(stvmajr_cipc_code,3)) AS cip,
      CASE
        WHEN sobcurr_degc_code IN ('AAS') THEN 'T'
        ELSE 'F'
      END AS is_transfer, -- Confirm with BA
      CASE
        WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T'
        ELSE 'F'
      END AS is_active
    FROM sobcurr LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
                 LEFT JOIN smrprle ON smrprle_program = sobcurr_program
                 LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
                 LEFT JOIN stvmajr ON stvmajr_code = sobcurr_program --(SUBSTR(sobcurr_program,1,CAST(INSTR(sobcurr_program,'_') AS NUMBER)-1))   -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_'. Confirm with BA/Memeber. Should match with area_of_study in SELECT portion of query.
                 LEFT JOIN programCredits ON sobcurr_program = smbpgen_program
                 LEFT JOIN prog_desc on sobcurr_program = smrpcmt_program
   where smbpgen_term_code_eff >= '201212' -- per Bruce
     and smbpgen_active_ind = 'Y' -- per Bruce
)

-- Wrapper query
SELECT * FROM program
","Programs"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"cat.department","WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept
),

-- Assign default values
defaultValues AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM department
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet
","Department"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.section","WITH 
SFRRSTS_DROP_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.Sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('DW')

--and rsts.Sfrrsts_Term_Code = 201110 and rsts.Sfrrsts_ptrm_code = '16'
),
SFRRSTS_WITHDRAW_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('WW')
)

SELECT
  a.SSBSECT_CRN  || '$$' || a.SSBSECT_TERM_CODE  AS NK
  , a.SSBSECT_CRN AS CD
  , case when a.SSBSECT_SCHD_CODE <> 'B'
  then a.SSBSECT_SUBJ_CODE || a.SSBSECT_CRSE_NUMB
  else a.SSBSECT_SUBJ_CODE || a.SSBSECT_CRSE_NUMB || a.SSBSECT_SCHD_CODE end AS COURSE
  , stvterm.stvterm_code as term 
  , nvl(stvcamp_code,'DEFAULT') as CAMPUS
  , a.SSBSECT_MAX_ENRL AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , CASE WHEN instructor.SPRIDEN_LAST_NAME IS NULL THEN 'TBD' 
  ELSE instructor.SPRIDEN_LAST_NAME || ', ' || instructor.SPRIDEN_FIRST_NAME
  END AS INSTRUCTOR_NAME
  , nvl(to_char(b.SSRMEET_START_DATE,'YYYY-MM-DD'),'2000-01-01') AS CLASS_START_DT
  , nvl(to_char(b.SSRMEET_END_DATE, 'YYYY-MM-DD'), '2000-01-02') AS CLASS_END_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_Start_Date,'YYYY-MM-DD'), to_char(ssrmeet_start_date, 'YYYY-MM-DD'),'2000-01-01') as DROP_START_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as DROP_END_DT
  , coalesce(to_char(SFRRSTS_WITHDRAW_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as WITHDRAW_END_DT
  , CASE WHEN a.SSBSECT_SSTS_CODE = 'A' and a.ssbsect_camp_code = 'NCC'
THEN 'T' ELSE 'F' END AS IS_ACTIVE
FROM ssbsect a
  --creating campus lookup
  join stvcamp on stvcamp_code = SSBSECT_CAMP_CODE
  --creating term lookup
  join stvterm on stvterm_code = ssbsect_term_code
  --instructor info
  LEFT OUTER JOIN (
    SELECT SIRASGN_TERM_CODE, SIRASGN_CRN, SIRASGN_PIDM, SIRASGN_PRIMARY_IND, SPRIDEN_ID, SPRIDEN_FIRST_NAME, SPRIDEN_LAST_NAME
    FROM SIRASGN a
      JOIN SPRIDEN b ON a.sirasgn_pidm = b.spriden_pidm AND b.spriden_change_ind IS NULL  
      WHERE SIRASGN_CATEGORY = '01' AND SIRASGN_PRIMARY_IND = 'Y'
    )  instructor
    ON instructor.SIRASGN_TERM_CODE = a.SSBSECT_TERM_CODE AND instructor.SIRASGN_CRN = a.SSBSECT_CRN
  --meeting info
  LEFT OUTER JOIN (
    SELECT * FROM SSRMEET)
     b ON b.SSRMEET_TERM_CODE = a.SSBSECT_TERM_CODE AND b.SSRMEET_CRN = a.SSBSECT_CRN
  --joins for drop and withdraw dates
  LEFT JOIN SFRRSTS_DROP_DATES on ssbsect_term_code = SFRRSTS_DROP_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_DROP_DATES.Sfrrsts_ptrm_code
  LEFT JOIN SFRRSTS_WITHDRAW_DATES on ssbsect_term_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_ptrm_code
  left join scrlevl
  on a.SSBSECT_SUBJ_CODE = scrlevl_subj_code
  and a.SSBSECT_CRSE_NUMB = scrlevl_crse_numb
where 1=1
and SCRLEVL_LEVL_CODE = 'NC'                      
 
UNION
  select 'UNKNOWN' as NK
  , 'UNKNOWN' as CD
  , 'UNKNOWN' as COURSE
  , '201410' as TERM    --[Member Specific] Change to a valid default term
  ,  'DEFAULT' as CAMPUS
  ,  0 AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , 'TBD' AS INSTRUCTOR_NAME
  , '2000-01-01' AS CLASS_START_DT
  , '2000-01-01' AS CLASS_END_DATE
  , '2000-01-01' AS DROP_START_DT
  , '2000-01-01' AS DROP_END_DT
  , '2000-01-01' AS WITHDRAW_END_DT
  , 'T' AS IS_ACTIVE
  from dual
  order by 2,4 ","Section"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"core.Student","with now_term as (
  select stvterm_code as a_term
    from stvterm
   where stvterm_end_date >= sysdate
     and rownum = 1
   order by stvterm_code asc
),
FUTR_TERM as (
  select stvterm_code
    from stvterm
   where stvterm_end_date >= sysdate
),
STU_LIST AS (
  select sfrstcr_pidm as pidm
    from sfrstcr
   where sfrstcr_term_code in (select * from now_term)
     and sfrstcr_rsts_code IN ('RE','AU','RW','RC','R1','R2','R3','R4',
                               'R5','R6','R9','RL','U1','U2','U3','U4',
                               'U5','U6','U9')
  union
  select saradap_pidm as pidm
    from saradap
   where saradap_term_code_entry in (select stvterm_code from FUTR_TERM)
),
CUR_STU AS (
  SELECT DISTINCT
    pidm,
    trim(coalesce((select goremal_email_address
            from goremal
           where goremal_emal_code IN ('BUS', 'CAMP')
             and goremal_pidm = pidm
             and goremal_email_address LIKE '%@%jscc.edu'
             and rownum = 1),
        (select goremal_email_address
            from goremal
           where goremal_emal_code IN ('BUS', 'CAMP')
           and goremal_pidm = pidm
             and goremal_email_address NOT LIKE '%@%jscc.edu'
             and rownum = 1),
          lower(spriden_id) || '@missing.students.jscc.edu')) email
    FROM STU_LIST join spriden on pidm = spriden_pidm
                              and spriden_change_ind is null
),
student_list as (
  SELECT DISTINCT
    spriden_id nk,
    case
      when GOBTPAC_EXTERNAL_USER is not null then GOBTPAC_EXTERNAL_USER
      when instr(email, '@') > 0 THEN substr(email, 0, instr(email, '@')-1)
      else spriden_id||'@missing.jscc.edu'
    end username,
    cur_stu.email email,
    spriden_first_name first_name,
    spriden_last_name last_name,
    NVL(to_char(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') birthdate,
    'T' is_active
   FROM spriden LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm
                left join cur_stu on spriden_pidm = pidm
                left join gobtpac on spriden_pidm = gobtpac_pidm
  WHERE spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P' 
    and spriden_pidm in (select pidm from cur_stu)
)
select * from student_list","Student"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.SectionTime","-- Unpivot day of week from ssrmeet into a single column. ssrmeet stores data for each day of the week in separate columns. In naviagate, we store this data in a single column as day_of_week.
WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  , ssrmeet_vpdi_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
    LEFT JOIN slbbldg ON slbbldg_bldg_code = ssrmeet_bldg_code                                       
    LEFT JOIN STUGRCCCS.SZVCAMP ON slbbldg_camp_code = SZVCAMP_CODE 
  WHERE ssrmeet_vpdi_code = 'PPCC'
        AND SZVCAMP_VPDI_CODE = 'PPCC'
        AND SZVCAMP_EAB_ENABLE = 'Y'
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
         WHEN ssbsect_camp_code = 'PCN' THEN 'PPO'  WHEN ssbsect_camp_code = 'PON' THEN 'POL' 
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'O' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                               AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code -- Lookup day of week code
                               AND unpivotDayOfWeek.ssrmeet_vpdi_code = ssbsect_vpdi_code)
LEFT JOIN STUGRCCCS.SZVCAMP ON ssbsect_camp_code = SZVCAMP_CODE 
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. We do not need to extract sections times for past terms as section times are used for students to build their schedule.
  AND ssbsect_vpdi_code = 'PPCC'
  AND SUBSTR(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND szvcamp_vpdi_code = 'PPCC'
  AND szvcamp_eab_enable = 'Y'
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM sectionTime","Section Times"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"core.Student","with term_list as (
  select distinct stvterm_code as term_code
    from stvterm join sfrrsts on stvterm_code = sfrrsts_term_code
   where sfrrsts_rsts_code in ('RA', 'RW', 'RE')
     and SFRRSTS_PTRM_CODE = '1'
     and substr(stvterm_code, -1, 1) IN ('0','9')
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-(365*2)
   order by stvterm_code desc
),
--
pop AS ( --this is your population of students to include
select distinct pidm from (Select Sfrstcr_Pidm pidm,
                                  Sfrstcr_Term_Code term
                             From Sfrstcr
                            Where sfrstcr_rsts_code in ('RA', 'RW', 'RE')
                              and sfrstcr_term_code in (select term_code from term_list)
                            UNION
                           (select saradap_pidm pidm,
                                   saradap_term_code_entry term
                              from saradap
                             where saradap_term_code_entry in (select term_code from term_list))
                            UNION
                           (Select spriden_pidm as pidm,
                                   '' as term
                              from spriden
                             where spriden_change_ind is null
                               and spriden_id in ('M00228864','M00121434','M00230992','M00231782','M002329013',
                                                  'M00224342','M00229209','M00224340','M00232640','M00228476',
                                                  'M00230064','M00230438','M00226863','M00233686','M00228170',
                                                  'M00223362','M00232251','M00090255','M00081684','M00230063',
                                                  'M00232533','M00233680','M00233280','M00226394','M00228757',
                                                  'M00225416','M00136688','M00049297','M00020297','M00231765',
                                                  'M00231093','M00225395','M00229076','M00228106','M00230554',
                                                  'M00223574','M00229026','M00229123','M00225056','M00228734',
                                                  'M00230304','M00225820','M00223746','M00227154','M00046412',
                                                  'M00224868','M00232704','M00225902','M00233117','M00228572',
                                                  'M00245101','M00230615','M00232418','M00200617'))
                           )),
stu_pull as (
select spriden_id nk,
       GOBTPAC_EXTERNAL_USER as username,
       GOBTPAC_EXTERNAL_USER||'@mycom.marin.edu' as email,
       spriden_first_name first_name,
       spriden_last_name last_name,
       nvl(to_char(spbpers_birth_date,'YYYY-MM-DD'),'2000-01-01') birthdate,
'T' as is_active
  from spriden
  join spbpers on spriden_pidm = spbpers_pidm
  left join gobtpac on spbpers_pidm = gobtpac_pidm
 where spriden_change_ind is null
 and spriden_pidm in (select * from pop)
)

select nk, username, email, first_name, last_name, birthdate, is_active
  from stu_pull","Student"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"core.student","WITH pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select emplid, max(strm)
              from ps_stdnt_car_term b
              where institution = 'NV280'
              and ACAD_CAREER = 'CRED'
             -- and WITHDRAWN_CODE <> 'NWD'
              group by emplid) b
              on a.emplid = b.emplid         
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid  
WHERE  1=1
        and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      ) 
        and acad_plan in ('2120','2124','2130','3400','2990')

)                  

Select distinct a.EMPLID as NK
, NVL(lower(replace(EMAIL.EMAIL_ADDR,'@email.vccs.edu','')), a.emplid) username
, Nvl(email.EMAIL_ADDR, a.emplid || '@missing.nova.edu') as email
, a.FIRST_NAME as FIRST_NAME
, a.LAST_NAME as LAST_NAME
, to_char(a.BIRTHDATE,'YYYY-MM-DD') as birthday
, 'T' as is_active

FROM   PS_STDNT_CAR_TERM b
       
       --MOST STUDENT GENERAL DATA  
       INNER JOIN PS_PERSONAL_DATA a 
               ON b.EMPLID = a.EMPLID 
               
       --E-MAIL  
       LEFT JOIN PS_EMAIL_ADDRESSES email 
              ON email.EMPLID = a.EMPLID 
                 AND email.E_ADDR_TYPE IN ( 'VCCS' )         --Update, member-specific; looking for campus email
         --AND PREF_EMAIL_FLAG = 'Y'  


WHERE  1 = 1 
and b.emplid in (select student_id from pop)
ORDER  BY 1 ","Student"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.StudentCourse","-- Fields  nk,student,term,course,section,grade_cd,grade_points,credits_attempted,credits_earned,status,is_active
-- ModelName cat.StudentCourse
-- Name    Course
-- Output  Student_Course_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:


-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 3
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
AND REGEXP_LIKE (shrtckn_subj_code, '^[a-m|A-M]') -- Filter out subject codes starting with characters between a and m
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
\\\""final\\\"" AS (
--SELECT * FROM studentCourse
--UNION
SELECT * FROM completedCourses
--UNION
--SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Student Course_Part 2"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.Program","with max_prog_list as (
  SELECT sgbstdn_program_1 as program_code,
         MAX(sgbstdn_term_code_eff) AS max_eff_term
    FROM sgbstdn
   GROUP BY sgbstdn_program_1
),
prog_desc as (
  select smrpcmt_program, listagg(smrpcmt_text, ' ') within group (order by smrpcmt_prnt_code asc) as smrpcmt_text
    from smrpcmt s1 join (select s2.smrpcmt_program as prgm, max(s2.smrpcmt_term_code_eff) as term
                            from smrpcmt s2 group by s2.smrpcmt_program) mx on s1.smrpcmt_term_code_eff = Mx.term
                                                                           and s1.smrpcmt_program = Mx.Prgm
   group by smrpcmt_program
   order by smrpcmt_program
)
select distinct
      sobcurr_program || '$$' || init_year as nk,
      sobcurr_program as cd,
      DECODE(stvmajr_cipc_code,  null, null, SUBSTR(stvmajr_cipc_code, 1, 2) || '.' || SUBSTR(stvmajr_cipc_code, 3)) cip,
      init_year cat_yr,
      smrprle_program_desc name,
      substr(coalesce(smrpcmt_text, stvmajr_desc),1,1000) AS \\\""desc\\\"",
      DECODE(sobcurr_degc_code, 'AA', 60, 'AA-T', 60, 'AS', 60, 'AS-T', 60, 'CERT', 18, 'CERTT', 30, 'CERTF', 60, 99) credits, 
      '' enrollment_notes,
      '' registration_notes,
      COALESCE(stvmajr_code, '') area_of_study,
      '' concentration,
      Sobcurr_Degc_Code Credential,
      case when sobcurr_degc_code in ('AA','AA-T','AS','AS-T','CERT','CERTF','CERTT') then 'Y' else 'N' end as is_transfer,
      case
        when stvterm_code = max_eff_term and sobcurr_degc_code in ('AA','AA-T','AS','AS-T','CERT') then 'T'
        else 'F'
      end as is_active
  from sobcurr left join sgbstdn on sobcurr_program = sgbstdn_program_1
                    join stvterm on sgbstdn_term_code_eff = stvterm_code
                    join max_prog_list on sgbstdn_program_1 = program_code
               LEFT JOIN smrprle ON sobcurr_program = smrprle_program
               left join prog_desc on sobcurr_program = smrpcmt_program
               LEFT JOIN stvmajr ON sgbstdn_majr_code_1 = stvmajr_code
               left join (select stvterm_acyr_code as init_year,
                                 stvterm_code as init_term
                            from stvterm join sobcurr on stvterm_code = sobcurr_term_code_init) t on sobcurr_term_code_init = t.init_term
 order by nk, is_active","Program"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.Section","WITH SFRRSTS_DATES as (
Select Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_Rsts_Code, Sfrrsts_Start_Date, Sfrrsts_End_Date
From Sfrrsts
where Sfrrsts_rsts_code in ('RW','RE','DD','DW','DC','AW','WS','WC','WW')
)

SELECT 
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_crn cd,
  ssbsect_subj_code || ssbsect_crse_numb course,
  ssbsect_term_code term,
  NVL(stvcamp_code, 'DEFAULT') campus,
  ssbsect_max_enrl seats_offered, 
  'N' is_unlimited_seating,
  CASE 
    WHEN spriden_last_name IS NULL THEN 'TBD'
    ELSE spriden_last_name || ', ' || spriden_first_name
  END instructor_name,
  NVL(to_char(ssrmeet_start_date, 'YYYY-MM-DD'), '2000-01-01') class_start_dt,
  NVL(to_char(ssrmeet_end_date, 'YYYY-MM-DD'), '2000-01-02') class_end_dt,
  Case
    When Sfrrsts_rsts_code In ('DD','DW','DC') and Sfrrsts_Start_Date is not null Then to_char(Sfrrsts_Start_Date,'YYYY-MM-DD')
    Else to_char(ssrmeet_start_date, 'YYYY-MM-DD')
  End As Drop_Start_Dt,
  Case 
    When Sfrrsts_rsts_code In ('DD','DW','DC') and Sfrrsts_End_Date is not null Then to_char(Sfrrsts_End_Date,'YYYY-MM-DD')
    else to_char(ssbsect_drop_cut_off_date, 'YYYY-MM-DD') 
  end as drop_end_dt,
  '' as withdraw_end_dt,
  CASE 
    WHEN ssbsect_ssts_code = 'A' AND ssrmeet_start_date > (sysdate - 184) THEN 'T'
    ELSE 'F'
  END is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
                  JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                              AND ssbsect_term_code = ssrmeet_term_code
             LEFT JOIN stvcamp ON ssbsect_camp_code = stvcamp_code
             LEFT JOIN SFRRSTS_DATES ON SSBSECT_TERM_CODE = SFRRSTS_TERM_CODE
                                    AND SSBSECT_PTRM_CODE = SFRRSTS_PTRM_CODE
WHERE spriden_change_ind IS NULL 
  AND Sfrrsts_Start_Date >= sysdate-365*3
  and Sfrrsts_Start_Date < sysdate
  and substr(ssbsect_term_code, -1, 1) != '5'","Section"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"catcc.WaitlistPosition","WITH getLastXTerms AS (
  SELECT stvterm_code
    FROM stvterm
   WHERE stvterm_code <= (select stvterm_code
                            from stvterm
                           where stvterm_start_date < sysdate
                             and stvterm_end_date > sysdate
                             and substr(stvterm_code, -1, 1) IN ('0','9')
                             and rownum = 1)
     AND ROWNUM < 6
   ORDER BY 1 DESC
),

finalDataSet AS (SELECT
  spriden_id || '$$' || sfrstcr_crn || '$$' || sfrstcr_term_code AS nk
  , spriden_id AS student
  , sfrstcr_crn || '$$' || sfrstcr_term_code AS section
  , sfrstcr_wl_priority AS position
  , 'T' AS is_active
FROM sfrstcr
	LEFT JOIN spriden ON spriden.spriden_pidm = sfrstcr.sfrstcr_pidm
where sfrstcr_rsts_code = 'WL'
  and sfrstcr_term_code in (select * from getLastXTerms)
)

-- Wrapper query
SELECT *
  FROM finalDataSet
 where position is not null","WaitlistPosition"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.Program","SELECT nk,
       cd,
       cat_yr,
       name,
       program_desc \\\""desc\\\"",
       decode(credits, 40, 60, credits) as credits,
       enrollment_notes,
       registration_notes, 
       area_of_study,
       concentration,
       credential,
       DECODE(cip, null, null, SUBSTR(cip, 1, 2) || '.' || SUBSTR(cip, 3)) as cip,
       is_transfer,
       is_active
  FROM EAB_PROGRAM
 WHERE college LIKE 'P%'","Program"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.SeatsAvail","-- Fields	nk,avail_seats,is_active
-- Model Name	cat.SeatsAvail
-- Name	SeatsAvail
-- Output	SeatsAvail_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:	

-- extract seats available from banner
WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk.
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
WHERE 1=1
  AND ssbsect_ssts_code = 'A' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. we do not need to extract seats available for past terms.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM seatsAvail
","Seats Available"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.Term","-- get Terms from Banner
WITH term AS (SELECT 
  stvterm_code nk, 
  stvterm_desc \\\""name\\\"", 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case 
    When (Stvterm_Desc Like '%Fall%'
    or Stvterm_Desc Like '%Winter%'
    or Stvterm_Desc Like '%Spring%'
    or Stvterm_Desc Like '%Summer%') 
    and stvterm_code not in ('999999','000000')
    and stvterm_code like '%3' THEN 'T' -- Logic to set just Coastline terms that end in 3 as active
    ELSE 'F'
  END is_active
  /*CASE sobterm_reg_allowed WHEN 'Y' THEN 'T'
                  ELSE 'F'
                  END is_active*/

FROM stvterm 
  JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
  --JOIN sobterm ON sobterm_term_code = stvterm_code -- Coastline logic but no access to sobterm
WHERE sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member
  AND sfrrsts_ptrm_code = '1' -- Confirm ptrm code to include with BA/Member
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in stvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
SELECT
  stvterm_code nk,
  stvterm_desc \\\""name\\\"",
  stvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case
    When (Stvterm_Desc Like '%Fall%'
    or Stvterm_Desc Like '%Winter%'
    or Stvterm_Desc Like '%Spring%'
    or Stvterm_Desc Like '%Summer%') 
    and stvterm_code not in ('999999','000000')
    and stvterm_code like '%3' THEN 'T'  -- Logic to set just Coastline terms that end in 3 as active
    ELSE 'F'
  END is_active
  /*CASE sobterm_reg_allowed WHEN 'Y' THEN 'T'
                  ELSE 'F'
                  END is_active*/
FROM stvterm
--JOIN sobterm ON sobterm_term_code = stvterm_code -- Coastline logic but no access to sobterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = stvterm_code
                   AND sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_ptrm_code = '1') -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM finalDataSet","Terms"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.EnrollmentApplication","-- Columns: nk,student,app_term,app_number,app_dt,personal_email,is_active
-- Model: cat.EnrollmentApplication
with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),
now_term as (
  select stvterm_code as a_term
    from stvterm
   where stvterm_end_date >= sysdate
     and rownum = 1
   order by stvterm_code asc
),
TERM_LIST AS (
  select stvterm_code,
         (select a_term from now_term) as now_term
    from stvterm
   where stvterm_code <= (select * from now_term)
     and rownum < 5
   order by stvterm_code desc
),
FUTR_TERM as (
  select stvterm_code
    from stvterm
   where stvterm_end_date >= sysdate
),
ACTV_TERM as (
  select stvterm_code,
         now_term,
         case
           -- summer
           when substr(now_term,-2,2) = '50' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- spring
           when substr(now_term,-2,2) = '10' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- fall
           when substr(now_term,-2,2) = '80' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              else 'F'
            end         
           -- other
           else 'F'
         end as is_active
    from term_list
),
pop as  (
  select distinct s2.spriden_pidm as pidm, s2.spriden_id as student_id
    from saradap s1 join spriden s2 on s1.saradap_pidm = s2.spriden_pidm
                                   and s2.spriden_change_ind is null
   where s1.saradap_term_code_entry in (select stvterm_code from ACTV_TERM where is_active='T'
                                        union
                                        select stvterm_code from FUTR_TERM)
),
email_list as (
   Select Goremal_Pidm As Pidm,
         --Coalesce(
          ( select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'PERS' and rownum = 1 /*),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'BUS' and rownum = 1),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'OTH' and rownum = 1),
          ''
        */ ) as email
    from goremal g
   group by goremal_pidm
),
app_list as (
select p.student_id as nk,
       p.student_id as student,
       saradap_term_code_entry as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       trim(el.email) as personal_email,
       'T' as is_active
  from saradap join max_list ml on saradap_pidm = ml.pidm
                               and saradap_term_code_entry = ml.max_term
               left join pop p on saradap_pidm = p.pidm
               left join email_list el on saradap_pidm = el.pidm
 where saradap_term_code_entry in (select stvterm_code from ACTV_TERM where is_active='T'
                                   union
                                   select stvterm_code from FUTR_TERM)
   and p.student_id is not null
   and SARADAP_APST_CODE= 'D'
)
select nk, student, app_term, app_number, app_dt, personal_email, is_active
  from app_list
 where to_date(app_dt, 'YYYY-MM-DD') >= to_date('2016-06-01', 'YYYY-MM-DD')","EnrollmentApplicationTable"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"noah_major","
SELECT DISTINCT STVMAJR_CODE        AS MAJOR_CD
	            , STVMAJR_DESC      AS MAJOR_NAME
	            , STVMAJR_CIPC_CODE AS CIP_CD

FROM STVMAJR

WHERE 1=1
   AND STVMAJR_VALID_MAJOR_IND = 'Y'

ORDER BY 1","Major Lkp"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"catcc.WaitlistPosition","with CUR_TERM AS (
  select stvterm_code
    from stvterm
   where stvterm_code <= (SELECT min(stvterm_code)
                            FROM stvterm
                           WHERE UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
                             AND STVTERM_CODE not in ('000000', '900000', '999999')
                             and STVTERM_END_DATE >= sysdate)
     and rownum <= 3
     and UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     and STVTERM_CODE not in ('000000', '900000', '999999')
   ORDER BY 1 desc
),
STU_WL AS (
  select spriden_id||'$$'||sfrstcr_crn||'$$'||sfrstcr_term_code as nk,
         spriden_id as student,
         sfrstcr_crn||'$$'||sfrstcr_term_code as section,
         sfrstcr_wl_priority as position,
         'Y' as is_active
    from sfrstcr left join spriden on sfrstcr_pidm = spriden_pidm
                                  and spriden_change_ind is null
   where sfrstcr_rsts_code = 'WL'
     and sfrstcr_term_code in (select * from cur_term)  
)
select * from STU_WL order by section, position","WaitlistPosition"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"core.Advisor","-- Fields  nk,username,email,first_name,last_name,is_active
-- Model Name  core.Advisor
-- Name  Advisor
-- Output  Advisor_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- compute max term advisor record
WITH advisorMaxTerm AS (
SELECT sibinst_pidm
FROM sibinst baseTable
WHERE sibinst_fcst_code = 'AC'
  AND sibinst_advr_ind = 'Y'
  AND sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                              FROM sibinst compTable
                              WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                              )
),

-- extract advisor data
\\\""advisor\\\"" AS (
SELECT spriden_id AS nk
  , spriden_id AS username
  , COALESCE((SELECT goremal_email_address
              FROM goremal
                WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'GC' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y') -- try to get campus email if active and preferred. Confirm email_code with BA/Member.
              , (SELECT goremal_email_address
                FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'GC' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N') -- try to get campus email if active and not preferred. Confirm email_code with BA/Member.
              , LOWER(spriden_id) || '@missingemail.org') AS email -- Set default email address if none above are available.
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , 'T' AS is_active
FROM spriden
JOIN advisorMaxTerm ON advisorMaxTerm.sibinst_pidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent advisor record is extracted
)

-- Wrapper query
SELECT * FROM \\\""advisor\\\""
","Advisor"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.SectionTime","-- Unpivot day of week from ssrmeet into a single column
WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00'  
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' 
          ELSE ''
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
        --WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NULL
        --  THEN ssrmeet_room_code
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'A' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                              AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code) -- Lookup day of week code
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms
  AND ssbsect_camp_code IN ('G', 'H', 'M', 'O') -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA.
)

-- wrapper query
SELECT * FROM sectionTime","Section Time"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.StudentCourse","-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND stvterm_desc like 'CCC%' -- Scope the query to only CCC terms
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

/*-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),*/

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
/*studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM ODSSRC.CCCD_TEST_EAB_GENERAL_PERSON -- Custom view at Coastline that replaces SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),*/

-- Force the query optimizer to read this view once into memory and use it in other statements below
CCCD_EAB_GENERAL_PERSON_cte AS (
SELECT *
  FROM CCCD_EAB_GENERAL_PERSON
    WHERE spriden_pidm IN (SELECT studentPidm
                          FROM studentPopulation
                          )
    AND spriden_change_ind IS NULL
),

-- Force the query optimizer to read this table once into memory and use it in other statements below
shrtckg_cte as (
SELECT *
  FROM shrtckg
  --JOIN studentPopulation ON studentPopulation.studentPidm = shrtckg_pidm
  WHERE shrtckg_pidm IN (SELECT studentPidm
                          FROM studentPopulation
                        )
),
-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg_cte
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , shrtckn_term_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(shrtckn_crn || '$$' || shrtckn_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM CCCD_EAB_GENERAL_PERSON_cte -- Custom view at Coastline that replaces SPRIDEN
  --JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  --JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg_cte ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg_cte.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg_cte.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg_cte.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
--WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
)

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
/*droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN ODSSRC.CCCD_TEST_EAB_GENERAL_PERSON ON spriden_pidm = studentDroppedCrse.pidm -- Custom view at Coastline that replaces SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),*/

-- Combine all above categories
--finalDataSet AS (
--SELECT * FROM studentCourse -- 360 secs, 110 secs with mat_view - 50,048 rows in 110 secs
--UNION
--SELECT * FROM completedCourses -- problem
--UNION
--SELECT * FROM droppedCourses -- 280 secs with mat_view - 62,781 rows in 60 secs
--)

-- Wrapper query
SELECT * FROM completedCourses","Student Courses (Completed)"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.StudentTerm","-- get last five terms based on current term
WITH getLastFiveTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastFiveTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastFiveTerms ON getLastFiveTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastFiveTerms ON getLastFiveTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get the max term for each program
getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
  LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
WHERE stvterm_code IS NOT NULL
  GROUP BY  sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
SELECT sgbstdn_pidm
  , sgbstdn_program_1
  , sgbstdn_stst_code
  , sgbstdn_term_code_eff AS maxEffTerm
  , sgbstdn_term_code_ctlg_1
  , stvstst_reg_ind
FROM sgbstdn a
  LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
WHERE sgbstdn_program_1 IS NOT NULL
  AND stvstst_code IS NOT NULL
  AND sgbstdn_term_code_eff = (
                               SELECT MAX(sgbstdn_term_code_eff)
                               FROM sgbstdn
                                RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                               WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                AND stvterm_end_date <= sysdate + 365
                              )
),

maxEffTermStuAttr AS (
SELECT sgrsatt_pidm
  , sgrsatt_atts_code
FROM sgrsatt baseTable
  WHERE 1=1
  AND baseTable.sgrsatt_atts_code IN ('GGE', 'IGET', 'CSU')
  AND baseTable.sgrsatt_term_code_eff = (
                            SELECT MAX(compTable.sgrsatt_term_code_eff)
                              FROM sgrsatt compTable
                                WHERE compTable.sgrsatt_pidm = baseTable.sgrsatt_pidm
                            )
),

-- final query to extract student term data
studentTerm AS (
SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
  , spriden_id AS student
  , studentDetails.maxEffTerm AS term
  , studentDetails.sgbstdn_program_1 || '$$' || getProgramMaxTerm.acyr || '$$' || COALESCE(sgrsatt_atts_code, 'GGE') AS \\\""program\\\""
  , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active
FROM spriden
  RIGHT JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
  JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
  JOIN studentPopulation ON studentPidm = spriden_pidm
  LEFT JOIN maxEffTermStuAttr ON sgrsatt_pidm = spriden_pidm
WHERE spriden_change_ind IS NULL
)

-- wrapper query
select * from studentTerm","Student Term"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.Program","WITH max_eff AS (
SELECT max(SOBCURR.SOBCURR_TERM_CODE_INIT) max_eff, SOBCURR.SOBCURR_PROGRAM pgrm
  FROM SOBCURR SOBCURR
  GROUP BY SOBCURR.SOBCURR_PROGRAM
)

SELECT DISTINCT
SOBCURR.SOBCURR_PROGRAM || '$$' || STVTERM.STVTERM_ACYR_CODE AS Nk,
SOBCURR.SOBCURR_PROGRAM AS cd,
to_number(STVTERM.STVTERM_ACYR_CODE) AS cat_yr,
--SMRPRLE.SMRPRLE_PROGRAM_DESC AS \\\""name\\\"", -- Old logic
DBMS_LOB.SUBSTR (customProgram.zcbprgm_short_desc, 50) AS \\\""name\\\"", -- limiting to 50 characters as spec supports 50 characters. This is a custom Wallace table.
--SMRPRLE.SMRPRLE_PROGRAM_DESC AS \\\""desc\\\"", -- Old logic
COALESCE(DBMS_LOB.SUBSTR (customProgram.zcbprgm_desc, 3000), 'No Description Available') AS \\\""desc\\\"", -- Limiting CLOB to 3000 characters as oracle won't allow selecting the entire feed. This may be adjusted as necessary. This is a custom Wallace table.
-- DECODE (SOBCURR.SOBCURR_DEGC_CODE, 'AS', 60,
--                                     'AAS', 67,
--                                     'STC', 9,
--                                     'CERT', 50,
--                                     99) AS credits, -- Confirm with BA -- Old logic
COALESCE (customProgram.zcbprgm_hours, 0) AS credits,
'' AS enrollment_notes,
'' AS registration_notes,
COALESCE (SUBSTR(SOBCURR.SOBCURR_PROGRAM, CAST(INSTR(SOBCURR.SOBCURR_PROGRAM, '-', -1) AS NUMBER) +1), '') AS area_of_study,
'' AS concentration,
SOBCURR.SOBCURR_DEGC_CODE AS \\\""credential\\\"",
DECODE (STVMAJR.STVMAJR_CIPC_CODE, NULL, NULL,
                                    SUBSTR(STVMAJR.STVMAJR_CIPC_CODE,1,2) || '.' || SUBSTR(STVMAJR.STVMAJR_CIPC_CODE,3)
                                    ) AS CIP,
CASE WHEN SOBCURR.SOBCURR_DEGC_CODE IN ('AA','AS') THEN 'T' ELSE 'F' END AS is_transfer, -- Need to confirm
--CASE WHEN SOBCURR.SOBCURR_TERM_CODE_INIT = max_eff.max_eff THEN 'T' ELSE 'F' END AS is_active -- Removed this logic for Wallace and implemented custom logic below.
CASE WHEN (sormcrl_rec_ind = 'Y'
          and sormcrl_adm_ind = 'Y'
          and sormcrl_stu_ind = 'Y'
          and sormcrl_his_ind = 'Y'
          and sormcrl_dau_ind = 'Y') THEN 'T'
      ELSE 'F' END AS is_active
FROM SOBCURR SOBCURR
  LEFT JOIN STVTERM STVTERM ON SOBCURR.SOBCURR_TERM_CODE_INIT = STVTERM.stvterm_code
  LEFT JOIN SMRPRLE SMRPRLE ON SMRPRLE.SMRPRLE_PROGRAM = SOBCURR.SOBCURR_PROGRAM
  LEFT JOIN max_eff max_eff ON max_eff.pgrm = SOBCURR.SOBCURR_PROGRAM
--  LEFT JOIN SGBSTDN SGBSTDN ON SGBSTDN.SGBSTDN_PROGRAM_1 = SOBCURR.SOBCURR_PROGRAM
--  JOIN (
--        SELECT DISTINCT SGBSTDN_1.SGBSTDN_PROGRAM_1, max(SGBSTDN_1.SGBSTDN_TERM_CODE_EFF) AS max_eff_term
--          FROM SGBSTDN SGBSTDN_1
--          GROUP BY SGBSTDN_1.SGBSTDN_PROGRAM_1
--        ) T ON T.SGBSTDN_PROGRAM_1 = SGBSTDN.SGBSTDN_PROGRAM_1 AND T.max_eff_term = SGBSTDN.SGBSTDN_TERM_CODE_EFF
  LEFT JOIN STVMAJR STVMAJR ON STVMAJR.STVMAJR_CODE = (SUBSTR(SOBCURR.SOBCURR_PROGRAM, CAST(INSTR(SOBCURR.SOBCURR_PROGRAM, '-', -1) AS NUMBER) +1))
  LEFT JOIN SORMCRL ON sobcurr_curr_rule = sormcrl_curr_rule -- Added to implement logic for determining current programs at Wallace.
  LEFT JOIN WSCC.ZCBPRGM customProgram ON customProgram.zcbprgm_program = SOBCURR_PROGRAM -- Custom logic implemented at Wallace to store program description and credits. 
  WHERE SOBCURR.SOBCURR_PROGRAM NOT LIKE '%UNDC%' -- Exclude undeclared programs","Programs"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.Section","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'P'
 order by nk desc)

SELECT 
 nk,
 substr(nk, 0, instr(nk, '$$')-1) cd,
  case
    when instr(course, '$$') > 0 then substr(course, 0, instr(course, '$$')-1)
    else course
  end course,
 term,
 campus,
 max_seats seats_offered,
 CASE 
   WHEN is_unlimited_seating = 'Y' THEN 'T'
   ELSE 'F'
 END AS is_unlimited_seating,
 instuctor_name instructor_name,
 COALESCE(class_start_dt, '') class_start_dt,
 COALESCE(class_end_dt, '') class_end_dt,
 COALESCE(drop_start_dt, '') drop_start_dt,
 COALESCE(drop_end_dt, '') drop_end_dt,
 '' withdraw_end_dt,
 CASE 
   WHEN is_active = 'Y' THEN 'T'
   ELSE 'F'
 END AS is_active
FROM EAB_SECT
WHERE campus LIKE 'P%'
  and term in (select nk from cur_terms)","Section"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.StudentTerm","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE SUBSTR(stvterm_code, 1, 5) <= (SELECT MIN(SUBSTR(stvterm_code, 1, 5))
                                     FROM stvterm
                                     WHERE stvterm_start_date > sysdate)
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get the max term for each program that has a corresponding term assigned.
getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
  LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
WHERE stvterm_code IS NOT NULL
  GROUP BY  sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
SELECT sgbstdn_pidm
  , sgbstdn_program_1
  , sgbstdn_stst_code
  , sgbstdn_term_code_eff AS maxEffTerm
  , sgbstdn_term_code_ctlg_1
  , stvstst_reg_ind
FROM sgbstdn a
  LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
WHERE sgbstdn_program_1 IS NOT NULL
  AND stvstst_code IS NOT NULL
  AND sgbstdn_term_code_eff = (
                               SELECT MAX(sgbstdn_term_code_eff)
                               FROM sgbstdn
                                RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                               WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                AND stvterm_end_date <= sysdate + 365
                              )
),

-- final query to extract student term data
studentTerm AS (
SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
  , spriden_id AS student
  , studentDetails.maxEffTerm AS term
  , studentDetails.sgbstdn_program_1 || '$$' || getProgramMaxTerm.acyr AS \\\""program\\\""
  , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active -- set the record active if the corresponding stvstst_reg_ind is set to 'Y'
FROM CCCD_EAB_GENERAL_PERSON -- Custom view at Coastline replacing SPRIDEN
  RIGHT JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
  JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
  JOIN studentPopulation ON studentPidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
)

-- wrapper query
select * from studentTerm","Student Terms"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.seatsavail","select 
--a.SSBSECT_SUBJ_CODE || '$$' || a.SSBSECT_CRSE_NUMB  || '$$' || a.SSBSECT_TERM_CODE AS NK,
a.SSBSECT_CRN || '$$' ||a.SSBSECT_TERM_CODE AS NK,
a.SSBSECT_SEATS_AVAIL AVAIL_SEATS,
'T' AS IS_ACTIVE
from SSBSECT a
where a.SSBSECT_SSTS_CODE = 'A'
and a.SSBSECT_TERM_CODE > 201510
and a.ssbsect_camp_code = 'NCC'","SeatsAvail"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.studentterm","WITH PMT as (
select * from (
  select distinct smbpgen_program as pgrm,
         max(smbpgen_term_code_eff) as prog_max_term,
         stvterm_acyr_code as acyr
  from smbpgen
  left join stvterm on stvterm_code = smbpgen_term_code_eff
  where stvterm_code is not null
  --and smbpgen_program = 'AA_LAN_RUSS'
  group by smbpgen_program, stvterm_acyr_code
  ) b
  where prog_max_term = (select max(smbpgen_term_code_eff) from smbpgen where smbpgen.smbpgen_program = b.pgrm)
),

SGB as (
select * from (
 select sgbstdn_pidm,
      sgbstdn_program_1,
      sgbstdn_stst_code,
      sgbstdn_term_code_eff as max_eff_term,
    sgbstdn_term_code_ctlg_1,
    stvstst_reg_ind
  from sgbstdn
  left join stvstst on stvstst_code = sgbstdn_stst_code
  where sgbstdn_program_1 is not null
  and stvstst_code is not null
and sgbstdn_activity_date > sysdate-8) a -- Incremental extract for changes within the last week
where max_eff_term = (select max(sgbstdn_term_code_eff)
                        from sgbstdn
                        right join stvterm on sgbstdn_term_code_eff = stvterm_code
                        where a.sgbstdn_pidm = sgbstdn_pidm 
                        and stvterm_end_date <= sysdate + 365 )
order by 1,4
),

pop AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)))), 

pilot_pop as (
select distinct spriden_id from spriden
where spriden_id in ('T20142073'
,'T20140697'
,'T20139119'
,'T10251137'
,'T20138021'
,'T20136434'
,'T20134673'
,'T20131375'
,'T20137438'
,'T20114175'
,'T20131469'
,'T20145320'
,'T20135191'
,'T20144781'
,'T20140735'
,'T20133146'
,'T20139433'
,'T20145098'
,'T20095402'
,'T10506206'
,'T20134956'
,'T20122902'
,'T20139358'
,'T20141010'
,'T20046439'
,'T20134456'
,'T20111699'
,'T20088198'
,'T20132140'
,'T20144577'
,'T20144248'
,'T20138423'
,'T10477229'
,'T20130807'
,'T20132168'
,'T10058915'
,'T10504163'
,'T20119930'
,'T20139673'
,'T20137195'
,'T20115410'
,'T20138371'
,'T20135216'
,'T20137107'
,'T20135351'
,'T10176118'
,'T20133133'
,'T20141011'
,'T20133981'
,'T20138465'
,'T20133607'
,'T20139457'
,'T20133061'
,'T20055122'
,'T20142927'
,'T10496770'
,'T20133798'
,'T20132597'
,'T10088929'
,'T20115225'
,'T20095609'
,'T20142869'
,'T20132854'
,'T20133799'
,'T20131545'
,'T10505966'
,'T20130703'
,'T10519131'
,'T20128360'
,'T10468056'
,'T20128050'
,'T20132842'
,'T20133042'
,'T20134959'
,'T20140283'
,'T20063121'
,'T20142881'
,'T20136737'
,'T10492037'
,'T20145332'
,'T20146144'
,'T20131168'
,'T20133280'
,'T10056173'
,'T20143531'
,'T10122923'
,'T10395150'
,'T20080238'
,'T20142208'
,'T20141858'
,'T20137198'
,'T10006300'
,'T20134879'
,'T20137647'
,'T20143392'
,'T20139792'
,'T20134644'
,'T10441633'
,'T20141013'
,'T20146342'
,'T20130969'
,'T20135704'
,'T10096962'
,'T10467557'
,'T20133983'
,'T20138838'
,'T10447438'
,'T20136594'
,'T10503497'
,'T20139562'
,'T20137273'
,'T20135272'
,'T10399168'
,'T10123727'
,'T20115291'
,'T20135996'
,'T20117080'
,'T20014160'
,'T20139032'
,'T20123489'
,'T10205738'
,'T20112755'
,'T20145718'
,'T20141014'
,'T20140833'
,'T20137665'
,'T20135779'
,'T20141321'
,'T10294503'
,'T20142481'
,'T20133108'
,'T20132864'
,'T20134933'
,'T10206792'
,'T20137254'
,'T20142607'
,'T20139474'
,'T20129043'
,'T20084202'
,'T20147275'
,'T20131170'
,'T20133604'
,'T20147323'
,'T20140182'
,'T10296455'
,'T20131501'
,'T10095922'
,'T10177472'
,'T20139589'
,'T20079879'
,'T20141492'
,'T10144590'
,'T20041336'
,'T20132583'
,'T20135635'
,'T10340233'
,'T20113607'
,'T20146431'
,'T10474490'
,'T20140921'
,'T20143550'
,'T10211487'
,'T10142228'
,'T10294986'
,'T20146774'
,'T20141823'
,'T10442942'
,'T20117727'
,'T20130512'
,'T20139125'
,'T20135468'
,'T20127746'
,'T20142967'
,'T20134186'
,'T20134824'
,'T20145002'
,'T10175892'
,'T20136057'
,'T20128367'
,'T20131053'
,'T10315652'
,'T20135488'
,'T10381462'
,'T20092053'
,'T20133344'
,'T20144169'
,'T20132403'
,'T20130460'
,'T20140664'
,'T20145935'
,'T20134091'
,'T20137110'
,'T20123052'
,'T20081397'
,'T20146761'
,'T20061897'
,'T10439742'
,'T20144153'
,'T20142248'
,'T20134386'
,'T20126393'
,'T20136676'
,'T20138302'
,'T10477366'
,'T20140082'
,'T20143694'
,'T20140705'
,'T20131175'
,'T20069501'
,'T20118589'
,'T20136743'
,'T10335488'
,'T10326611'
,'T10359491'
,'T10507529'
,'T20140978'
,'T20136077'
,'T20139909'
,'T20130710'
,'T20139042'
,'T20146808'
,'T20144583'
,'T20133348'
,'T10513922'
,'T20031817'
,'T20136112'
,'T20145515'
,'T20146268'
,'T20138257'
,'T20143079'
,'T20141619'
,'T10511698'
,'T20143695'
,'T20132887'
,'T20132148'
,'T20141583'
,'T20136957'
,'T20130975'
,'T20137029'
,'T20023954'
,'T10318698'
,'T20115504'
,'T20131477'
,'T20146959'
,'T20132346'
,'T20138232'
,'T20135079'
,'T10508075'
,'T20135080'
,'T10504843'
,'T20144756'
,'T20131054'
,'T20140255'
,'T20089878'
,'T20124754'
,'T10116061'
,'T20134893'
,'T10437101'
,'T20120062'
,'T20147250'
,'T20147251'
,'T20122420'
,'T20136746'
,'T20119127'
,'T20130252'
,'T20140922'
,'T20136838'
,'T20133660'
,'T20139295'
,'T20142545'
,'T20135939'
,'T20133594'
,'T10230617'
,'T20140256'
,'T20122937'
,'T20119377'
,'T10252559'
,'T20090331'
,'T10487852'
,'T20058984'
,'T20138040'
,'T20143776'
,'T20132075'
,'T10385531'
,'T20116854'
,'T20130202'
,'T20136974'
,'T20118914'
,'T20133990'
,'T20135281'
,'T20139682'
,'T20136799'
,'T20072936'
,'T20136840'
,'T20133111'
,'T20143795'
,'T20140536'
,'T20135201'
,'T20120559'
,'T20131220'
,'T20131818'
,'T20137687'
,'T20137304'
,'T20138259'
,'T20141688'
,'T20134390'
,'T20034050'
,'T20134096'
,'T20127085'
,'T10019429'
,'T20139803'
,'T20134098'
,'T20131292'
,'T20139634'
,'T20143295'
,'T20133318'
,'T20144758'
,'T20135009'
,'T10296471'
,'T20071143'
,'T20113869'
,'T20140459'
,'T20145541'
,'T20134082'
,'T20122948'
,'T20134190'
,'T10436612'
,'T20131221'
,'T20145566'
,'T20139851'
,'T20124519'
,'T20119193'
,'T20129204'
,'T10146291'
,'T20091274'
,'T20132027'
,'T20135783'
,'T20133610'
,'T20131443'
,'T20137691'
,'T10493936'
,'T20141390'
,'T20134255'
,'T20141648'
,'T20078519'
,'T10447063'
,'T20061306'
,'T20134900'
,'T20142574'
,'T20134901'
,'T10200437'
,'T20132559'
,'T20143964'
,'T20084632'
,'T20141534'
,'T10443090'
,'T20144716'
,'T20119912'
,'T20138678'
,'T10510280'
,'T20147181'
,'T20130292'
,'T20137382'
,'T20138847'
,'T20117223'
,'T20131821'
,'T20134822'
,'T20134137'
,'T20143406'
,'T20131891'
,'T20121708'
,'T20136206'
,'T20146440'
,'T20141395'
,'T20137203'
,'T10168440'
,'T20146109'
,'T10472273'
,'T20137699'
,'T10266376'
,'T20136922'
,'T10174716'
,'T20144899'
,'T20132031'
,'T20136021'
,'T20129743'
,'T20122640'
,'T20133354'
,'T10481027'
,'T20131445'
,'T20134314'
,'T20133499'
,'T20136686'
,'T20120128'
,'T20146817'
,'T20136750'
,'T10384075'
,'T20087760'
,'T20123538'
,'T20122329'
,'T20141300'
,'T20140005'
,'T20132663'
,'T20137052'
,'T20135285'
,'T10517523'
,'T20145693'
,'T20142576'
,'T20131154'
,'T10014257'
,'T20127008'
,'T10309100'
,'T20075322'
,'T20136447'
,'T20143091'
,'T20129206'
,'T20147283'
,'T20132783'
,'T20145561'
,'T20131734'
,'T10437963'
,'T10086976'
,'T10050205'
,'T20143610'
,'T20134358'
,'T20139143'
,'T20124815'
,'T20139013'
,'T20124623'
,'T20134476'
,'T20139574'
,'T20113016'
,'T20137702'
,'T20138053'
,'T20136295'
,'T20131550'
,'T20130825'
,'T20139541'
,'T20141887'
,'T10476936'
,'T20065512'
,'T20136779'
,'T20129271'
,'T20136980'
,'T20143058'
,'T20134359'
,'T20131306'
,'T20142925'
,'T20134767'
,'T20145801'
,'T20133417'
,'T10175235'
,'T20138430'
,'T20141947'
,'T20108165'
,'T20135786'
,'T10481144'
,'T20119833'
,'T20135872'
,'T20143742'
,'T20110228'
,'T20130958'
,'T20147260'
,'T20134478'
,'T20136956'
,'T20137386'
,'T20109857'
,'T20134197'
,'T20136690'
,'T20136850'
,'T20001238'
,'T20084053'
,'T20138396'
,'T20113414'
,'T20134103'
,'T10311169'
,'T20138734'
,'T20131248'
,'T10265914'
,'T20025324'
,'T20132174'
,'T20135124'
,'T20112243'
,'T20146364'
,'T20135945'
,'T20116400'
,'T20131794'
,'T10259274'
,'T20132081'
,'T20071682'
,'T20148029'
,'T20134290'
,'T20135289'
,'T20136342'
,'T20136616'
,'T20065403'
,'T20133462'
,'T20146673'
,'T20140678'
,'T20136106'
,'T20146891'
,'T20133966'
,'T20069324'
,'T20126031'
,'T20141629'
,'T20138454'
,'T20071432'
,'T20078935'
,'T20140212'
,'T20129628'
,'T10500206'
,'T20144519'
,'T20134791'
,'T20145441'
,'T20132977'
,'T10478796'
,'T20116519'
,'T20120398'
,'T10477645'
,'T20129661'
,'T20145218'
,'T20146757'
,'T20131971'
,'T20128268'
,'T20144380'
,'T20134651'
,'T10283489'
,'T20142624'
,'T20134396'
,'T20119458'
,'T10060725'
,'T20137929'
,'T20137329'
,'T20074716'
,'T20062336'
,'T20127505'
,'T10522482'
,'T10049390'
,'T20141588'
,'T20135361'
,'T20137072'
,'T10207952'
,'T20126577'
,'T20146460'
,'T20108892'
,'T20118363'
,'T20131669'
,'T20138322'
,'T10468446'
,'T20137460'
,'T20131601'
,'T10484588'
,'T20135480'
,'T20094863'
,'T20046244'
,'T20134917'
,'T20136968'
,'T20137179'
,'T20130175'
,'T10486170'
,'T20138082'
,'T20145264'
,'T20131826'
,'T20136194'
,'T20138460'
,'T20148240'
,'T10515725'
,'T20134918'
,'T20016534'
,'T20144635'
,'T10479503'
,'T20138149'
,'T20139865'
,'T20136801'
,'T20133371'
,'T20130256'
,'T10448705'
,'T20127982'
,'T20144930'
,'T20110308'
,'T20137629'
,'T20133100'
,'T20070882'
,'T20134773'
,'T20140040'
,'T10495201'
,'T20006056'
,'T20141233'
,'T10288911'
,'T20136991'
,'T20132351'
,'T20132548'
,'T20136536'
,'T20133084'
,'T20133596'
,'T20145386'
,'T20141889'
,'T20135791'
,'T20137062'
,'T20142933'
,'T20133703'
,'T20124009'
,'T20146636'
,'T20124628'
,'T10086790'
,'T20111398'
,'T20084752'
,'T20137718'
,'T20145178'
,'T10142257'
,'T20130647'
,'T20123940'
,'T10283820'
,'T20112971'
,'T20076464'
,'T20138952'
,'T20132485'
,'T20080343'
,'T10086855'
,'T20132424'
,'T10409070'
,'T10449553'
,'T20091507'
,'T10512048'
,'T20132654'
,'T20140344'
,'T20144164'
,'T10478308'
,'T20130212'
,'T20146190'
,'T20046319'
,'T20139987'
,'T10140198'
,'T10383977'
,'T10473289'
,'T20145505'
,'T20132044'
,'T20127784'
,'T20144931'
,'T10325462'
,'T20139824'
,'T20086350'
,'T20136692'
,'T10489634'
,'T20140058'
,'T20135643'
,'T20134685'
,'T20129943'
,'T20141635'
,'T10411480'
,'T20127057'
,'T10154990'
,'T10459511'
,'T20140935'
,'T10517646'
,'T20139581'
,'T20135218'
,'T20137346'
,'T20134588'
,'T20131535'
,'T20135295'
,'T20135644'
,'T10293158'
,'T20132460'
,'T20143444'
,'T20094793'
,'T20135434'
,'T20070281'
,'T20122450'
,'T20124359'
,'T20130930'
,'T20086621'
,'T20136860'
,'T20138099'
,'T20136584'
,'T20136913'
,'T10222992'
,'T20119775'
,'T20121198'
,'T20141030'
,'T10504585'
,'T20139671'
,'T20118744'
,'T10265820'
,'T20092446'
,'T20148020'
,'T20135647'
,'T20139813'
,'T10097674'
,'T20134210'
,'T20132089'
,'T20136585'
,'T20140047'
,'T10265625'
,'T20005802'
,'T10086480'
,'T20145445'
,'T20137213'
,'T20134830'
,'T20144689'
,'T20093769'
,'T20137816'
,'T20144255'
,'T20141057'
,'T20139814'
,'T20136757'
,'T20132581'
,'T20140266'
,'T10323807'
,'T10449081'
,'T20134653'
,'T20121852'
,'T20134925'
,'T20142418'
,'T20141700'
,'T10324606'
,'T20136199'
,'T20140767'
,'T20136870'
,'T20136946'
,'T20147121'
,'T20121549'
,'T20136758'
,'T20137561'
,'T20132181'
,'T20131317'
,'T10506766'
,'T20145894'
,'T20134212'
,'T20137214'
,'T20133213'
,'T20136012'
,'T10148685'
,'T20132695'
,'T20135877'
,'T20134260'
,'T20141909'
,'T20132879'
,'T20139075'
,'T20130653'
,'T10507745'
,'T20145055'
,'T20133572'
,'T20134782'
,'T20129069'
,'T20140686'
,'T10496038'
,'T20130837'
,'T20142837'
,'T20098073'
,'T20143749'
,'T20059555'
,'T20045708'
,'T20135234'
,'T20136460'
,'T20135978'
,'T20131723'
,'T20136354'
,'T20142897'
,'T20088032'
,'T20139077'
,'T20130874'
,'T20146844'
,'T10065938'
,'T20146531'
,'T20147453'
,'T20065690'
,'T20132052'
,'T20140352'
,'T20124929'
,'T20124823'
,'T10164489'
,'T20131073'
,'T20136865'
,'T20136356'
,'T20135110'
,'T20141652'
,'T20143566'
,'T20138868'
,'T20119530'
,'T20132674'
,'T10486697'
,'T20144881'
,'T10395596'
,'T20131603'
,'T20141417'
,'T10169417'
,'T20013500'
,'T20137067'
,'T20136201'
,'T20131489'
,'T20138074'
,'T10516932'
,'T20131075'
,'T20143425'
,'T20131608'
,'T10489712'
,'T20137190'
,'T20090327'
,'T20131589'
,'T20144817'
,'T20131828'
,'T20122897'
,'T20134298'
,'T20131200'
,'T20130442'
,'T20144818'
,'T20118274'
,'T20056793'
,'T20129067'
,'T20140577'
,'T20133626'
,'T20139643'
,'T20134157'
,'T20134006'
,'T20134502'
,'T20135443'
,'T20133736'
,'T20137735'
,'T10280754'
,'T20136431'
,'T20136868'
,'T20133580'
,'T20146338'
,'T20137069'
,'T20116883'
,'T20132058'
,'T10198943'
,'T20133759'
,'T20138696'
,'T20135485'
,'T20142900'
,'T10265632'
,'T20135879'
,'T20135800'
,'T20118508'
,'T10410602'
,'T20147272'
,'T20131322'
,'T20096013'
,'T20129188'
,'T20145180'
,'T20136914'
,'T20145615'
,'T10121006'
,'T10486354'
,'T20135301'
,'T20145373'
,'T20132509'
,'T20125878'
,'T20134800'
,'T10514685'
,'T20122676'
,'T20030478'
,'T20132772'
,'T20138580'
,'T20126931'
,'T20125412'
,'T20147935'
,'T10174344'
,'T20141083'
,'T20142423'
,'T10266523'
,'T20142644'
,'T10139773'
,'T10123768'
,'T20141421'
,'T20137645'
,'T20136694'
,'T20131617'
,'T20131278'
,'T20146017'
,'T20130218'
,'T20141426'
,'T20088160'
,'T20131836')) 


select spriden_id || '$$' || SGB.max_eff_term nk,
       spriden_id student,
       SGB.max_eff_term term,
       SGB.sgbstdn_program_1 || '$$' || PMT.acyr \\\""program\\\"",
       decode(stvstst_reg_ind,'Y','T','F') is_active
from spriden
right join SGB on spriden_pidm = SGB.sgbstdn_pidm
join PMT on SGB.sgbstdn_program_1 = PMT.pgrm 
--right join pop on spriden_pidm = pop.pidm 
where spriden_change_ind is null
and spriden_pidm in (select * from pop)
--and spriden_id in (select * from pilot_pop)","Student Term"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"reg.StudentTestScore","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT szvterm_code
FROM szvterm
WHERE szvterm_code <= (
                      SELECT MIN(szvterm_code)
                      FROM szvterm
                        WHERE szvterm_start_date > sysdate
                      )
AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
AND szvterm_vpdi_code = 'ACC'
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = sfrstcr_term_code
WHERE sfrstcr_rsts_code LIKE 'R_'
      AND sfrstcr_vpdi_code = 'ACC'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = saradap_term_code_entry
WHERE saradap_vpdi_code = 'ACC' 
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
  AND substr(stvtesc_code, 2, 1) != 'Z' 
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query 
SELECT * FROM studentTestScore ","Student Test Scores"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"core.Student","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Student File

Fields: nk, username,email,first_name,last_name,birthdate,veteran_ind,enrollment_status,is_active
*/

SELECT NVL(ir.id, '')                                AS nk
       , NVL(ir.id, '')                              AS username
       --, NVL(ar.line1, '')                           AS email_old  --Updated to below function per MHCC request, 2017-01-29
       , NVL(TRIM(getemail(population.ID)), '')      AS email
       , NVL(TRIM(ir.firstname), '')                 AS first_name
       , NVL(TRIM(ir.lastname), '')                  AS last_name
       , NVL(TO_CHAR(pr.birth_date, '%Y-%m-%d'), '') AS birthdate 
       , TRIM('')             AS veteran_ind
       , TRIM('')             AS enrollment_status
       , CASE
           WHEN pr.grp_no > 0 THEN 'T' 
           ELSE 'F'
         END                                         AS is_active  --Updated logic according to MHCC and Jeff Gruber, 2017-01-29
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population
--student id info
JOIN informix.id_rec ir
  ON population.id = ir.id
--email info
LEFT JOIN informix.aa_rec ar
       ON ar.id = ir.id
          AND ar.aa = 'EML'
          AND ar.end_date IS NULL
--profile info
LEFT JOIN informix.profile_rec pr
       ON pr.id = ir.id          
WHERE 1=1
   AND ir.id <> 0

ORDER BY 1       
","Students"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Department","WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept
),

-- Assign default values
defaultValues AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM department
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Department"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"inst.campus","SELECT DISTINCT
  stvcamp_code nk,        
  case when stvcamp_code = 'M' then 'Online and Off-Campus'
  else stvcamp_desc
  end as name,      
  case when stvcamp_code = 'M' then 'T' else 'F' end as is_online,
  case when stvcamp_code in ('NCC','M') then 'T' else 'F' end as is_active
FROM stvcamp
WHERE 1=1
--and stvcamp_code in ('NCC','M')
union
select 'DEFAULT' nk,
          'EAB Default Code' name,
          'F' is_online,
          'F' is_active
from dual","Campus"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"reg.StudentPlanSlot","--Get all students and plans
WITH studentPlans AS (
  SELECT student_id
  , plan_id
  , degree
  , create_date
    FROM DWSCHEMA.SEP_PLAN PLAN_A
      WHERE is_active = 'Y' -- Use Y to ensure the plan is active
        AND is_locked = 'Y' -- Use Y to ensure the plan is locked along with active
        AND school = 'GW' -- Use GW for golden west and CL for Coastline
        AND CREATE_DATE = (SELECT MAX(CREATE_DATE)
                        FROM DWSCHEMA.SEP_PLAN PLAN_B
                          WHERE PLAN_A.student_id = PLAN_B.student_id
                            AND PLAN_B.is_active = 'Y' -- Use Y to ensure the plan is active
                            AND PLAN_B.is_locked = 'Y' -- Use Y to ensure the plan is locked along with active
                            AND PLAN_B.school = 'CL' -- Use GW for golden west and CL for Coastline
                      ) -- Get plan with the max create_date as the most recent plan
      -- use highest lock_version for most recent plan
),

planTerm AS(
  SELECT plan_id
  , term_id
  , term
    FROM DWSCHEMA.SEP_PLAN_TERM
),

parentGroups AS (
  SELECT group_id_parent
  , planTerm.term AS term
  , planTerm.plan_id AS plan_id
    FROM DWSCHEMA.SEP_PLAN_GROUP planGroup
    JOIN planTerm ON planTerm.term_id = planGroup.term_id
)

/*classGroups AS (
  SELECT group_id
    FROM DWSCHEMA.SEP_PLAN_GROUP
      WHERE group_id_parent 
),

classes AS (
  SELECT course_discipline || '$$' || course_number
  , \\\""sequence\\\""
    FROM DWSCHEMA.SEP_PLAN_CLASS
      WHERE group_id 
      ORDER by \\\""sequence\\\""
)*/

SELECT 
  student_id || '$$' || studentPlans.degree || '$$' || RANK() OVER (PARTITION BY studentPlans.student_id ORDER BY parentGroups.term || '.' || classGroups.sequence || '.' || classes.sequence) AS nk
  , studentPlans.student_id AS student
  /*, studentPlans.degree AS \\\""program\\\""
  , studentPlans.plan_id AS plan_id
  , parentGroups.term AS term
  , classGroups.group_id
  , classGroups.sequence AS GroupSLot
  , classes.sequence AS Courseslot
  , parentGroups.term || '.' || classGroups.sequence || '.' || classes.sequence AS combinedSlot */ -- Leaving this in for future purposes. If we do courseGroups this will come in handy.
  , RANK() OVER (PARTITION BY studentPlans.student_id ORDER BY parentGroups.term || '.' || classGroups.sequence || '.' || classes.sequence) AS slot
  , course_discipline || course_number AS course
  , 'T' AS is_active
    FROM DWSCHEMA.SEP_PLAN_CLASS classes
      JOIN DWSCHEMA.SEP_PLAN_GROUP classGroups ON classGroups.group_id = classes.group_id
      JOIN parentGroups ON parentGroups.group_id_parent = classGroups.group_id_parent
      JOIN studentPlans ON studentPlans.plan_id = parentGroups.plan_id
    --WHERE studentPlans.student_id = 'C02442414'--'C02111499' --'C00007389' student with multiple plans
      ORDER BY student, slot","DegreeWorks_StudentPlanSlot"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.term","SELECT 
  a.STRM NK,
  a.DESCR \\\""NAME\\\"",
  a.ACAD_YEAR CAT_YR,
  To_char(regStart.FIRST_ENRL_DT, 'YYYY-MM-DD')  AS REGISTRATION_START_DT, 
  To_char(regEnd.LST_WD_WO_PEN_DT, 'YYYY-MM-DD') AS REGISTRATION_END_DT ,
  to_char(a.term_begin_dt, 'YYYY-MM-DD') TERM_START_DT,
  to_char(a.term_end_dt, 'YYYY-MM-DD') TERM_END_DT,
  'T' IS_ACTIVE
FROM PS_TERM_TBL a
       --REGISTRATION END 
       LEFT JOIN (SELECT STRM 
                         , Min(LST_WD_WO_PEN_DT) AS LST_WD_WO_PEN_DT 
                  FROM   PS_ACAD_CALTRM_TBL 
                  WHERE  ACAD_CAREER IN ( 'CRED' )  and INSTITUTION = 'NV280'          --Update, member-specific 
                  GROUP  BY STRM
                ) regEnd ON regEnd.STRM = a.STRM 
              
       --REGISTRATION START 
       LEFT JOIN (SELECT STRM 
                         , Min(FIRST_ENRL_DT) AS FIRST_ENRL_DT 
                  FROM   PS_SESSION_TBL 
                  WHERE  ACAD_CAREER IN ( 'CRED' )   and INSTITUTION = 'NV280'        --Update, member-specific 
                  GROUP  BY STRM
               ) regStart ON regStart.STRM = a.STRM 
WHERE INSTITUTION = 'NV280'
and acad_career = 'CRED'
ORDER BY 1 desc","Term"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"inst.campus","SELECT distinct CAMPUS  AS NK
       , DESCR      AS NAME
       , 'F'		AS IS_ONLINE
       , 'T'    AS IS_ACTIVE
FROM PS_CAMPUS_TBL
where INSTITUTION = 'DC279'
and eff_status = 'A'
and campus in ('MAIN')
union
select 'DEFAULT' nk,
          'EAB Default Code' name,
          'F' is_online,
          'F' is_active
from dual
union
select 'ONL' nk,
          'Online' name,
          'T' is_online,
          'T' is_active
from dual
union
select 'ONL-P' nk,
          'Online-Hybrid' name,
          'T' is_online,
          'T' is_active
from dual","Campus"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.programcredential","SELECT DISTINCT 
	sobcurr_degc_code AS nk
	, sobcurr_degc_code AS short_credential
	, 'T' AS is_active
FROM sobcurr","Program Credential"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.StudentTerm","WITH studentTerm AS (
SELECT NK,
  STUDENT,
  TERM,
  \\\""PROGRAM\\\"",
  IS_ACTIVE
FROM zst_eab_stuterm_extract
WHERE MULTI_SOURCE = 'PPCC'

)

-- wrapper query
select * from studentTerm","Student Terms"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.Department","SELECT DEPTS.DEPTS_ID as nk,
       DEPTS.DEPTS_DESC AS name,
	   case
	     when DEPTS.DEPTS_ACTIVE_FLAG = 'A' then 'T'
		 ELSE 'F'
	   end as is_active
  FROM DEPTS
 ORDER BY DEPTS.DEPTS_DESC","Department"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.SeatsAvail","-- extract seats available from banner
WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk.
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
WHERE szvcamp_vpdi_code = 'PCC'
  AND szvcamp_eab_enable = 'Y'
  AND ssbsect_ssts_code = 'O' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. we do not need to extract seats available for past terms.
  AND ssbsect_vpdi_code = 'PCC'
  AND SUBSTR(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM seatsAvail","Seats Available"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"cat.studentterm","WITH getLastXTerms AS (
  SELECT *
  from (select stvterm_code from stvterm where stvterm_code <= 
                    (select min(stvterm_code) as stvterm_code
                    from stvterm
                   where stvterm_start_date > sysdate) 
                   order by stvterm_code desc) 
                    where 
                    rownum < 7
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get the max term for each program that has a corresponding term assigned.
getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
 JOIN stvterm ON stvterm_code = sobcurr_term_code_init
WHERE stvterm_code IS NOT NULL
  and stvterm_code not like '8%'
                   and stvterm_desc not like 'Conversion%'
  GROUP BY  sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
SELECT sgbstdn_pidm
  , sgbstdn_program_1
  , sgbstdn_majr_code_1
  , sgbstdn_stst_code
  , sgbstdn_term_code_eff AS maxEffTerm
  , sgbstdn_term_code_ctlg_1
  , stvstst_reg_ind
FROM sgbstdn ab
  LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
  
WHERE sgbstdn_program_1 IS NOT NULL
  AND stvstst_code IS NOT NULL
  AND sgbstdn_term_code_eff = (
                               SELECT MAX(sgbstdn_term_code_eff)
                               FROM sgbstdn
                               JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                               WHERE ab.sgbstdn_pidm = sgbstdn_pidm
                                AND stvterm_end_date <= sysdate + 365
                   and stvterm_code not like '8%'
                   and stvterm_desc not like 'Conversion%'
                              )
and sgbstdn_term_code_eff not like '8%'
and sgbstdn_term_code_eff not in (select stvterm_Code from stvterm where stvterm_desc like 'Conversion%')

),
-- final query to extract student term data
studentTerm AS (
SELECT spriden_id || '$$' || sorlcur.sorlcur_term_Code AS nk
  , spriden_id AS student
  , sorlcur.sorlcur_term_Code AS term
  , sorlcur.sorlcur_program || '$$' || sorlfos_majr_code || '$$' || getProgramMaxTermLCUR.acyr AS \\\""program\\\""
  , 'T' AS is_active -- set the record active if the corresponding stvstst_reg_ind is set to 'Y'
FROM spriden
--  JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
 --  AND SPRIDEN.SPRIDEN_CHANGE_IND IS NULL 
 -- AND SPRIDEN.SPRIDEN_ID ='900001295'
--  JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
  JOIN (SELECT * FROM SORLCUR ab
        WHERE 1=1 
        and sorlcur_term_Code not in (select stvterm_Code from stvterm where stvterm_desc like 'Conversion%')
       
      --  and SORLCUR_PIDM ='1295'
        and SORLCUR_LMOD_CODE = 'LEARNER'
        and sorlcur_cact_code = 'ACTIVE'
        and sorlcur_seqno = (select max(sorlcur_seqno)
                            from sorlcur b 
                            where b.sorlcur_pidm = ab.sorlcur_pidm 
                            and b.sorlcur_term_code = ab.sorlcur_term_code
                            and b.SORLCUR_LMOD_CODE = ab.SORLCUR_LMOD_CODE
                            and b.sorlcur_cact_code = ab.sorlcur_cact_code)
         and sorlcur_term_Code = (select max(sorlcur_term_Code) 
                                    from sorlcur aa 
                                    where aa.sorlcur_pidm = ab.sorlcur_pidm
                                     and aa.SORLCUR_LMOD_CODE = 'LEARNER'
                                     and aa.sorlcur_cact_code = 'ACTIVE'
                                   )                    
                            ) sorlcur 
    ON spriden_pidm = sorlcur.sorlcur_pidm
  JOIN 
(SELECT * FROM SORLFOS ab
WHERE 1=1
--and SORLFOS_PIDM ='1295'
and ab.sorlfos_cact_code = 'ACTIVE'
and ab.sorlfos_lfst_code = 'MAJOR'
and ab.sorlfos_lcur_seqno = 
(select max(sorlfos_lcur_seqno)
                    from sorlfos b 
                    where b.sorlfos_pidm = ab.sorlfos_pidm 
                    and b.sorlfos_term_code = ab.sorlfos_term_code
                    and b.sorlfos_lfst_code = ab.sorlfos_lfst_code
                    and b.sorlfos_cact_code = ab.sorlfos_cact_code)

and ab.sorlfos_seqno = (select max(sorlfos_seqno)
                    from sorlfos b 
                    where b.sorlfos_pidm = ab.sorlfos_pidm 
                    and b.sorlfos_term_code = ab.sorlfos_term_code
                    and b.sorlfos_lfst_code = ab.sorlfos_lfst_code
                    and b.sorlfos_cact_code = ab.sorlfos_cact_code
                    and b.sorlfos_lcur_seqno = ab.sorlfos_lcur_seqno))sorlfos ON sorlcur.sorlcur_pidm = sorlfos.sorlfos_pidm
                                                                             and sorlfos.sorlfos_lcur_seqno = sorlcur.sorlcur_seqno
                                                                             
 JOIN getProgramMaxTerm getProgramMaxTermLCUR ON getProgramMaxTermLCUR.prog = sorlcur.sorlcur_program  -- changed 
 join getLastXTerms on getLastXTerms.stvterm_Code = sorlcur.sorlcur_term_Code -- changed 
  --JOIN studentPopulation ON studentPidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
--and studentDetails.stvstst_reg_ind = 'Y' -- To get only the active records
and spriden_pidm in (select * from studentPopulation)
)

-- wrapper query
--select distinct program from studentTerm 
select * from studentTerm","Student Term"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"reg.CourseGroupCourse","SELECT
a.COURSE_BLOCKS_ID + '$$' + CAST(b.POS as varchar(5))  as nk
, a.COURSE_BLOCKS_ID as course_group
, b.POS as rank
, C.CRS_NAME as course
, 'T' as is_active
from COURSE_BLOCKS a
left join COURSE_BLOCKS_LS b
on a.COURSE_BLOCKS_ID = b.COURSE_BLOCKS_ID
JOIN COURSES C
ON b.CBL_COURSES = C.COURSES_ID
where  b.CBL_COURSES is not null

/*WITH CBID_TO_CID AS 

(
SELECT
a.COURSE_BLOCKS_ID + '$$' + CAST(b.POS as varchar(5))  as nk
, case
       when b.CBL_COURSES IS NULL then (select CBL_COURSES from COURSE_BLOCKS_LS CBL where  CBL.COURSE_BLOCKS_ID =b.COURSE_BLOCKS_ID and CBL.POS = 1)
       else b.CBL_COURSES
  end as CBL_COURSES
from COURSE_BLOCKS a
left join COURSE_BLOCKS_LS b
on a.COURSE_BLOCKS_ID = b.COURSE_BLOCKS_ID
)

SELECT
a.COURSE_BLOCKS_ID + '$$' + CAST(b.POS as varchar(5))  as nk
, a.COURSE_BLOCKS_ID as course_group
, b.POS as rank
, C.CRS_NAME as course
, 'T' as is_active
from COURSE_BLOCKS a
left join COURSE_BLOCKS_LS b
on a.COURSE_BLOCKS_ID = b.COURSE_BLOCKS_ID
join CBID_TO_CID d on  a.COURSE_BLOCKS_ID + '$$' + CAST(b.POS as varchar(5)) = d.nk
JOIN COURSES C
ON d.CBL_COURSES = C.COURSES_ID*/","CourseGroupCourse"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"core.Advisor","-- compute max term advisor record
WITH advisorMaxTerm AS (
SELECT sibinst_pidm
FROM sibinst baseTable
WHERE sibinst_fcst_code = 'AC'
  AND sibinst_advr_ind = 'Y'
  AND sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                              FROM sibinst compTable
                              WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                                    AND sibinst_vpdi_code = 'PPCC'
                              )
   AND sibinst_vpdi_code = 'PPCC'
),

-- extract advisor data
\\\""advisor\\\"" AS (
SELECT spriden_id AS nk
  , spriden_id AS username
  , COALESCE((SELECT goremal_email_address
              FROM goremal
                WHERE goremal_pidm = spriden_pidm AND goremal_preferred_ind = 'Y' AND GOREMAL_EMAIL_ADDRESS like '%ppcc.edu' AND ROWNUM = 1) -- try to get campus email if active and preferred. Confirm email_code with BA/Member.
              , (SELECT goremal_email_address
                FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND GOREMAL_EMAL_CODE = 'PAY' AND GOREMAL_EMAIL_ADDRESS like '%ppcc.edu' AND ROWNUM = 1) -- try to get campus email if active and not preferred. Confirm email_code with BA/Member.
              ,
              (SELECT goremal_email_address
                FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND GOREMAL_EMAL_CODE = 'WORK' AND GOREMAL_EMAIL_ADDRESS like '%ppcc.edu' AND ROWNUM = 1) -- try to get campus email if active and not preferred. Confirm email_code with BA/Member.
              
              , LOWER(spriden_id) || '@missingemail.org') AS email -- Set default email address if none above are available.
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , 'T' AS is_active
FROM spriden
JOIN advisorMaxTerm ON advisorMaxTerm.sibinst_pidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent advisor record is extracted
)

-- Wrapper query
SELECT * FROM \\\""advisor\\\""","Advisor"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"reg.studenttestscore","
WITH POP AS (
select sorlcur_pidm pidm
from sorlcur tbl
where 1=1
and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
and sorlcur_cact_code = 'ACTIVE'
and sorlcur_priority_no = (select min(sorlcur_priority_no)
                           from sorlcur
                           where sorlcur_camp_code = 'NCC'
                           and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                           and sorlcur_cact_code = 'ACTIVE'
                           and sorlcur_term_code_end is null
                           and sorlcur_pidm = tbl.sorlcur_pidm
                           and sorlcur_term_code in (select distinct term from (


                                                      SELECT STVTERM_CODE term FROM STVTERM
                                                      WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                              FROM stvterm 
                                                                              where sysdate < stvterm_start_date 
                                                                              
                                                                              and(stvterm_code like '%10' 
                                                                              or stvterm_code like '%20' 
                                                                              or stvterm_code like '%30')
                                                                            )
                                                      and (stvterm_code like '%10' 
                                                            or stvterm_code like '%20' 
                                                            or stvterm_code like '%30')
                                                      and rownum < 5
                                                      ORDER BY 1 desc))

                          )
and sorlcur_term_code_end is null
and sorlcur_camp_code = 'NCC'
and sorlcur_term_code = (select max(sorlcur_term_code)
                          from sorlcur
                          where sorlcur_pidm = tbl.sorlcur_pidm
                          and sorlcur_camp_code = 'NCC'
                          and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                          and sorlcur_cact_code = 'ACTIVE'
                          and sorlcur_term_code_end is null
                          and sorlcur_priority_no = (select min(sorlcur_priority_no)
                                                      from sorlcur
                                                      where sorlcur_camp_code = 'NCC'
                                                      and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                                                      and sorlcur_cact_code = 'ACTIVE'
                                                      and sorlcur_term_code_end is null
                                                      and sorlcur_pidm = tbl.sorlcur_pidm
                                                      and sorlcur_term_code in (

                                                        select distinct term from (
                                                            SELECT STVTERM_CODE term FROM STVTERM
                                                            WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                                                    FROM stvterm 
                                                                                                    where sysdate < stvterm_start_date 
                                                                                                    --and sysdate <= stvterm_end_date
                                                                                                    and (stvterm_code like '%10' 
                                                                                                    or stvterm_code like '%20' 
                                                                                                    or stvterm_code like '%30')
                                                                                                    )
                                                                              and (stvterm_code like '%10' 
                                                                                  or stvterm_code like '%20' 
                                                                                  or stvterm_code like '%30')
                                                                              and rownum < 5
                                                                              ORDER BY 1 desc))
                                                    )
                          and sorlcur_term_code in ( select distinct term from (
                                                  SELECT STVTERM_CODE term FROM STVTERM
                                                  WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                          FROM stvterm 
                                                                          where sysdate < stvterm_start_date 
                                                                          --and sysdate <= stvterm_end_date
                                                                          and(stvterm_code like '%10' 
                                                                           or stvterm_code like '%20' 
                                                                           or stvterm_code like '%30')
                                                                        )
                                                  and (stvterm_code like '%10' 
                                                   or stvterm_code like '%20' 
                                                   or stvterm_code like '%30')
                                                  and rownum < 5
                                                  ORDER BY 1 desc))
                        )
)
select
       spriden_id || '$$' || stvtesc_code nk,
       spriden_id student,
       --stvtesc_code || '$$' || stvtesc_desc test_subject, HP 082814
       stvtesc_code test_subject,
       max(to_number(sortest_test_score)) score,
       'T' active
  from sortest, spriden, stvtesc
       -- Need to remove A, since EAB only takes integers
 where stvtesc_data_type = 'N'
   and sortest_pidm = spriden_pidm
   and sortest_tesc_code = stvtesc_code
   and spriden_change_ind is null
   and spriden_pidm in (select * from pop)
   and (stvtesc_desc LIKE '%Accup%'
    OR stvtesc_desc LIKE '%SAT%')
   group by spriden_id || '$$' || stvtesc_code,
            spriden_id,
            stvtesc_code,
            'T'","Student Test Score"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.StudentCourse","WITH

TERMS_TEMP as (

SELECT DISTINCT SUBSTRING(TERMS_ID,1,6) nk
  FROM TERMS
    where TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          TERMS_ID is not NULL and
          TERM_REG_START_DATE is not null
),

validDepartments AS (
SELECT DISTINCT DEPTS_ID  nk
 FROM    DEPTS
 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A'
),

validSubjects AS (
  SELECT DISTINCT SUBJECTS_ID nk
  FROM SUBJECTS 
  where SUBJ_DESC NOT IN ('Ability to Benefit', 'Basic Math Equivalency', 'Basic Skills Development', 
                   'Communications I Equivalency', 'Communications II Equivalency', 'Course Waiver') AND
        SUBJ_DESC NOT LIKE 'DO NOT USE%' AND
        SUBJECTS_ID not in ('COMM1', 'COMM2', 'COMMFND', 'MATHALG', 'MATHPRE', 'RDGCOMM', 'RDGFUND', 'RDGNONE', 'XKAP')
),

validCourses AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
    Join validSubjects on validSubjects.nk = CRS_SUBJECT
    Join validDepartments on validDepartments.nk = CRS_DEPTS
  Where 
        COURSES.CRS_MIN_CRED > 0 
       AND CRS_NO <> '999' AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG')  ,

validSections as (
			SELECT distinct 
      COURSE_SECTIONS.COURSE_SECTIONS_ID nk

  FROM COURSE_SECTIONS
   LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
   LEFT OUTER JOIN COURSE_SECTIONS_LS
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND
         COURSE_SECTIONS_LS.POS = '1'
    JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID AND
          TERMS_LS.POS = '1'
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1' AND
          (SEC_STATUS = 'A' OR 
           SEC_STATUS = 'C' OR
           SEC_STATUS = 'GH')
    Where (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )
       AND (SEC_NO < '600' OR SEC_NO > '799')

			)

SELECT DISTINCT 
      STC_PERSON_ID + '$$' + ISNULL(STC_TERM, '000001') + '$$' + ISNULL(STC_COURSE_NAME, '') nk, 
      STC_PERSON_ID student, 
      ISNULL(STC_TERM, '000001') term, 
      ISNULL(STC_COURSE_NAME, '') course, 
      ISNULL(vs.nk, '') section, 
      ISNULL(GRD_GRADE, '') grade_cd,
      cast(ISNULL(cast(GRD_VALUE as numeric(7,2)), '0') AS VARCHAR)   grade_points, 
      CASE
         WHEN STC_CMPL_CRED = 0 THEN cast(ISNULL(cast(STC_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE  cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)),0)  AS VARCHAR)
       END  credits_attempted, 
      
      CASE
         WHEN STC_VERIFIED_GRADE IS NOT NULL THEN cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       END  credits_earned, 
      case 
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS IN ('A', 'N') AND GETDATE() < COURSE_SECTIONS.SEC_START_DATE
		      THEN 'REGISTERED'
         WHEN GETDATE() BETWEEN COURSE_SECTIONS.SEC_START_DATE AND COURSE_SECTIONS.SEC_END_DATE
		      THEN 'IN_PROGRESS'
		 --WHEN GRD_GRADE = 'I' THEN 'IN_PROGRESS'    
         WHEN GRD_GRADE = 'S' THEN 'COMPLETED'  
         WHEN GRD_GRADE = 'T' THEN 'COMPLETED'
       ELSE 'COMPLETED'
       END    status, 
      'T' is_active

  FROM STUDENT_ACAD_CRED
    JOIN STC_STATUSES
      ON STC_STATUSES.STUDENT_ACAD_CRED_ID = STUDENT_ACAD_CRED.STUDENT_ACAD_CRED_ID AND
         POS = '1'
    LEFT OUTER JOIN COURSE_SECTIONS
      ON SEC_TERM = STC_TERM AND
         (SEC_NO < '600' OR SEC_NO > '799') AND
         SEC_SUBJECT = STC_SUBJECT AND  
         SEC_NO = STC_SECTION_NO AND
         SEC_COURSE_NO = PARSENAME(REPLACE(STC_COURSE_NAME,'-', '.'),1)     
         
    LEFT OUTER JOIN GRADES
      ON GRD_GRADE_SCHEME = STUDENT_ACAD_CRED.STC_GRADE_SCHEME AND
         GRADES_ID = ISNULL(STUDENT_ACAD_CRED.STC_VERIFIED_GRADE,'0') 
	JOIN TERMS_TEMP on STC_TERM = TERMS_TEMP.nk
	JOIN validCourses on STC_COURSE_NAME = validCourses.nk
	LEFT OUTER JOIN validSections vs on vs.nk = COURSE_SECTIONS_ID
  WHERE STUDENT_ACAD_CRED.STC_PERSON_ID IS NOT NULL AND
        STC_STATUS NOT IN ('C','D','W','DG','X','NC') AND
        STC_REPL_CODE IS NULL AND
        (ISNULL(STC_SECTION_NO, '') < '600' OR ISNULL(STC_SECTION_NO, '') > '799')
        AND ISNULL(GRD_GRADE,'') NOT IN ('AU','U','W','F','DP','NC','EX','NR','PR','WD','WO','CT','CS','CW','AD','NC','WP','WF','CT')

 --     I use this subquery to ONLY pull people's ENTIRE TRANSCRIPT who have registration from this semester
         AND EXISTS (SELECT 1 FROM STUDENT_ACAD_CRED X
                       JOIN STC_STATUSES Y
                            ON X.STUDENT_ACAD_CRED_ID = Y.STUDENT_ACAD_CRED_ID
						JOIN TERMS T ON T.TERMS_ID = X.STC_TERM 
									AND T.TERM_END_DATE > DATEADD(mm, -6,GETDATE()) AND T.TERM_END_DATE < DATEADD(mm, 6,GETDATE())
                     WHERE 
                           (X.STC_SECTION_NO < '600' OR X.STC_SECTION_NO > '799') AND
                           Y.POS= 1    AND 
                           (Y.STC_STATUS='N' OR
                            Y.STC_STATUS='A') AND
                           STUDENT_ACAD_CRED.STC_PERSON_ID = X.STC_PERSON_ID) 
						   


/*SELECT DISTINCT 
      STC_PERSON_ID + '$$' + ISNULL(STC_TERM, '000001') + '$$' + ISNULL(STC_COURSE_NAME, '') nk, 
      STC_PERSON_ID student, 
      ISNULL(STC_TERM, '000001') term, 
      ISNULL(STC_COURSE_NAME, '') course, 
      ISNULL(COURSE_SECTIONS_ID, '') section, 
      ISNULL(GRD_GRADE, '') grade_cd,
      cast(ISNULL(cast(GRD_VALUE as numeric(7,2)), '0') AS VARCHAR)   grade_points, 
      CASE
         WHEN STC_CMPL_CRED = 0 THEN cast(ISNULL(cast(STC_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE  cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)),0)  AS VARCHAR)
       END  credits_attempted, 
      
      CASE
         WHEN STC_VERIFIED_GRADE IS NOT NULL THEN cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       END  credits_earned, 

      case 
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'A' THEN 'REGISTERED'
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'N' THEN 'REGISTERED'
         WHEN GRD_GRADE = 'I' THEN 'IN_PROGRESS'    
         WHEN GRD_GRADE = 'S' THEN 'COMPLETED'  
         WHEN GRD_GRADE = 'T' THEN 'COMPLETED'
       ELSE 'COMPLETED'
       END    status, 
      'T' is_active

  FROM STUDENT_ACAD_CRED
    JOIN STC_STATUSES
      ON STC_STATUSES.STUDENT_ACAD_CRED_ID = STUDENT_ACAD_CRED.STUDENT_ACAD_CRED_ID AND
         POS = '1'
    LEFT OUTER JOIN COURSE_SECTIONS
      ON SEC_TERM = STC_TERM AND
         (SEC_NO < '600' OR SEC_NO > '799') AND
         SEC_SUBJECT = STC_SUBJECT AND  
         SEC_NO = STC_SECTION_NO AND
         SEC_COURSE_NO = PARSENAME(REPLACE(STC_COURSE_NAME,'-', '.'),1)     
         
    LEFT OUTER JOIN GRADES
      ON GRD_GRADE_SCHEME = STUDENT_ACAD_CRED.STC_GRADE_SCHEME AND
         GRADES_ID = ISNULL(STUDENT_ACAD_CRED.STC_VERIFIED_GRADE,'0') 
  WHERE STUDENT_ACAD_CRED.STC_PERSON_ID IS NOT NULL AND
        STC_STATUS NOT IN ('C','D','W','DG','X','NC') AND
        STC_REPL_CODE IS NULL AND
        (ISNULL(STC_SECTION_NO, '') < '600' OR ISNULL(STC_SECTION_NO, '') > '799')
        AND ISNULL(GRD_GRADE,'') NOT IN ('AU','U','W','F','DP','NC','EX','NR','PR','WD','WO','CT','CS','CW','AD','NC','WP','WF','CT')

 --     I use this subquery to ONLY pull people's ENTIRE TRANSCRIPT who have registration from this semester
         AND EXISTS (SELECT 1 FROM STUDENT_ACAD_CRED X
                       JOIN STC_STATUSES Y
                            ON X.STUDENT_ACAD_CRED_ID = Y.STUDENT_ACAD_CRED_ID
						JOIN TERMS T ON T.TERMS_ID = X.STC_TERM 
									AND T.TERM_END_DATE > DATEADD(mm, -6,GETDATE()) AND T.TERM_END_DATE < DATEADD(mm, 6,GETDATE())
                     WHERE 
                           (X.STC_SECTION_NO < '600' OR X.STC_SECTION_NO > '799') AND
                           Y.POS= 1    AND 
                           (Y.STC_STATUS='N' OR
                            Y.STC_STATUS='A') AND
                           STUDENT_ACAD_CRED.STC_PERSON_ID = X.STC_PERSON_ID) */","Student Course"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"core.advisor","

select a.emplid as nk
, a.emplid as username
, Nvl(email.EMAIL_ADDR, a.emplid || '@missing.nova.edu') as email
, b.first_name as first_name
, b.last_name as first_name
, 'T' as is_active

from PS_INSTR_ADVISOR a
left join PS_PERSONAL_DATA b
on a.emplid = b.emplid
LEFT JOIN PS_EMAIL_ADDRESSES email 
              ON email.EMPLID = a.EMPLID 
                 AND email.E_ADDR_TYPE IN ( 'VCCS' ) 
where a.ADVISOR = 'Y' 
and a.INSTITUTION = 'TN293'
and a.eff_status = 'A'","advisor"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"reg.studenttestscore","WITH pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,b.max_term as max_term_2
        ,a.acad_plan
        ,TO_CHAR(a.declare_dt,'YYYY-MM-DD') as declare_dt
from ps_acad_plan a
inner join (select student_id, max_term
            from (
                  select b.emplid as student_id
                  , min(b.strm) as term
                  , max(b.strm) as max_term
                  --, b.strm as strm
                  from ps_stdnt_car_term b
                  where 1=1
                  and institution = 'DC279'
                  and ACAD_CAREER = 'CRED'
                  group by b.emplid
                  ) car_term
            where 1=1
            and term > 2154
           ) b
           on b.student_id = a.emplid
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid and effdt = a.effdt)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid       
WHERE  1=1
        --and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
union --applicant pop
SELECT DISTINCT A.EMPLID student_id
, B.req_term as max_term
, B.REQ_TERM as max_term_2
, B.ACAD_PLAN
, TO_CHAR(A.ADM_APPL_DT,'YYYY-MM-DD') as declare_dt
  FROM PS_ADM_APPL_DATA A, PS_ADM_APPL_PLAN B 

  WHERE ( A.INSTITUTION = 'DC279' 
     AND A.EMPLID = B.EMPLID 
     AND A.ACAD_CAREER = B.ACAD_CAREER 
     AND A.STDNT_CAR_NBR = B.STDNT_CAR_NBR 
     AND A.ADM_APPL_NBR = B.ADM_APPL_NBR 
     AND B.EFFDT = 
        (SELECT MAX(B_ED.EFFDT) FROM PS_ADM_APPL_PLAN B_ED 
        WHERE B.EMPLID = B_ED.EMPLID 
          AND B.ACAD_CAREER = B_ED.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ED.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ED.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ED.APPL_PROG_NBR 
          AND B_ED.EFFDT <= SYSDATE) 
    AND B.EFFSEQ = 
        (SELECT MAX(B_ES.EFFSEQ) FROM PS_ADM_APPL_PLAN B_ES 
        WHERE B.EMPLID = B_ES.EMPLID 
          AND B.ACAD_CAREER = B_ES.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ES.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ES.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ES.APPL_PROG_NBR 
          AND B.EFFDT = B_ES.EFFDT) 
     AND B.REQ_TERM > '2154' 
     AND NOT EXISTS (SELECT 'X' 
  FROM PS_STDNT_ENRL C 
  WHERE A.INSTITUTION = C.INSTITUTION 
     AND C.STDNT_ENRL_STATUS = 'E' 
     AND A.EMPLID = C.EMPLID) )
     AND B.ACAD_CAREER = 'CRED'
     and a.emplid not in (select distinct emplid from ps_acad_plan)

)          
       
select distinct emplid || '$$' || a.test_id || '_' || a.test_component as nk
, a.emplid as student
, a.test_id || '_' || a.test_component as test_subject
, a.score as score
, 'T' as is_active

from ps_stdnt_test_comp a
--left join PS_SA_TEST_TBL b on a.test_id = b.test_id
where a.emplid in (select student_id from pop)","StudentTestScore"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.FirstTermFeed","with all_terms as (
  select distinct nk
    from eab_trm
   where to_date(term_start_dt,'YYYY-MM-DD') >= sysdate-3*365
     and college = 'CC'
),
-- Terms where a student is considered active
cur_terms as (
  select distinct nk
    from eab_trm
   where to_date(TERM_END_DT, 'YYYY-MM-DD') >= SYSDATE
     and college = 'CC'
),
-- Grab currently enrolled students
cur_enr_list as (
  select id as stu_id
    from eab_stdnt_active
   where current_enroll_cc = 'Y'
     and academic_period in (select nk from cur_terms)
),
-- Get students who have applied for current and future terms
cur_app_list as (
  select esa.id as stu_id
    from saradap s join eab_stdnt_active esa on s.saradap_pidm = esa.person_uid
                                            and esa.current_enroll_cc = 'Y'
   where s.saradap_term_code_entry in (select * from cur_terms)
),
-- Get current students
cur_stu as (
  select stu_id from cur_enr_list
  union
  select stu_id from cur_app_list
),
firsttermfeed as (
  select student as nk,
         student as student,
         min(term) as term,
         'T' as is_active
    from eab_student_term join cur_stu on eab_student_term.student = cur_stu.stu_id
   --where student in (select * from stu_list)
   group by student
   order by nk, term
)
select * from firsttermfeed","FirstTermFeed"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"reg.StudentTestScore","-- Fields: nk,student,test_subject,score,is_active
-- Model Name: cat.StudentTestScore
-- Name: StudentTestScore
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version: pjf4g1
-- Author: James DeBolt
-- Query:

WITH 

validStudents AS (
SELECT DISTINCT
   SUBSTR(PERSON.ID,1,7)  student
FROM COLL_PRODUCTION.PERSON
INNER JOIN COLL_PRODUCTION.PEOPLE_EMAIL PE
ON PERSON.ID = PE.ID AND PE.PERSON_EMAIL_TYPES IN ('TTC') -- configure per member
INNER JOIN COLL_PRODUCTION.PERSON_PIN PP 
ON PERSON.ID = PP.PERSON_PIN_ID  WHERE PE.PERSON_EMAIL_ADDRESSES  NOT IN ('Yolanda.Bland@tridenttech.edu',
'Karen.Wrighten@tridenttech.edu',
'Brandon.Branham@tridenttech.edu',
'Sharon.Manigault@tridenttech.edu',
'Jamella.Jaglal@tridenttech.edu',
'Kimberly.Fowler@tridenttech.edu',
'Donna.Grant@tridenttech.edu',
'Gerald.Gadsden@tridenttech.edu',
'Jewell.Dingle@tridenttech.edu',
'Chanity.Wilson@tridenttech.edu',
'Sidney.Alston@tridenttech.edu',
'Laurie.Fladd@tridenttech.edu',
'Brian.Almquist@tridenttech.edu',
'Deborah.Thompson@tridenttech.edu',
'Marshall.Connor@tridenttech.edu',
'mikepatterson@my.tridenttech.edu',
'D''jaris.Whipper-lewis@tridenttech.edu',
'Kathy.Simmons@tridenttech.edu',
'annikajessen@my.tridenttech.edu')),

validTestSubjects AS (
SELECT DISTINCT 
      NON_COURSES_ID nk 
  FROM COLL_PRODUCTION.NON_COURSES
    Where NON_COURSES_ID IS NOT NULL  AND 
          NON_COURSES.NCRS_CATEGORY_IDX != 'OTHER'  AND
          NCRS_MAX_SCORE IS NOT NULL
),

validStudentTestScores AS (
SELECT
   validStudents.student||'$$'||STUDENT_NON_COURSES.STNC_NON_COURSE as nk,
   validStudents.student student,
   STUDENT_NON_COURSES.STNC_NON_COURSE AS test_subject,
   CAST(COALESCE(STUDENT_NON_COURSES.STNC_SCORE,0) AS NUMERIC(7,2)) AS score,
   'T' AS is_active
FROM
   validStudents
   JOIN COLL_PRODUCTION.STUDENT_NON_COURSES ON validStudents.student = STUDENT_NON_COURSES.STNC_PERSON_ID
   JOIN validTestSubjects ON validTestSubjects.nk = STUDENT_NON_COURSES.STNC_NON_COURSE
WHERE
   TO_CHAR(STUDENT_NON_COURSES.STUDENT_NON_COURSES_ADDDATE, 'YYYY') > TO_CHAR(sysdate, 'YYYY')-3
   AND STUDENT_NON_COURSES.STNC_SCORE = (select max (z.STNC_SCORE)  -- added to get max score for course
                                         from COLL_PRODUCTION.STUDENT_NON_COURSES z
                                         WHERE z.STNC_PERSON_ID = STUDENT_NON_COURSES.STNC_PERSON_ID
                                         AND z.STNC_NON_COURSE = STUDENT_NON_COURSES.STNC_NON_COURSE) 
)
    SELECT * FROM validStudentTestScores","Student Test Score"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"reg.AccountHold","with CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-3*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC
),
STU_POP AS (
  SELECT SFRSTCR_PIDM AS PIDM
    FROM SFRSTCR
   WHERE SFRSTCR_TERM_CODE IN (SELECT * from cur_term)
  UNION
  SELECT SARADAP_PIDM AS PIDM
    FROM SARADAP
   WHERE SARADAP_TERM_CODE_ENTRY IN (SELECT * from cur_term)
),
holds AS (
SELECT DISTINCT
  spriden_id || '$$' || sprhold_hldd_code AS nk
  , spriden_id AS student
  , sprhold_hldd_code AS \\\""identifier\\\""
  , stvhldd_desc AS message
  , 'T' AS is_active
FROM sprhold
  join stvhldd on stvhldd_code = sprhold_hldd_code
  JOIN stu_Pop ON stu_Pop.pidm = sprhold_pidm
  JOIN spriden ON stu_Pop.pidm = spriden_pidm
WHERE sprhold_from_date < sysdate 
  AND sprhold_to_date > sysdate
  AND spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
 -- and sprhold_hldd_code in ('L8','FR','RN','LO','CD','TR','ER','AE',
                            'BC','F1','LI','L2','KY','BR','L3','BD',
                            'SM','FH','PK','DS','PR','RC','PE','MS',
                            'RV','SF','L4','RR','DC')
)
Select nk,student,identifier,message,is_active From Holds","AccountHolds"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"cat.studentcourse","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                        and stvterm_code < 800000
                      )
AND ROWNUM < 7
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  INNER JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  INNER JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND sfrstcr_grde_code IN ('A','A_AP','A_CE','A_EQ','A_IB','A_SA','A_U0','A_XH','B','B_AP','B_CE','B_EQ','B_IB','B_SA','B_U0','B_XH','C','C_AP','C_CE','C_EQ','C_IB','C_SA','C_U0','C_XH','D','D_EQ','D_U0','D_XH') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = substr(sfrstcr_grde_code,1,1)
WHERE 1=1
and stvterm_code not like '8%'
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_term_code
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_term_code, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE   
        WHEN shrtckg_grde_code_final IN ('A','A_AP','A_CE','A_EQ','A_IB','A_SA','A_U0','A_XH','B','B_AP','B_CE','B_EQ','B_IB','B_SA','B_U0','B_XH','C','C_AP','C_CE','C_EQ','C_IB','C_SA','C_U0','C_XH','D','D_EQ','D_U0','D_XH') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE  
        WHEN shrtckg_grde_code_final IN ('A','A_AP','A_CE','A_EQ','A_IB','A_SA','A_U0','A_XH','B','B_AP','B_CE','B_EQ','B_IB','B_SA','B_U0','B_XH','C','C_AP','C_CE','C_EQ','C_IB','C_SA','C_U0','C_XH','D','D_EQ','D_U0','D_XH') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            AND maxCompCrseGrade.shrtckg_term_code = shrtckg.shrtckg_term_code
                            )
  LEFT JOIN grades ON grades.code = substr(shrtckg_grde_code_final,1,1)
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
and stvterm_code not like '8%'
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","Student Course"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"core.Faculty","SELECT distinct FACULTY_ID nk, 
      			ISNULL(FIRST_NAME, '') first_name,
      			LAST_NAME last_name,
      			PERSON_PIN_USER_ID username,
      			COALESCE(IC.PERSON_EMAIL_ADDRESSES,PEOPLE_EMAIL.PERSON_EMAIL_ADDRESSES, '') email,

       			'' prefix, 
       			'' suffix,
       			CASE WHEN FAC_ADVISE_FLAG = 'Y' THEN 'ADVR'
				ELSE ISNULL(FAC_CONTRACT_TYPE,'INST') end as faculty_type,
       			'T' is_active
  
  FROM FACULTY
   LEFT OUTER JOIN PERSON_PIN 
     ON FACULTY_ID = PERSON_PIN_ID
   LEFT OUTER JOIN PERSON
     ON FACULTY_ID = PERSON.ID
   LEFT OUTER JOIN PEOPLE_EMAIL
      ON FACULTY_ID = PEOPLE_EMAIL.ID AND
         PERSON_EMAIL_TYPES = 'PRI'
  LEFT OUTER JOIN PEOPLE_EMAIL IC 
      ON FACULTY_ID = IC.ID AND IC.PERSON_EMAIL_ADDRESSES LIKE '%iowa%'

    JOIN PERSTAT
      ON PERSTAT_HRP_ID = FACULTY_ID AND
          PERSTAT_END_DATE IS NULL
   
   WHERE FACULTY_ID IS NOT NULL
      AND PERSON_PIN_USER_ID IS NOT NULL

--select  * from PEOPLE_EMAIL  

--select * from FACULTY","Faculty"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"inst.Location","WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address,
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- get building rooms data from Banner
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address,
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'T' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM \\\""default\\\"")

-- Wrapper query
SELECT * FROM \\\""final\\\""","Locations"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"core.Student","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1  
  AND (sfrstcr_rsts_code LIKE ('R%') OR sfrstcr_rsts_code LIKE ('K%'))
  
---- UNION
--
--SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
--FROM saradap
--  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
--WHERE 1=1 
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  --, spriden_id AS username 
,COALESCE(SUBSTR(goremal_email_address,1,INSTR(goremal_email_address,'@')-1),lower(spriden_first_name)||lower(spriden_last_name)) AS username
  , COALESCE(goremal_email_address,lower(spriden_first_name)||lower(spriden_last_name)||'@missingemail.org') AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm AND spriden_change_ind IS NULL
  LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm AND spriden_change_ind IS NULL
  LEFT JOIN GOREMAL ON goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code IN ('STUE')
-- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student
","Student"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"core.Student","SELECT DISTINCT
   substring(P.ID,1,7) nk,
   PP.PERSON_PIN_USER_ID username,
   isnull(isnull(isnull(PE_C.PERSON_EMAIL_ADDRESSES,PE_S.PERSON_EMAIL_ADDRESSES),PE_O.PERSON_EMAIL_ADDRESSES),'student@wwy.edu') email,
   REPLACE(P.FIRST_NAME, '`', '``') FIRST_NAME,
   P.LAST_NAME last_name,
   ISNULL(REPLACE(CONVERT(CHAR(10), P.BIRTH_DATE, 111) , '/','-'), '1900-01-01') birthdate,
   't' is_active
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE_C ON    
         P.ID = PE_C.ID
            AND  
         PE_C.PERSON_EMAIL_TYPES = 'C'
      LEFT JOIN PEOPLE_EMAIL PE_O ON    
         P.ID = PE_O.ID
            AND  
         PE_O.PERSON_EMAIL_TYPES = 'O'
      LEFT JOIN PEOPLE_EMAIL PE_S ON    
         P.ID = PE_S.ID
            AND  
         PE_S.PERSON_EMAIL_TYPES = 'S'
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
           
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
		 ","Applicant - Student"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.Program","WITH PMT as (

select program
, term_id
, acyr
from (
  select sobcurr_program as program
    , sobcurr_term_code_init as term_id
    , stvterm_acyr_code as acyr
  from sobcurr
  left join stvterm on stvterm_code = sobcurr_term_code_init
  where stvterm_code is not null
  union
  select smbpgen_program as program
    , smbpgen_term_code_eff as term_id
    , stvterm_acyr_code as acyr
  from smbpgen
  left join stvterm on stvterm_code = smbpgen_term_code_eff
  where stvterm_code is not null
  ) main
where program like '4%'
group by program, term_id, acyr
order by 1,3
),

smbpgen_table as (
select smbpgen_term_code_eff max_eff_2, smbpgen_program, smbpgen_req_credits_overall 
from smbpgen a
where smbpgen_term_code_eff = ( 
select max(smbpgen_term_code_eff) 
from SMBPGEN b
where b.smbpgen_program = a.smbpgen_program
group by smbpgen_program)

),

t as (
SELECT PGRM,
      LISTAGG(txt2, '')
         WITHIN GROUP (ORDER BY pgrm, txt1) txt
FROM (select SMRPCMT_PROGRAM pgrm, 
            smrpcmt_text_seqno txt1, 
            smrpcmt_text txt2
        from SMRPCMT c
        where smrpcmt_prnt_code = 'NCC'
        and smrpcmt_term_code_eff = (select max(smrpcmt_term_code_eff) 
                              from smrpcmt b 
                              where b.SMRPCMT_PROGRAM = c.SMRPCMT_PROGRAM 
                              and b.SMRPCMT_text_seqno = c.SMRPCMT_text_seqno)
        order by 1,2)
group by PGRM)


select 
       program || '$$' ||  term_id nk,
       program cd,
       acyr cat_yr,
       smrprle_program_desc \\\""name\\\"",
        nvl(t.txt, ' ') \\\""desc\\\"",
       COALESCE(SMBPGEN_REQ_CREDITS_OVERALL,DECODE(sobcurr_degc_code, 'AS', 60,
                            'AAS', 67,
                            'STC', 9,
                            'CERT', 50,
                            99),0) credits,
       '' enrollment_notes,
       -- Showing both MET and NOTMET comments and with HTML tags
       '' registration_notes,
       nvl(( select sorcmjr_majr_code from sorcmjr
          where sorcmjr_curr_rule = sobcurr_curr_rule
            and rownum = 1
            and sorcmjr_term_code_eff = (select max(sorcmjr_term_code_eff) 
                                           from sorcmjr
                                          where sorcmjr_curr_rule = sobcurr_curr_rule
                                            and sorcmjr_term_code_eff <= sobcurr_term_code_init ) ), ' ')  area_of_study, -- select major
       '' concentration,
       sobcurr_degc_code \\\""credential\\\"",
       ( select replace(decode(stvmajr_cipc_code,null,null,substr(stvmajr_cipc_code,1,2) || '.' || substr(stvmajr_cipc_code,3)),'00.0000','24.0000') from sorcmjr, stvmajr 
          where sorcmjr_curr_rule = sobcurr_curr_rule
            and rownum = 1
            and sorcmjr_majr_code = stvmajr_code
            and sorcmjr_term_code_eff = (select max(sorcmjr_term_code_eff) 
                                           from sorcmjr
                                          where sorcmjr_curr_rule = sobcurr_curr_rule
                                            and sorcmjr_term_code_eff <= sobcurr_term_code_init ) )  cip,
       case when sobcurr_degc_code in ('AA','AS') then 'Y' else 'N' end as is_transfer,
/*
      case when PMT.term_id = (select max(abc.term_id) from PMT abc where abc.program = PMT.program)                                        
      then 'T'
      else 'F' end is_active
*/
'T' as is_active
  from PMT

  left join smrprle on smrprle_program = program
  left join sobcurr on sobcurr_program = program
  left join t on t.pgrm = program
  left join smbpgen_table on smbpgen_program = program
 where 1=1

                              
  union
  select 
    'UNDECLARED$$0000' as NK
    ,'UNDECLARED' as CD
    ,'0000' as cat_yr
    ,'UNDECLARED' as \\\""name\\\""
    ,'You are currently undeclared, please apply for a program to graduate with a valid degree.' as \\\""desc\\\""
    ,3 as CREDITS
    ,'' as ENROLLMENT_NOTES
    ,'' as REGISTRATION_NOTES
    ,'UNDC' as AREA_OF_STUDY
    ,'' as CONCENTRATION
    ,'000000' as \\\""CREDENTIAL\\\""
    ,'' as CIP
    ,'N' as IS_TRANSFER
    ,'T' as IS_ACTIVE
  from dual
  order by 1,3,13","Program"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"core.Student","--STUDENTS
SELECT 
   substring(P.ID,1,7) nk,
   PP.PERSON_PIN_USER_ID username,
   isnull(PE.PERSON_EMAIL_ADDRESSES,'') email,
   REPLACE(P.FIRST_NAME, '`', '``') first_name,
   P.LAST_NAME last_name,
   REPLACE(CONVERT(CHAR(10), P.BIRTH_DATE, 111) , '/','-') birthdate,
   'T' is_active
FROM PERSON AS P
INNER JOIN PEOPLE_EMAIL PE
ON P.ID = PE.ID AND PE.PERSON_EMAIL_TYPES IN ('BCS')
INNER JOIN PERSON_PIN PP 
ON P.ID = PP.PERSON_PIN_ID
--INNER JOIN STUDENT_RESTRICTIONS
--ON STR_STUDENT = P.ID
--AND STR_RESTRICTION = 'NAV07' commented out by Bucks request on 11/30/16
GROUP BY	P.ID,
			P.FIRST_NAME,
			P.LAST_NAME,
			P.GENDER,
			P.BIRTH_DATE,
			PE.PERSON_EMAIL_ADDRESSES,
			PP.PERSON_PIN_USER_ID","Student"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.subject","with NOVA_subjects as (
  
select distinct a.subject as NK
, a.descr as \\\""name\\\""
, case when eff_status = 'A' then 'T' else 'F' end as is_active
from PS_SUBJECT_TBL a
where INSTITUTION = 'DC279'
--and eff_status = 'A'
and effdt = (select max(effdt) from PS_SUBJECT_TBL b where a.subject = b.subject and a.institution = b.institution)
),


OTHER_SUBJECTS as (
select subject as NK
, descr as \\\""name\\\""
, 'F' as is_active
from PS_SUBJECT_TBL a
where INSTITUTION <> 'DC279'
--and eff_status = 'A'
and effdt = (select max(effdt) from PS_SUBJECT_TBL b where a.subject = b.subject and a.institution = b.institution)

)
select * from NOVA_subjects

union 

select * from OTHER_SUBJECTS
where NK not in (select NK from NOVA_SUBJECTS)","Subject"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"reg.AccountHold","with CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-3*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC
),
STU_POP AS (
  SELECT SFRSTCR_PIDM AS PIDM
    FROM SFRSTCR
   WHERE SFRSTCR_TERM_CODE IN (SELECT * from cur_term)
  UNION
  SELECT SARADAP_PIDM AS PIDM
    FROM SARADAP
   WHERE SARADAP_TERM_CODE_ENTRY IN (SELECT * from cur_term)
),
holds AS (
SELECT DISTINCT
  spriden_id || '$$' || sprhold_hldd_code AS nk
  , spriden_id AS student
  , sprhold_hldd_code AS \\\""identifier\\\""
  , stvhldd_desc AS message
  , 'T' AS is_active
FROM sprhold
  join stvhldd on stvhldd_code = sprhold_hldd_code
  JOIN stu_Pop ON stu_Pop.pidm = sprhold_pidm
  JOIN spriden ON stu_Pop.pidm = spriden_pidm
WHERE sprhold_from_date < sysdate 
  AND sprhold_to_date > sysdate
  AND spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
 -- and sprhold_hldd_code in ('L8','FR','RN','LO','CD','TR','ER','AE',
         --                   'BC','F1','LI','L2','KY','BR','L3','BD',
          --                  'SM','FH','PK','DS','PR','RC','PE','MS',
             --               'RV','SF','L4','RR','DC')
)
Select nk,student,\\\""identifier\\\"",message,is_active From Holds","AccountHolds"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.SeatsAvail","select 
a.SSBSECT_CRN || '$$' ||a.SSBSECT_TERM_CODE AS NK,
a.SSBSECT_SEATS_AVAIL AS AVAIL_SEATS,
'T' AS IS_ACTIVE
from SSBSECT a
where a.SSBSECT_SSTS_CODE = 'A' -- Need to confirm
and a.SSBSECT_TERM_CODE > 201510 -- Need to confirm
and a.ssbsect_camp_code = 'M'","Seats Avail"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"core.Student","WITH 
defaultValues AS (
	SELECT
	'default' nk,
	'default' username,
	'default@default.com' email,
	'default' first_name,
	'default' last_name,
	REPLACE(CONVERT(CHAR(10), GETDATE(), 111) , '/','-') birthdate,
	'F' is_active
),

CURRENT_STUDENTS AS (SELECT DISTINCT
   substring(P.ID,1,7) nk,
   PP.PERSON_PIN_USER_ID username,
   isnull(PE.PERSON_EMAIL_ADDRESSES,'') email,
   REPLACE(P.FIRST_NAME, '`', '``') FIRST_NAME,
   P.LAST_NAME last_name,
   REPLACE(CONVERT(CHAR(10), P.BIRTH_DATE, 111) , '/','-') birthdate
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'),

allStudents AS (

SELECT nk,username,email,FIRST_NAME,last_name,birthdate, 't' is_active from CURRENT_STUDENTS

UNION 

SELECT DISTINCT
   substring(P.ID,1,7) nk,
   PP.PERSON_PIN_USER_ID username,
   isnull(PE.PERSON_EMAIL_ADDRESSES,'') email,
   REPLACE(P.FIRST_NAME, '`', '``') FIRST_NAME,
   P.LAST_NAME last_name,
   REPLACE(CONVERT(CHAR(10), P.BIRTH_DATE, 111) , '/','-') birthdate,
   't' is_active
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         substring(A.APPL_APPLICANT,1,7) NOT IN 
         (
            SELECT
               nk
            FROM
               CURRENT_STUDENTS
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID)

		 SELECT allStudents.* FROM allStudents
		 JOIN PERSON ON PERSON.ID = allStudents.nk
		 WHERE PERSON.PERSON_CHANGE_DATE > GETDATE() - 1

		 UNION

		 SELECT * FROM defaultValues
","Student"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.section","WITH 
SFRRSTS_DROP_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.Sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('DW')

--and rsts.Sfrrsts_Term_Code = 201110 and rsts.Sfrrsts_ptrm_code = '16'
),
SFRRSTS_WITHDRAW_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('WD')
)


SELECT DISTINCT 
  a.SSBSECT_CRN  || '$$' || a.SSBSECT_TERM_CODE  AS NK
  , a.SSBSECT_CRN AS CD
  , a.SSBSECT_SUBJ_CODE || a.SSBSECT_CRSE_NUMB AS COURSE
  , stvterm.stvterm_code as term 
  , nvl(stvcamp_code,'DEFAULT') as CAMPUS
  , a.SSBSECT_MAX_ENRL AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , CASE WHEN instructor.SPRIDEN_LAST_NAME IS NULL THEN 'TBD' 
  ELSE instructor.SPRIDEN_LAST_NAME || ', ' || instructor.SPRIDEN_FIRST_NAME
  END AS INSTRUCTOR_NAME
  , nvl(to_char(b.SSRMEET_START_DATE,'YYYY-MM-DD'),'2000-01-01') AS CLASS_START_DT
  , nvl(to_char(b.SSRMEET_END_DATE, 'YYYY-MM-DD'), '2000-01-02') AS CLASS_END_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_Start_Date,'YYYY-MM-DD'), to_char(ssrmeet_start_date, 'YYYY-MM-DD'),'2000-01-01') as DROP_START_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as DROP_END_DT
  , coalesce(to_char(SFRRSTS_WITHDRAW_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as WITHDRAW_END_DT
  , CASE WHEN a.SSBSECT_SSTS_CODE = 'A' THEN 'T' ELSE 'F' END AS IS_ACTIVE
FROM ssbsect a
  --creating campus lookup
  join stvcamp on stvcamp_code = SSBSECT_CAMP_CODE
  --creating term lookup
  join stvterm on stvterm_code = ssbsect_term_code
  --instructor info
  LEFT OUTER JOIN (
    SELECT SIRASGN_TERM_CODE, SIRASGN_CRN, SIRASGN_PIDM, SIRASGN_PRIMARY_IND, SPRIDEN_ID, SPRIDEN_FIRST_NAME, SPRIDEN_LAST_NAME
    FROM SIRASGN a
      JOIN SPRIDEN b ON a.sirasgn_pidm = b.spriden_pidm AND b.spriden_change_ind IS NULL  
      WHERE SIRASGN_CATEGORY = '01' AND SIRASGN_PRIMARY_IND = 'Y'
    )  instructor
    ON instructor.SIRASGN_TERM_CODE = a.SSBSECT_TERM_CODE AND instructor.SIRASGN_CRN = a.SSBSECT_CRN
  --meeting info
  LEFT OUTER JOIN (
    SELECT * FROM SSRMEET)
     b ON b.SSRMEET_TERM_CODE = a.SSBSECT_TERM_CODE AND b.SSRMEET_CRN = a.SSBSECT_CRN
  --joins for drop and withdraw dates
  INNER JOIN SFRRSTS_DROP_DATES on ssbsect_term_code = SFRRSTS_DROP_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_DROP_DATES.Sfrrsts_ptrm_code
  LEFT JOIN SFRRSTS_WITHDRAW_DATES on ssbsect_term_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_ptrm_code
where SSBSECT_VOICE_AVAIL = 'Y'
AND ssbsect_gmod_code <> 'C'
UNION
  select 'UNKNOWN' as NK
  , 'UNKNOWN' as CD
  , 'UNKNOWN' as COURSE
  , '201410' as TERM    --[Member Specific] Change to a valid default term
  ,  'DEFAULT' as CAMPUS
  ,  0 AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , 'TBD' AS INSTRUCTOR_NAME
  , '2000-01-01' AS CLASS_START_DT
  , '2000-01-01' AS CLASS_END_DATE
  , '2000-01-01' AS DROP_START_DT
  , '2000-01-01' AS DROP_END_DT
  , '2000-01-01' AS WITHDRAW_END_DT
  , 'T' AS IS_ACTIVE
  from dual
  order by 2,4  ","Section"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"reg.StudentPlanSlot","--Get all students and plans
WITH studentPlans AS (
  SELECT student_id
  , plan_id
  , degree
  , create_date
    FROM DWSCHEMA.SEP_PLAN PLAN_A
      WHERE is_active = 'Y' -- Use Y to ensure the plan is active
        AND is_locked = 'Y' -- Use Y to ensure the plan is locked along with active
        AND school = 'GW' -- Use GW for golden west and CL for Coastline
        AND CREATE_DATE = (SELECT MAX(CREATE_DATE)
                        FROM DWSCHEMA.SEP_PLAN PLAN_B
                          WHERE PLAN_A.student_id = PLAN_B.student_id
                            AND PLAN_B.is_active = 'Y' -- Use Y to ensure the plan is active
                            AND PLAN_B.is_locked = 'Y' -- Use Y to ensure the plan is locked along with active
                            AND PLAN_B.school = 'CL' -- Use GW for golden west and CL for Coastline
                      ) -- Get plan with the max create_date as the most recent plan
      -- use highest lock_version for most recent plan
),

planTerm AS(
  SELECT plan_id
  , term_id
  , term
    FROM DWSCHEMA.SEP_PLAN_TERM
),

parentGroups AS (
  SELECT group_id_parent
  , planTerm.term AS term
  , planTerm.plan_id AS plan_id
    FROM DWSCHEMA.SEP_PLAN_GROUP planGroup
    JOIN planTerm ON planTerm.term_id = planGroup.term_id
)

/*classGroups AS (
  SELECT group_id
    FROM DWSCHEMA.SEP_PLAN_GROUP
      WHERE group_id_parent 
),

classes AS (
  SELECT course_discipline || '$$' || course_number
  , \\\""sequence\\\""
    FROM DWSCHEMA.SEP_PLAN_CLASS
      WHERE group_id 
      ORDER by \\\""sequence\\\""
)*/

SELECT 
  student_id || '$$' || studentPlans.degree || '$$' || RANK() OVER (PARTITION BY studentPlans.student_id ORDER BY parentGroups.term || '.' || classGroups.sequence || '.' || classes.sequence) AS nk
  , studentPlans.student_id AS student
  /*, studentPlans.degree AS \\\""program\\\""
  , studentPlans.plan_id AS plan_id
  , parentGroups.term AS term
  , classGroups.group_id
  , classGroups.sequence AS GroupSLot
  , classes.sequence AS Courseslot
  , parentGroups.term || '.' || classGroups.sequence || '.' || classes.sequence AS combinedSlot */ -- Leaving this in for future purposes. If we do courseGroups this will come in handy.
  , RANK() OVER (PARTITION BY studentPlans.student_id ORDER BY parentGroups.term || '.' || classGroups.sequence || '.' || classes.sequence) AS slot
  , course_discipline || course_number AS course
  , 'T' AS is_active
    FROM DWSCHEMA.SEP_PLAN_CLASS classes
      JOIN DWSCHEMA.SEP_PLAN_GROUP classGroups ON classGroups.group_id = classes.group_id
      JOIN parentGroups ON parentGroups.group_id_parent = classGroups.group_id_parent
      JOIN studentPlans ON studentPlans.plan_id = parentGroups.plan_id
    --WHERE studentPlans.student_id = 'C02442414'--'C02111499' --'C00007389' student with multiple plans
      ORDER BY student, slot","DegreeWorks_StudentPlanSlot"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"core.facultytype","Select Stvfstp_Code As Nk,
  Stvfstp_Code As \\\""type\\\"",
  stvfstp_desc as description
  From Stvfstp
Union
Select Stvfctg_Code As Nk,
Stvfctg_Code As \\\""type\\\"",
Stvfctg_Desc As Description
from stvfctg
 Order By 1","FacultyType"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.coreq","With Coreq_Data_Bank As (

select scbcrse_subj_code || scbcrse_crse_numb as course
, case when ssbsect_schd_code = 'B' then scbcrse_subj_code || scbcrse_crse_numb || ssbsect_schd_code
	Else Null End As Coreq
, ssbsect_schd_code


from (
  SELECT a.SCBCRSE_EFF_TERM
  		,a.scbcrse_coll_code
  		, a.scbcrse_dept_code
  		, a.scbcrse_subj_code
  		, a.scbcrse_crse_numb
  FROM scbcrse a
  WHERE 1=1
  and a.SCBCRSE_CSTA_CODE = 'A'
and a.SCBCRSE_EFF_TERM = (  --DEDUPING LOGIC
    SELECT max(SCBCRSE_EFF_TERM)
    FROM scbcrse b 
    WHERE b.scbcrse_subj_code = a.scbcrse_subj_code
      And B.Scbcrse_Crse_Numb = A.Scbcrse_Crse_Numb
      )) Course
  Left Join (Select Ssbsect_Subj_Code
            , ssbsect_crse_numb
            , Ssbsect_Schd_Code
            --, Count(Ssbsect_Schd_Code)
            , Stvschd_Desc 
            from ssbsect
            Left Join Stvschd On Ssbsect_Schd_Code = Stvschd_Code
            Where 1=1
            And Ssbsect_Term_Code = (Select Max(Ssbsect_Term_Code)
                                    From Ssbsect B
                                    Where B.Ssbsect_Crse_Numb = Ssbsect.Ssbsect_Crse_Numb
                                    And B.Ssbsect_Subj_Code = Ssbsect.Ssbsect_Subj_Code
                                    And B.Ssbsect_Schd_Code = Ssbsect.Ssbsect_Schd_Code
                                    )
            ) Section
  On Course.Scbcrse_Subj_Code = Section.Ssbsect_Subj_Code
  And Course.Scbcrse_Crse_Numb = Section.Ssbsect_Crse_Numb

) 
  
Select 
Course || '$$' || 0 As Nk
, course as course
, 0 As Cat_Yr
, Course || '$$' || 0 || '$$COREQ' As Course_Element_Cd
, 'T' As Is_Active
From Coreq_Data_Bank
Where 1=1
and coreq is not null

union

Select 
Coreq || '$$' || 0 As Nk
, coreq as course
,0 As Cat_Yr
,coreq || '$$' || 0 || '$$COREQ' As Course_element_cd
, 'T' As Is_Active
From Coreq_Data_Bank
Where 1=1
and coreq is not null","Coreq"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.Section","-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN CCCD_EAB_GENERAL_PERSON ON sirasgn_pidm = spriden_pidm -- Custom view for Coastline since no access to SPRIDEN
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , CASE
      WHEN ssbsect_insm_code = '72' THEN 'ONLINE'
      ELSE NVL(stvcamp_code, 'DEFAULT')
    END AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(ssbsect.ssbsect_enrl_cut_off_date, 'YYYY-MM-DD'), TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD')
             , TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts, if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(ssbsect.ssbsect_drop_cut_off_date, 'YYYY-MM-DD'), TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD')
             , TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts,  if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , CASE WHEN ssbsect_ssts_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- Identify if section is active by comparing the value in ssbsect_ssts_code. The default is 'A'. Confirm with BA/Member if this is different at their college.
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
WHERE ssbsect_camp_code = 'G' --Golden West
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Sections"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"event.TaskStatusFeed","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'P'
 order by nk desc),

cur_stu as (
select distinct id as stu_id
  from eab_stdnt_active
 where current_enroll_pc = 'Y'
   and academic_period in (select nk from cur_terms)),
   
this_term as (
  select MIN(NK)
    from eab_trm
   where to_date(term_end_dt,'YYYY-MM-DD') > sysdate
     and college = 'PC'
)
select id||'$$E_ORIENTATION$$' as nk,
       id as student,
       'E_ORIENTATION' as event,
       '' as repeated_by_nk,
       'COMPLETED' as status,
       '1900-01-01' as status_changed_ts,
       'Y' as is_active
  from eab_stdnt_active
 WHERE home_college = 'PC'
   and ID in (select * from cur_stu)
 order by ID, ACADEMIC_PERIOD","TaskStatusFeed"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.Program","-- determine most recent term for each Program by finding the max term for each program in sobcurr
WITH maxEffectiveTerm AS (
  SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
    FROM sobcurr
   GROUP BY sobcurr_program
),

programCredits as (
  select smbpgen.smbpgen_program,
         smbpgen.smbpgen_term_code_eff,
         smbpgen.smbpgen_active_ind,
         nvl(smbpgen.smbpgen_req_credits_overall, 0.0) as credits
    from smbpgen join (select sMBPGEN_PROGRAM, max(smbpgen_term_code_eff) max_term
                         from smbpgen
                        where smbpgen_active_ind = 'Y'
                        group by sMBPGEN_PROGRAM) s on smbpgen.smbpgen_program = s.smbpgen_program
                                                   and smbpgen.smbpgen_term_code_eff = s.max_term
),

-- Collection of program descriptions
prog_desc as (
  select smrpcmt_program, listagg(smrpcmt_text, ' ') within group (order by smrpcmt_text_seqno asc) smrpcmt_text -- within group (order by smrpcmt_prnt_code asc) as smrpcmt_text
    from smrpcmt s1 join (select s2.smrpcmt_program as prgm, max(s2.smrpcmt_term_code_eff) as term
                            from smrpcmt s2 group by s2.smrpcmt_program) mx on s1.smrpcmt_term_code_eff = Mx.term
                                                                           and s1.smrpcmt_program = Mx.Prgm
   where --smrpcmt_prnt_code is not null
     smrpcmt_text is not null
   group by smrpcmt_program
   order by smrpcmt_program
),

-- extract program data from Banner
program AS (
  SELECT DISTINCT
      sobcurr_program || '$$' || stvterm_acyr_code AS nk,
      sobcurr_program AS cd,
      TO_NUMBER(stvterm_acyr_code) AS cat_yr,
       smrprle_program_desc ||' - '||
		CASE WHEN sobcurr_program LIKE '%1' THEN 'Certificate' 
		   	 WHEN (sobcurr_program LIKE '%2' or sobcurr_program LIKE '%4') then 'Diploma'
			 WHEN sobcurr_program LIKE '%3' THEN 'Degree' 
		 ELSE ''
		 END 										  	AS \\\""name\\\"",
      coalesce(smrpcmt_text, smrprle_program_desc, 'None') AS \\\""desc\\\"",
      NVL(credits, 0.0) AS CREDITS, -- confirm degree code to credits conversion with BA/Member. This logic may differ for different colleges and will need to be adjusted accordingly.
      '' AS enrollment_notes,
      '' AS registration_notes,
       -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' --- instead of underscores '_' Confirm with BA/Memeber.
      sobcurr_program AS area_of_study,
      '' AS concentration,
      sobcurr_degc_code AS \\\""credential\\\"",
      DECODE (stvmajr_cipc_code,
              null,
              null,
              SUBSTR(stvmajr_cipc_code,1,2)||'.'||SUBSTR(stvmajr_cipc_code,3)) AS cip,
      CASE
        WHEN sobcurr_degc_code IN ('AA','AS') THEN 'T'
        ELSE 'F'
      END AS is_transfer, -- Confirm with BA
      CASE
        WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T'
        ELSE 'F'
      END AS is_active
    FROM sobcurr LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
                 LEFT JOIN smrprle ON smrprle_program = sobcurr_program
                 LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
                 LEFT JOIN stvmajr ON stvmajr_code = sobcurr_program --(SUBSTR(sobcurr_program,1,CAST(INSTR(sobcurr_program,'_') AS NUMBER)-1))   -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_'. Confirm with BA/Memeber. Should match with area_of_study in SELECT portion of query.
                 LEFT JOIN programCredits ON sobcurr_program = smbpgen_program
                 LEFT JOIN prog_desc on sobcurr_program = smrpcmt_program
   where smbpgen_term_code_eff >= '201212' -- per Bruce
     and smbpgen_active_ind = 'Y' -- per Bruce
)

-- Wrapper query
SELECT * FROM program
","Programs"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.StudentCourse","-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND stvterm_desc like 'CCC%' -- Scope the query to only CCC terms
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

/*-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),*/

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
/*studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM ODSSRC.CCCD_TEST_EAB_GENERAL_PERSON -- Custom view at Coastline that replaces SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),*/

-- Force the query optimizer to read this view once into memory and use it in other statements below
CCCD_EAB_GENERAL_PERSON_cte AS (
SELECT *
  FROM CCCD_EAB_GENERAL_PERSON
    WHERE spriden_pidm IN (SELECT studentPidm
                          FROM studentPopulation
                          )
    AND spriden_change_ind IS NULL
),

-- Force the query optimizer to read this table once into memory and use it in other statements below
shrtckg_cte as (
SELECT *
  FROM shrtckg
  --JOIN studentPopulation ON studentPopulation.studentPidm = shrtckg_pidm
  WHERE shrtckg_pidm IN (SELECT studentPidm
                          FROM studentPopulation
                        )
),
-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg_cte
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , shrtckn_term_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(shrtckn_crn || '$$' || shrtckn_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM CCCD_EAB_GENERAL_PERSON_cte -- Custom view at Coastline that replaces SPRIDEN
  --JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  --JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg_cte ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg_cte.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg_cte.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg_cte.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
--WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
)

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
/*droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN ODSSRC.CCCD_TEST_EAB_GENERAL_PERSON ON spriden_pidm = studentDroppedCrse.pidm -- Custom view at Coastline that replaces SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),*/

-- Combine all above categories
--finalDataSet AS (
--SELECT * FROM studentCourse -- 360 secs, 110 secs with mat_view - 50,048 rows in 110 secs
--UNION
--SELECT * FROM completedCourses -- problem
--UNION
--SELECT * FROM droppedCourses -- 280 secs with mat_view - 62,781 rows in 60 secs
--)

-- Wrapper query
SELECT * FROM completedCourses","Student Courses (Completed)"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Course","-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
WHERE substr(scbcrse_eff_term, 1, 1) NOT IN ('6', '7', '8')
      AND LENGTH(scbcrse_subj_code) = 3
      AND LENGTH(scbcrse_crse_numb) = 3
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk -- This nk does not use the standard $$ concatenation since the platform currently shows the nk field in the UI. This affects the following dependent scripts that need to be in sync - section, studentCourse
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  ,CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE  WHEN SSBSECT_CRN IS NULL THEN 'F'
          WHEN scbcrse.scbcrse_csta_code IN ('A', 'P') THEN 'T' ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active. This may be member specific. Confirm code with BA/Member.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                      AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN SSBSECT ON (scbcrse.scbcrse_subj_code = ssbsect.ssbsect_subj_code 
                 AND scbcrse.scbcrse_crse_numb = ssbsect.ssbsect_crse_numb
                 AND ssbsect.ssbsect_vpdi_code = 'PPCC')                                  
WHERE 
      (
       (scbdesc.scbdesc_term_code_eff = (SELECT MAX(scbdesc2.scbdesc_term_code_eff)
                                          FROM scbdesc scbdesc2
                                          WHERE scbdesc2.scbdesc_subj_code = scbdesc.scbdesc_subj_code AND 
                                                scbdesc2.scbdesc_crse_numb = scbdesc.scbdesc_crse_numb
                                                AND scbdesc2.scbdesc_term_code_eff <= maxEffectiveTerm.maxTerm)
                                      )
        OR
        scbdesc.scbdesc_term_code_eff IS NULL)
),

-- Assign default values
defaultValues AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM course
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Courses"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.StudentCourse","-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT szvterm_code
FROM szvterm
WHERE szvterm_code <= (
                      SELECT MIN(szvterm_code)
                      FROM szvterm
                        WHERE szvterm_start_date > sysdate
                      )
AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
AND szvterm_vpdi_code = 'PCC'
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code LIKE 'R_'
  AND sfrstcr_vpdi_code = 'PCC'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = saradap_term_code_entry
WHERE 1=1
      AND saradap_vpdi_code = 'PCC'
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
  LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
  WHERE 
        szvcamp_vpdi_code = 'PCC'
        AND szvcamp_eab_enable = 'Y'
        AND sfrstca_vpdi_code = 'PCC'
        AND ssbsect_vpdi_code = 'PCC'
        AND substr(sfrstca_term_code, 1, 1) NOT IN ('6', '7', '8')
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr 
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
    WHERE sfrstcr_vpdi_code = 'PCC'
          AND ssbsect_vpdi_code = 'PCC'
          AND substr(sfrstcr_term_code, 1, 1) NOT IN ('6', '7', '8')
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
WHERE ssbsect_vpdi_code = 'PCC'
      AND substr(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
UNION
SELECT 'A*' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'B*' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C*' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D*' AS code
  , 1.0 AS gradePoint
FROM dual
UNION
SELECT 'CPL' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'PLA' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'S/A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'S/B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'S/C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'P' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'S' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'S*' AS code
  , 2.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || szvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , szvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code LIKE 'R_' -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code LIKE 'R_'  AND szvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code LIKE 'R_' AND szvterm_start_date <= sysdate AND szvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code LIKE 'R_' AND sfrstcr_grde_code IN ('A%', 'B%', 'C%', 'D%', 'S%', 'CPL', 'P%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN szvterm ON szvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
  LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
WHERE 1=1
  AND szvcamp_vpdi_code = 'PCC'
  AND szvcamp_eab_enable = 'Y'
  AND substr(sobptrm_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND substr(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND substr(sfrstcr_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
  AND ssbsect_vpdi_code = 'PCC'
  AND szvterm_vpdi_code = 'PCC'
  AND sfrstcr_vpdi_code = 'PCC'
  AND sobptrm_vpdi_code = 'PCC'
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                    AND substr(shrtckn_term_code, 1, 1) NOT IN ('6', '7', '8')
                    AND shrtckn_vpdi_code = 'PCC'
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm,
       shrtckg_tckn_seq_no,
       maxSeq,
       shrtckg_term_code term_code
FROM
(
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
  ,shrtckg_term_code
FROM shrtckg, getLastXTerms
WHERE shrtckg_vpdi_code = 'PCC'
      AND substr(shrtckg_term_code, 1, 1) NOT IN ('6', '7', '8')
      and szvterm_code = shrtckg_term_code
GROUP BY shrtckg_term_code, shrtckg_pidm, shrtckg_tckn_seq_no) JOIN shrtckn ON shrtckn_term_code = shrtckg_term_code
WHERE shrtckn_pidm = shrtckg_pidm
      AND shrtckn_term_code = shrtckg_term_code
      AND shrtckg_tckn_seq_no = shrtckn_seq_no
      AND shrtckn_vpdi_code = 'PCC'
),

-- extract student course data for completed courses. 
-- This query extracts from shrtckn and shrtckg and because of that needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , szvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN szvterm ON szvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            AND maxCompCrseGrade.term_code = shrtckg.shrtckg_term_code
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
  LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
WHERE szvcamp_vpdi_code = 'PCC'
      AND szvcamp_eab_enable = 'Y'
      AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
      AND substr(shrtckn_term_code, 1, 1) NOT IN ('6', '7', '8')
      AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
      AND substr(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
      AND substr(shrtckg_term_code, 1, 1) NOT IN ('6', '7', '8')
      AND shrtckn_vpdi_code = 'PCC'
      AND szvterm_vpdi_code = 'PCC'
      AND ssbsect_vpdi_code = 'PCC'
      AND shrtckg_vpdi_code = 'PCC'
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","Student Courses"
1021,"Houston Baptist University",10391,"",47987,"APS:Houston Baptist University",47975,"APS",24,"finance","DEFINE COAS_CHOOSER = 1 
DEFINE DATE_LOWER_BOUND = 30-06-2009
with spriden_unique as (
	select * 
	from spriden 
	where spriden_change_ind is null
)
select distinct
	frrgrnl_coas_code as coas_code
	, frrgrnl_fund_code as fund_code 
	, frbgrnt_code as grant_code
	, frbgrnt_sponsor_id as sponsor_id 
	, frbgrnt_category as category_code
	, frbgrnt_sub_category as subcategory_code
	, frrgrnl_grnt_yr as grant_year
	, s.spriden_last_name as sponsor_name 
	, frbgrnt_pi_pidm as pi_pidm
	, frbgrnt_grant_type as grant_type
	, frbgrnt_basi_code_ic as indirect_cost_rate 
	, frbgrnt_indr_code_rate as rate_code
	, frbgrnt_project_start_date as project_start_date
	, frbgrnt_project_end_date as project_end_date
	, frbgrnt_cfda_internal_id_no as cfda
	, frbgrnt_current_funding_amt as award_amount
from 
	frbgrnt a
	inner join frrgrnl b on a.frbgrnt_code = b.frrgrnl_grnt_code
	left outer join spriden_unique s on a.frbgrnt_agency_pidm = s.spriden_pidm	
where
	b.frrgrnl_coas_code = '&COAS_CHOOSER'
	and (a.frbgrnt_project_end_date is null or a.frbgrnt_project_end_date > to_date('&DATE_LOWER_BOUND','dd-mm-yyyy')); ","grant_attributes"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"inst.Location","-- get building data from Banner
WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, 
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, 
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- Assign default values
defaultValues AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Locations"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.SeatsAvail","WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
WHERE 1=1
  AND ssbsect_ssts_code = 'A'
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01'
--  AND ssbsect_camp_code = 'M'
)

-- wrapper query
SELECT * FROM seatsAvail","SeatsAvail"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"inst.Campus","-- get campus data from Banner 
WITH campus AS (
SELECT DISTINCT stvcamp_code as nk
                , substr(stvcamp_desc,1,25) as \\\""name\\\""
                , CASE WHEN stvcamp_desc = 'Online'
                			THEN 'T'
                			ELSE 'F' 
                  END as is_online
                , 'T' as is_active
FROM stvcamp
where stvcamp_code in ('1')
),

-- Assign default values
defaultValues AS (
SELECT 'DEFAULT' as nk
       , 'EAB Default Code' as \\\""name\\\""
       , 'F' as is_online
       , 'F' as is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM campus
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Campus"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"student_admission_type_lkp","select 
admit_type_cd,
admit_type_desc
from atlantatech.osf_atl_admit_type_lkp","SSF_student_admission_type_lkp"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"core.StudentCategory","-- Gavilan Student Category

SELECT 'NC' AS  NK 
, 'Non Credit Student' AS NAME 
, 'T'  AS IS_ACTIVE 
FROM DUAL ","StudentCategory"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"reg.StudentTestScore","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","StudentTestScore"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"core.Faculty","SELECT distinct FACULTY_ID nk, 
      			ISNULL(FIRST_NAME, '') first_name,
      			LAST_NAME last_name,
      			PERSON_PIN_USER_ID username,
      			ISNULL(PERSON_EMAIL_ADDRESSES, '') email,
       			'' prefix, 
       			'' suffix,
       			'INST'  faculty_type,
       			'T' is_active
  
  FROM FACULTY
   LEFT OUTER JOIN PERSON_PIN 
     ON FACULTY_ID = PERSON_PIN_ID
   LEFT OUTER JOIN PERSON
     ON FACULTY_ID = PERSON.ID
   LEFT OUTER JOIN PEOPLE_EMAIL
      ON FACULTY_ID = PEOPLE_EMAIL.ID AND
         PERSON_EMAIL_TYPES = 'STA'
    JOIN PERSTAT
      ON PERSTAT_HRP_ID = FACULTY_ID AND
          PERSTAT_END_DATE IS NULL
   
   WHERE FACULTY_ID IS NOT NULL
      AND PERSON_PIN_USER_ID IS NOT NULL","Faculty"
1219,"Broward College",10510,"",48378,"Navigate:Broward College",47972,"Navigate",20,"cat.Subject","SELECT DISTINCT
SUBSTRING(CRS_ID,1,3) AS nk
, SUBSTRING(CRS_ID,1,3) AS name
, 'T' AS is_active
from ST_COURSE_A a

ORDER BY 1","Subjects"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.coursetype","SELECT a.STVSCHD_CODE AS NK
, a.STVSCHD_DESC AS \\\""NAME\\\""
, 'T' AS IS_ACTIVE
FROM STVSCHD a
ORDER BY 1 ASC","Course Type"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"inst.Campus","-- Fields: nk,name,is_online,is_active
-- Model Name: inst.Campus
-- Name: Campus
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get campus data from Banner 
WITH campus AS (
SELECT DISTINCT stvcamp_code nk
                , stvcamp_desc \\\""name\\\""
                , CASE WHEN stvcamp_code = 'O' -- Logic to identify online campuses. Confirm with BA.
                			THEN 'T'
                			ELSE 'F' END is_online
                , 'T' is_active
FROM stvcamp
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM campus
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Campus"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.StudentCourse","-- Student Course
WITH pop AS (
select distinct pidm 
  from (select sfrstcr_pidm pidm, 
               sfrstcr_term_code term 
          from sfrstcr
         where sfrstcr_rsts_code in ('RE','RW','RA')
           and sfrstcr_term_code in (select term
                                       from (SELECT STVTERM_CODE term 
                                               FROM STVTERM
                                              WHERE STVTERM_FA_SUMMER_IND IS NULL
                                                and STVTERM_SYSTEM_REQ_IND is null
                                                and STVTERM_CODE < (SELECT min(stvterm_code)
                                                                      FROM stvterm 
                                                                     where sysdate < stvterm_start_date
                                                                       and STVTERM_FA_SUMMER_IND IS NULL
                                                                       and STVTERM_SYSTEM_REQ_IND is null)
                                                and rownum < 5
                                              ORDER BY 1 desc))
        UNION (
        select saradap_pidm pidm,
               saradap_term_code_entry term
          from saradap
         where saradap_term_code_entry in (select term
                                             from (SELECT STVTERM_CODE term
                                                     FROM STVTERM
                                                    WHERE STVTERM_FA_SUMMER_IND IS NULL
                                                      and STVTERM_SYSTEM_REQ_IND is null
                                                      and STVTERM_CODE < (SELECT min(STVTERM_CODE)
                                                                            FROM stvterm 
                                                                           where sysdate < stvterm_start_date
                                                                             and STVTERM_FA_SUMMER_IND IS NULL
                                                                             and STVTERM_SYSTEM_REQ_IND is null)
                                                      and rownum < 5
                                                    ORDER BY 1 desc))))),

audit_bank as (
select distinct sfrstca_pidm as pidm,
                sfrstca_crn as crn,
                sfrstca_term_code term
  from sfrstca left join sfrstcr on sfrstcr_term_code = sfrstca_term_code 
                                and sfrstcr_crn = sfrstca_crn
                                and sfrstcr_pidm = sfrstca_pidm
 where sfrstcr_crn is null
 order by 1,2,3)

select spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || ssbsect_crse_numb as NK,
       spriden_id Student,
       stvterm_code term,
       ssbsect_subj_code || ssbsect_crse_numb course,
       nvl((select SSBSECT_CRN  || '$$' || SSBSECT_TERM_CODE
              from ssbsect
             where ssbsect_crn = sfrstcr_crn and ssbsect_term_code = sfrstcr_term_code), 'UNKNOWN') as Section,
       sfrstcr_grde_code grade_cd, 
       nvl(sfrstcr_credit_hr, 0) as Credits_Attemtped,
       0 as Credits_Earned,
       case 
        when sfrstcr_rsts_code in ('RE','RW','RA') and stvterm_start_date > sysdate then 'REGISTERED'
        when sfrstcr_rsts_code in ('RE','RW','RA') and stvterm_start_date <= sysdate and stvterm_end_date > sysdate then 'IN_PROGRESS'
        when sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code in ('A','A-','B','B+','B-','C','C+','CR','D','D+','D-','P') then 'COMPLETED'
        else 'UNKNOWN'
       end STATUS, 
       CASE -- Consider left join on SHRGRDE
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'A' THEN 4.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'A-' THEN 3.7
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'B+' THEN 3.3
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'B' THEN 3.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'B-' THEN 2.7
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'C+' THEN 2.3
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'C' THEN 2.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'D+' THEN 1.3
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'D' THEN 1.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'D-' THEN 0.7
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'P' THEN 0.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'CR' THEN 0.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code IS NULL THEN 0.0
        ELSE 0.0
       END as grade_points,
       'T' as is_active

  -- Why are we using the cartesian product here? Should try to use an explicit 
  -- inner join here instead of the implicit cross join. 
  from (select null p_term, '' p_id, 'N' p_history, 'N' p_current from dual ), spriden, sfrstcr, stvterm, stvrsts, ssbsect, scbcrse, sobptrm
 where spriden_change_ind is null 
    and stvterm_code = sfrstcr_term_code --join
    and sfrstcr_pidm = spriden_pidm --join
    and sfrstcr_term_code = nvl(p_term, sfrstcr_term_code) --this seems surperfluous - is it here just to account for bad data?
    and ssbsect_crn = sfrstcr_crn --join
    and scbcrse_subj_code = ssbsect_subj_code --join
    and ssbsect_term_code = sfrstcr_term_code --join
    and scbcrse_crse_numb = ssbsect_crse_numb --join
    and scbcrse_eff_term = ( select max(scbcrse_eff_term) 
                             from scbcrse 
                            where scbcrse_crse_numb = ssbsect_crse_numb 
                              and scbcrse_subj_code = ssbsect_subj_code 
                              and scbcrse_eff_term <= ssbsect_term_code ) 
    and sfrstcr_rsts_code = stvrsts_code --join
    and ( stvrsts_wait_ind = 'Y' or ( stvrsts_incl_sect_enrl = 'Y' and stvrsts_withdraw_ind = 'N' ) )
    and sobptrm_ptrm_code = ssbsect_ptrm_code --join, parts of term
    and sobptrm_term_code = ssbsect_term_code --join, entire term
    and ( p_current = 'N' or stvterm_start_date <= sysdate )  --p_current is always set to 'N'

    -- If course is graded, do not include sfrstcr
    and not exists ( select 'Y'
                       from shrtckn 
                      where shrtckn_crn = sfrstcr_crn 
                        and shrtckn_term_code = sfrstcr_term_code 
                        and shrtckn_pidm = sfrstcr_pidm) 
    and spriden_pidm in (select * from pop)
UNION
select spriden_id|| '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code|| shrtckn_crse_numb as NK,
       spriden_id as Student,
       stvterm_code as term,
       shrtckn_subj_code|| shrtckn_crse_numb as course_cd,
       nvl((select SSBSECT_CRN || '$$' || SSBSECT_TERM_CODE
              from ssbsect
             where ssbsect_crn = shrtckn_crn
               and ssbsect_term_code = shrtckn_term_code), 'UNKNOWN') as Section, --check to see if section exists
       shrtckg_grde_code_final as grade_cd,
       nvl(SHRTCKG_HOURS_ATTEMPTED, 0) as CreditsAttemtped,
       nvl(shrtckg_credit_hours,0) as CreditsEarned,
       case
        when shrtckg_grde_code_final in ('A','A-','B','B+','B-','C','C+','CR','D','D+','D-','P') then 'COMPLETED'
        else 'UNKNOWN'
       end Status,
       CASE -- Consider left join on SHRGRDE
        WHEN shrtckg_grde_code_final = 'A' THEN 4.0
        WHEN shrtckg_grde_code_final = 'A-' THEN 3.7
        WHEN shrtckg_grde_code_final= 'B+' THEN 3.3
        WHEN shrtckg_grde_code_final = 'B' THEN 3.0
        WHEN shrtckg_grde_code_final = 'B-' THEN 2.7
        WHEN shrtckg_grde_code_final = 'C+' THEN 2.3
        WHEN shrtckg_grde_code_final = 'C' THEN 2.0
        WHEN shrtckg_grde_code_final = 'D+' THEN 1.3
        WHEN shrtckg_grde_code_final = 'D' THEN 1.0
        WHEN shrtckg_grde_code_final = 'D-' THEN 0.7
        WHEN shrtckg_grde_code_final = 'P' THEN 0.0
        WHEN shrtckg_grde_code_final = 'CR' THEN 0.0
        when shrtckg_grde_code_final IS NULL THEN 0.0
        ELSE 0.0
       END grade_points,
       'T' as is_active
 from spriden
 join shrtckn on spriden_pidm = shrtckn_pidm
 join stvterm on stvterm_code = shrtckn_term_code
 join shrtckg on spriden_pidm = shrtckg_pidm 
             and shrtckn_pidm = shrtckg_pidm
             and shrtckg_tckn_seq_no = shrtckn_seq_no
             and shrtckg_term_code = shrtckn_term_code 
 where shrtckg_seq_no = (select max(shrtckg_seq_no)
                           from shrtckg 
                          where shrtckg_pidm = spriden_pidm 
                            and shrtckg_tckn_seq_no = shrtckn_seq_no) 
   and spriden_change_ind is null
   and spriden_pidm in (select * from pop)
UNION
select spriden_id || '$$' || audit_bank.term || '$$' || ssbsect_subj_code || ssbsect_crse_numb as NK,
       spriden_id Student,
       audit_bank.term term,
       ssbsect_subj_code || ssbsect_crse_numb course,
       audit_bank.crn || '$$' || audit_bank.term as section,
       '' as grade_cd,
       0 as Credits_Attemtped,
       0 as Credits_Earned,
       'UNKNOWN' as status,
       0.0 as grade_points,
       'T' as is_active
  from audit_bank left join spriden on spriden_pidm = audit_bank.pidm left join ssbsect on ssbsect_crn = audit_bank.crn
 where audit_bank.pidm in (select * from pop)
   and audit_bank.term >= 201610 -- Spring 2016
 order by 2,3,4","Student Course"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.Course","WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
where length(trim(scbcrse_subj_code)) = 4
  and length(trim(scbcrse_crse_numb)) = 4
and scbcrse_eff_term <= (SELECT MIN(STVTERM_CODE) FROM STVTERM WHERE STVTERM_END_DATE > SYSDATE) -- ADDED 20170124 TO AVOID PICKING FUTURE CLASSES 
  -- and scbcrse_subj_code like 'DIET'
  --  AND scbcrse_CRSE_NUMB LIKE '1030'

GROUP BY scbcrse_subj_code, scbcrse_crse_numb

),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , 1 AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , coalesce(
          dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000)
          ,( -- ADDED 20170124 TO PICK UP COURSE DESCRIPTIONS
            SCRTEXT1.SCRTEXT_text ||' '|| 
            SCRTEXT2.SCRTEXT_text ||' '||
            SCRTEXT3.SCRTEXT_text ||' '||
            SCRTEXT4.SCRTEXT_text ||' '||
            SCRTEXT5.SCRTEXT_text ||' '||
            SCRTEXT6.SCRTEXT_text ||' '||
            SCRTEXT7.SCRTEXT_text ||' '||
            SCRTEXT8.SCRTEXT_text ||' ')
           ,''
           )
           
  AS  \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits
  , CASE WHEN scbcrse.scbcrse_csta_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active. This may be member specific. Confirm code with BA/Member.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
                          
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
                          
                          
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)

LEFT JOIN scrtext scrtext1 ON (scbcrse.scbcrse_subj_code = SCRTEXT1.SCRTEXT_subj_code 
                          AND scbcrse.scbcrse_crse_numb = SCRTEXT1.SCRTEXT_crse_numb
                          AND scbcrse.scbcrse_eff_term = SCRTEXT1.SCRTEXT_EFF_TERM
						  AND SCRTEXT1.SCRTEXT_SEQNO = 1
						  )
						
LEFT JOIN scrtext scrtext2 ON (scbcrse.scbcrse_subj_code = scrtext2.SCRTEXT_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrtext2.SCRTEXT_crse_numb
                          AND scbcrse.scbcrse_eff_term = scrtext2.SCRTEXT_EFF_TERM
						  AND SCRTEXT2.SCRTEXT_SEQNO = 2
						  )
LEFT JOIN scrtext scrtext3 ON (scbcrse.scbcrse_subj_code = scrtext3.SCRTEXT_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrtext3.SCRTEXT_crse_numb
                          AND scbcrse.scbcrse_eff_term = scrtext3.SCRTEXT_EFF_TERM
						  AND scrtext3.SCRTEXT_SEQNO = 3
						  )
						  
					LEFT JOIN scrtext scrtext4 ON (scbcrse.scbcrse_subj_code = scrtext4.SCRTEXT_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrtext4.SCRTEXT_crse_numb
                          AND scbcrse.scbcrse_eff_term = scrtext4.SCRTEXT_EFF_TERM
						  AND scrtext4.SCRTEXT_SEQNO = 4
						  )
						  
					LEFT JOIN scrtext scrtext5 ON (scbcrse.scbcrse_subj_code = scrtext5.SCRTEXT_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrtext5.SCRTEXT_crse_numb
                          AND scbcrse.scbcrse_eff_term = scrtext5.SCRTEXT_EFF_TERM
						  AND scrtext5.SCRTEXT_SEQNO = 5
						  )
					LEFT JOIN scrtext scrtext6 ON (scbcrse.scbcrse_subj_code = scrtext6.SCRTEXT_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrtext6.SCRTEXT_crse_numb
                          AND scbcrse.scbcrse_eff_term = scrtext6.SCRTEXT_EFF_TERM
						  AND scrtext6.SCRTEXT_SEQNO = 6
						  )
						LEFT JOIN scrtext scrtext7 ON (scbcrse.scbcrse_subj_code = scrtext7.SCRTEXT_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrtext7.SCRTEXT_crse_numb
                          AND scbcrse.scbcrse_eff_term = scrtext7.SCRTEXT_EFF_TERM
						  AND scrtext7.SCRTEXT_SEQNO = 7
						  )
						LEFT JOIN scrtext scrtext8 ON (scbcrse.scbcrse_subj_code = scrtext8.SCRTEXT_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrtext8.SCRTEXT_crse_numb
                          AND scbcrse.scbcrse_eff_term = scrtext8.SCRTEXT_EFF_TERM
						  AND scrtext8.SCRTEXT_SEQNO = 8
						  )                    
),

-- Assign default values
defaultValues AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM course
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet
 where 1=1 
 --and finalDataSet.cd like 'DIET1030' 

 --select scbdesc_text_narrative from scbcrse where scbcrse_subj_code like 'DIET' and scbcrse_crse_numb like '1030'
  -- select * from scrtext where scrtext_subj_code like 'DIET' and scrtext_crse_numb like '1030'","Course"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.CourseType","WITH courseType AS (
SELECT 
  stvschd_code nk,
  stvschd_desc \\\""name\\\"",
  'T' is_active
FROM stvschd
),

-- Assign default values
defaultValues AS (
Select 
'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM courseType
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","CourseType"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"core.studentxstudentcategory","
WITH POP AS (
select sorlcur_pidm pidm
from sorlcur tbl
where 1=1
and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
and sorlcur_cact_code = 'ACTIVE'
and sorlcur_priority_no = (select min(sorlcur_priority_no)
                           from sorlcur
                           where sorlcur_camp_code = 'NCC'
                           and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                           and sorlcur_cact_code = 'ACTIVE'
                           and sorlcur_term_code_end is null
                           and sorlcur_pidm = tbl.sorlcur_pidm
                           and sorlcur_term_code in (select distinct term from (


                                                      SELECT STVTERM_CODE term FROM STVTERM
                                                      WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                              FROM stvterm 
                                                                              where sysdate < stvterm_start_date 
                                                                              
                                                                              and(stvterm_code like '%10' 
                                                                              or stvterm_code like '%20' 
                                                                              or stvterm_code like '%30')
                                                                            )
                                                      and (stvterm_code like '%10' 
                                                            or stvterm_code like '%20' 
                                                            or stvterm_code like '%30')
                                                      and rownum < 5
                                                      ORDER BY 1 desc))

                          )
and sorlcur_term_code_end is null
and sorlcur_camp_code = 'NCC'
and sorlcur_term_code = (select max(sorlcur_term_code)
                          from sorlcur
                          where sorlcur_pidm = tbl.sorlcur_pidm
                          and sorlcur_camp_code = 'NCC'
                          and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                          and sorlcur_cact_code = 'ACTIVE'
                          and sorlcur_term_code_end is null
                          and sorlcur_priority_no = (select min(sorlcur_priority_no)
                                                      from sorlcur
                                                      where sorlcur_camp_code = 'NCC'
                                                      and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                                                      and sorlcur_cact_code = 'ACTIVE'
                                                      and sorlcur_term_code_end is null
                                                      and sorlcur_pidm = tbl.sorlcur_pidm
                                                      and sorlcur_term_code in (

                                                        select distinct term from (
                                                            SELECT STVTERM_CODE term FROM STVTERM
                                                            WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                                                    FROM stvterm 
                                                                                                    where sysdate < stvterm_start_date 
                                                                                                    --and sysdate <= stvterm_end_date
                                                                                                    and (stvterm_code like '%10' 
                                                                                                    or stvterm_code like '%20' 
                                                                                                    or stvterm_code like '%30')
                                                                                                    )
                                                                              and (stvterm_code like '%10' 
                                                                                  or stvterm_code like '%20' 
                                                                                  or stvterm_code like '%30')
                                                                              and rownum < 5
                                                                              ORDER BY 1 desc))
                                                    )
                          and sorlcur_term_code in ( select distinct term from (
                                                  SELECT STVTERM_CODE term FROM STVTERM
                                                  WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                          FROM stvterm 
                                                                          where sysdate < stvterm_start_date 
                                                                          --and sysdate <= stvterm_end_date
                                                                          and(stvterm_code like '%10' 
                                                                           or stvterm_code like '%20' 
                                                                           or stvterm_code like '%30')
                                                                        )
                                                  and (stvterm_code like '%10' 
                                                   or stvterm_code like '%20' 
                                                   or stvterm_code like '%30')
                                                  and rownum < 5
                                                  ORDER BY 1 desc))
                        )
)
Select spriden_id || '$$' || Sprmedi_medi_Code As Nk
, Spriden_Id As Student
, Sprmedi_medi_Code As Category
, 'T' As Is_Active
From Sprmedi
  Left Join Spriden
  On Spriden_Pidm = Sprmedi_Pidm
Where 1=1
And Spriden_Pidm In (Select pidm From Pop)
and Sprmedi_medi_Code is not null
and Spriden_Change_Ind Is Null 
And Spriden_Entity_Ind = 'P'
Union

Select spriden_id || '$$' || SPRMEDI_DISA_CODE As Nk
, Spriden_Id As Student
, Sprmedi_Disa_Code As Category
, 'T' As Is_Active
From Sprmedi
  Left Join Spriden
  on spriden_pidm = sprmedi_pidm
Where 1=1
And Spriden_Pidm In (Select pidm From pop)
and Sprmedi_Disa_Code is not null
and Spriden_Change_Ind Is Null 
And Spriden_Entity_Ind = 'P'","StudentXStudentCategory.sql"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"catcc.TestSubject","-- extract test subjects and scores from Banner
WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
          THEN TO_NUMBER(stvtesc_max_value) || '.00'
          ELSE stvtesc_max_value
          END AS max_score -- test for decimal point and convert to decimal. This is done since navigate expects this data to be decimal and the data in banner may not be stored in decimal format.
  , 'T' AS is_active
FROM stvtesc
WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')  -- filter out any non digits. This is a decimal field in navigate and there have been instances where we have seen non-integer values in banner.
  AND substr(stvtesc_code, 2,1) != 'Z'
)

-- wrapper query
SELECT * FROM testSubjects","Test Subjects"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.section","WITH 
SFRRSTS_DROP_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.Sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('DW')

--and rsts.Sfrrsts_Term_Code = 201110 and rsts.Sfrrsts_ptrm_code = '16'
),
SFRRSTS_WITHDRAW_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('WW')
)

SELECT 
  ssbsect_crn || '$$' || ssbsect_term_code nk, -- <- ssbsect's primary key
  ssbsect_crn cd,
  ssbsect_subj_code || ssbsect_crse_numb course,
  ssbsect_term_code term,
  CASE 
    WHEN NVL(ssbsect_camp_code, 'DEFAULT') = 'M' THEN 'Main' 
    WHEN NVL(ssbsect_camp_code, 'DEFAULT') = 'ARB' THEN 'Arab' 
    ELSE 'Default' 
  END campus,
  ssbsect_max_enrl seats_offered, 
  'N' is_unlimited_seating, -- Defaulting to unlimited seating to being no, need to find out
                            -- if this is ok or should we find data to indicate otherwise.
  CASE 
    When Spriden_Last_Name Is Null Then 'TBD'
    when spriden_first_name is null then 'TBD'
    ELSE spriden_last_name || ', ' || spriden_first_name
  END instructor_name,
  NVL(to_char(ssrmeet_start_date, 'YYYY-MM-DD'), '2000-01-01') class_start_dt,
  NVL(to_char(ssrmeet_end_date, 'YYYY-MM-DD'), '2000-01-02') class_end_dt,
  coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_Start_Date,'YYYY-MM-DD'), to_char(ssrmeet_start_date, 'YYYY-MM-DD'),'2000-01-01') as DROP_START_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as DROP_END_DT
  , coalesce(to_char(SFRRSTS_WITHDRAW_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as WITHDRAW_END_DT

  , CASE 
    WHEN ssbsect_ssts_code = 'A' AND ssrmeet_start_date > (sysdate - 184) THEN 'T'
    ELSE 'F'
  END is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
                  JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                              AND ssbsect_term_code = ssrmeet_term_code
             LEFT JOIN SFRRSTS_DROP_DATES on ssbsect_term_code = SFRRSTS_DROP_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_DROP_DATES.Sfrrsts_ptrm_code
             LEFT JOIN SFRRSTS_WITHDRAW_DATES on ssbsect_term_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_ptrm_code
WHERE spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code >= '201015'","Section"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"core.StudentXCategory","WITH getLastFiveTerms AS ( 
SELECT stvterm_code 
FROM stvterm 
WHERE stvterm_code <= (  
                           SELECT MIN(STVTERM_CODE)
                             FROM STVTERM
                            WHERE STVTERM_START_DATE > SYSDATE 
						   

                       )
AND ROWNUM < 6
ORDER BY 1 DESC 
),

-- Get student Population in Last Five Terms 
studentPopulation AS (

SELECT DISTINCT sfrstcr_pidm as studentPIDM  --, sftstcr_term_code as TERM_CODE
FROM sfrstcr 
JOIN getLastFiveTerms ON getLastFiveTerms.stvterm_code = sfrstcr_term_code 
WHERE 1=1 
AND sfrstcr_rsts_code IN ('RE','RW')

UNION
SELECT DISTINCT saradap_pidm AS studentPIDM --, saradap_term_code_entry as TERM_CODE
FROM saradap
JOIN getLastFiveTerms ON getLastFiveTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
)


Select spriden_id||'$$'||'NC' as Nk
, spriden_id as student 
,'NC' as category 
, 'T' as is_active 
FROM 
SPRIDEN 
JOIN SGBSTDN sg on spriden_pidm = sg.sgbstdn_pidm
WHERE 1=1 
AND sg.sgbstdn_term_code_eff = ( select max(sgbstdn_term_code_eff)
                                 from sgbstdn z 
                                 where z.sgbstdn_pidm = sg.sgbstdn_pidm
                                 ) 
AND sg.SGBSTDN_PROGRAM_1 LIKE 'NC%'
AND sg.SGBSTDN_STST_CODE ='AS'
AND spriden_pidm in ( select distinct studentPIDM from studentPopulation)


","StudentXCategory"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Course","-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
where length(trim(scbcrse_subj_code)) = 4
  and length(trim(scbcrse_crse_numb)) = 4
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk -- This nk does not use the standard $$ concatenation since the platform currently shows the nk field in the UI. This affects the following dependent scripts that need to be in sync - section, studentCourse
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE WHEN scbcrse.scbcrse_csta_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active. This may be member specific. Confirm code with BA/Member.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
),

-- Assign default values
defaultValues AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM course
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Course"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"catcc.TestSubject","SELECT DISTINCT 
      NON_COURSES_ID nk ,
      NCRS_SHORT_TITLE name,
      CAST(CAST(NCRS_MAX_SCORE AS DECIMAL(5,0)) AS VARCHAR) max_score,
      'T' is_active

  FROM NON_COURSES
    Where NON_COURSES_ID IS NOT NULL  AND 
          NCRS_MAX_SCORE > 0 and
          NON_COURSES.NCRS_CATEGORY in ('P','T') ","Test Subject"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.SectionTime","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
),

SECTLIST AS (
   SELECT SEC_TERM+'_'+SEC_NAME AS nk1,
          CASE
           WHEN CSM_START_TIME IS NOT NULL AND CSM_END_TIME IS NOT NULL THEN
              REPLACE(CONVERT(VARCHAR,CSM_START_TIME,108)+'$$'+CONVERT(VARCHAR,CSM_END_TIME,108),':','')
           ELSE '$$'
         END AS nk2,
          CONVERT(VARCHAR,CSM_START_TIME,108) AS from_tm,
         CONVERT(VARCHAR,CSM_END_TIME,108) AS to_tm,
         CASE
           WHEN CSM_BLDG = CSM_ROOM THEN CSM_BLDG
           WHEN CSM_BLDG = 'WEB' THEN 'WEB'
          ELSE CSM_BLDG+' '+CSM_ROOM
         END AS location,
         CSM_MONDAY,
         CSM_TUESDAY,
         CSM_WEDNESDAY,
         CSM_THURSDAY,
         CSM_FRIDAY,
         CSM_SATURDAY,
         CSM_SUNDAY
     FROM COURSE_SECTIONS JOIN COURSE_SEC_MEETING
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_MEETING.CSM_COURSE_SECTION
    WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST)
      AND SEC_CRED_TYPE = 'I'
      AND SEC_NAME IS NOT NULL
),

BAD_WEB AS (
SELECT nk1+'$$1$$'+nk2 AS nk,nk1 as section,'1' as day_of_week,from_tm,to_tm,location,'T' as is_active 
  from SECTLIST
 WHERE CSM_SUNDAY IS NOT NULL
UNION
SELECT nk1+'$$2$$'+nk2 AS nk,nk1 as section,'2' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_MONDAY IS NOT NULL
UNION
SELECT nk1+'$$3$$'+nk2 AS nk,nk1 as section,'3' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_TUESDAY IS NOT NULL
UNION
SELECT nk1+'$$4$$'+nk2 AS nk,nk1 as section,'4' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_WEDNESDAY IS NOT NULL
UNION
SELECT nk1+'$$5$$'+nk2 AS nk,nk1 as section,'5' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_THURSDAY IS NOT NULL
UNION
SELECT nk1+'$$6$$'+nk2 AS nk,nk1 as section,'6' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_FRIDAY IS NOT NULL
UNION
SELECT nk1+'$$7$$'+nk2 AS nk,nk1 as section,'7' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_SATURDAY IS NOT NULL
UNION
SELECT nk1+'$$8$$'+nk2 AS nk,nk1 as section,'8' as day_of_week,from_tm,to_tm,location,'T' as is_active
  from SECTLIST
 WHERE CSM_MONDAY IS NULL
   AND CSM_TUESDAY IS NULL
   AND CSM_WEDNESDAY IS NULL
   AND CSM_THURSDAY IS NULL
   AND CSM_FRIDAY IS NULL
   AND CSM_SATURDAY IS NULL
   AND CSM_SUNDAY IS NULL)

   SELECT 
   nk,
   section,
   day_of_week,
   from_tm,
   to_tm,
   CASE WHEN (location = 'WEB') THEN 'NET' ELSE isnull(location,'TBD') END
   location,
   is_active
   FROM BAD_WEB
   order by location","SectionTime"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.studentcourse","
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                        and (stvterm_code like '%10' 
                              or stvterm_code like '%20' 
                              --or stvterm_code like '%30'
                            )
                      )
AND ROWNUM < 5
and (stvterm_code like '%10' 
      or stvterm_code like '%20' 
      or stvterm_code like '%30'
                            )
ORDER BY 1 DESC
),


POP AS (
select distinct studentPidm from (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
  FROM sfrstcr  
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code

  WHERE 1=1
    AND sfrstcr_rsts_code IN ('RE','RW')
/*    
  UNION

  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
  FROM saradap
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
  WHERE 1=1
*/
) current_and_applicants

inner join (

  select distinct sorlcur_pidm pidm
  from sorlcur tbl
  where 1=1
  and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
  and sorlcur_cact_code = 'ACTIVE'
  and sorlcur_term_code_end is null
  and sorlcur_camp_code = 'NCC'
  and sorlcur_priority_no = (select min(sorlcur_priority_no)
                             from sorlcur
                             where sorlcur_camp_code = tbl.sorlcur_camp_code
                             and sorlcur_lmod_code = tbl.sorlcur_lmod_code
                             and sorlcur_cact_code = tbl.sorlcur_cact_code
                             and sorlcur_term_code_end is null
                             and sorlcur_pidm = tbl.sorlcur_pidm
                             and sorlcur_term_code in (select stvterm_code from getLastXTerms)

                            )
  and sorlcur_term_code = (select max(sorlcur_term_code)
                            from sorlcur
                             where sorlcur_camp_code = tbl.sorlcur_camp_code
                             and sorlcur_lmod_code = tbl.sorlcur_lmod_code
                             and sorlcur_cact_code = tbl.sorlcur_cact_code
                             and sorlcur_term_code_end is null
                             and sorlcur_pidm = tbl.sorlcur_pidm
                             and sorlcur_term_code in (select stvterm_code from getLastXTerms)
                             )
) on pidm = studentpidm
)
,

audit_bank as (
select a.pidm,a.term,a.audit_record,b.course_record from (
select 
        distinct sfrstca_pidm as pidm,
         sfrstca_crn as crn,
       sfrstca_term_code term,
       ssbsect_subj_code || ssbsect_crse_numb as audit_record

from sfrstca
left join ssbsect 
on ssbsect_crn = sfrstca_crn 
  and ssbsect_term_code = sfrstca_term_code
 ) a 
left join (
select distinct sfrstcr_pidm pidm, 
      sfrstcr_crn crn,
      sfrstcr_term_code term, 
      ssbsect_subj_code || ssbsect_crse_numb as course_record
from sfrstcr
left join ssbsect
on ssbsect_crn = sfrstcr_crn
) b
on a.pidm = b.pidm
and a.audit_record = b.course_record
and a.term = b.term
where b.course_record is null
order by 1,2,3

)


select  
       spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || ssbsect_crse_numb  as NK,
       spriden_id Student,
       stvterm_code term,
       ssbsect_subj_code || ssbsect_crse_numb course,
       nvl(
            (
              select SSBSECT_CRN  || '$$' || SSBSECT_TERM_CODE
              from ssbsect
              where ssbsect_crn = sfrstcr_crn and ssbsect_term_code = sfrstcr_term_code
            ),
            'UNKNOWN'
          ) as Section,
       sfrstcr_grde_code grade_cd, 
       --null grade_points,
       nvl(sfrstcr_credit_hr, 0) as Credits_Attemtped,
       0 as Credits_Earned  --we should look into if it is possible to have a 'COMPLETED' course in this table
      -- registration logic edits - checking for only properly registered courses
      --[INST_CONFIG]
       , case 
          when sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and stvterm_start_date > sysdate then 'REGISTERED'
          when sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and stvterm_start_date <= sysdate and stvterm_end_date > sysdate then 'IN_PROGRESS'
          when sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and (sfrstcr_grde_code in ('A','A-','P') 
                                                                  or sfrstcr_grde_code like 'B%'
                                                                  or sfrstcr_grde_code like 'C%'
                                                                  or sfrstcr_grde_code like 'D%') then 'COMPLETED'
          else 'UNKNOWN' end
          STATUS, 
          
          -- Add a grade variable column that maps letter grades to points...
          CASE 
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code = 'A' THEN 4.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code = 'A-' THEN 3.5
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code like 'B%' THEN 3.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code like 'C%' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code like 'D%' THEN 1.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code IS NULL THEN 0.0
          ELSE 0.0
          END as grade_points,
          'T' as is_active

  -- Why are we using the cartesian product here? Should try to use an explicit 
  -- inner join here instead of the implicit cross join. 
  from ( select null p_term, '' p_id, 'N' p_history, 'N' p_current from dual ),     
     spriden, 
     sfrstcr,
     stvterm, 
     stvrsts, 
     ssbsect, 
     scbcrse,
     sobptrm
where --spriden_id = p_id  and
   spriden_change_ind is null 
  and stvterm_code = sfrstcr_term_code --join
  and sfrstcr_pidm = spriden_pidm --join
  and sfrstcr_term_code = nvl(p_term, sfrstcr_term_code) --this seems surperfluous - is it here just to account for bad data?
  and ssbsect_crn = sfrstcr_crn --join
  and scbcrse_subj_code = ssbsect_subj_code --join
  and ssbsect_term_code = sfrstcr_term_code --join
  and scbcrse_crse_numb = ssbsect_crse_numb --join
  and scbcrse_eff_term = ( select max(scbcrse_eff_term) 
                             from scbcrse 
                            where scbcrse_crse_numb = ssbsect_crse_numb 
                              and scbcrse_subj_code = ssbsect_subj_code 
                              and scbcrse_eff_term <= ssbsect_term_code ) 
  and sfrstcr_rsts_code = stvrsts_code --join
  and ( stvrsts_wait_ind = 'Y' or ( stvrsts_incl_sect_enrl = 'Y' and stvrsts_withdraw_ind = 'N' ) )
  and sobptrm_ptrm_code = ssbsect_ptrm_code --join, parts of term
  and sobptrm_term_code = ssbsect_term_code --join, entire term
  and ( p_current = 'N' or stvterm_start_date <= sysdate )  --p_current is always set to 'N'

-- If course is graded, do not include sfrstcr
  and not exists ( select 'Y' from shrtckn 
                    where shrtckn_crn = sfrstcr_crn 
                      and shrtckn_term_code = sfrstcr_term_code 
                     and shrtckn_pidm = sfrstcr_pidm) 
 and spriden_pidm in (select * from pop)

UNION

select
      spriden_id|| '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code|| shrtckn_crse_numb  as NK,
      spriden_id as Student,
      stvterm_code as term,
      shrtckn_subj_code|| shrtckn_crse_numb as course_cd,
      nvl((select SSBSECT_CRN || '$$' || SSBSECT_TERM_CODE
        from ssbsect
        where ssbsect_crn = shrtckn_crn and ssbsect_term_code = shrtckn_term_code),'UNKNOWN') as Section, --check to see if section exists
      shrtckg_grde_code_final as grade_cd,
      --'' as grade_points,
      nvl(SHRTCKG_HOURS_ATTEMPTED, 0) as CreditsAttemtped,
      case
       when (shrtckg_grde_code_final in ('A','A-','P') 
            or shrtckg_grde_code_final like 'B%' 
            or shrtckg_grde_code_final like 'C%' 
            or shrtckg_grde_code_final like 'D%') then
       nvl(SHRTCKG_HOURS_ATTEMPTED,0) else 0 end as CreditsEarned,
      --shrtckn_crn,
       --checking against proper grades for a completed course
       --[INST_CONFIG] change per institution
       case
       when (shrtckg_grde_code_final in ('A','A-','P') 
            or shrtckg_grde_code_final like 'B%' 
            or shrtckg_grde_code_final like 'C%' 
            or shrtckg_grde_code_final like 'D%') then 'COMPLETED' 
          else 'UNKNOWN' end Status,
       CASE 
         WHEN shrtckg_grde_code_final = 'A' THEN 4.0 
         WHEN shrtckg_grde_code_final = 'B' THEN 3.0
         WHEN shrtckg_grde_code_final = 'C' THEN 2.0
         WHEN shrtckg_grde_code_final = 'D*' THEN 1.0
         WHEN shrtckg_grde_code_final = 'S' THEN 2.0
         WHEN shrtckg_grde_code_final = 'PA' THEN 2.0
         WHEN shrtckg_grde_code_final = 'CR' THEN 2.0
         WHEN shrtckg_grde_code_final IS NULL THEN 0.0
        ELSE 0.0
       END as grade_points,

       'T' as is_active
from spriden
join shrtckn on spriden_pidm = shrtckn_pidm
join stvterm on stvterm_code = shrtckn_term_code
join shrtckg on spriden_pidm = shrtckg_pidm and shrtckn_pidm = shrtckg_pidm and shrtckg_tckn_seq_no = shrtckn_seq_no and shrtckg_term_code = shrtckn_term_code 

where  shrtckg_seq_no = ( select max(shrtckg_seq_no) from shrtckg 
                          where shrtckg_pidm = spriden_pidm 
                          --and shrtckg_term_code = ssbsect_term_code     --not necessary to go to ssbsect table
                          and shrtckg_tckn_seq_no = shrtckn_seq_no ) 
  and spriden_change_ind is null
  and spriden_pidm in (select * from pop)

UNION

select spriden_id || '$$' || audit_bank.term || '$$' || audit_bank.audit_record as NK,
       spriden_id Student,
       audit_bank.term term,
        audit_bank.audit_record course,
       'UNKNOWN' as section,
       '' as grade_cd,
       0 as Credits_Attemtped,
       0 as Credits_Earned,
       'UNKNOWN' as status,
       0.0 as grade_points,
       'T' as is_active
from audit_bank
left join spriden on spriden_pidm = audit_bank.pidm
--left join ssbsect on ssbsect_crn = audit_bank.crn
where audit_bank.pidm in (select * from pop)
--audit_bank.pidm in (select * from pilot_pop)
and audit_bank.term >= 201610
and spriden_change_ind is null

order by 2,3,4","student course"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"inst.Location","SELECT 
  stvbldg_code nk,
  slbbldg_camp_code campus,
  stvbldg_desc name, 
  '' latitude,
  '' longitude,
  CASE
    WHEN COALESCE(slbbldg_street_line1,
                  slbbldg_street_line2,
                  slbbldg_city,
                  slbbldg_zip,
                  'NA' ) = 'NA' then 'Address Not Available'
    ELSE slbbldg_street_line1 || ' ' ||
       slbbldg_street_line2 || ' ' ||
       slbbldg_city || ', ' ||
       slbbldg_zip
  END address,
  '' comments,
  'T' is_active
FROM stvbldg LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL

UNION

SELECT DISTINCT 
  CASE 
    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code 
    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code 
  END AS nk,
  slbbldg_camp_code campus,
  CASE 
    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code 
  END AS name, 
  '' latitude,
  '' longitude,
  CASE 
    WHEN COALESCE(slbbldg_street_line1,
                  slbbldg_street_line2,
                  slbbldg_city,
                  slbbldg_zip,
                  'NA') = 'NA' then 'Address Not Available'
    ELSE slbbldg_street_line1 || ' ' ||
         slbbldg_street_line2 || ' ' ||
         slbbldg_city || ', ' ||
         slbbldg_zip
  END address, 
  '' comments,
  'T' is_active
FROM stvbldg INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
             INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code 
WHERE slbbldg_camp_code IS NOT NULL","Location"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"core.faculty","SELECT spriden.spriden_id AS nk
	,spriden.spriden_first_name AS first_name
	,spriden.spriden_last_name AS last_name
	,spriden.spriden_id as username
	,goremal.goremal_email_address AS email
	,'' prefix
	,'' suffix
	,COALESCE(sibinstTot.sibinst_fstp_code, sibinstTot.sibinst_fctg_code, 'Staff') AS faculty_type --LAST RESORT PERBFAC_ACADEMIC_TITLE
/*
	,CASE 
		WHEN FCSTstatus.STVFCST_ACTIVE_IND = 'A'   
			THEN 'Y'
		ELSE 'N'
		End As
*/
,'F' is_active                      -- MODIFY PER MEMBER
--	,SIRDPCL.SIRDPCL_DEPT_CODE AS STAFF_DEPT
	
--	,SIRDPCL.SIRDPCL_COLL_CODE AS STAFF_COLL
FROM (
	SELECT *
	FROM spriden
	WHERE spriden.spriden_change_ind IS NULL
	) spriden
	
	INNER JOIN ( --Instructor detail table
		SELECT *
		FROM sibinst a
		WHERE sibinst_term_code_eff = (
				SELECT MAX(sibinst_term_code_eff)
				FROM sibinst
				WHERE sibinst_pidm = a.sibinst_pidm
				)
		) sibinstTot
		ON spriden.spriden_pidm = sibinstTot.sibinst_pidm
		
	LEFT JOIN (
		SELECT  STVFCST_CODE       --Active Ind. Whether a faculty member is in a group that is considered active. 
			   ,STVFCST_DESC
			   ,STVFCST_ACTIVE_IND
		FROM STVFCST
		WHERE 1=1
		)FCSTstatus
		ON sibinstTot.SIBINST_FCST_CODE = FCSTstatus.stvfcst_code
		
	LEFT JOIN ( --email table
		SELECT *
		FROM goremal
		WHERE goremal_emal_code in ('TCC','O365') -- MODIFY PER MEMBER
			AND goremal_status_ind = 'A'
			AND goremal_preferred_ind = 'Y'
		) goremal
		On Spriden.Spriden_Pidm = Goremal.Goremal_Pidm
	/*	--this is a secondary source of SSO ID - we can use the spriden ID for this
	LEFT JOIN gobtpac
		ON spriden.spriden_pidm = gobtpac.gobtpac_pidm
	*/ 	
	LEFT JOIN (
		SELECT * FROM SIRDPCL a
		WHERE SIRDPCL_ACTIVITY_DATE = (
		  SELECT MAX(SIRDPCL_ACTIVITY_DATE) FROM SIRDPCL WHERE a.SIRDPCL_PIDM = SIRDPCL_PIDM)
		) SIRDPCL
		  ON SIRDPCL.SIRDPCL_PIDM = spriden_pidm
		  
WHERE 1 = 1
ORDER BY 3","Faculty"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"reg.StudentTestScore","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Student Test Scores File

Fields  nk,student,test_subject,score,is_active
*/

SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl1), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl1), ' ', ''), '')                                 AS test_subject
       , er.score1                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('MTH')
   AND er.score1 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score1 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score1 <> 0
                          AND er2.cmpl_date = er.cmpl_date)   
UNION   
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl1), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl1), ' ', ''), '')                                 AS test_subject
       , er.score1                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('CPT2')
   AND er.score1 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score1 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score1 <> 0
                          AND er2.cmpl_date = er.cmpl_date)   
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl2), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl2), ' ', ''), '')                                 AS test_subject
       , er.score2                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('CPT2')
   AND er.score2 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years   
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score2 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score2 <> 0
                          AND er2.cmpl_date = er.cmpl_date)   
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl3), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl3), ' ', ''), '')                                 AS test_subject
       , er.score3                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('CPT2')
   AND er.score3 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years  
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score3 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score3 <> 0
                          AND er2.cmpl_date = er.cmpl_date)    
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl4), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl4), ' ', ''), '')                                 AS test_subject
       , er.score4                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('CPT2')
   AND er.score4 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years  
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score4 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score4 <> 0
                          AND er2.cmpl_date = er.cmpl_date)    
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl5), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl5), ' ', ''), '')                                 AS test_subject
       , er.score5                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('CPT2')
   AND er.score5 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years  
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score5 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score5 <> 0
                          AND er2.cmpl_date = er.cmpl_date)    
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl1), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl1), ' ', ''), '')                                 AS test_subject
       , er.score1                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('RET2')
   AND er.score1 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score1 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score1 <> 0
                          AND er2.cmpl_date = er.cmpl_date)   
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl2), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl2), ' ', ''), '')                                 AS test_subject
       , er.score2                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('RET2')
   AND er.score2 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years  
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score2 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score2 <> 0
                          AND er2.cmpl_date = er.cmpl_date)    
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl3), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl3), ' ', ''), '')                                 AS test_subject
       , er.score3                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('RET2')
   AND er.score3 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years  
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score3 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score3 <> 0
                          AND er2.cmpl_date = er.cmpl_date)    
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl4), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl4), ' ', ''), '')                                 AS test_subject
       , er.score4                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('RET2')
   AND er.score4 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years  
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score4 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score4 <> 0
                          AND er2.cmpl_date = er.cmpl_date)    
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl5), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl5), ' ', ''), '')                                 AS test_subject
       , er.score5                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('RET2')
   AND er.score5 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years  
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score5 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score5 <> 0
                          AND er2.cmpl_date = er.cmpl_date)   
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl3), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl3), ' ', ''), '')                                 AS test_subject
       , er.score3                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('MAA')
   AND er.score3 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years   
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score3 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score3 <> 0
                          AND er2.cmpl_date = er.cmpl_date)   
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl4), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl4), ' ', ''), '')                                 AS test_subject
       , er.score4                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('MAA')
   AND er.score4 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years   
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score4 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score4 <> 0
                          AND er2.cmpl_date = er.cmpl_date)   
UNION
SELECT NVL(population.id, '') || '$$' || NVL(TRIM(et.exam), '') || '$$' || REPLACE(TRIM(et.lbl5), ' ', '') AS nk
       , NVL(population.id, '')                                                                            AS student
       , NVL(TRIM(et.exam) || '$$' || REPLACE(TRIM(et.lbl5), ' ', ''), '')                                 AS test_subject
       , er.score5                                                                                         AS score
       , 'T'                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '204681'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.exam_rec er
  ON er.id = population.id
JOIN informix.exam_table et  
  ON er.ctgry = et.exam
WHERE 1=1
   AND et.exam IN ('MAA')
   AND er.score5 <> 0
   AND er.sess = 'HEAD'
   AND TODAY - er.cmpl_date < 1825 --Test completed in last 5 years  
   AND er.cmpl_date = (SELECT MAX(er1.cmpl_date)
                       FROM informix.exam_rec er1
                       WHERE er1.id = er.id
                          AND er1.ctgry = er.ctgry
                          AND er1.score5 <> 0)
   AND er.exam_no = (SELECT MAX(er2.exam_no)                          
                     FROM informix.exam_rec er2
                       WHERE er2.id = er.id
                          AND er2.ctgry = er.ctgry
                          AND er2.score5 <> 0
                          AND er2.cmpl_date = er.cmpl_date)   
         
ORDER BY 1","StudentTestScores"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Department","-- get department data from Banner 
WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept
WHERE LENGTH(stvdept_code) = 3
),

-- Assign default values
defaultValues AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM department
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet
","Departments"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.Term","WITH term AS (SELECT 
  stvterm_code nk, 
  stvterm_desc \\\""name\\\"", 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case 
    When (Stvterm_Desc Like 'Fall%' or Stvterm_Desc Like 'Winter%' or Stvterm_Desc Like 'Spring%' or Stvterm_Desc Like 'Summer%')
         AND STVTERM_CODE >= '201212' and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm 
  JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code IN ('RE','KV','KO') -- Confirm registration codes to include with BA/Member
  AND sfrrsts_ptrm_code = '1' -- Confirm ptrm code to include with BA/Member
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in stvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
SELECT
  stvterm_code nk,
  stvterm_desc \\\""name\\\"",
  stvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case
    When (Stvterm_Desc Like 'Fall%' or Stvterm_Desc Like 'Winter%' or Stvterm_Desc Like 'Spring%' or Stvterm_Desc Like 'Summer%')
         AND STVTERM_CODE >= '201212' and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = stvterm_code
                   AND sfrrsts_rsts_code IN ('RE','KV','KO') -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_ptrm_code = '1') -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM finalDataSet    ","Term"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.studentcourse","WITH pop AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)))),

audit_bank as (
select a.pidm,a.term,a.audit_record,b.course_record from (
select 
        distinct sfrstca_pidm as pidm,
         sfrstca_crn as crn,
       sfrstca_term_code term,
       ssbsect_subj_code || ssbsect_crse_numb as audit_record

from sfrstca
left join ssbsect  --maybe an inner join, in case the CRN no longer exists in SSBSECT?
on ssbsect_crn = sfrstca_crn 
  and ssbsect_term_code = sfrstca_term_code
where sfrstca_activity_date > sysdate-8 -- Incremental extract for changes within the last week
 ) a 
left join (
select distinct sfrstcr_pidm pidm, 
      sfrstcr_crn crn,
      sfrstcr_term_code term, 
      ssbsect_subj_code || ssbsect_crse_numb as course_record
from sfrstcr
left join ssbsect
on ssbsect_crn = sfrstcr_crn
) b
on a.pidm = b.pidm
and a.audit_record = b.course_record
and a.term = b.term
where b.course_record is null
order by 1,2,3

)

select spriden_id || '$$' || audit_bank.term || '$$' || audit_bank.audit_record as NK,
       spriden_id Student,
       audit_bank.term term,
       audit_bank.audit_record course,
       '' as section,
       '' as grade_cd,
       0 as Credits_Attemtped,
       0 as Credits_Earned,
       'UNKNOWN' as status,
       0.0 as grade_points,
       'T' as is_active
from audit_bank
left join spriden on spriden_pidm = audit_bank.pidm
--left join ssbsect on ssbsect_crn = audit_bank.crn
where audit_bank.pidm in (select * from pop)
--audit_bank.pidm in (select * from pilot_pop)
--and spriden_id = 'T20130710'
and audit_bank.term >= 201610

 
UNION --transfer course work

Select Spriden_Id || '$$' || SHRTRCE_TERM_CODE_EFF || '$$' || SHRTRCE_SUBJ_CODE || SHRTRCE_CRSE_NUMB As Nk,
       Spriden_id Student,
       SHRTRCE_TERM_CODE_EFF Term,
       SHRTRCE_SUBJ_CODE || SHRTRCE_CRSE_NUMB as course,
       '' As Section,
       SHRTRCE_GRDE_CODE As Grade_Cd,
       Shrtrce_Credit_Hours As Credits_Attemtped,
       SHRTRCE_CREDIT_HOURS As Credits_Earned,
       'COMPLETED' As Status,
       0.0 As Grade_Points,
       'T' As Is_Active
From Shrtrce
left join spriden on spriden_pidm = shrtrce_pidm
Where Shrtrce_Pidm In (Select * From Pop)

And Spriden_Change_Ind Is Null
and shrtrce_activity_date > sysdate-8 -- Incremental extract for changes within the last week

order by 2,3,4","AUDIT Student Course"
1161,"Berkshire Community College",10490,"",48297,"Navigate:Berkshire Community College",47972,"Navigate",20,"","SELECT 
ID AS STUDENT, 
SEMESTER AS TERM,
FNAME AS FIRST_NAME,
LNAME AS LAST_NAME
FROM STUDENT UNNEST SEMESTER","Query_Acq_POC_01"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.StudentCourse","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND (sfrstcr_rsts_code LIKE ('R%') OR sfrstcr_rsts_code LIKE ('K%'))
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE','KV','KO') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE','KV','KO') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE','KV','KO') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE','KV','KO') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","StudentCourse"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.seatsavail","select 
--a.SSBSECT_SUBJ_CODE || '$$' || a.SSBSECT_CRSE_NUMB  || '$$' || a.SSBSECT_TERM_CODE AS NK,
a.SSBSECT_CRN || '$$' ||a.SSBSECT_TERM_CODE AS NK,
a.SSBSECT_SEATS_AVAIL AVAIL_SEATS,
'T' AS IS_ACTIVE
from SSBSECT a
  left join scrlevl
  on a.SSBSECT_SUBJ_CODE = scrlevl_subj_code
  and a.SSBSECT_CRSE_NUMB = scrlevl_crse_numb
where 1=1
and SCRLEVL_LEVL_CODE = 'NC' 
and a.SSBSECT_SSTS_CODE = 'A'
and a.SSBSECT_TERM_CODE > 201510
and a.ssbsect_camp_code = 'NCC'","Seats Avail"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"inst.campus","WITH campus AS (
SELECT DISTINCT stvcamp_code nk
                , stvcamp_desc \\\""name\\\""
                , CASE WHEN stvcamp_code = 'O' -- Logic to identify online campuses. Confirm with BA.
                			THEN 'T'
                			ELSE 'F' END is_online
                , case when STVCAMP_CODE in ('NLC','NVC','PAC','SAC','SPC','O') then 'T'
                else 'F' end as is_active
FROM stvcamp
),

-- Assign default values
defaultValues AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM campus
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Campus"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Term","-- get Terms from Banner
WITH term AS (
  SELECT stvterm_code nk, 
          stvterm_desc \\\""name\\\"", 
          stvterm_acyr_code cat_yr,
          coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
          coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
          to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
          to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
          -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
          -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
    Case 
      When (Stvterm_Desc Like 'Fall%' or Stvterm_Desc Like 'Winter%' or Stvterm_Desc Like 'Spring%' or Stvterm_Desc Like 'Summer%')
           AND STVTERM_CODE >= '201212' and stvterm_code not in ('999999','000000') THEN 'T' 
      ELSE 'F'
    END is_active
    FROM stvterm JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
   WHERE sfrrsts_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE') -- Confirm registration codes to include with BA/Member
     AND sfrrsts_ptrm_code = '1' -- Confirm ptrm code to include with BA/Member
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in stvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
  SELECT stvterm_code nk,
         stvterm_desc \\\""name\\\"",
         stvterm_acyr_code cat_yr,
         '1900-01-01' registration_start_dt, -- Use default values
         '1900-01-02' registration_end_dt, -- Use default values
         to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
         to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
         -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
         -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
         Case
           When (Stvterm_Desc Like 'Fall%' or Stvterm_Desc Like 'Winter%' or Stvterm_Desc Like 'Spring%' or Stvterm_Desc Like 'Summer%') 
                AND STVTERM_CODE >= '201212' and stvterm_code not in ('999999','000000') THEN 'T' 
           ELSE 'F'
         END is_active
   FROM stvterm
  WHERE NOT EXISTS (SELECT 1
                    FROM sfrrsts
                   WHERE sfrrsts_term_code = stvterm_code
                     AND sfrrsts_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE') -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                     AND sfrrsts_ptrm_code = '1') -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
),

-- Combine Banner data and default values
finalDataSet AS (
  SELECT * FROM term
  UNION
  SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM finalDataSet order by nk","Term"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.Program","SELECT DISTINCT
  smbpgen.smbpgen_program || '$$' || stvterm_acyr_code nk, 
  smbpgen.smbpgen_program cd,
  DECODE(stvmajr_cipc_code, null, null, SUBSTR(stvmajr_cipc_code, 1, 2) || '.' || SUBSTR(stvmajr_cipc_code, 3)) cip,
  stvmajr_code || ': ' || smrprle_program_desc name,
  to_number(stvterm_acyr_code) cat_yr,
  trim(CASE 
    WHEN ACAD_PROG_DESC_2 IS NOT NULL THEN COALESCE(ACAD_PROG_DESC_1 || ' ' || ACAD_PROG_DESC_2 || ' ' || ACAD_PROG_CAREER_1 || ' ' || ACAD_PROG_CAREER_2 || ' ' || ACAD_PROG_CAREER_3 || ' ' || ACAD_PROG_CAREER_4, '') 
    ELSE COALESCE(ACAD_PROG_DESC_1 || ' ' || ACAD_PROG_DESC_2 || ' ' || ACAD_PROG_CAREER_1 || ' ' || ACAD_PROG_CAREER_2 || ' ' || ACAD_PROG_CAREER_3 || ' ' || ACAD_PROG_CAREER_4, '') 
  END || ' For the most up-to-date information for each program, please consult the Program Guide, which is located within the specific program webpages at http://www.hacc.edu/ProgramsandCourses/index.cfm.') AS \\\""desc\\\"",
  smbpgen_req_credits_overall credits,
  '' enrollment_notes,
  '' registration_notes,
  COALESCE(stvmajr_desc, 'Default') area_of_study,
  CASE
    WHEN smrprle_program_desc LIKE '%-%' THEN SUBSTR(smrprle_program_desc, 0, INSTR(smrprle_program_desc, '-', 1) -1)
    ELSE smrprle_program_desc
  END AS concentration,
  sobcurr_degc_code credential,
  CASE 
    WHEN sobcurr_degc_code  IN ('AA', 'AS') THEN 'T'
    ELSE 'F'
  END is_transfer,
  CASE 
    WHEN stvterm_start_date < (sysdate - interval '5' year) THEN 'F'
    WHEN ( sormcrl_stu_ind = 'Y' OR sormcrl_adm_ind = 'Y' OR sormcrl_rec_ind = 'Y' ) AND stvterm_code = max_eff_term THEN 'T'
    WHEN sormcrl_stu_ind = 'N' AND sormcrl_adm_ind = 'Y' AND sormcrl_rec_ind = 'N' THEN 'F'
    ELSE 'F'
  END AS is_active
FROM smbpgen LEFT JOIN smrprle ON smbpgen.smbpgen_program = smrprle_program
            INNER JOIN stvterm ON smbpgen_term_code_eff = stvterm_code
            INNER JOIN sobcurr ON sobcurr_program = smbpgen.smbpgen_program
             LEFT JOIN sorcmjr ON sobcurr_curr_rule = sorcmjr_curr_rule
            INNER JOIN stvmajr ON sorcmjr_majr_code = stvmajr_code
            INNER JOIN sormcrl ON sormcrl_curr_rule = sobcurr_curr_rule
            LEFT JOIN HACCINST1.ACAD_PROG_CATALOG ON stvmajr_code = ACAD_PROG_CODE 
                  -- Get the most recent program
                  JOIN (
                          SELECT smbpgen_program, MAX(smbpgen_term_code_eff) AS max_eff_term
                            FROM smbpgen
                        GROUP BY smbpgen_program
                       ) t ON t.smbpgen_program = smbpgen.smbpgen_program
UNION 
-- Program concentrations
SELECT DISTINCT
  smbpgen.smbpgen_program || '_' || stvmajr_code || '$$' || stvterm_acyr_code nk, 
  smbpgen.smbpgen_program cd,
  DECODE(stvmajr_cipc_code, null, null, SUBSTR(stvmajr_cipc_code, 1, 2) || '.' || SUBSTR(stvmajr_cipc_code, 3)) cip,
  stvmajr_code || ': ' || smrprle_program_desc name,
  to_number(stvterm_acyr_code) cat_yr,
  trim(CASE 
    WHEN ACAD_PROG_DESC_2 IS NOT NULL THEN COALESCE(ACAD_PROG_DESC_1 || ' ' || ACAD_PROG_DESC_2 || ' ' || ACAD_PROG_CAREER_1 || ' ' || ACAD_PROG_CAREER_2 || ' ' || ACAD_PROG_CAREER_3 || ' ' || ACAD_PROG_CAREER_4, '') 
    ELSE COALESCE(ACAD_PROG_DESC_1 || ' ' || ACAD_PROG_DESC_2 || ' ' || ACAD_PROG_CAREER_1 || ' ' || ACAD_PROG_CAREER_2 || ' ' || ACAD_PROG_CAREER_3 || ' ' || ACAD_PROG_CAREER_4, '') 
  END || ' For the most up-to-date information for each program, please consult the Program Guide, which is located within the specific program webpages at http://www.hacc.edu/ProgramsandCourses/index.cfm.') AS \\\""desc\\\"",
  smbpgen_req_credits_overall credits,
  '' enrollment_notes,
  '' registration_notes,
  COALESCE(stvmajr_desc, 'Default') area_of_study,
  CASE
    WHEN smrprle_program_desc LIKE '%-%' THEN SUBSTR(smrprle_program_desc, 0, INSTR(smrprle_program_desc, '-', 1) -1)
    ELSE smrprle_program_desc
  END AS concentration,
  sobcurr_degc_code credential,
  CASE 
    WHEN sobcurr_degc_code  IN ('AA', 'AS') THEN 'T'
    ELSE 'F'
  END is_transfer,
  CASE 
    WHEN stvterm_start_date < (sysdate - interval '5' year) THEN 'F'
    WHEN ( sormcrl_stu_ind = 'Y' OR sormcrl_adm_ind = 'Y' OR sormcrl_rec_ind = 'Y' ) AND stvterm_code = max_eff_term THEN 'T'
    WHEN sormcrl_stu_ind = 'N' AND sormcrl_adm_ind = 'Y' AND sormcrl_rec_ind = 'N' THEN 'F'
    ELSE 'F'
  END AS is_active
FROM smbpgen LEFT JOIN smrprle ON smbpgen.smbpgen_program = smrprle_program
            INNER JOIN stvterm ON smbpgen_term_code_eff = stvterm_code
            INNER JOIN sobcurr ON sobcurr_program = smbpgen.smbpgen_program
             LEFT JOIN sorcmjr ON sobcurr_curr_rule = sorcmjr_curr_rule
             LEFT JOIN sorccon ON sobcurr_curr_rule = sorccon_curr_rule
            INNER JOIN stvmajr ON sorccon_majr_code_conc = stvmajr_code
            INNER JOIN sormcrl ON sormcrl_curr_rule = sobcurr_curr_rule
                              -- AND sorccon_majr_code_conc = stvmajr_code
                  -- Get the most recent program
                  JOIN (
                          SELECT smbpgen_program, MAX(smbpgen_term_code_eff) AS max_eff_term
                            FROM smbpgen
                        GROUP BY smbpgen_program
                       ) t ON t.smbpgen_program = smbpgen.smbpgen_program
            LEFT JOIN HACCINST1.ACAD_PROG_CATALOG ON stvmajr_code = ACAD_PROG_CODE
WHERE stvmajr_code <> 'NREQ'
ORDER BY 1","Program"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.department","select stvdept_code nk,
stvdept_desc name,
case when stvdept_code like '4%' then 'T' 
else 'F' end as is_active

from stvdept","Department"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.section","WITH 
SFRRSTS_DROP_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.Sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('DW')

--and rsts.Sfrrsts_Term_Code = 201110 and rsts.Sfrrsts_ptrm_code = '16'
),
SFRRSTS_WITHDRAW_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('WW')
)

SELECT
  a.SSBSECT_CRN  || '$$' || a.SSBSECT_TERM_CODE  AS NK
  , a.SSBSECT_CRN AS CD
  , case when a.SSBSECT_SCHD_CODE <> 'B'
  then a.SSBSECT_SUBJ_CODE || a.SSBSECT_CRSE_NUMB
  else a.SSBSECT_SUBJ_CODE || a.SSBSECT_CRSE_NUMB || '$$' || a.SSBSECT_SCHD_CODE end AS COURSE
  , stvterm.stvterm_code as term 
  , nvl(stvcamp_code,'DEFAULT') as CAMPUS
  , a.SSBSECT_MAX_ENRL AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , CASE WHEN instructor.SPRIDEN_LAST_NAME IS NULL THEN 'TBD' 
  ELSE instructor.SPRIDEN_LAST_NAME || ', ' || instructor.SPRIDEN_FIRST_NAME
  END AS INSTRUCTOR_NAME
  , nvl(to_char(b.SSRMEET_START_DATE,'YYYY-MM-DD'),'2000-01-01') AS CLASS_START_DT
  , nvl(to_char(b.SSRMEET_END_DATE, 'YYYY-MM-DD'), '2000-01-02') AS CLASS_END_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_Start_Date,'YYYY-MM-DD'), to_char(ssrmeet_start_date, 'YYYY-MM-DD'),'2000-01-01') as DROP_START_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as DROP_END_DT
  , coalesce(to_char(SFRRSTS_WITHDRAW_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as WITHDRAW_END_DT
  , CASE WHEN a.SSBSECT_SSTS_CODE = 'A' and a.ssbsect_camp_code = 'NCC'
THEN 'T' ELSE 'F' END AS IS_ACTIVE
FROM ssbsect a
  --creating campus lookup
  join stvcamp on stvcamp_code = SSBSECT_CAMP_CODE
  --creating term lookup
  join stvterm on stvterm_code = ssbsect_term_code
  --instructor info
  LEFT OUTER JOIN (
    SELECT SIRASGN_TERM_CODE, SIRASGN_CRN, SIRASGN_PIDM, SIRASGN_PRIMARY_IND, SPRIDEN_ID, SPRIDEN_FIRST_NAME, SPRIDEN_LAST_NAME
    FROM SIRASGN a
      JOIN SPRIDEN b ON a.sirasgn_pidm = b.spriden_pidm AND b.spriden_change_ind IS NULL  
      WHERE SIRASGN_CATEGORY = '01' AND SIRASGN_PRIMARY_IND = 'Y'
    )  instructor
    ON instructor.SIRASGN_TERM_CODE = a.SSBSECT_TERM_CODE AND instructor.SIRASGN_CRN = a.SSBSECT_CRN
  --meeting info
  LEFT OUTER JOIN (
    SELECT * FROM SSRMEET)
     b ON b.SSRMEET_TERM_CODE = a.SSBSECT_TERM_CODE AND b.SSRMEET_CRN = a.SSBSECT_CRN
  --joins for drop and withdraw dates
  LEFT JOIN SFRRSTS_DROP_DATES on ssbsect_term_code = SFRRSTS_DROP_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_DROP_DATES.Sfrrsts_ptrm_code
  LEFT JOIN SFRRSTS_WITHDRAW_DATES on ssbsect_term_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_ptrm_code
WHERE 1=1
--and ssbsect_camp_code = 'NCC'                        
 
UNION
  select 'UNKNOWN' as NK
  , 'UNKNOWN' as CD
  , 'UNKNOWN' as COURSE
  , '201410' as TERM    --[Member Specific] Change to a valid default term
  ,  'DEFAULT' as CAMPUS
  ,  0 AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , 'TBD' AS INSTRUCTOR_NAME
  , '2000-01-01' AS CLASS_START_DT
  , '2000-01-01' AS CLASS_END_DATE
  , '2000-01-01' AS DROP_START_DT
  , '2000-01-01' AS DROP_END_DT
  , '2000-01-01' AS WITHDRAW_END_DT
  , 'T' AS IS_ACTIVE
  from dual
  order by 2,4 ","Section"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"student_class_lkp","select student_class_cd,
student_class_desc
 from atlantatech.osf_scl_student_class_lkp","SSF_student_class_lkp"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.Course","-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
GROUP BY scbcrse_subj_code, scbcrse_crse_numb
),

scbdescCTE AS (
SELECT *
  FROM scbdesc
),

maxDescTerm AS (
select scbdesc_subj_code, scbdesc_crse_numb, max(scbdesc_term_code_eff) AS maxDescTermCode
    FROM scbdescCTE scbdescSecondary
        JOIN maxEffectiveTerm ON (scbdescSecondary.scbdesc_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                                  AND scbdescSecondary.scbdesc_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                                 AND scbdescSecondary.scbdesc_term_code_eff <= maxEffectiveTerm.maxTerm)
 GROUP BY scbdesc_subj_code, scbdesc_crse_numb                                                          
),

maxDesc AS (
SELECT scbdescCTE.scbdesc_subj_code, scbdescCTE.scbdesc_crse_numb, scbdescCTE.scbdesc_text_narrative
  FROM scbdescCTE
  JOIN maxDescTerm ON (scbdescCTE.scbdesc_subj_code = maxDescTerm.scbdesc_subj_code
                      AND scbdescCTE.scbdesc_crse_numb = maxDescTerm.scbdesc_crse_numb
                      AND scbdescCTE.scbdesc_term_code_eff = maxDescTerm.maxDescTermCode)
),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk -- This nk does not use the standard $$ concatenation since the platform currently shows the nk field in the UI. This affects the following dependent scripts that need to be in sync - section, studentCourse
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(maxDesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE
      WHEN (SUBSTR(scbcrky_term_code_start, 1, 5) <= (SELECT SUBSTR(MIN(stvterm_code), 1, 5) FROM stvterm WHERE SYSDATE <= stvterm_end_date) 
	          AND (SUBSTR(scbcrky_term_code_end, 1, 5) >= (SELECT SUBSTR(MIN(stvterm_code), 1, 5) FROM stvterm WHERE SYSDATE <= stvterm_end_date) 
			           OR scbcrky_term_code_end IN '999999')) 
           THEN CASE
                  WHEN scbcrse.scbcrse_csta_code = 'A' THEN 'T'
                  ELSE 'F'
                END 
      ELSE 'F'
    END AS is_active -- determine is courses are active by first checking if it is still active by scbcrky term standards, then by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN maxDesc ON (scbcrse.scbcrse_subj_code = maxDesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxDesc.scbdesc_crse_numb
                      )
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbcrky 
       ON scbcrky_subj_code = scbcrse.scbcrse_subj_code
          AND scbcrky_crse_numb = scbcrse.scbcrse_crse_numb
JOIN (SELECT DISTINCT ssbsect_subj_code, ssbsect_crse_numb
      FROM ssbsect s
      WHERE 1=1
      AND ssbsect_camp_code = 'G' --Golden West
      AND ssbsect_ssts_code = 'A'
      AND ssbsect_term_code >= (SELECT MIN(t.stvterm_code)
                                FROM stvterm t
                                WHERE 1=1
                                   AND t.stvterm_end_date >= SYSDATE
                                   AND t.stvterm_code LIKE '%2')) sec
  ON sec.ssbsect_subj_code = scbcrse.scbcrse_subj_code
     AND sec.ssbsect_crse_numb = scbcrse.scbcrse_crse_numb
),

-- Assign default values
defaultValues AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM course
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Courses"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.Term","-- Fields: nk,name,cat_yr,registration_start_dt,registration_end_dt,term_start_dt,term_end_dt,is_active
-- Model Name: cat.Term
-- Name: Terms
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query: 

-- get Terms from Banner
WITH term AS (SELECT 
  stvterm_code nk, 
  stvterm_desc \\\""name\\\"", 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case 
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm 
  JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member
  AND sfrrsts_ptrm_code = '1' -- Confirm ptrm code to include with BA/Member
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in stvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
SELECT
  stvterm_code nk,
  stvterm_desc \\\""name\\\"",
  stvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = stvterm_code
                   AND sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_ptrm_code = '1') -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM \\\""final\\\""    


-- NOTES: => DATA examples nk = '196570', '999999','000000'
--                         name = 'Fall 1965',

-- Change log:
--        Developer:
--        Change version:
--        Description","Terms"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"catcc.TestSubject","WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
--  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
 --         THEN TO_NUMBER(stvtesc_max_value) || '.00'
--          ELSE stvtesc_max_value
 --         END AS max_score
,stvtesc_max_value AS max_score
  , 'T' AS is_active
FROM stvtesc
WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')
)

-- wrapper query
SELECT * FROM testSubjects","TestSubject"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.Course","SELECT DISTINCT
  s.scbcrse_subj_code || s.scbcrse_crse_numb nk,
  s.scbcrse_subj_code || s.scbcrse_crse_numb cd,
  -- Not all of their course numbers are just numbers there are some that 
  -- have letters in them as well. Will have to use a regular expression.
  CASE 
    WHEN REGEXP_INSTR(s.scbcrse_crse_numb, '\\\\d+') != 0 THEN SUBSTR(s.scbcrse_crse_numb, REGEXP_INSTR(s.scbcrse_crse_numb, '\\\\d+'), 1)
    ELSE '0'
  END AS \\\""level\\\"",
  s.scbcrse_subj_code subject,
  NVL(scbcrse_dept_code, '0000') dept,
  scbcrse_title title,
  NVL(\\\""course_description\\\"", 'No description') AS \\\""desc\\\"",
  ssbsect_schd_code course_type,
  COALESCE(scbcrse_credit_hr_high, scbcrse_credit_hr_low, ssbsect_credit_hrs, 0) credits,
  CASE 
    WHEN scbcrse_csta_code = 'A' THEN 'T'
    ELSE 'F'
  END is_active
FROM scbcrse s JOIN stvsubj ON scbcrse_subj_code = stvsubj_code
               JOIN (
                      SELECT scbcrse_subj_code, scbcrse_crse_numb, MAX(scbcrse_eff_term) AS max_term
                      FROM scbcrse
                      GROUP BY scbcrse_subj_code, scbcrse_crse_numb
                    ) t ON s.scbcrse_subj_code = t.scbcrse_subj_code
                       AND s.scbcrse_crse_numb = t.scbcrse_crse_numb
                       AND t.max_term = scbcrse_eff_term 
          LEFT JOIN ssbsect ON s.scbcrse_crse_numb = ssbsect_crse_numb 
                           AND s.scbcrse_subj_code = ssbsect_subj_code
               -- Get course descriptions
          LEFT JOIN (
                      SELECT scrtext_subj_code, scrtext_crse_numb, LISTAGG(scrtext_text, ' ') WITHIN GROUP (ORDER BY scrtext_seqno) AS \\\""course_description\\\""
                      FROM scrtext
                      -- I cannot get all the course records description entries, i.e. I cannot go beyond seqno 9 because the LISTAGG function return concatenated strings that are too long, or more than 4000 bytes I believe.
                      -- This should grab all of the course descriptions for most courses. 
                      WHERE scrtext_seqno <= 8
                      GROUP BY scrtext_subj_code, scrtext_crse_numb
                    ) course_descriptions ON s.scbcrse_subj_code = course_descriptions.scrtext_subj_code AND s.scbcrse_crse_numb = course_descriptions.scrtext_crse_numb","Course"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.SeatsAvail","SELECT
  nk,
  avail_seats, 
  CASE 
    WHEN is_active = 'Y' THEN 'T' 
    ELSE 'F'
  END AS is_active
  FROM EAB_SECT_SEATS_AVAIL
WHERE campus LIKE 'P%'
   and academic_period = '201730'
","SeatsAvail"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"inst.Location","-- Fields: nk,campus,name,latitude,longitude,address,comments,is_active
-- Model Name: inst.Location
-- Name: Location
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get building data from Banner
WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Locations"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.StudentTerm","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'C'
 order by nk desc),

cur_stu as (
select id as stu_id
  from eab_stdnt_active
 where current_enroll_cc = 'Y'
   and academic_period in (select nk from cur_terms)),

cur_prog as (
select distinct nk as prog_id
  from eab_program
 where substr(college,0,1) = 'C'
)

SELECT
  nk,
  student,
  term,
  program,
  CASE 
    WHEN is_active = 'Y' THEN 'T'
    ELSE 'F'
  END AS is_active
  FROM EAB_STUDENT_TERM
 WHERE term in (select nk from cur_terms)
   and student IN (SELECT stu_id from cur_stu)
   and program in (select prog_id from cur_prog)","Student Term"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.Subject","-- Subject
SELECT 
  stvsubj_code nk,
  stvsubj_desc name,
  'T' is_active
FROM stvsubj
union
select 'UNKNOWN' AS nk,
       'UNKNOWN' as name,
       'T' as is_active
  from dual","Subject"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.StudentTerm","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','KV','KO')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get the max term for each program that has a corresponding term assigned.
getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
  LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
WHERE stvterm_code IS NOT NULL
  GROUP BY  sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
SELECT sgbstdn_pidm
  , sgbstdn_program_1
  , sgbstdn_stst_code
  , sgbstdn_term_code_eff AS maxEffTerm
  , sgbstdn_term_code_ctlg_1
  , stvstst_reg_ind
FROM sgbstdn a
  LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
WHERE sgbstdn_program_1 IS NOT NULL
  AND stvstst_code IS NOT NULL
  AND sgbstdn_term_code_eff = (
                               SELECT MAX(sgbstdn_term_code_eff)
                               FROM sgbstdn
                                RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                               WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                AND stvterm_end_date <= sysdate + 365
                              )
),

-- final query to extract student term data
studentTerm AS (
SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
  , spriden_id AS student
  , studentDetails.maxEffTerm AS term
  , studentDetails.sgbstdn_program_1 || '$$' || getProgramMaxTerm.acyr AS \\\""program\\\""
  , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active -- set the record active if the corresponding stvstst_reg_ind is set to 'Y'
FROM spriden
  RIGHT JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
  JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
  JOIN studentPopulation ON studentPidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
)

-- wrapper query
select * from studentTerm","StudentTerm"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.StudentCourse","WITH pop AS (
select distinct pidm 
  from (select sfrstcr_pidm pidm, 
               sfrstcr_term_code term 
          from sfrstcr
         where sfrstcr_rsts_code in ('RE','RW','RA')
           and sfrstcr_term_code in (select term
                                       from (SELECT STVTERM_CODE term 
                                               FROM STVTERM
                                              WHERE STVTERM_FA_SUMMER_IND IS NULL
                                                and STVTERM_SYSTEM_REQ_IND is null
                                                and STVTERM_CODE < (SELECT min(stvterm_code)
                                                                      FROM stvterm 
                                                                     where sysdate < stvterm_start_date
                                                                       and STVTERM_FA_SUMMER_IND IS NULL
                                                                       and STVTERM_SYSTEM_REQ_IND is null)
                                                and rownum < 5
                                              ORDER BY 1 desc))
        UNION (
        select saradap_pidm pidm,
               saradap_term_code_entry term
          from saradap
         where saradap_term_code_entry in (select term
                                             from (SELECT STVTERM_CODE term
                                                     FROM STVTERM
                                                    WHERE STVTERM_FA_SUMMER_IND IS NULL
                                                      and STVTERM_SYSTEM_REQ_IND is null
                                                      and STVTERM_CODE < (SELECT min(STVTERM_CODE)
                                                                            FROM stvterm 
                                                                           where sysdate < stvterm_start_date
                                                                             and STVTERM_FA_SUMMER_IND IS NULL
                                                                             and STVTERM_SYSTEM_REQ_IND is null)
                                                      and rownum < 5
                                                    ORDER BY 1 desc))))),

audit_bank as (
select distinct sfrstca_pidm as pidm,
                sfrstca_crn as crn,
                sfrstca_term_code term
  from sfrstca left join sfrstcr on sfrstcr_term_code = sfrstca_term_code 
                                and sfrstcr_crn = sfrstca_crn
                                and sfrstcr_pidm = sfrstca_pidm
 where sfrstcr_crn is null
 order by 1,2,3)

select spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || ssbsect_crse_numb as nk,
       spriden_id student,
       stvterm_code term,
       ssbsect_subj_code || ssbsect_crse_numb course,
       nvl((select SSBSECT_CRN  || '$$' || SSBSECT_TERM_CODE
              from ssbsect
             where ssbsect_crn = sfrstcr_crn and ssbsect_term_code = sfrstcr_term_code), 'UNKNOWN') as section,
       sfrstcr_grde_code grade_cd, 
       nvl(sfrstcr_credit_hr, 0) as credits_attemtped,
       0 as credits_earned,
       case 
        when sfrstcr_rsts_code in ('RE','RW','RA') and stvterm_start_date > sysdate then 'REGISTERED'
        when sfrstcr_rsts_code in ('RE','RW','RA') and stvterm_start_date <= sysdate and stvterm_end_date > sysdate then 'IN_PROGRESS'
        when sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code in ('A','A-','B','B+','B-','C','C+','CR','D','D+','D-','P') then 'COMPLETED'
        else 'UNKNOWN'
       end STATUS, 
       CASE -- Consider left join on SHRGRDE
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'A' THEN 4.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'A-' THEN 3.7
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'B+' THEN 3.3
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'B' THEN 3.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'B-' THEN 2.7
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'C+' THEN 2.3
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'C' THEN 2.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'D+' THEN 1.3
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'D' THEN 1.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'D-' THEN 0.7
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'P' THEN 0.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code = 'CR' THEN 0.0
        WHEN sfrstcr_rsts_code in ('RE','RW','RA') and sfrstcr_grde_code IS NULL THEN 0.0
        ELSE 0.0
       END as grade_points,
       'T' as is_active

  -- Why are we using the cartesian product here? Should try to use an explicit 
  -- inner join here instead of the implicit cross join. 
  from (select null p_term, '' p_id, 'N' p_history, 'N' p_current from dual ), spriden, sfrstcr, stvterm, stvrsts, ssbsect, scbcrse, sobptrm
 where spriden_change_ind is null 
    and stvterm_code = sfrstcr_term_code --join
    and sfrstcr_pidm = spriden_pidm --join
    and sfrstcr_term_code = nvl(p_term, sfrstcr_term_code) --this seems surperfluous - is it here just to account for bad data?
    and ssbsect_crn = sfrstcr_crn --join
    and scbcrse_subj_code = ssbsect_subj_code --join
    and ssbsect_term_code = sfrstcr_term_code --join
    and scbcrse_crse_numb = ssbsect_crse_numb --join
    and scbcrse_eff_term = ( select max(scbcrse_eff_term) 
                             from scbcrse 
                            where scbcrse_crse_numb = ssbsect_crse_numb 
                              and scbcrse_subj_code = ssbsect_subj_code 
                              and scbcrse_eff_term <= ssbsect_term_code ) 
    and sfrstcr_rsts_code = stvrsts_code --join
    and ( stvrsts_wait_ind = 'Y' or ( stvrsts_incl_sect_enrl = 'Y' and stvrsts_withdraw_ind = 'N' ) )
    and sobptrm_ptrm_code = ssbsect_ptrm_code --join, parts of term
    and sobptrm_term_code = ssbsect_term_code --join, entire term
    and ( p_current = 'N' or stvterm_start_date <= sysdate )  --p_current is always set to 'N'

    -- If course is graded, do not include sfrstcr
    and not exists ( select 'Y'
                       from shrtckn 
                      where shrtckn_crn = sfrstcr_crn 
                        and shrtckn_term_code = sfrstcr_term_code 
                        and shrtckn_pidm = sfrstcr_pidm) 
    and spriden_pidm in (select * from pop)
UNION
select spriden_id|| '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code|| shrtckn_crse_numb as nk,
       spriden_id as student,
       stvterm_code as term,
       shrtckn_subj_code|| shrtckn_crse_numb as course,
       nvl((select SSBSECT_CRN || '$$' || SSBSECT_TERM_CODE
              from ssbsect
             where ssbsect_crn = shrtckn_crn
               and ssbsect_term_code = shrtckn_term_code), 'UNKNOWN') as Section, --check to see if section exists
       shrtckg_grde_code_final as grade_cd,
       nvl(SHRTCKG_HOURS_ATTEMPTED, 0) as credits_attemtped,
       nvl(shrtckg_credit_hours,0) as credits_earned,
       case
        when shrtckg_grde_code_final in ('A','A-','B','B+','B-','C','C+','CR','D','D+','D-','P') then 'COMPLETED'
        else 'UNKNOWN'
       end status,
       CASE -- Consider left join on SHRGRDE
        WHEN shrtckg_grde_code_final = 'A' THEN 4.0
        WHEN shrtckg_grde_code_final = 'A-' THEN 3.7
        WHEN shrtckg_grde_code_final= 'B+' THEN 3.3
        WHEN shrtckg_grde_code_final = 'B' THEN 3.0
        WHEN shrtckg_grde_code_final = 'B-' THEN 2.7
        WHEN shrtckg_grde_code_final = 'C+' THEN 2.3
        WHEN shrtckg_grde_code_final = 'C' THEN 2.0
        WHEN shrtckg_grde_code_final = 'D+' THEN 1.3
        WHEN shrtckg_grde_code_final = 'D' THEN 1.0
        WHEN shrtckg_grde_code_final = 'D-' THEN 0.7
        WHEN shrtckg_grde_code_final = 'P' THEN 0.0
        WHEN shrtckg_grde_code_final = 'CR' THEN 0.0
        when shrtckg_grde_code_final IS NULL THEN 0.0
        ELSE 0.0
       END grade_points,
       'T' as is_active
 from spriden
 join shrtckn on spriden_pidm = shrtckn_pidm
 join stvterm on stvterm_code = shrtckn_term_code
 join shrtckg on spriden_pidm = shrtckg_pidm 
             and shrtckn_pidm = shrtckg_pidm
             and shrtckg_tckn_seq_no = shrtckn_seq_no
             and shrtckg_term_code = shrtckn_term_code 
 where shrtckg_seq_no = (select max(shrtckg_seq_no)
                           from shrtckg 
                          where shrtckg_pidm = spriden_pidm 
                            and shrtckg_tckn_seq_no = shrtckn_seq_no) 
   and spriden_change_ind is null
   and spriden_pidm in (select * from pop)
UNION
select spriden_id || '$$' || audit_bank.term || '$$' || ssbsect_subj_code || ssbsect_crse_numb as nk,
       spriden_id student,
       audit_bank.term term,
       ssbsect_subj_code || ssbsect_crse_numb course,
       audit_bank.crn || '$$' || audit_bank.term as section,
       '' as grade_cd,
       0 as credits_attemtped,
       0 as credits_earned,
       'UNKNOWN' as status,
       0.0 as grade_points,
       'T' as is_active
  from audit_bank left join spriden on spriden_pidm = audit_bank.pidm left join ssbsect on ssbsect_crn = audit_bank.crn
 where audit_bank.pidm in (select * from pop)
   and audit_bank.term >= 201610 -- Spring 2016
 order by 2,3,4","StudentCourse"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.StudentCourse","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','KV','KO')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE','KV','KO') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE','KV','KO') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE','KV','KO') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE','KV','KO') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","StudentCourse"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.SeatsAvail","-- extract seats available from banner
WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
WHERE 1=1
  AND ssbsect_ssts_code = 'A' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms
  AND ssbsect_camp_code IN ('G', 'H', 'M', 'O') -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA.
)

-- wrapper query
SELECT * FROM seatsAvail","Seats Avail"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.Subject","SELECT DISTINCT SUBJECTS_ID nk,
       SUBJ_DESC name,
       'T' as line
  FROM  SUBJECTS 
 where SUBJ_DESC NOT LIKE 'DO NOT USE%'
 order by nk, name
","Subject"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"core.Student","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1  
  AND (sfrstcr_rsts_code LIKE ('R%') OR sfrstcr_rsts_code LIKE ('K%'))
  
---- UNION
--
--SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
--FROM saradap
--  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
--WHERE 1=1 
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , spriden_id AS username 
  , COALESCE(goremal_email_address,lower(spriden_first_name)||lower(spriden_last_name)||'@missingemail.org') AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm AND spriden_change_ind IS NULL
  LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm AND spriden_change_ind IS NULL
  LEFT JOIN GOREMAL ON goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code IN ('STUE')
-- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student
","Student"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.course","with course_bank as (

select course_cd,
sum(institution_count) as inst
from (
      SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','') as course_cd,
      case when c.institution = 'TN293' then '1' else '0' end as institution_count
      from (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)

                    and o.acad_career = 'CRED'
                    and o.acad_org = 'SCREDIT'
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
                    ) C
        )
group by course_cd

)

SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','')
 --|| '-' || REPLACE(b.SSR_COMPONENT, ' ','')
 || REPLACE('-' || C.institution, '-TN293', '') as NK
, C.CRSE_ID as cd
, case when acad_group = 'DEV' then '0' else '1' end  as \\\""level\\\""
, REPLACE(c.SUBJECT, ' ','') as SUBJECT
, '1'                                                                               AS DEPARTMENT_CD 
, nvl(b.DESCRLONG,  b.DESCR)                                                        as \\\""desc\\\""
, b.SSR_COMPONENT COURSE_TYPE
, nvl(b.COURSE_TITLE_LONG, b.descr)                                                 AS TITLE
, b.UNITS_ACAD_PROG                                                                   AS CREDITS
, case when b.crse_repeatable = 'N' then 0
else crse_repeat_limit - 1 end                                                      AS REPEATABLE_COUNT
, CASE
    WHEN REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','') NOT LIKE '%T' 
         THEN case 
                 when b.EFF_STATUS = 'A' and C.INSTITUTION = 'TN293' then 'T' 
                 else 'F' 
               end                                                                           
    ELSE 'F'
  END                                                                               AS IS_ACTIVE 
FROM (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION 
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.INSTITUTION = 'TN293'
                    and o.acad_career = 'CRED'
                    and o.acad_org = 'SCREDIT'
                    --and o.crse_offer_nbr <> '1'
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from PS_CRSE_OFFER x where o.crse_id = x.crse_id
                                              and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))

                    ) C

LEFT JOIN (SELECT mainB.CRSE_ID 
               , UNITS_ACAD_PROG
               , COURSE_TITLE_LONG 
               , DESCR
               , DESCRLONG
               , EFF_STATUS
               , CRSE_REPEATABLE
               , CRSE_REPEAT_LIMIT
               , SSR_COMPONENT
        FROM   PS_CRSE_CATALOG mainB 
        WHERE  mainB.EFFDT = (SELECT Max(EFFDT) 
                              FROM   PS_CRSE_CATALOG c 
                              WHERE  c.crse_id = mainb.crse_id)) B
        on B.CRSE_ID = C.CRSE_ID
WHERE  1 = 1 

ORDER  BY 1, 2","Course"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"core.Student","-- Fields  nk,username,email,first_name,last_name,birthdate,is_active
-- Model Name  core.Student
-- Name  Student
-- Output  Student_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.1.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT
  szvterm_code
FROM
  szvterm
WHERE
  szvterm_code <=
  (
    SELECT
          MAX(SORATRM_TERM_CODE) Max_term_code
        FROM
          SORATRM
        WHERE
          TRUNC(sysdate) between SORATRM_START_DATE and SORATRM_END_DATE
        AND SORATRM_VPDI_CODE = 'PCC'
  )
AND SUBSTR(SZVTERM_CODE, 1, 1) NOT IN ('6', '7' ,'8')
AND SZVTERM_VPDI_CODE               = 'PCC'
AND rownum                          < 7
ORDER BY
  szvterm_code DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code LIKE 'R%'
  AND sfrstcr_vpdi_code = 'PCC'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = saradap_term_code_entry
WHERE saradap_vpdi_code = 'PCC'
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , spriden_id AS username
  , TRIM(COALESCE(
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address like '%student.cccs.edu' AND  goremal_status_ind = 'A' AND ROWNUM < 2
                ),
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address like '%student.cccs.edu' AND  goremal_status_ind = 'I' AND ROWNUM < 2
                ),
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address not like '%student.cccs.edu' AND  goremal_status_ind = 'A' AND ROWNUM < 2
                )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student


--  Notes: => DATA examples nk = W00073598,
--                          username = W00073598
--
-- Change log:
--        Developer: Doug Menezes
--        Change version: Nav.1.1.0 (04/12/2016)
--        Description: Updated getLastXTerms logic to match with studentCourse.
","Students"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.SeatsAvail","WITH 

termList AS (
   SELECT DISTINCT SEC_TERM
     FROM COLL_PRODUCTION.COURSE_SECTIONS
    JOIN COLL_PRODUCTION.TERMS
      ON SEC_TERM = TERMS_ID
      AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
    WHERE SEC_TERM IS NOT NULL
      AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
),


coursesTemp AS (
  SELECT distinct NVL(COURSES.CRS_NAME,'') nk 
  FROM COLL_PRODUCTION.COURSES
    Join COLL_PRODUCTION.APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
    Join COLL_PRODUCTION.COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
   CRS_ACAD_LEVEL = 'UG'
    AND CRS_DEPTS IN (
        SELECT DISTINCT DEPTS_ID
        FROM   COLL_PRODUCTION. DEPTS
        WHERE  DEPTS_ACTIVE_FLAG='A')
),

secList AS 
(
SELECT distinct COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME nk
  FROM COLL_PRODUCTION.COURSE_SECTIONS 
  JOIN termList ON COURSE_SECTIONS.SEC_TERM = termList.SEC_TERM
  LEFT JOIN COLL_PRODUCTION.COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
  JOIN coursesTemp ON COURSES.CRS_NAME = coursesTemp.nk
),


validSeatsAvailable AS (
  
SELECT 
  CS_TERM||'-'||CS_NAME AS nk,
  CASE
     WHEN CS_CAPACITY - CS_COUNT_STUDENTS >= 0 
      THEN CS_CAPACITY - CS_COUNT_STUDENTS
     ELSE 0
  END                 AS avail_seats,
   CASE     
    WHEN CS_STATUS = 'AC' 
      THEN 'Y'
    ELSE 'N'
  END                 AS is_active
FROM COLL_PRODUCTION.COURSE_SECTIONS_DETAILS_VIEW
  JOIN secList ON CS_TERM||'-'||CS_NAME = secList.nk
)

SELECT * FROM validSeatsAvailable
","Seats Available"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.SeatsAvail","-- extract seats available from banner
WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk.
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
join scrlevl on ssbsect_subj_code = scrlevl.SCRLEVL_subj_code
                                  and ssbsect_crse_numb = scrlevl.SCRLEVL_CRSE_NUMB 
WHERE 1=1
  AND ssbsect_ssts_code = 'A' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. we do not need to extract seats available for past terms.
  and SCRLEVL_LEVL_CODE in ('50','54')
)

-- wrapper query
SELECT * FROM seatsAvail","SeatsAvailable"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"reg.studenttestscore","WITH pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW')
      and sfrstcr_term_code in (
      Select Term From (           
                Select Stvterm_Code Term From Stvterm 
                Where Stvterm_Code < (
                      Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      And Stvterm_Desc Not Like '%Non-Credit' 
                      And Stvterm_Desc Not Like 'Parson%')
                And Stvterm_Desc Not Like '%Non-Credit' 
                And Stvterm_Desc Not Like 'Parson%'
                And Rownum < 5
                Order By 1 Desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      Select Term From (           
                Select Stvterm_Code Term From Stvterm 
                Where Stvterm_Code < (
                      Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      And Stvterm_Desc Not Like '%Non-Credit' 
                      And Stvterm_Desc Not Like 'Parson%')
                And Stvterm_Desc Not Like '%Non-Credit' 
                And Stvterm_Desc Not Like 'Parson%'
                And Rownum < 5
                Order By 1 Desc)
))))

SELECT 
  spriden_id || '$$' || stvtesc_code nk,
  spriden_id student, 
  UPPER(stvtesc_code) test_subject,
  MAX(to_number(sortest_test_score)) score,
  'T' is_active
FROM spriden JOIN sortest ON spriden_pidm = sortest_pidm
             JOIN stvtesc ON sortest_tesc_code = stvtesc_code
             JOIN goremal ON spriden_pidm = goremal_pidm
             JOIN sgbstdn ON spriden_pidm = sgbstdn_pidm
WHERE stvtesc_data_type = 'N'
  AND spriden_change_ind IS NULL
  --AND goremal_emal_code = 'CAMP'
  AND spriden_entity_ind = 'P' -- Indicates that the row is a person. 'C' indicates a non-person?
  --AND goremal_email_address LIKE '%@students.snead.edu'
  --AND sgbstdn_term_code_eff >= '201015'
  And Spriden_Pidm In (Select * From Pop)
GROUP BY spriden_id || '$$' || stvtesc_code,
         spriden_id,
         stvtesc_code","Student Test Score"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.CourseType","WITH CRTPLIST AS (
	SELECT DISTINCT CRS_CRED_TYPE, count(*) CRS_COUNT
	  FROM COURSES
	 WHERE CRS_MIN_CRED > 0
	 GROUP BY CRS_CRED_TYPE
)

SELECT CRED_TYPES_ID nk,
       CRTP_DESC name,
	   CASE
         WHEN CRS_COUNT > 0 THEN 'T'
		 ELSE 'F'
	   END is_active
  FROM CRED_TYPES LEFT JOIN CRTPLIST ON CRED_TYPES_ID = CRS_CRED_TYPE
","CourseType"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"reg.AccountHold","WITH pop AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)))))
select spriden_id || '$$' || sprhold_hldd_code as nk,
       spriden_id as student,
       sprhold_hldd_code as \\\""identifier\\\"",
       nvl(sprhold_reason, sprhold_HLDD_CODE) as message,
       'T' as is_active
  from sprhold join spriden on sprhold_pidm = spriden_pidm
                           and spriden_change_ind is null
 where (sprhold_to_date >= sysdate or sprhold_to_date is null)
   and sprhold_pidm in (select * from pop)
 order by spriden_id, sprhold_from_date","AccountHolds"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"core.student","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                        and (stvterm_code like '%10' 
                              or stvterm_code like '%20' 
                              --or stvterm_code like '%30'
                            )
                      )
AND ROWNUM < 5
and (stvterm_code like '%10' 
                              or stvterm_code like '%20' 
                              or stvterm_code like '%30')
ORDER BY 1 DESC
),


POP AS (
select distinct studentPidm from (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
  FROM sfrstcr  
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code

  WHERE 1=1
    AND sfrstcr_rsts_code IN ('RE','RW')
/*    
  UNION

  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
  FROM saradap
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
  WHERE 1=1
*/
) current_and_applicants

inner join (

  select distinct sorlcur_pidm pidm
  from sorlcur tbl
  where 1=1
  and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
  and sorlcur_cact_code = 'ACTIVE'
  and sorlcur_term_code_end is null
  and sorlcur_camp_code = 'NCC'
  and sorlcur_priority_no = (select min(sorlcur_priority_no)
                             from sorlcur
                             where sorlcur_camp_code = tbl.sorlcur_camp_code
                             and sorlcur_lmod_code = tbl.sorlcur_lmod_code
                             and sorlcur_cact_code = tbl.sorlcur_cact_code
                             and sorlcur_term_code_end is null
                             and sorlcur_pidm = tbl.sorlcur_pidm
                             and sorlcur_term_code in (select stvterm_code from getLastXTerms)

                            )
  and sorlcur_term_code = (select max(sorlcur_term_code)
                            from sorlcur
                             where sorlcur_camp_code = tbl.sorlcur_camp_code
                             and sorlcur_lmod_code = tbl.sorlcur_lmod_code
                             and sorlcur_cact_code = tbl.sorlcur_cact_code
                             and sorlcur_term_code_end is null
                             and sorlcur_pidm = tbl.sorlcur_pidm
                             and sorlcur_term_code in (select stvterm_code from getLastXTerms)
                             )
) on pidm = studentpidm
),
enrollment as (

select distinct pidm,
'Dual-Enrolled' as enrollment_status
from (
select sprcmnt_pidm as pidm,
sprcmnt_cmtt_code as enrollment_status
from SPRCMNT a
where sprcmnt_cmtt_code in ('GSC','KSC','NHD','NHM','PSU')
and sprcmnt_activity_date = (select max(sprcmnt_activity_date)
                            from sprcmnt b
                            where a.sprcmnt_pidm = b.sprcmnt_pidm
                            and a.sprcmnt_cmtt_code = b.sprcmnt_cmtt_code)
))
select spriden_id nk,
       coalesce((select gobtpac_external_user
	from gobtpac
	where gobtpac_pidm = spriden_pidm)
        ,(select substr(goremal_email_address,1,instr(goremal_email_address,'@')-1)
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'SE'
                and goremal_status_ind = 'A')
        ,(select substr(goremal_email_address,1,instr(goremal_email_address,'@')-1)
                from goremal
                where goremal_pidm = spriden_pidm
                and goremal_emal_code = 'E'
and goremal_status_ind = 'A'
and goremal_preferred_ind = 'Y'
                and goremal_email_address like '%@ccsnh.edu%')
,spriden_id) username,
               coalesce(( 
                select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'SE'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'SE'
              and goremal_preferred_ind = 'N'
              ),
       (select goremal_email_address
                from goremal
                where goremal_pidm = spriden_pidm
                and goremal_emal_code = 'E'
and goremal_status_ind = 'A'
and goremal_preferred_ind = 'Y'
                and goremal_email_address like '%@ccsnh.edu%'),
               lower(spriden_id) || '@missingemail.org') email,
       spriden_first_name first_name,
       spriden_last_name last_name,
       --nvl(to_char(spbpers_birth_date,'YYYY-MM-DD'),'2000-01-01') birthdate,
       '2001-01-01' birthdate,
       'N' as veteran_ind,
       enrollment_status as enrollment_status,
'T' as is_active
  from spriden
left join enrollment on spriden_pidm = enrollment.pidm
  --join spbpers on spriden_pidm = spbpers_pidm
where spriden_change_ind is null
 AND spriden_entity_ind = 'P'
 and spriden_pidm in (select * from pop)","Student"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.SectionTime","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'C'),

sect_time as (
select distinct *
  from eab_sect_time
 where substr(campus,0,1)='C'
   and academic_period in (select nk from cur_terms)),

list_loc as (
select distinct location as loc
  from (select
    CASE
      when substr(location, -1, 1) = '$' then substr(location, 0, instr(location, '$')-1)
      else location
    END location
    from sect_time))

select distinct nk,section,day_of_week,from_tm,to_tm,location,is_active from (
SELECT
  section ||'$$'|| coalesce(day_of_week, 8) ||'$$'||
  coalesce(substr(from_tm, 0, 2), '00')||coalesce(substr(from_tm, 4, 2), '00') ||'$$'||
  coalesce(substr(to_tm, 0, 2),'00')||coalesce(substr(to_tm, 4, 2), '00') nk,
  section,
  coalesce(day_of_week, 8) day_of_week,
  from_tm,
  to_tm,
  CASE
    when substr(location, -1, 1) = '$' then substr(location, 0, instr(location, '$')-1)
    else location
  END location,
  CASE 
    WHEN is_active = 'Y' THEN 'T'
    ELSE 'F'
  END AS is_active
FROM SECT_TIME
WHERE campus LIKE 'C%'
  and academic_period in (select nk from cur_terms)
  and location in (select loc from list_loc))","Section Time"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"inst.location","WITH Campuses as (
select stvcamp_code
from stvcamp
where stvcamp_code in ('NLC','NVC','PAC','SAC','SPC','O')

),
buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
WHEN slbbldg_zip is null then slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
                '' comments,
case when slbbldg_camp_code in (select * from campuses) then 'T' else 'F' end as is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- Assign default values
defaultValues AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

defaultValues2 as (
select 'ONL' nk
, 'O' campus
, 'Online' \\\""name\\\""
, '' latitude
, '' longitude
, 'Online' address
, '' comments
, 'T' is_active
from dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM defaultValues
UNION
select * from defaultValues2
)

-- Wrapper query
SELECT * FROM finalDataSet","location"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.Term","-- get Terms from Banner
WITH term AS (
  SELECT stvterm_code nk, 
          stvterm_desc \\\""name\\\"", 
          stvterm_acyr_code cat_yr,
      --    coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
   --       coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
    coalesce(to_char(SORRTRM_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, 
          coalesce(to_char(SORRTRM_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt,
      
       --   to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
        --  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
to_char(STVTERM_start_date, 'YYYY-MM-DD') term_start_dt,
          to_char(STVTERM_end_date, 'YYYY-MM-DD') term_end_dt,
          -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
          -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
    Case 
      When (Stvterm_Desc Like 'Fall%' or Stvterm_Desc Like 'Winter%' or Stvterm_Desc Like 'Spring%' or Stvterm_Desc Like 'Summer%')
           AND STVTERM_CODE >= '201212' and stvterm_code not in ('999999','000000') THEN 'T' 
      ELSE 'F'
    END is_active
    FROM stvterm JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
 INNER JOIN SORRTRM ON SORRTRM_TERM_CODE = stvterm_code
   WHERE sfrrsts_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE') -- Confirm registration codes to include with BA/Member
     AND sfrrsts_ptrm_code = '1' -- Confirm ptrm code to include with BA/Member
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in stvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
  SELECT stvterm_code nk,
         stvterm_desc \\\""name\\\"",
         stvterm_acyr_code cat_yr,
         '1900-01-01' registration_start_dt, -- Use default values
         '1900-01-02' registration_end_dt, -- Use default values
         to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
         to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
         -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
         -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
         Case
           When (Stvterm_Desc Like 'Fall%' or Stvterm_Desc Like 'Winter%' or Stvterm_Desc Like 'Spring%' or Stvterm_Desc Like 'Summer%') 
                AND STVTERM_CODE >= '201212' and stvterm_code not in ('999999','000000') THEN 'T' 
           ELSE 'F'
         END is_active
   FROM stvterm
  WHERE NOT EXISTS (SELECT 1
                    FROM sfrrsts
                   WHERE sfrrsts_term_code = stvterm_code
                     AND sfrrsts_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE') -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                     AND sfrrsts_ptrm_code = '1') -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
),

-- Combine Banner data and default values
finalDataSet AS (
  SELECT * FROM term
  UNION
  SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM finalDataSet order by nk","Term"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"inst.Location","SELECT 
  stvbldg_code nk,
  DECODE(stvbldg_code, 'ARAB', 'Arab',
                       'WEB', 'Web',
                       'Main') campus,
  stvbldg_desc name,
  '' latitude,
  '' longitude,
  CASE
    WHEN COALESCE(slbbldg_street_line1,
                  slbbldg_street_line2,
                  slbbldg_city,
                  slbbldg_zip,
                  'NA' ) = 'NA' then 'Address Not Available'
    ELSE slbbldg_street_line1 || ' ' ||
    	   slbbldg_street_line2 || ' ' ||
    	   slbbldg_city || ', ' ||
    	   slbbldg_zip
  END address,
  '' comments,
  'T' is_active
FROM stvbldg INNER JOIN slbbldg ON slbbldg_bldg_code = stvbldg_code

UNION 

-- Building and room numbers....
SELECT 
  DISTINCT ssrmeet_bldg_code || '$$' || ssrmeet_room_code nk,
  DECODE(stvbldg_code, 'ARAB', 'Arab',
                       'WEB', 'Web',
                       'Main') campus,
  stvbldg_desc || ' Room# ' || ssrmeet_room_code name, 
  '' latitude,
  '' longitude,
  CASE 
    WHEN COALESCE(slbbldg_street_line1,
    	            slbbldg_street_line2,
    	            slbbldg_city,
    	            slbbldg_zip,
    	            'NA') = 'NA' then 'Address Not Available'
    ELSE slbbldg_street_line1 || ' ' ||
    	   slbbldg_street_line2 || ' ' ||
    	   slbbldg_city || ', ' ||
    	   slbbldg_zip
  END address, 
  '' comments,
  'T' is_active
FROM stvbldg INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
             INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code 

UNION

SELECT 
  'Web' nk, 
  'Web' campus,
  'Online' name,
  '' latitude,
  '' longitude,
  'Address Not Available' address,
  '' comments,
  'T' is_active
FROM dual","Location"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Program","-- determine most recent term for each Program by finding the max term for each program in sobcurr
WITH maxEffectiveTerm AS (
  SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
    FROM sobcurr
   GROUP BY sobcurr_program
),

programCredits as (
  select smbpgen.smbpgen_program,
         smbpgen.smbpgen_term_code_eff,
         smbpgen.smbpgen_active_ind,
         nvl(smbpgen.smbpgen_req_credits_overall, 0.0) as credits
    from smbpgen join (select sMBPGEN_PROGRAM, max(smbpgen_term_code_eff) max_term
                         from smbpgen
                        where smbpgen_active_ind = 'Y'
                        group by sMBPGEN_PROGRAM) s on smbpgen.smbpgen_program = s.smbpgen_program
                                                   and smbpgen.smbpgen_term_code_eff = s.max_term
),

-- Collection of program descriptions
prog_desc as (
  select smrpcmt_program, listagg(smrpcmt_text, '') within group (order by smrpcmt_text_seqno asc) smrpcmt_text -- within group (order by smrpcmt_prnt_code asc) as smrpcmt_text
    from smrpcmt s1 join (select s2.smrpcmt_program as prgm, max(s2.smrpcmt_term_code_eff) as term
                            from smrpcmt s2 group by s2.smrpcmt_program) mx on s1.smrpcmt_term_code_eff = Mx.term
                                                                           and s1.smrpcmt_program = Mx.Prgm
   where --smrpcmt_prnt_code is not null
      smrpcmt_text is not null
   group by smrpcmt_program
   order by smrpcmt_program
),

-- extract program data from Banner
program AS (
  SELECT DISTINCT
      sobcurr_program || '$$' || stvterm_acyr_code AS nk,
      sobcurr_program AS cd,
      TO_NUMBER(stvterm_acyr_code) AS cat_yr,
       smrprle_program_desc     	AS \\\""name\\\"",
      replace(replace(coalesce(smrpcmt_text, smrprle_program_desc, 'None'),chr(10)),chr(13)) AS \\\""desc\\\"",
      NVL(credits, 0.0) AS CREDITS, -- confirm degree code to credits conversion with BA/Member. This logic may differ for different colleges and will need to be adjusted accordingly.
      '' AS enrollment_notes,
      '' AS registration_notes,
       -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' --- instead of underscores '_' Confirm with BA/Memeber.
      sobcurr_program AS area_of_study,
      '' AS concentration,
      sobcurr_degc_code AS \\\""credential\\\"",
      DECODE (stvmajr_cipc_code,
              null,
              null,
              SUBSTR(stvmajr_cipc_code,1,2)||'.'||SUBSTR(stvmajr_cipc_code,3)) AS cip,
      CASE
        WHEN sobcurr_degc_code IN ('AA','AS') THEN 'T'
        ELSE 'F'
      END AS is_transfer, -- Confirm with BA
      CASE
        WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T'
        ELSE 'F'
      END AS is_active
    FROM sobcurr LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
                 LEFT JOIN smrprle ON smrprle_program = sobcurr_program
                 LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
                 LEFT JOIN stvmajr ON stvmajr_code = sobcurr_program --(SUBSTR(sobcurr_program,1,CAST(INSTR(sobcurr_program,'_') AS NUMBER)-1))   -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_'. Confirm with BA/Memeber. Should match with area_of_study in SELECT portion of query.
                 LEFT JOIN programCredits ON sobcurr_program = smbpgen_program
                 LEFT JOIN prog_desc on sobcurr_program = smrpcmt_program
   where  smbpgen_term_code_eff >= '201212' -- per Bruce
    and  smbpgen_active_ind = 'Y' -- per Bruce
)

-- Wrapper query
SELECT * FROM program
","Programs"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.StudentTerm","-- GET ALL STUDENTS WITH ACTIVE PROGRAM
-- Student Term 
WITH STUDENTS_ACTIVE_PROGRAM AS (

SELECT DISTINCT
   SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)+'$$'+TERMS.TERMS_ID  nk,
   SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)   student,  --select * from STUDENT_PROGRAMS
   TERMS.TERMS_ID  term
FROM
   STUDENT_PROGRAMS SP
      LEFT OUTER JOIN STUDENT_PROGRAMS_LS SPL ON -- if multiple programs and not code as prim or secon pull pos 1
         SPL.STUDENT_PROGRAMS_ID = SP.STUDENT_PROGRAMS_ID
            AND
         SPL.POS = 1
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
         --   AND AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'
   ,
   ( -- FIND LAST TERM REGISTERED FOR
      SELECT DISTINCT 
         SUBSTRING(ST.STUDENT_TERMS_ID,1,7) AS ID,
         MAX(DATEDIFF(DAY, '19000101', TERM_START_DATE)) AS TERMSTART
      FROM
         STUDENT_TERMS ST
            JOIN TERMS ON
               SUBSTRING(ST.STUDENT_TERMS_ID,9,6) = TERMS.TERMS_ID
        GROUP BY SUBSTRING(ST.STUDENT_TERMS_ID,1,7)
   ) STUTERM
      LEFT OUTER JOIN TERMS ON
         STUTERM.TERMSTART = DATEDIFF(DAY, '19000101', TERMS.TERM_START_DATE)
   WHERE
      SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7) = STUTERM.ID
	   and TERMS.TERMS_ID like '2%'
	   and  SUBSTRING(TERMS.TERMS_ID,1,4) >= 
	                                  --  SELECT 
	                                            SUBSTRING((select MAX(TERMS_ID)
												FROM TERMS
												WHERE 1=1 
											--	and TERM_END_DATE <= GETDATE()-365
												and TERM_END_DATE <= GETDATE()
												AND TERMS_ID LIKE '2%'
												)
												,1,4)
	   and TERMS.TERMS_ID NOT LIKE 'P%'
      AND TERMS.TERMS_ID NOT LIKE '%CE'
      AND TERMS.TERMS_ID NOT LIKE '%CL'
 
 -- and SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7) in ('0003733','0003915','0003917')
										--FROM TERMS 
),

-- GET ALL FUTURE APPLICANTS, WE'LL GET TERM AND PROGRAM LATER AS CAN HAVE MULTIPLE OPEN APPS AND WE ONLY WANT LATEST -- QUESTIONMARK -- 
APPLICANTS AS (
SELECT DISTINCT
   A.APPL_APPLICANT student  
FROM
   APPLICATIONS A,
   APPL_STATUSES AS APPS,
   TERMS T
WHERE
   T.TERM_START_DATE >= GETDATE()
      AND
   A.APPL_START_TERM = T.TERMS_ID
      AND
   A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
      AND
   APPS.POS = 1
    AND APPS.APPL_STATUS NOT IN ('INQO','AAPW','AAPDW')
    -- SELECT DISTINCT APPL_STATUS FROM APPL_STATUSES
	--AND APPS.APPL_STATUS LIKE 'A%'
     -- AND A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
 									
	   and T.TERMS_ID NOT LIKE 'P%'
      AND T.TERMS_ID NOT LIKE '%CE'
      AND T.TERMS_ID NOT LIKE '%CL'
	   AND T.TERMS_ID NOT LIKE '%C2'
 
   AND A.APPL_APPLICANT NOT IN 
   (
      SELECT
         student
      FROM
         STUDENTS_ACTIVE_PROGRAM
   )

	--	and A.APPL_APPLICANT in ('0010044','0081729','0126123','0147189','0218899')

)
,STUDENTS_AND_APPLICANTS as (SELECT nk,student,term FROM STUDENTS_ACTIVE_PROGRAM UNION SELECT null, student,null from APPLICANTS)

--select * from STUDENTS_AND_APPLICANTS
,
-- GETS STUDENTS PRIMARY CODED PROGRAM
PRIMARY_PROGRAM as (SELECT 
    nk,student,term,SUBSTRING(SP.STUDENT_PROGRAMS_ID,9,20) program
	FROM
   STUDENTS_AND_APPLICANTS
      JOIN STUDENT_PROGRAMS SP ON      
         STUDENTS_AND_APPLICANTS.student = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
       --   AND  SP.STPR_ADMIT_STATUS = 'PRIM'  -- select * from STUDENT_PROGRAMS -- select distinct STPR_ADMIT_STATUS from STUDENT_PROGRAMS
         --   AND  SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, LEN(SP.STUDENT_PROGRAMS_ID)) NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN STPR_STATUSES SS ON
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A'      
      LEFT JOIN ACAD_PROGRAMS ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID 
      LEFT OUTER JOIN ACAD_PROGRAMS_LS ON 
         ACAD_PROGRAMS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS_LS.ACAD_PROGRAMS_ID 
            AND 
         ACAD_PROGRAMS_LS.POS = '1' 
),

-- GETS STUDENTS SECONDARY CODED PROGRAM
SECONDARY_PROGRAM as (SELECT 
    nk,student,term,SUBSTRING(SP.STUDENT_PROGRAMS_ID,9,20) program
	FROM
    STUDENTS_AND_APPLICANTS
      JOIN STUDENT_PROGRAMS SP ON      
         STUDENTS_AND_APPLICANTS.student = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
          
       --   AND  SP.STPR_ADMIT_STATUS = 'PRIM'  -- select * from STUDENT_PROGRAMS -- select distinct STPR_ADMIT_STATUS from STUDENT_PROGRAMS
		 -- AND SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, LEN(SP.STUDENT_PROGRAMS_ID)) NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN STPR_STATUSES SS ON
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND
         SS.POS = '1' 
         --  AND SS.STPR_STATUS = 'A'      --select * from STPR_STATUSES  -- select distinct STPR_STATUS from STPR_STATUSES  
      LEFT JOIN ACAD_PROGRAMS ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID 
      LEFT OUTER JOIN ACAD_PROGRAMS_LS ON 
         ACAD_PROGRAMS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS_LS.ACAD_PROGRAMS_ID 
            AND 
         ACAD_PROGRAMS_LS.POS = '1' 
),

-- GETS STUDENTS PROGRAM IN POS ONE
POS_ONE_PROGRAM as (SELECT 
    nk,student,term,SUBSTRING(SP.STUDENT_PROGRAMS_ID,9,20) program
	FROM
    STUDENTS_AND_APPLICANTS
      JOIN STUDENT_PROGRAMS SP ON      
         STUDENTS_AND_APPLICANTS.student = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
         --   AND SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, LEN(SP.STUDENT_PROGRAMS_ID)) NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      LEFT OUTER JOIN STUDENT_PROGRAMS_LS SPL ON -- if multiple programs and not code as prim or secon pull pos 1
         SPL.STUDENT_PROGRAMS_ID = SP.STUDENT_PROGRAMS_ID
            AND
         SPL.POS = 1
      JOIN STPR_STATUSES SS ON
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND
         SS.POS = '1' 
           --  AND SS.STPR_STATUS = 'A'      --select * from STPR_STATUSES  -- select distinct STPR_STATUS from STPR_STATUSES     
      LEFT JOIN ACAD_PROGRAMS ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID 
      LEFT OUTER JOIN ACAD_PROGRAMS_LS ON 
         ACAD_PROGRAMS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS_LS.ACAD_PROGRAMS_ID 
            AND 
         ACAD_PROGRAMS_LS.POS = '1' 
),



-- DID NOT FIND PROGRAM LET LOOK AT LATEST ACC/MOVE APPLICATION
APPLICANT_PROGRAM as (SELECT 
    STUTERM.ID+'$$'+TERMS.TERMS_ID nk,
	student,
	TERMS.TERMS_ID term,
	A.APPL_ACAD_PROGRAM program,
	'T' is_active
	FROM
    STUDENTS_AND_APPLICANTS
      JOIN APPLICATIONS A ON
         A.APPL_APPLICANT = STUDENTS_AND_APPLICANTS.student
          --  AND   A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES APPS ON
         APPS.APPLICATIONS_ID = A.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND APPS.APPL_STATUS NOT IN ('INQO','AAPW','AAPDW')
			--AND APPS.APPL_STATUS like 'A%'
   ,
   (
      SELECT DISTINCT 
         A.APPL_APPLICANT AS ID,
         MAX(DATEDIFF(DAY, '19000101', TERM_START_DATE)) AS TERMSTART
      FROM
         APPLICATIONS A
            JOIN APPL_STATUSES APPS ON
               APPS.APPLICATIONS_ID = A.APPLICATIONS_ID
                  AND
               APPS.POS = 1
                AND APPS.APPL_STATUS NOT IN ('INQO','AAPW','AAPDW')
			--AND APPS.APPL_STATUS like 'A%'
            JOIN TERMS ON
               A.APPL_START_TERM = TERMS.TERMS_ID
      WHERE 1=1        
     --  and   A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      GROUP BY A.APPL_APPLICANT
   ) STUTERM
      JOIN TERMS ON
         STUTERM.TERMSTART = DATEDIFF(DAY, '19000101', TERMS.TERM_START_DATE)
WHERE
   STUDENTS_AND_APPLICANTS.student = STUTERM.ID
      AND
   TERMS.TERMS_ID = A.APPL_START_TERM
     AND
   STUDENTS_AND_APPLICANTS.nk is null)
   ,

   CURRENT_STUDENTS AS (

SELECT
   sa.nk nk,
   sa.student student,
   sa.term term,
   isnull(pp.program, isnull(sp.program, isnull(pop.program, ''))) program,
   'T' is_active
FROM
    STUDENTS_AND_APPLICANTS sa
	left outer join PRIMARY_PROGRAM pp on pp.student = sa.student
	left outer join SECONDARY_PROGRAM sp on sp.student = sa.student
	left outer join POS_ONE_PROGRAM pop on pop.student = sa.student

	WHERE sa.nk is not  null),

ST_TM_BAD_PROGRAM AS (
	SELECT nk,student,term,program,is_active FROM CURRENT_STUDENTS 
	UNION  
	SELECT nk,student,term,program,is_active FROM APPLICANT_PROGRAM 
)

SELECT 
app.nk nk,
app.student student,
app.term term,
REPLACE(req.ACAD_PROGRAM_REQMTS_ID , '*','$$') program,
app.is_active 

FROM ST_TM_BAD_PROGRAM app
LEFT OUTER JOIN ACAD_PROGRAMS acad on acad.ACAD_PROGRAMS_ID = app.program
LEFT OUTER JOIN TERMS t on t.TERMS_ID = app.term
LEFT OUTER JOIN ACAD_PROGRAM_REQMTS req
      ON SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = acad.ACAD_PROGRAMS_ID
WHERE
req.ACAD_PROGRAM_REQMTS_ID = 
(
select top 1 ACAD_PROGRAM_REQMTS_ID
FROM ACAD_PROGRAM_REQMTS
WHERE SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = acad.ACAD_PROGRAMS_ID
AND RIGHT(ACAD_PROGRAM_REQMTS_ID, 4 ) < t.TERM_REPORTING_YEAR
ORDER BY ACAD_PROGRAM_REQMTS_ID desc
)

and t.TERMS_ID NOT LIKE '%CE'
and t.TERMS_ID NOT LIKE 'P%'
and t.TERMS_ID NOT LIKE '%CL'
and t.TERMS_ID NOT LIKE '%C2' 


/*

-- 20170216 removing terms that end in this situation 
 case when TERMS_ID like '%CE' OR TERMS_ID like 'P%'  OR TERMS_ID like '%CL' 
	  OR TERMS_ID like '%C2' 
*/","StudentTerm"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.term","WITH REG_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('RW')
and sfrrsts_ptrm_code IN  ('16','8A')
)

select stvterm_code nk,
          stvterm_desc name,
          stvterm_acyr_code cat_yr,
          -- TODO change this dates
          nvl(to_char(sfrrsts_start_date,'YYYY-MM-DD'),'1900-01-01') registration_start_dt,
          nvl(to_char(sfrrsts_end_date,'YYYY-MM-DD'),'1900-01-02') registration_end_dt,
          to_char(stvterm_start_date,'YYYY-MM-DD') term_start_dt,
          to_char(stvterm_end_date,'YYYY-MM-DD') term_end_dt,
          nvl((select 'F' from dual where substr(stvterm_code,5,2) in ('70','80','90')) ,'T') is_active
  from stvterm
  left join REG_DATES on stvterm_code = sfrrsts_term_code","Terms"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.sectiontime","with section_pop as ( --this is to make sure the sections we select are in line with sections in the Section file.

select section.crse_id || '$$' 
                            || section.strm || '$$'
                            || section.session_code || '$$' 
                            || section.CLASS_SECTION as nk
from PS_CLASS_TBL section
where 1=1
  and section.institution = 'DC279'
  and section.start_dt > sysdate-365 
),

location_pop as (
select
distinct a.facility_id as nk

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('MAIN')
and a.setid = 'DC279'
and a.effdt = (select max(c.effdt) 
                from ps_facility_tbl c 
                where a.facility_id = c.facility_id 
                and a.setid = c.setid) 
),

dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'DC279'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

),

course_pop as (

SELECT o.CRSE_ID
FROM PS_CRSE_OFFER o
WHERE o.EFFDT = (SELECT MAX(EFFDT)
                FROM   PS_CRSE_OFFER
                WHERE  o.CRSE_ID = CRSE_ID)
and o.INSTITUTION = 'DC279'
and o.acad_career = 'CRED'
--and o.acad_org <> 'LCREDIT'
--and o.crse_offer_nbr <> '1'
and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))

)

select distinct
a.crse_id || '$$' || a.strm || '$$' || a.session_code || '$$' --added session code
       || dates.date_diff || '$$' --for uniqueness
       || a.class_section || '$$' 
       || COALESCE(b.Day_of_Week, '') || '$$'
       || a.CLASS_MTG_NBR || '$$'   
       || NVL(TO_CHAR(a.MEETING_TIME_START, 'HH24:MI:SS'), '') || '$$'
       || NVL(TO_CHAR(a.MEETING_TIME_END, 'HH24:MI:SS'), '')        AS NK --unique NK
, a.crse_id || '$$' 
  || a.strm || '$$' 
  || a.session_code || '$$' 
  || dates.date_diff || '$$'
  || a.class_section as section
, CASE b.Day_of_Week 
            WHEN 'U' THEN 1 
            WHEN 'M' THEN 2 
            WHEN 'T' THEN 3 
            WHEN 'W' THEN 4 
            WHEN 'R' THEN 5 
            WHEN 'F' THEN 6 
            WHEN 'S' THEN 7 
           ELSE 8 
          END                                    AS Day_of_Week 
, NVL(TO_CHAR(a.MEETING_TIME_START, 'HH24:MI:SS'), '') as from_tm
, NVL(TO_CHAR(a.MEETING_TIME_END, 'HH24:MI:SS'), '') as to_tm
, facility_id as  \\\""location\\\""
, 'T' as is_active

from (
SELECT a.CRSE_ID, a.CLASS_SECTION, a.CRSE_OFFER_NBR, a.CLASS_MTG_NBR
             , a.STRM
             , a.session_code --added session code
             , a.MON, a.TUES, a.WED, a.THURS, a.FRI, a.SAT, a.SUN
             , a.MEETING_TIME_START, a.MEETING_TIME_END, a.START_DT, a.END_DT
             , b.FACILITY_ID, b.BLDG_CD, b.ROOM
      FROM SYSADM.PS_CLASS_MTG_PAT a
      JOIN SYSADM.PS_FACILITY_TBL b
        ON a.FACILITY_ID = b.FACILITY_ID
      --where a.institution = 'DC279' --and b.institution = 'DC279'
        ) a
left join dates on a.strm = dates.strm --added dates for nk link
          and a.session_code = dates.session_code
inner join (select CRSE_ID, CLASS_SECTION, CRSE_OFFER_NBR, CLASS_MTG_NBR --reordering of data for Day_Of_Week
             , STRM
             , session_code --added session code
             , Day_of_week
             from (select  CRSE_ID, CLASS_SECTION, CRSE_OFFER_NBR, CLASS_MTG_NBR
             , STRM
             , session_code --added session code
             , CASE WHEN MON='Y' then 'M' else 'N' end as MON 
             , CASE WHEN TUES='Y' then 'T' else 'N' end as TUES 
             , CASE WHEN WED='Y' then 'W' else 'N' end as WED 
             , CASE WHEN THURS='Y' then 'R' else 'N' end as THURS 
             , CASE WHEN FRI='Y' then 'F' else 'N' end as FRI 
             , CASE WHEN SAT='Y' then 'S' else 'N' end as SAT 
             , CASE WHEN SUN='Y' then 'U' else 'N' end as SUN
             from SYSADM.PS_CLASS_MTG_PAT
             where CLASS_MTG_NBR = 1 --comment this out for all section times, Nav cannot handle more than location per section currently
             )

            UNPIVOT(Day_of_week FOR sk IN (MON, TUES, WED, THURS, FRI, SAT, SUN)) --unpivor reorder


) b  
ON a.CRSE_ID = b.CRSE_ID
             AND a.STRM = b.STRM
             AND a.CLASS_SECTION = b.CLASS_SECTION
             AND a.CRSE_OFFER_NBR = b.CRSE_OFFER_NBR
             AND a.CLASS_MTG_NBR = b.CLASS_MTG_NBR
where 1=1 
and a.crse_id || '$$' 
    || a.strm || '$$' 
    || a.session_code || '$$' 
    --|| a.date_diff || '$$' --not needed for this population condition
    || a.class_section in (select * from section_pop) --population
and a.facility_id in (select * from location_pop)
and a.crse_id in (select * from course_pop)","SectionTime"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"reg.StudentTestScore","-- Fields: nk,student,test_subject,score,is_active
-- Model Name: cat.StudentTestScore
-- Name: StudentTestScore
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version: pjf4g1
-- Author: James DeBolt
-- Query:

WITH 

validStudents AS (
SELECT DISTINCT
   SUBSTR(PERSON.ID,1,7)  student
FROM COLL_TEST.PERSON
INNER JOIN COLL_TEST.PEOPLE_EMAIL PE
ON PERSON.ID = PE.ID AND PE.PERSON_EMAIL_TYPES IN ('TTC') -- configure per member
INNER JOIN COLL_TEST.PERSON_PIN PP 
ON PERSON.ID = PP.PERSON_PIN_ID),

validTestSubjects AS (
SELECT DISTINCT 
      NON_COURSES_ID nk 
  FROM COLL_TEST.NON_COURSES
    Where NON_COURSES_ID IS NOT NULL  AND 
          NON_COURSES.NCRS_CATEGORY_IDX != 'OTHER'  AND
          NCRS_MAX_SCORE IS NOT NULL
),

validStudentTestScores AS (
SELECT
   validStudents.student||'$$'||STUDENT_NON_COURSES.STNC_NON_COURSE as nk,
   validStudents.student student,
   STUDENT_NON_COURSES.STNC_NON_COURSE AS test_subject,
   CAST(COALESCE(STUDENT_NON_COURSES.STNC_SCORE,0) AS NUMERIC(7,2)) AS score,
   'T' AS is_active
FROM
   validStudents
   JOIN COLL_TEST.STUDENT_NON_COURSES ON validStudents.student = STUDENT_NON_COURSES.STNC_PERSON_ID
   JOIN validTestSubjects ON validTestSubjects.nk = STUDENT_NON_COURSES.STNC_NON_COURSE
WHERE
   TO_CHAR(STUDENT_NON_COURSES.STUDENT_NON_COURSES_ADDDATE, 'YYYY') > TO_CHAR(sysdate, 'YYYY')-3
 AND STUDENT_NON_COURSES.STNC_SCORE = (select max (z.STNC_SCORE)  -- added to get max score for course
                                         from COLL_PRODUCTION.STUDENT_NON_COURSES z
                                         WHERE z.STNC_PERSON_ID = STUDENT_NON_COURSES.STNC_PERSON_ID
                                         AND z.STNC_NON_COURSE = STUDENT_NON_COURSES.STNC_NON_COURSE) 
)
    SELECT * FROM validStudentTestScores","Student Test Score"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.coursetype","Select distinct Ssbsect_Schd_Code as nk
            , Stvschd_Desc as \\\""name\\\""
            , 'T' as is_active
            from ssbsect
            Left Join Stvschd On Ssbsect_Schd_Code = Stvschd_Code","Course Type"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"noah_course","
with inst_courses as (
select distinct  
   a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS course_cd
  , a.scbcrse_subj_code as subject
  , a.scbcrse_crse_numb as course_no
  , NVL(a.SCBCRSE_DEPT_CODE, '0000') AS DEPT --placeholder added to DEPT script  
  , replace(a.SCBCRSE_TITLE,'\\\""','') AS title
  , b.course_type as course_type_cd
  , a.scbcrse_coll_code as college_cd
  , a.scbcrse_credit_hr_low as credit_min
  , a.scbcrse_credit_hr_high as credit_max
FROM (
  SELECT * FROM scbcrse a
  WHERE a.SCBCRSE_EFF_TERM = (  --DEDUPING LOGIC
    SELECT max(SCBCRSE_EFF_TERM)
    FROM scbcrse b 
    WHERE b.scbcrse_subj_code = a.scbcrse_subj_code
      AND b.scbcrse_crse_numb = a.scbcrse_crse_numb
     -- AND B.scbcrse_eff_term >= 201110
      )
--      and a.scbcrse_subj_code = 'NURS'
    ) a
left join (
  select distinct ssbsect_subj_code || ssbsect_crse_numb as course_cd
    , ssbsect_schd_code as course_type
    from ssbsect) b on a.scbcrse_subj_code || a.scbcrse_crse_numb = b.course_cd

WHERE 1=1

 and a.scbcrse_crse_numb not like '%----%' 
 and a.scbcrse_crse_numb not like '%XXX%'
 and scbcrse_csta_code = 'A'
 ),

transfer_courses as (

select distinct 
 shrtrce_subj_code || shrtrce_crse_numb as course_cd
, shrtrce_subj_code as subject
, shrtrce_crse_numb as course_no
, '0000' as dept
, shrtrce_crse_title as title
, 'Transfer' as course_type_code
, '' as college_cd
, shrtrce_credit_hours as credit_min
, shrtrce_credit_hours as credit_max

from shrtrce
ORDER BY 1, 3, 4
)

select * from inst_courses
UNION
select * from transfer_courses
where course_cd not in (select course_cd from inst_courses)","Course"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"inst.Campus","SELECT DISTINCT
  stvcamp_code nk,
  case
    when UPPER(STVCAMP_CODE) = 'J2F' THEN 'Dresden Campus'
    ELSE stvcamp_desc
  end as name,
  'F' is_online,
  CASE
    WHEN UPPER(STVCAMP_CODE) IN ('JB1','15M','JPA','JA3','JDM','J2F') THEN 'T' 
    ELSE 'F'
  END as is_active
FROM stvcamp
 
UNION 

SELECT 
  'INTRNT' nk, 
  'Virtual Learning' name, 
  'T' is_online,
  'T' is_active
FROM dual","Campus"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"inst.Location","-- get building data from Banner
WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
       '' comments,
       CASE WHEN slbbldg_camp_code IN ('A', '1', 'F', 'I', 'O', 'S', 'X') -- GSU 4 Year campuses
            THEN'T'
            ELSE 'F' END is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
                '' comments,
                CASE WHEN slbbldg_camp_code IN ('A', '1', 'F', 'I', 'O', 'S', 'X') -- GSU 4 Year campuses
            THEN'T'
            ELSE 'F' END is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
),

-- Assign default values
defaultValues AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Locations"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"core.advisor","With Advr_Pidm As (
Select Sibinst_Pidm
From Sibinst a
Where Sibinst_Fcst_Code = 'AC'
And Sibinst_Advr_Ind = 'Y'
And Sibinst_Term_Code_Eff = (Select Max(Sibinst_Term_Code_Eff) From Sibinst B Where A.Sibinst_Pidm = B.Sibinst_Pidm)
)

Select Spriden_Id Nk,
       Spriden_Id Username,
               coalesce(( 
                select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'E'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'E'
              and goremal_preferred_ind = 'N'
              ),
               lower(spriden_id) || '@missingemail.org') email,
      Spriden_First_Name First_Name,
      Spriden_Last_Name last_name,
      'T' Is_Active
From Spriden
Where Spriden_Pidm In (Select * From Advr_Pidm)
and spriden_change_ind is null","Advisor"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"core.faculty","/*WITH facultyMaxTerm AS (
SELECT sibinst_pidm facultyPidm
  , sibinst_fstp_code
  , sibinst_fctg_code
  , sibinst_fcst_code
FROM sibinst baseTable
WHERE sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                                FROM sibinst compTable
                                WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                              )
),

-- get campus emails that are active and prefered
email AS (
SELECT goremal_pidm
  , goremal_email_address
FROM goremal
WHERE 1=1
  AND goremal_emal_code = 'ACCD' -- get campus email. Code will change per member. Confrim with BA/Member.
  AND goremal_status_ind = 'A' -- get active emails
  AND goremal_preferred_ind = 'Y' -- get preferred email
),

-- extract faculty data
faculty AS (
SELECT DISTINCT spriden_id AS nk
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
 -- , spriden_id AS username
  ,(SELECT REGEXP_SUBSTR(goremal_email_address,'[^@]+',1,1) FROM goremal where GOREMAL_EMAL_CODE = 'ACCD') as username
  , goremal_email_address AS email
  , '' AS prefix
  , '' AS suffix
  , COALESCE(facultyMaxTerm.sibinst_fstp_code, facultyMaxTerm.sibinst_fctg_code, 'Staff') AS faculty_type -- get first non-null code or assign default value.
  , CASE WHEN stvfcst_active_ind = 'A'
          THEN 'Y'
          ELSE 'N'
          END AS is_active -- Identify active records by evaluating stvfcst_active_ind to be set to 'A'
FROM spriden
  JOIN facultyMaxTerm ON facultyMaxTerm.facultyPidm = spriden_pidm -- Get instructor details
  LEFT JOIN stvfcst ON stvfcst_code = facultyMaxTerm.sibinst_fcst_code
  LEFT JOIN email ON email.goremal_pidm = spriden_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent faculty record is extracted
)

-- Wrapper query
SELECT * FROM faculty*/


WITH facultyMaxTerm AS (
SELECT sibinst_pidm facultyPidm
  , sibinst_fstp_code
  , sibinst_fctg_code
  , sibinst_fcst_code
FROM sibinst baseTable
WHERE sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                                FROM sibinst compTable
                                WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                              )
),

-- get campus emails that are active and prefered
email AS (
SELECT goremal_pidm
, goremal_emal_code
  , goremal_email_address
FROM goremal
WHERE 1=1
  AND goremal_emal_code = 'ACCD' -- get campus email. Code will change per member. Confrim with BA/Member.
  AND goremal_status_ind = 'A' -- get active emails
  AND goremal_preferred_ind = 'Y' -- get preferred email
),
faculty AS (
SELECT DISTINCT spriden_id AS nk
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  --, spriden_id AS username
  ,CASE WHEN GOREMAL_EMAL_CODE = 'ACCD' THEN REGEXP_SUBSTR(goremal_email_address,'[^@]+',1,1) ELSE spriden_id end as username
  , goremal_email_address AS email
  , '' AS prefix
  , '' AS suffix
  , COALESCE(facultyMaxTerm.sibinst_fstp_code, facultyMaxTerm.sibinst_fctg_code, 'Staff') AS faculty_type -- get first non-null code or assign default value.
  , CASE WHEN stvfcst_active_ind = 'A'
          THEN 'Y'
          ELSE 'N'
          END AS is_active -- Identify active records by evaluating stvfcst_active_ind to be set to 'A'
FROM spriden
  JOIN facultyMaxTerm ON facultyMaxTerm.facultyPidm = spriden_pidm -- Get instructor details
  LEFT JOIN stvfcst ON stvfcst_code = facultyMaxTerm.sibinst_fcst_code
  LEFT JOIN email ON email.goremal_pidm = spriden_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent faculty record is extracted
  AND GOREMAL_EMAIL_address LIKE '%@alamo%' 
)

-- Wrapper query
SELECT * FROM faculty
","Faculty"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"noah_studentexam","WITH population AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 30
ORDER BY 1 desc)
)

))


SELECT spriden.SPRIDEN_ID                          AS STUDENT_ID 
       , nvl(SORTEST_TESC_CODE,'NA')                  AS EXAM_CD 
       , c.STVTESC_DESC                               AS EXAM_DESC 
       , nvl(SORTEST_TESC_CODE,'NA')                  AS EXAM_SUBJECT_CD 
       , a.SORTEST_TEST_SCORE                         AS EXAM_SCORE 
       , TO_CHAR(a.SORTEST_TEST_DATE, 'yyyymmdd')     AS EXAM_DATE 
       , c.STVTESC_MIN_VALUE                          AS EXAM_MIN_SCORE 
       , c.STVTESC_MAX_VALUE                          AS EXAM_MAX_SCORE 
       
		 
FROM  population 
	     JOIN SPRIDEN on spriden_pidm = population.pidm
       JOIN SORTEST a 
         ON a.SORTEST_PIDM = population.PIDM 
		 
       JOIN STVTESC c 
         ON a.SORTEST_TESC_CODE = c.STVTESC_CODE 
		 
ORDER  BY 1 ","Student Exam"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"inst.Campus","WITH campus AS (
SELECT DISTINCT stvcamp_code nk
                , stvcamp_desc \\\""name\\\""
                , CASE WHEN stvcamp_code = 'O' -- Logic to identify online campuses. Confirm with BA.
                			THEN 'T'
                			ELSE 'F' END is_online
                , 'T' is_active
FROM stvcamp
where stvcamp_code in ('1','7','8','9','3','5','0')
),

-- Assign default values
defaultValues AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM campus
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Campus"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.SeatsAvail","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
),

COURSES_TEMP AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk 
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
 --       APPROVAL_STATUS.CRS_STATUS = 'A'
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
        COURSES.CRS_MIN_CRED > 0 
		AND CRS_ACAD_LEVEL = 'UG'
       AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
		--	 AND CRS_DEPTS IN (SELECT DISTINCT DEPTS_ID
		--							 FROM    DEPTS
		--							 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A')
),

SEC_LIST AS 
(
SELECT distinct SEC_TERM+'-'+SEC_NAME nk
  FROM COURSE_SECTIONS LEFT OUTER JOIN COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1'
  LEFT JOIN COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
	 LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
  WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST) AND COURSES.CRS_NAME IN (SELECT * FROM COURSES_TEMP))

SELECT CS_TERM+'-'+CS_NAME AS nk,
       CASE
         WHEN CS_CAPACITY - CS_COUNT_ACTIVE_STUDENTS >= 0 THEN CS_CAPACITY - CS_COUNT_ACTIVE_STUDENTS
         ELSE 0
       END AS avail_seats,
       CASE
         WHEN CS_STATUS = 'A' THEN 'Y'
         ELSE 'N'
       END AS is_active
  FROM COURSE_SECTIONS_DETAILS_VIEW
 WHERE CS_TERM+'-'+CS_NAME IN (SELECT * FROM SEC_LIST)","SeatsAvailable"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"catcc.TestSubject","WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
          THEN TO_NUMBER(stvtesc_max_value) || '.00'
          ELSE stvtesc_max_value
          END AS max_score
  , 'T' AS is_active
FROM stvtesc
WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')
)

-- wrapper query
SELECT * FROM testSubjects","TestSubjects"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"core.Student","-- Fields  nk,username,email,first_name,last_name,birthdate,is_active
-- Model Name  core.Student
-- Name  Student
-- Output  Student_{data DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.1.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','KV','KO')
/*
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
*/
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , spriden_id AS username
  , TRIM(COALESCE(
                (SELECT goremal_email_address FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' 
																--	AND goremal_preferred_ind = 'Y' 
																	AND goremal_emal_code = 'STUE' -- try to get campus email. Confirm goremal_emal_code with BA/Member.
                )
                , (SELECT goremal_email_address FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A'
																	--AND goremal_preferred_ind = 'Y' 
																	AND goremal_emal_code = 'FACU' -- try to get Personal email. Confirm goremal_emal_code with BA/Member.
                  )
                , (SELECT goremal_email_address FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' 
													--AND goremal_preferred_ind = 'N'
														AND goremal_emal_code = 'BUS' -- try to get campus email even if goremal_preferred_ind set to 'N'. Confirm goremal_emal_code with BA/Member.
                  )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student
order by 1


--  Notes  DATA examples nk = 'W00073598',
--                          username = 'W00073598'
--
-- Change log
--        Developer Doug Menezes
--        Change version Nav.1.1.0 04122016
--        Description: Updated getLastXTerms logic to match with studentCourse","Student"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.StudentCourse","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') <= TRUNC(sysdate, 'YYYY')-2*365
   and substr(college, 0, 1) = 'C'
 order by nk desc),

cur_stu as (
select distinct id as stu_id,
       academic_period as term_code
  from eab_stdnt_active
 where current_enroll_pc = 'Y'
   and academic_period in (select nk from cur_terms)
)

select distinct
  a.nk nk,
  student,
  a.term term,
  case
    when instr(course, '$$') > 0 then substr(course, 0, instr(course, '$$')-1)
    else course
  end course,
  a.section section,
  grade_cd,
  grade_points,
  credits_attempted,
  credits_earned,
  replace(a.status, '-', '_') status,
  CASE 
    WHEN a.is_active = 'Y' THEN 'T'
    ELSE 'F'
  END as is_active
  FROM EAB_STDNT_COURSE a LEFT JOIN EAB_CRSE b on a.course = b.nk and a.term = b.term
  join (select * from cur_stu) c on c.term_code = a.academic_period and c.stu_id = a.student
 where b.college = 'CC'
   and a.current_enroll_cc = 'Y'","Student Course B"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.Department","SELECT 
  stvdept_code nk, 
  stvdept_desc name,
  'T' is_active
FROM stvdept","Department"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.Course","-- Fields	nk,cd,level,subject,dept,title,desc,course_type,credits,is_active
-- ModelName	cat.Course
-- Name		Course
-- Output	Course_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE WHEN scbcrse.scbcrse_csta_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active. This may be member specific. Confirm code with BA/Member.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM course
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Courses"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.Course","/*
Wallace wants to revise the criteria for the is_active field  in cat.course. Wallace has only started using SCBCRSE_CSTA_CODE starting this term to denote whether a course is active. As a proxy, they have asked that we consider a course active if it satisfies the following criteria:
 
* CASE WHEN SCBCRSE_CSTA_CODE = 'A' --and a.scbcrse_eff_term >= 201010; AND
* There's at least one section for this course in the previous 3 terms, or in current term, or one term ahead
*/
 
WITH get_last_and_next_terms as (
  SELECT * from (
        select stvterm_code from stvterm where stvterm_code <=
                                    (select min(stvterm_code) as stvterm_code
                                    from stvterm
                                    where stvterm_start_date > sysdate
                                    and stvterm_code not like '%5' -- want terms to end in 10 20 30, term descriptions are 10 is fall of previous year, 20 is spring of that year, 30 is summer of that year, ending in 5 are CE or winter                                                                                                                                                                                                                    -- LH is the current term included or duplicated?
                                    )
                                    and stvterm_code not like '%5'
                            order by stvterm_code desc)   
                            where rownum < 6
        
),
 
active_courses as (
select distinct scbcrse_subj_code, scbcrse_crse_numb-- LH note: distinct included because section level means many duplicates
from ssbsect
-- and scbcrse_eff_term >= 201010 -- LH note: want to follow-up that courses will have been updated within 6 years, or would be left out
join scbcrse 
on scbcrse_crse_numb = ssbsect_crse_numb
and scbcrse_subj_code = ssbsect_subj_code
where ssbsect_term_code in (select stvterm_code from get_last_and_next_terms)
),
 
 
courses as (
select distinct 
  a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS NK
  , a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS CD
  , decode(SCRATTR_ATTR_CODE, 'ZZZ','0','1') AS \\\""LEVEL\\\""  --LH NOTE
  , a.SCBCRSE_SUBJ_CODE AS SUBJECT
  , nvl(scbcrse_dept_code, '0000') AS DEPT --placeholder added to DEPT script
  , SUBSTR(SCBCRSE_TITLE,1,100) AS title
  , CASE WHEN SCBDESC_TEXT_NARRATIVE LIKE '%COREQUISITE: %'
            THEN dbms_lob.substr(LTRIM(REPLACE(text_table.SCBDESC_TEXT_NARRATIVE, 'COREQUISITE: ', '')),3000)
        WHEN SCBDESC_TEXT_NARRATIVE LIKE '%PREQUISITE: %'
            THEN dbms_lob.substr(LTRIM(REPLACE(text_table.SCBDESC_TEXT_NARRATIVE, 'PREQUISITE: ', '')),3000)
        WHEN SCBDESC_TEXT_NARRATIVE LIKE '%PREREQUISITE: %'
            THEN dbms_lob.substr(LTRIM(REPLACE(text_table.SCBDESC_TEXT_NARRATIVE, 'PREREQUISITE: ', '')),3000)
        WHEN SCBDESC_TEXT_NARRATIVE LIKE '%PREREQUISITES: %'
            THEN dbms_lob.substr(LTRIM(REPLACE(text_table.SCBDESC_TEXT_NARRATIVE, 'PREREQUISITES: ', '')),3000)
        ELSE dbms_lob.substr(text_table.SCBDESC_TEXT_NARRATIVE,3000)
    END AS \\\""desc\\\"" 
  , ssbsect_schd_code AS course_type
  , CASE
    WHEN a.scbcrse_credit_hr_ind IS NULL THEN a.scbcrse_credit_hr_low
    ELSE a.scbcrse_credit_hr_high
  END AS CREDITS  
 ,CASE 
   WHEN a.SCBCRSE_CSTA_CODE = 'A'                                     -- scbcrse.scbcrse_crse_numb = shrtckn.shrtckn_crse_numb
        AND a.scbcrse_subj_code||a.scbcrse_crse_numb in (select scbcrse_subj_code||scbcrse_crse_numb from active_courses) -- ""and course_id in (select course_id from active_courses)"" should I use select scbcrse_numb instead?
            THEN 'T' 
   ELSE 'F' 
  END AS IS_ACTIVE                        -- LH replace case statement with , case when CSTA_IND = 'A' and course_id in (select course_id from active_courses) then 'T' else 'F'
FROM (
  SELECT a.SCBCRSE_EFF_TERM,a.scbcrse_coll_code, a.scbcrse_dept_code, a.scbcrse_subj_code, a.scbcrse_crse_numb, a.scbcrse_credit_hr_low, scbcrse_credit_hr_ind
    , a.scbcrse_credit_hr_high, a.SCBCRSE_CIPC_CODE, a.scbcrse_csta_code, a.SCBCRSE_TITLE, a.scbcrse_divs_code,a.scbcrse_data_origin,a.scbcrse_repeat_limit,a.scbcrse_reps_code
  FROM scbcrse a
  WHERE a.SCBCRSE_EFF_TERM = (  --DEDUPING LOGIC
    SELECT max(SCBCRSE_EFF_TERM)
    FROM scbcrse b
    WHERE b.scbcrse_subj_code = a.scbcrse_subj_code
      AND b.scbcrse_crse_numb = a.scbcrse_crse_numb
     -- AND B.scbcrse_eff_term >= 201110
      )
--      and a.scbcrse_subj_code = 'NURS'
    ) a
               left join(select scbdesc_subj_code, scbdesc_crse_numb, scbdesc_term_code_eff, SCBDESC_TEXT_NARRATIVE
                      from scbdesc text
                     where scbdesc_term_code_eff = (select max(scbdesc_term_code_eff)
                      from scbdesc
                      where scbdesc_subj_code = text.scbdesc_subj_code
                      and scbdesc_crse_numb = text.scbdesc_crse_numb)
                      order by 3 desc) text_table
            
             on SCBDESC_SUBJ_CODE = scbcrse_subj_code
                and scbdesc_crse_numb = scbcrse_crse_numb
  
    LEFT JOIN  SCRATTR c ON a.SCBCRSE_EFF_TERM = c.SCRATTR_EFF_TERM
  AND a.SCBCRSE_SUBJ_CODE = c.SCRATTR_SUBJ_CODE AND a.SCBCRSE_CRSE_NUMB = c.SCRATTR_CRSE_NUMB
 
                LEFT JOIN SCRLEVL on scbcrse_subj_code = scrlevl_subj_code
                                                and scbcrse_crse_numb = scrlevl_crse_numb
                                                --and scbcrse_eff_term = scrlevl_eff_term
  left join (select distinct ssbsect_crse_numb,ssbsect_subj_code, ssbsect_schd_code
            from ssbsect where ssbsect_camp_code = 'M' and ssbsect_term_Code >= '200510')
        on scbcrse_subj_code = ssbsect_subj_code
      and scbcrse_crse_numb = ssbsect_crse_numb
WHERE 1=1
--and scrlevl_levl_code = 'NC' -- Confirm with BA
 
UNION -- Extract external (transfer) courses fom shrtckn
SELECT distinct
  shrtckn_subj_code || shrtckn_crse_numb AS nk
  , shrtckn_subj_code || shrtckn_crse_numb AS cd
  , '1' AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , shrtckn_crse_title AS title
  , shrtckn_crse_title AS \\\""desc\\\""
  , 'TRFR' AS course_type
  , 0 AS credits
  , 'F' AS is_active
  FROM shrtckn
    WHERE NOT EXISTS (SELECT 1
                      FROM scbcrse
                        WHERE scbcrse.scbcrse_subj_code = shrtckn.shrtckn_subj_code
                          AND scbcrse.scbcrse_crse_numb = shrtckn.shrtckn_crse_numb
                      )
 
UNION
 
Select 'UNKNOWN' as NK
, 'UNKNOWN' as CD
, '1' as \\\""LEVEL\\\""
, 'DEFAULT' as subject
, '0000' as dept
, 'UNKNOWN' as title
, '' as \\\""desc\\\""
, '' as course_type
, 0 as creditsl
, 'T' as is_active
from dual
ORDER BY 1, 3, 4
 
)
 
select * from courses;
","Course"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"core.FacultyType","Select Stvfstp_Code As Nk,
  Stvfstp_Code As \\\""type\\\"",
  stvfstp_desc as description
  From Stvfstp
Union
Select Stvfctg_Code As Nk,
Stvfctg_Code As \\\""type\\\"",
Stvfctg_Desc As Description
from stvfctg
union 
select 'Staff' as Nk,
'Staff' as \\\""type\\\"",
'Staff' as Description
from dual
 Order By 1","Faculty Type"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"SSF_advisor","select advisor_id,
advisor_first_name,
advisor_last_name,
advisor_email,
active_flag,
sso_id
 from atlantatech.osf_sf_staff","SSF_advisor"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Subject","-- get subject data from Banner  
WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",  
  DECODE(STVSUBJ_DISP_WEB_IND, 'Y', 'T',
                               'N', 'F') is_active
FROM stvsubj 
WHERE LENGTH(stvsubj_CODE) = 3
),

-- Assign default values
defaultValues AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM subject
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Subjects"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.studentcourse","WITH POP AS (
select sorlcur_pidm pidm
from sorlcur tbl
where 1=1
and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
and sorlcur_cact_code = 'ACTIVE'
and sorlcur_priority_no = (select min(sorlcur_priority_no)
                           from sorlcur
                           where sorlcur_camp_code = 'NCC'
                           and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                           and sorlcur_cact_code = 'ACTIVE'
                           and sorlcur_term_code_end is null
                           and sorlcur_pidm = tbl.sorlcur_pidm
                           and sorlcur_term_code in (select distinct term from (


                                                      SELECT STVTERM_CODE term FROM STVTERM
                                                      WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                              FROM stvterm 
                                                                              where sysdate < stvterm_start_date 
                                                                              
                                                                              and(stvterm_code like '%10' 
                                                                              or stvterm_code like '%20' 
                                                                              or stvterm_code like '%30')
                                                                            )
                                                      and (stvterm_code like '%10' 
                                                            or stvterm_code like '%20' 
                                                            or stvterm_code like '%30')
                                                      and rownum < 5
                                                      ORDER BY 1 desc))

                          )
and sorlcur_term_code_end is null
and sorlcur_camp_code = 'NCC'
and sorlcur_term_code = (select max(sorlcur_term_code)
                          from sorlcur
                          where sorlcur_pidm = tbl.sorlcur_pidm
                          and sorlcur_camp_code = 'NCC'
                          and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                          and sorlcur_cact_code = 'ACTIVE'
                          and sorlcur_term_code_end is null
                          and sorlcur_priority_no = (select min(sorlcur_priority_no)
                                                      from sorlcur
                                                      where sorlcur_camp_code = 'NCC'
                                                      and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                                                      and sorlcur_cact_code = 'ACTIVE'
                                                      and sorlcur_term_code_end is null
                                                      and sorlcur_pidm = tbl.sorlcur_pidm
                                                      and sorlcur_term_code in (

                                                        select distinct term from (
                                                            SELECT STVTERM_CODE term FROM STVTERM
                                                            WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                                                    FROM stvterm 
                                                                                                    where sysdate < stvterm_start_date 
                                                                                                    --and sysdate <= stvterm_end_date
                                                                                                    and (stvterm_code like '%10' 
                                                                                                    or stvterm_code like '%20' 
                                                                                                    or stvterm_code like '%30')
                                                                                                    )
                                                                              and (stvterm_code like '%10' 
                                                                                  or stvterm_code like '%20' 
                                                                                  or stvterm_code like '%30')
                                                                              and rownum < 5
                                                                              ORDER BY 1 desc))
                                                    )
                          and sorlcur_term_code in ( select distinct term from (
                                                  SELECT STVTERM_CODE term FROM STVTERM
                                                  WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                          FROM stvterm 
                                                                          where sysdate < stvterm_start_date 
                                                                          --and sysdate <= stvterm_end_date
                                                                          and(stvterm_code like '%10' 
                                                                           or stvterm_code like '%20' 
                                                                           or stvterm_code like '%30')
                                                                        )
                                                  and (stvterm_code like '%10' 
                                                   or stvterm_code like '%20' 
                                                   or stvterm_code like '%30')
                                                  and rownum < 5
                                                  ORDER BY 1 desc))
                        )
)
,

audit_bank as (
select a.pidm,a.term,a.audit_record,b.course_record from (
select 
        distinct sfrstca_pidm as pidm,
         sfrstca_crn as crn,
       sfrstca_term_code term,
       ssbsect_subj_code || ssbsect_crse_numb as audit_record

from sfrstca
left join ssbsect 
on ssbsect_crn = sfrstca_crn 
  and ssbsect_term_code = sfrstca_term_code
 ) a 
left join (
select distinct sfrstcr_pidm pidm, 
      sfrstcr_crn crn,
      sfrstcr_term_code term, 
      ssbsect_subj_code || ssbsect_crse_numb as course_record
from sfrstcr
left join ssbsect
on ssbsect_crn = sfrstcr_crn
) b
on a.pidm = b.pidm
and a.audit_record = b.course_record
and a.term = b.term
where b.course_record is null
order by 1,2,3

)


select  
       spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || ssbsect_crse_numb  as NK,
       spriden_id Student,
       stvterm_code term,
       ssbsect_subj_code || ssbsect_crse_numb course,
       nvl(
            (
              select SSBSECT_CRN  || '$$' || SSBSECT_TERM_CODE
              from ssbsect
              where ssbsect_crn = sfrstcr_crn and ssbsect_term_code = sfrstcr_term_code
            ),
            'UNKNOWN'
          ) as Section,
       sfrstcr_grde_code grade_cd, 
       --null grade_points,
       nvl(sfrstcr_credit_hr, 0) as Credits_Attemtped,
       0 as Credits_Earned  --we should look into if it is possible to have a 'COMPLETED' course in this table
      -- registration logic edits - checking for only properly registered courses
      --[INST_CONFIG]
       , case 
          when sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and stvterm_start_date > sysdate then 'REGISTERED'
          when sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and stvterm_start_date <= sysdate and stvterm_end_date > sysdate then 'IN_PROGRESS'
          when sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code in ('A','A-','B%','C%','D%','P') then 'COMPLETED'
          else 'UNKNOWN' end
          STATUS, 
          
          -- Add a grade variable column that maps letter grades to points...
          CASE 
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code = 'A' THEN 4.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code = 'A-' THEN 3.5
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code like 'B%' THEN 3.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code like 'C%' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code like 'D%' THEN 1.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code IS NULL THEN 0.0
          ELSE 0.0
          END as grade_points,
          'T' as is_active

  -- Why are we using the cartesian product here? Should try to use an explicit 
  -- inner join here instead of the implicit cross join. 
  from ( select null p_term, '' p_id, 'N' p_history, 'N' p_current from dual ),     
     spriden, 
     sfrstcr,
     stvterm, 
     stvrsts, 
     ssbsect, 
     scbcrse,
     sobptrm
where --spriden_id = p_id  and
   spriden_change_ind is null 
  and stvterm_code = sfrstcr_term_code --join
  and sfrstcr_pidm = spriden_pidm --join
  and sfrstcr_term_code = nvl(p_term, sfrstcr_term_code) --this seems surperfluous - is it here just to account for bad data?
  and ssbsect_crn = sfrstcr_crn --join
  and scbcrse_subj_code = ssbsect_subj_code --join
  and ssbsect_term_code = sfrstcr_term_code --join
  and scbcrse_crse_numb = ssbsect_crse_numb --join
  and scbcrse_eff_term = ( select max(scbcrse_eff_term) 
                             from scbcrse 
                            where scbcrse_crse_numb = ssbsect_crse_numb 
                              and scbcrse_subj_code = ssbsect_subj_code 
                              and scbcrse_eff_term <= ssbsect_term_code ) 
  and sfrstcr_rsts_code = stvrsts_code --join
  and ( stvrsts_wait_ind = 'Y' or ( stvrsts_incl_sect_enrl = 'Y' and stvrsts_withdraw_ind = 'N' ) )
  and sobptrm_ptrm_code = ssbsect_ptrm_code --join, parts of term
  and sobptrm_term_code = ssbsect_term_code --join, entire term
  and ( p_current = 'N' or stvterm_start_date <= sysdate )  --p_current is always set to 'N'

-- If course is graded, do not include sfrstcr
  and not exists ( select 'Y' from shrtckn 
                    where shrtckn_crn = sfrstcr_crn 
                      and shrtckn_term_code = sfrstcr_term_code 
                     and shrtckn_pidm = sfrstcr_pidm) 
 and spriden_pidm in (select * from pop)

UNION

select
      spriden_id|| '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code|| shrtckn_crse_numb  as NK,
      spriden_id as Student,
      stvterm_code as term,
      shrtckn_subj_code|| shrtckn_crse_numb as course_cd,
      nvl((select SSBSECT_CRN || '$$' || SSBSECT_TERM_CODE
        from ssbsect
        where ssbsect_crn = shrtckn_crn and ssbsect_term_code = shrtckn_term_code),'UNKNOWN') as Section, --check to see if section exists
      shrtckg_grde_code_final as grade_cd,
      --'' as grade_points,
      nvl(SHRTCKG_HOURS_ATTEMPTED, 0) as CreditsAttemtped,
      case
       when shrtckg_grde_code_final in ('A','A-','B%','C%','D%','P') then
       nvl(SHRTCKG_HOURS_ATTEMPTED,0) else 0 end as CreditsEarned,
      --shrtckn_crn,
       --checking against proper grades for a completed course
       --[INST_CONFIG] change per institution
       case
       when shrtckg_grde_code_final in ('A','A-','B%','C%','D%','P') then 'COMPLETED' 
          else 'UNKNOWN' end Status,
       CASE 
         WHEN shrtckg_grde_code_final = 'A' THEN 4.0 
         WHEN shrtckg_grde_code_final = 'B' THEN 3.0
         WHEN shrtckg_grde_code_final = 'C' THEN 2.0
         WHEN shrtckg_grde_code_final = 'D*' THEN 1.0
         WHEN shrtckg_grde_code_final = 'S' THEN 2.0
         WHEN shrtckg_grde_code_final = 'PA' THEN 2.0
         WHEN shrtckg_grde_code_final = 'CR' THEN 2.0
         WHEN shrtckg_grde_code_final IS NULL THEN 0.0
        ELSE 0.0
       END as grade_points,

       'T' as is_active
from spriden
join shrtckn on spriden_pidm = shrtckn_pidm
join stvterm on stvterm_code = shrtckn_term_code
join shrtckg on spriden_pidm = shrtckg_pidm and shrtckn_pidm = shrtckg_pidm and shrtckg_tckn_seq_no = shrtckn_seq_no and shrtckg_term_code = shrtckn_term_code 

where  shrtckg_seq_no = ( select max(shrtckg_seq_no) from shrtckg 
                          where shrtckg_pidm = spriden_pidm 
                          --and shrtckg_term_code = ssbsect_term_code     --not necessary to go to ssbsect table
                          and shrtckg_tckn_seq_no = shrtckn_seq_no ) 
  and spriden_change_ind is null
  and spriden_pidm in (select * from pop)

UNION

select spriden_id || '$$' || audit_bank.term || '$$' || audit_bank.audit_record as NK,
       spriden_id Student,
       audit_bank.term term,
        audit_bank.audit_record course,
       '' as section,
       '' as grade_cd,
       0 as Credits_Attemtped,
       0 as Credits_Earned,
       'UNKNOWN' as status,
       0.0 as grade_points,
       'T' as is_active
from audit_bank
left join spriden on spriden_pidm = audit_bank.pidm
--left join ssbsect on ssbsect_crn = audit_bank.crn
where audit_bank.pidm in (select * from pop)
--audit_bank.pidm in (select * from pilot_pop)
and audit_bank.term >= 201610
and spriden_change_ind is null

order by 2,3,4","student course"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.EnrollmentApplication","-- cat.EnrollmentApplication
SELECT DISTINCT A.EMPLID as nk,
                A.EMPLID as student,
                (select min(strm)
                   from (SELECT STRM, Min(term_begin_DT) AS term_begin_DT
                          FROM PS_TERM_TBL 
                         WHERE ACAD_CAREER IN ('CRED') 
                           and INSTITUTION = 'TN293'
                           and term_begin_DT > A.ADM_APPL_DT
                         GROUP BY STRM)) as app_term,
                A.ADM_APPL_NBR as app_number,
                TO_CHAR(A.ADM_APPL_DT,'YYYY-MM-DD') as app_dt,
                COALESCE(C.EMAIL_ADDR,F.EMAIL_ADDR,A.EMPLID||'@missing.tulsacc.edu') as personal_email,
                'Y' AS is_active
  FROM 	PS_ADM_APPL_DATA A
  		, PS_EMAIL_ADDRESSES F
 		  , PS_NAMES_VW E
  		, PS_INSTITUTION_TBL B
  		, PS_EMAIL_ADDRESSES C 
   WHERE ( A.INSTITUTION = 'TN293'
     AND A.ACAD_CAREER = 'CRED'
     AND A.ADM_APPL_DT >= TO_DATE('2016-06-01','YYYY-MM-DD')
     AND F.E_ADDR_TYPE = 'VCCS' 
     AND A.EMPLID = F.EMPLID 
     AND A.EMPLID = E.EMPLID 
     AND E.NAME_TYPE = 'PRI' 
     AND B.INSTITUTION = A.INSTITUTION 
     AND B.EFFDT = 
        (SELECT MAX(B_ED.EFFDT) 
           FROM PS_INSTITUTION_TBL B_ED 
          WHERE B.INSTITUTION = B_ED.INSTITUTION 
            AND B_ED.EFFDT <= SYSDATE)
     AND A.EMPLID =  C.EMPLID(+) 
     AND C.E_ADDR_TYPE(+) = 'OTHR' ) 
  ORDER BY 4, 3","EnrollmentApplication"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.EnrollmentApplication","with studentPopulation AS (
select  saradap_pidm AS pidm,
        saradap_term_code_entry AS term,
        saradap_appl_no AS appl_no
from saradap
where saradap_term_code_entry in 
      (        
      select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE >= (
                      
                      SELECT MAX(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date < sysdate
                                )
                      )
      )
),

studentMaxTerm AS (
SELECT pidm AS pidm
  , MAX(term) AS maxTerm
  , MAX (appl_no) AS maxApplNo
FROM studentPopulation
  GROUP BY pidm
),

email_list as (
  select goremal_pidm as pidm,
         coalesce(
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'IND' and rownum = 1),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'GSU' and rownum = 1),
          ''
         ) as email
    from goremal g
),

enrollmentApplication as (
select DISTINCT spriden_id as nk,
       spriden_id as student,
       studentMaxTerm.maxTerm as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       TRIM(email_list.email) as personal_email,
       case
        when saradap_term_code_entry is not null then 'T'
        else 'F'
       end as is_active
  from saradap
    join studentMaxTerm on saradap_pidm = studentMaxTerm.pidm
                              and saradap_term_code_entry = studentMaxTerm.maxTerm
                              and saradap_appl_no = studentMaxTerm.maxApplNo
    join spriden on saradap_pidm = spriden_pidm
    left join email_list on saradap_pidm = email_list.pidm
  where spriden_change_ind is NULL
    and spriden_entity_ind = 'P'
    and saradap_levl_code = 'UA' -- filter only GSU students
)

select  *
  from enrollmentApplication","Enrollment Application"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.SeatsAvail","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
),

COURSES_TEMP AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk 
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
 --       APPROVAL_STATUS.CRS_STATUS = 'A'
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
        COURSES.CRS_MIN_CRED > 0 
		AND CRS_ACAD_LEVEL = 'UG'
       AND CRS_NO <> '999' AND CRS_NO <> '998' AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
			 AND CRS_DEPTS IN (SELECT DISTINCT DEPTS_ID
									 FROM    DEPTS
									 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A')
),

SEC_LIST AS 
(
SELECT distinct SEC_TERM+'-'+SEC_NAME nk
  FROM COURSE_SECTIONS LEFT OUTER JOIN COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1'
  LEFT JOIN COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
	 LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
  WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST) AND COURSES.CRS_NAME IN (SELECT * FROM COURSES_TEMP))

SELECT CS_TERM+'-'+CS_NAME AS nk,
       CASE
         WHEN CS_CAPACITY - CS_COUNT_STUDENTS >= 0 THEN CS_CAPACITY - CS_COUNT_STUDENTS
         ELSE 0
       END AS avail_seats,
       CASE
         WHEN CS_STATUS = 'A' THEN 'Y'
         ELSE 'N'
       END AS is_active
  FROM COURSE_SECTIONS_DETAILS_VIEW
 WHERE CS_TERM+'-'+CS_NAME IN (SELECT * FROM SEC_LIST)","SeatsAvailable"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.EnrollmentApplication","with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),
term_list as (
  SELECT STVTERM_CODE term
    FROM STVTERM
   where STVTERM_CODE <= (Select min(Stvterm_Code)
                            From Stvterm 
                           where sysdate < stvterm_start_date)
     and stvterm_code not in ('000000','999999')
     and rownum < 5
   order by 1 desc
),
pop as (
  select distinct s.saradap_pidm as pidm, esa.id as student_id
    from saradap s join eab_stdnt_active esa on s.saradap_pidm = esa.person_uid
                                            and esa.current_enroll_cc = 'Y'
   where s.saradap_term_code_entry in (select * from term_list)
),
app_list as (
select p.student_id as nk,
       p.student_id as student,
       saradap_term_code_entry as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       case
        when ml.max_term is not null then 'T'
        else 'F'
       end as is_active
  from saradap left join max_list ml on saradap_pidm = ml.pidm
                                    and saradap_term_code_entry = ml.max_term
               left join pop p on saradap_pidm = p.pidm
 where saradap_term_code_entry in (select term from term_list)
   and p.student_id is not null
)
select nk, student, app_term, app_number, app_dt, is_active
  from app_list","Enrollment Application"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"core.Advisor","-- compute max term advisor record
WITH advisorMaxTerm AS (
SELECT sibinst_pidm
FROM sibinst baseTable
WHERE sibinst_fcst_code = 'AC'
  AND sibinst_advr_ind = 'Y'
  AND sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                              FROM sibinst compTable
                              WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                                    AND sibinst_vpdi_code = 'PCC'
                              )
   AND sibinst_vpdi_code = 'PCC'
),

-- extract advisor data
\\\""advisor\\\"" AS (
SELECT spriden_id AS nk
  , spriden_id AS username
  , COALESCE((SELECT goremal_email_address
              FROM goremal
                WHERE goremal_pidm = spriden_pidm AND goremal_preferred_ind = 'Y' AND GOREMAL_EMAIL_ADDRESS like '%pueblocc.edu' AND ROWNUM = 1) -- try to get campus email if active and preferred. Confirm email_code with BA/Member.
              , (SELECT goremal_email_address
                FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND GOREMAL_EMAL_CODE = 'PAY' AND GOREMAL_EMAIL_ADDRESS like '%pueblocc.edu' AND ROWNUM = 1) -- try to get campus email if active and not preferred. Confirm email_code with BA/Member.
              ,
              (SELECT goremal_email_address
                FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND GOREMAL_EMAL_CODE = 'WORK' AND GOREMAL_EMAIL_ADDRESS like '%pueblocc.edu' AND ROWNUM = 1) -- try to get campus email if active and not preferred. Confirm email_code with BA/Member.
              
              , LOWER(spriden_id) || '@missingemail.org') AS email -- Set default email address if none above are available.
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , 'T' AS is_active
FROM spriden
JOIN advisorMaxTerm ON advisorMaxTerm.sibinst_pidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent advisor record is extracted
)

-- Wrapper query
SELECT * FROM \\\""advisor\\\""","Advisor"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.Program","with text1 as (
  SELECT PGRM,
         LISTAGG(txt2, '') WITHIN GROUP (ORDER BY pgrm, txt1) txt
    FROM (select SMRPCMT_PROGRAM pgrm, 
                 smrpcmt_text_seqno txt1, 
                 smrpcmt_text txt2
            from SMRPCMT c
           where 1=1
             and smrpcmt_term_code_eff = (select max(smrpcmt_term_code_eff) 
                                            from smrpcmt b 
                                           where b.SMRPCMT_PROGRAM = c.SMRPCMT_PROGRAM 
                                             and b.SMRPCMT_text_seqno = c.SMRPCMT_text_seqno)
           order by 1,2)
           group by PGRM
),

Programs As (
  Select sobcurr_program pgrm, 
         Sobcurr_Term_Code_Init,
         Sobcurr_Degc_Code,
         Smbpgen_Req_Credits_Overall credit_count, 
         Max_Eff_Term, 
         NVL(Majr,replace(SOBCURR_PROGRAM,SOBCURR_DEGC_CODE||'-','')) MAJR
    From Sobcurr Left Join ( Select Distinct Smbpgen_Program,
                                             Smbpgen_Req_Credits_Overall
                                        From Smbpgen a
                                       Where Smbpgen_Term_Code_Eff = ( Select Max(Smbpgen_Term_Code_Eff)
                                                                         From Smbpgen B 
                                                                        Where B.Smbpgen_Program = A.Smbpgen_Program)) abc on abc.smbpgen_program = sobcurr.sobcurr_program
                 Left Join ( SELECT DISTINCT sgbstdn_program_1, 
                                             sgbstdn_term_code_eff AS max_eff_term, 
                                             Sgbstdn_Majr_Code_1 As Majr
                               From Sgbstdn def
                              Where 1=1
                                And Sgbstdn_Term_Code_Eff = (Select Max(Sgbstdn_Term_Code_Eff) 
                                                               From Sgbstdn Hij 
                                                              Where Def.Sgbstdn_Program_1 = Hij.Sgbstdn_Program_1)) T On T.Sgbstdn_Program_1 = sobcurr.sobcurr_program
   Where 1=1 
     And Sobcurr_Term_Code_Init = (Select Max(C.Sobcurr_Term_Code_Init) 
                                     From Sobcurr C
                                    Where C.Sobcurr_Program = Sobcurr.Sobcurr_Program)
)

Select Distinct
  programs.pgrm || '$$' || nvl(Stvterm_Acyr_Code,'0000') Nk,
  Programs.Pgrm Cd,
  Case
    When STVMAJR_SEVIS_EQUIV Is Not Null Then Substr(STVMAJR_SEVIS_EQUIV,1,2)||'.'||Substr(STVMAJR_SEVIS_EQUIV, 3)
    When Stvmajr_Cipc_Code Is Not Null Then Substr(Stvmajr_Cipc_Code,1,2)||'.'||Substr(Stvmajr_Cipc_Code, 3)
    When Stvmajr_Cipc_Code In ('900000', '480101') Then '24.0102'
    else null 
  end as Cip_Nk,
  Smrprle_Program_Desc \\\""name\\\"",
  nvl(To_Number(Stvterm_Acyr_Code),0000) Cat_Yr,
  Text1.Txt As \\\""desc\\\"",
  nvl(credit_count,60) as credits, 
  '' enrollment_notes,
  '' registration_notes,
  COALESCE(programs.MAJR, '') area_of_study,
  '' Concentration,
  Programs.Sobcurr_Degc_Code Credential,
  case
    when programs.sobcurr_degc_code in ('AA','AS') then 'T' 
    else 'F'
  end as is_transfer,
  Case
    WHEN stvterm_code between to_char(to_number(max_eff_term, '999999')-400) and max_eff_term THEN 'T'
    ELSE 'F'
  END is_active
 From Programs LEFT JOIN sgbstdn ON sgbstdn_program_1 = programs.pgrm
               LEFT JOIN stvterm ON sgbstdn_term_code_eff = stvterm_code
               LEFT JOIN smrprle ON smrprle_program = programs.pgrm
               Left Join Stvmajr On Stvmajr_Code = Programs.Majr
               Left Join Text1 On Text1.Pgrm = Programs.Pgrm
--where programs.pgrm = 'STC-DRFT'
union
select 'UNDECLARED$$0000' as NK,
       'UNDECLARED' As Cd,
       '' CIP_NK,
       'UNDECLARED' As \\\""name\\\"",
       0000 as cat_yr,
       'You are currently undeclared, please apply for a program to graduate with a valid degree.' as \\\""desc\\\"",
       3 as CREDITS,
       '' as ENROLLMENT_NOTES,
       '' as REGISTRATION_NOTES,
       'UNDC' as AREA_OF_STUDY,
       '' as CONCENTRATION,
       '000000' as CREDENTIAL,
       'F' as IS_TRANSFER,
       'T' as IS_ACTIVE
  From Dual
 order by 1,3,13","Program"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.StudentCourse","WITH pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW') -- Need to confirm
      and sfrstcr_term_code in (
        select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= ( -- excluding non credit terms, we are looking at students active in the previous 5 terms relative to the current term
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE'                         -- Need to confirm
                      and stvterm_desc not like '%Continuing Education'       -- Need to confirm
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                      )
          And Rownum < 15
          order by 1 desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= (
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE' 
                      and stvterm_desc not like '%Continuing Education'
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                      )
          And Rownum < 15
          order by 1 desc))
))),


audit_bank as (
select a.pidm,a.term,a.audit_record,b.course_record from (
select 
        distinct sfrstca_pidm as pidm,
         sfrstca_crn as crn,
       sfrstca_term_code term,
       ssbsect_subj_code || ssbsect_crse_numb as audit_record

from sfrstca
left join ssbsect 
on ssbsect_crn = sfrstca_crn 
  and ssbsect_term_code = sfrstca_term_code
 ) a 
left join (
select distinct sfrstcr_pidm pidm, 
      sfrstcr_crn crn,
      sfrstcr_term_code term, 
      ssbsect_subj_code || ssbsect_crse_numb as course_record
from sfrstcr
left join ssbsect
on ssbsect_crn = sfrstcr_crn
) b
on a.pidm = b.pidm
and a.audit_record = b.course_record
and a.term = b.term
where b.course_record is null
order by 1,2,3

)


select  DISTINCT
       spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || ssbsect_crse_numb  as NK,
       spriden_id Student,
       stvterm_code term,
       ssbsect_subj_code || ssbsect_crse_numb course,
       nvl(
            (
              select SSBSECT_CRN  || '$$' || SSBSECT_TERM_CODE
              from ssbsect
              where ssbsect_crn = sfrstcr_crn and ssbsect_term_code = sfrstcr_term_code
            ),
            'UNKNOWN'
          ) as Section,
       sfrstcr_grde_code grade_cd,
       CASE 
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code = 'A' THEN 4.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code = 'A-' THEN 3.5
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code like 'B%' THEN 3.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code like 'C%' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code like 'D%' THEN 1.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and sfrstcr_grde_code IS NULL THEN 0.0
          ELSE 0.0
          END as grade_points,
       nvl(sfrstcr_credit_hr, 0) as Credits_Attemtped,
       0 as Credits_Earned  --we should look into if it is possible to have a COMPLETED course in this table
      -- registration logic edits - checking for only properly registered courses
       , case 
          when sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and stvterm_start_date > sysdate then 'REGISTERED'
          when sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and stvterm_start_date <= sysdate and stvterm_end_date > sysdate then 'IN_PROGRESS'
          when sfrstcr_rsts_code in ('RE', 'RW', 'RF','AU') and (sfrstcr_grde_code in ('A','A-','P') 
                                                                  or sfrstcr_grde_code like 'B%'
                                                                  or sfrstcr_grde_code like 'C%'
                                                                  or sfrstcr_grde_code like 'D%') then 'COMPLETED'
          else 'UNKNOWN' end
          STATUS, 
          
          -- Add a grade variable column that maps letter grades to points...
          
          'T' as is_active

  -- Why are we using the cartesian product here? Should try to use an explicit 
  -- inner join here instead of the implicit cross join. 
  from ( select null p_term, '' p_id, 'N' p_history, 'N' p_current from dual ),     
     spriden, 
     sfrstcr,
     stvterm, 
     stvrsts, 
     ssbsect, 
     scbcrse,
     sobptrm
where --spriden_id = p_id  and
   spriden_change_ind is null 
  and stvterm_code = sfrstcr_term_code 
  and sfrstcr_pidm = spriden_pidm
  and sfrstcr_term_code = nvl(p_term, sfrstcr_term_code) --this seems surperfluous - is it here just to account for bad data?
  and ssbsect_crn = sfrstcr_crn
  and scbcrse_subj_code = ssbsect_subj_code 
  and ssbsect_term_code = sfrstcr_term_code 
  and scbcrse_crse_numb = ssbsect_crse_numb 
  and scbcrse_eff_term = ( select max(scbcrse_eff_term) 
                             from scbcrse 
                            where scbcrse_crse_numb = ssbsect_crse_numb 
                              and scbcrse_subj_code = ssbsect_subj_code 
                              and scbcrse_eff_term <= ssbsect_term_code ) 
  and sfrstcr_rsts_code = stvrsts_code 
  and ( stvrsts_wait_ind = 'Y' or ( stvrsts_incl_sect_enrl = 'Y' and stvrsts_withdraw_ind = 'N' ) )
  and sobptrm_ptrm_code = ssbsect_ptrm_code
  and sobptrm_term_code = ssbsect_term_code
  and ( p_current = 'N' or stvterm_start_date <= sysdate )  --p_current is always set to 'N'

-- If course is graded, do not include sfrstcr
  and not exists ( select 'Y' from shrtckn 
                    where shrtckn_crn = sfrstcr_crn 
                      and shrtckn_term_code = sfrstcr_term_code 
                     and shrtckn_pidm = sfrstcr_pidm) 
 and spriden_pidm in (select * from pop)

UNION

select DISTINCT
      spriden_id|| '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || shrtckn_crse_numb as NK,
      spriden_id as Student,
      stvterm_code as term,
      shrtckn_subj_code || shrtckn_crse_numb as course,
      nvl((select SSBSECT_CRN || '$$' || SSBSECT_TERM_CODE
        from ssbsect
        where ssbsect_crn = shrtckn_crn and ssbsect_term_code = shrtckn_term_code),'UNKNOWN') as Section, --check to see if section exists
      shrtckg_grde_code_final as grade_cd,
      CASE 
         WHEN shrtckg_grde_code_final = 'A' THEN 4.0 
         WHEN shrtckg_grde_code_final = 'B' THEN 3.0
         WHEN shrtckg_grde_code_final = 'C' THEN 2.0
         WHEN shrtckg_grde_code_final = 'D*' THEN 1.0
         WHEN shrtckg_grde_code_final = 'S' THEN 2.0
         WHEN shrtckg_grde_code_final = 'PA' THEN 2.0
         WHEN shrtckg_grde_code_final = 'CR' THEN 2.0
         WHEN shrtckg_grde_code_final IS NULL THEN 0.0
        ELSE 0.0
       END as grade_points,
      nvl(SHRTCKG_HOURS_ATTEMPTED, 0) as CreditsAttemtped,
      case
       when (shrtckg_grde_code_final in ('A','A-','P') 
            or shrtckg_grde_code_final like 'B%' 
            or shrtckg_grde_code_final like 'C%' 
            or shrtckg_grde_code_final like 'D%') then
       nvl(SHRTCKG_HOURS_ATTEMPTED,0) else 0 end as CreditsEarned,
      --shrtckn_crn,
       --checking against proper grades for a completed course
       --[INST_CONFIG] change per institution
       case
       when (shrtckg_grde_code_final in ('A','A-','P') 
            or shrtckg_grde_code_final like 'B%' 
            or shrtckg_grde_code_final like 'C%' 
            or shrtckg_grde_code_final like 'D%') then 'COMPLETED' 
          else 'UNKNOWN' end Status,
       'T' as is_active
from spriden
join shrtckn on spriden_pidm = shrtckn_pidm
join stvterm on stvterm_code = shrtckn_term_code
join shrtckg on spriden_pidm = shrtckg_pidm and shrtckn_pidm = shrtckg_pidm and shrtckg_tckn_seq_no = shrtckn_seq_no and shrtckg_term_code = shrtckn_term_code 

where  shrtckg_seq_no = ( select max(shrtckg_seq_no) from shrtckg 
                          where shrtckg_pidm = spriden_pidm 
                          --and shrtckg_term_code = ssbsect_term_code     --not necessary to go to ssbsect table
                          and shrtckg_tckn_seq_no = shrtckn_seq_no ) 
  and spriden_change_ind is null
  and spriden_pidm in (select * from pop)

UNION

select DISTINCT
        spriden_id || '$$' || audit_bank.term || '$$' || audit_bank.audit_record as NK,
       spriden_id Student,
       audit_bank.term term,
        audit_bank.audit_record course,
       '' as section,
       '' as grade_cd,
       0.0 as grade_points,
       0 as Credits_Attemtped,
       0 as Credits_Earned,
       'UNKNOWN' as status,
       'T' as is_active
from audit_bank
left join spriden on spriden_pidm = audit_bank.pidm
--left join ssbsect on ssbsect_crn = audit_bank.crn
where audit_bank.pidm in (select * from pop)
--audit_bank.pidm in (select * from pilot_pop)
and audit_bank.term >= 201610
and spriden_change_ind is null

order by 2,3,4","Student Course"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"core.Student","-- Fields  nk,username,email,first_name,last_name,birthdate,is_active
-- Model Name  core.Student
-- Name  Student
-- Output  Student_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.1.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT
  szvterm_code
FROM
  szvterm
WHERE
  szvterm_code <=
  (
    SELECT
          MAX(SORATRM_TERM_CODE) Max_term_code
        FROM
          SORATRM
        WHERE
          TRUNC(sysdate) between SORATRM_START_DATE and SORATRM_END_DATE
        AND SORATRM_VPDI_CODE = 'ACC'
  )
AND SUBSTR(SZVTERM_CODE, 1, 1) NOT IN ('6', '7' ,'8')
AND SZVTERM_VPDI_CODE               = 'ACC'
AND rownum                          < 7
ORDER BY
  szvterm_code DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code LIKE 'R%'
  AND sfrstcr_vpdi_code = 'ACC'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = saradap_term_code_entry
WHERE saradap_vpdi_code = 'ACC'
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , spriden_id AS username
  , TRIM(COALESCE(
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address like '%student.cccs.edu' AND  goremal_status_ind = 'A' AND ROWNUM < 2
                ),
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address like '%student.cccs.edu' AND  goremal_status_ind = 'I' AND ROWNUM < 2
                ),
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address not like '%student.cccs.edu' AND  goremal_status_ind = 'A' AND ROWNUM < 2
                )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student


--  Notes: => DATA examples nk = 'W00073598',
--                          username = 'W00073598'
--
-- Change log:
--        Developer: Doug Menezes
--        Change version: Nav.1.1.0 (04/12/2016)
--        Description: Updated getLastXTerms logic to match with studentCourse.
","Students"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"core.Student","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT
  szvterm_code
FROM
  szvterm
WHERE
  szvterm_code <=
  (
    SELECT
          MAX(SORATRM_TERM_CODE) Max_term_code
        FROM
          SORATRM
        WHERE
          TRUNC(sysdate) between SORATRM_START_DATE and SORATRM_END_DATE
        AND SORATRM_VPDI_CODE = 'PPCC'
  )
AND SUBSTR(SZVTERM_CODE, 1, 1) NOT IN ('6', '7' ,'8')
AND SZVTERM_VPDI_CODE               = 'PPCC'
AND rownum                          < 7
ORDER BY
  szvterm_code DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code LIKE 'R%'
  AND sfrstcr_vpdi_code = 'PPCC'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = saradap_term_code_entry
WHERE saradap_vpdi_code = 'PPCC'
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , spriden_id AS username
  , TRIM(COALESCE(
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address like '%student.cccs.edu' AND  goremal_status_ind = 'A' AND ROWNUM < 2
                ),
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address like '%student.cccs.edu' AND  goremal_status_ind = 'I' AND ROWNUM < 2
                ),
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address not like '%student.cccs.edu' AND  goremal_status_ind = 'A' AND ROWNUM < 2
                )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student","Students"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.SeatsAvail","SELECT
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_seats_avail avail_seats, 
  'T' is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
             LEFT JOIN SCRLEVL ON ssbsect_subj_code = SCRLEVL_SUBJ_CODE
                              and ssbsect_crse_numb = SCRLEVL_CRSE_NUMB
WHERE spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code >= '201015'
  and substr(ssbsect_term_code, -1, 1) != '5'
  AND ssbsect_ssts_code = 'A'
  and SCRLEVL_LEVL_CODE in ('CR' , 'NC')
  order by ssbsect_term_code, ssbsect_crn","xSeatsAvail"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.studentterm","with program_bank as (
select DISTINCT ACAD_PLAN as pgrm, 
                EFFDT as effective_dt,
                ACAD_YEAR as CATALOG_YR
from ps_acad_plan_tbl a
left join ps_term_tbl b 
on effdt < term_end_dt and b.institution = a.institution
where 1=1
--and acad_plan = '1190'
and a.institution = 'TN293'
and a.acad_plan_type = 'MAJ'
--and a.acad_plan in ('1880')
and b.ACAD_YEAR = (select min(ACAD_YEAR) 
                  from ps_term_tbl 
                  where institution = 'TN293' and effdt < term_end_dt)
                  
),



pop as (
select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,b.max_term as max_term_2
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select student_id, max_term
            from (
                  select b.emplid as student_id
                  , min(b.strm) as term
                  , max(b.strm) as max_term
                  --, b.strm as strm
                  from ps_stdnt_car_term b
                  where 1=1
                  and institution = 'TN293'
                  and ACAD_CAREER = 'CRED'
                  group by b.emplid
                  ) car_term
            where 1=1
            and term = (
                   select distinct strm
                   from (select strm, ACAD_CAREER, institution 
                          from PS_TERM_TBL 
                          where strm <= (SELECT MIN(SUBSTR(STRM, 1, 2) || SUBSTR(STRM, 3, 1)+1 || SUBSTR(STRM, 4, 1)) AS strm
                                         FROM PS_TERM_TBL
                                         WHERE STRM = (select MIN(strm) AS strm 
                                                       from PS_TERM_TBL 
                                                       where acad_career = 'CRED'
                                                          AND term_end_dt > sysdate))
                   order by strm desc) a
                    where 
                    rownum < 8
                    --and term_begin_dt < '31-JUL-15'
                    and institution = 'TN293' 
                    and acad_career = 'CRED'
                    and a.strm = term
                    )
           ) b
           on b.student_id = a.emplid
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid       
WHERE  1=1
        --and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
)                  

select distinct
pop.student_id || '$$' || pop.max_term as nk,
pop.student_id as student,
pop.max_term as term,

(select pgrm || '$$' || max(b.catalog_yr) from program_bank b
            where to_char(pop.declare_dt,'YYYY') >= b.catalog_yr
            and pop.acad_plan = b.pgrm
            group by pgrm) as program,
'T' as is_active


from pop

--left join pop on student_id = a.emplid and strm = max_term
where 1=1

order by 1,3 desc","Student_Term"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.EnrollmentApplication","WITH CURRENT_STUDENTS AS (SELECT DISTINCT
   substring(P.ID,1,7) nk
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'),

		 ALL_STUDENTS AS (

SELECT nk from CURRENT_STUDENTS

UNION 

SELECT DISTINCT
   substring(P.ID,1,7) nk 
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         substring(A.APPL_APPLICANT,1,7) NOT IN 
         (
            SELECT
               nk
            FROM
               CURRENT_STUDENTS
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID
),

ENROLLMENT_APPLICATIONS AS (
SELECT DISTINCT
   substring(P.ID,1,7) nk,
   substring(P.ID,1,7) student,
   SUBSTRING(T.TERMS_ID,1,6) app_term,  --   SELECT * FROM APPLICATIONS
   A.APPLICATIONS_ID app_number,
   REPLACE(CONVERT(CHAR(10), A.APPL_DATE, 111) , '/','-') app_dt,
   PE.PERSON_EMAIL_ADDRESSES personal_email,
   'T' is_active
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
	--	    AND A.APPL_ADMIT_STATUS IN ('NEWAP','RADM1','RADM2')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         A.APPL_START_TERM = T.TERMS_ID
		  AND 
		  T.TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          T.TERMS_ID is not NULL and
          T.TERM_REG_START_DATE is not null
	  LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STO'
	WHERE substring(P.ID,1,7) IN (SELECT * FROM ALL_STUDENTS))

	SELECT * FROM ENROLLMENT_APPLICATIONS EA1 
	
	where app_dt in 
	(
		SELECT max(app_dt) from ENROLLMENT_APPLICATIONS EA2 WHERE EA2.nk = EA1.nk
	)","EnrollmentApplication"
852,"My Training University",999999,"",38709,"Student Success Collaborative:QA Test Member",22694,"Student Success Collaborative",2,"inst.Student","select app_param_key from app_parameter","Query"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"core.facultytype","Select Stvfstp_Code As Nk,
  Stvfstp_Code As \\\""type\\\"",
  stvfstp_desc as description
  From Stvfstp
Union
Select Stvfctg_Code As Nk,
Stvfctg_Code As \\\""type\\\"",
Stvfctg_Desc As Description
from stvfctg
 Order By 1
","FacultyType"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"inst.location","select
distinct a.facility_id as nk
, b.CAMPUS as campus
, a.DESCR as name
, '' latitude
, '' longitude
, '' address
, facility_type as comments
,  'T' as is_active

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('A','L','M','N','W','H')
and a.setid = 'NV280'
and a.effdt = (select max(c.effdt) from ps_facility_tbl c where a.facility_id = c.facility_id and a.setid = c.setid)","Location"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"inst.Location","-- get building data from Banner
WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- Assign default values
defaultValues AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Locations"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.studentcourse","WITH pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select emplid, max(strm)
              from ps_stdnt_car_term b
              where institution = 'NV280'
              and ACAD_CAREER = 'CRED'
             -- and WITHDRAWN_CODE <> 'NWD'
              group by emplid) b
              on a.emplid = b.emplid         
 WHERE  1=1
        and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
        and a.acad_plan in ('2120','2124','2130','3400')
)                  

--Institutional coursework
SELECT 
a.EMPLID || '$$' || a.strm || '$$' || REPLACE(b.SUBJECT, ' ', '') || REPLACE(b.CATALOG_NBR, ' ', '') as NK 
,a.EMPLID                                                                            AS STUDENT
, a.STRM                                                                            AS TERM
, REPLACE(b.SUBJECT, ' ', '') || REPLACE(b.CATALOG_NBR, ' ', '')                    AS COURSE
, b.crse_id || '$$' || b.strm || '$$' || b.CLASS_SECTION          AS SECTION
, a.CRSE_GRADE_OFF                                                                  AS GRADE_CD
, a.GRADE_POINTS                                                                    AS GRADE_POINTS
, a.UNT_TAKEN                                                                       AS ATTEMPTED_CREDITS
, CASE 
            WHEN ( a.EARN_CREDIT = 'Y' 
                   --AND a.STDNT_ENRL_STATUS = 'E'                                                                          --Update, member-specific
                   AND a.GRADE_DT IS NOT NULL ) THEN a.UNT_EARNED 
            ELSE 0 
  END                                                                               AS EARNED_CREDITS
, CASE WHEN a.STDNT_ENRL_STATUS = 'E'
        --and a.GRADING_SCHEME = 'STD'
        and a.ACAD_CAREER='CRED'
        and a.GRADING_BASIS_ENRL in ('GRD','HNR','PNP') 
        and a.CRSE_GRADE_OFF in ('A', 'B', 'C', 'D','P')
  THEN 'COMPLETED'
  WHEN A.ACAD_CAREER='CRED'
       and A.STDNT_ENRL_STATUS='E'
       and A.GRADING_BASIS_ENRL IN ('AUD','DEV','GRD','HNR','PNP')
       and A.GRADE_DT is null
       and a.UNITS_ATTEMPTED <> 'I'
  then 'REGISTERED'
  WHEN a.UNITS_ATTEMPTED = 'I' 
  then 'IN_PROGRESS' --might want to check via dates here
  ELSE 'UNKNOWN'
  END                                                                               AS STATUS
, 'T'                                                                               as is_active
        
FROM 
(SELECT * 
            FROM   PS_STDNT_ENRL 
            WHERE  ACAD_CAREER IN ( 'CRED' )) a             --Update, member-specific 
        
--COURSE INFO 
LEFT JOIN PS_CLASS_TBL b 
       ON b.CLASS_NBR = a.CLASS_NBR 
          AND b.STRM = a.STRM 
--          AND b.ACAD_CAREER IN ( 'UGRD' )                 --Removed to bring in all coursework even if it isn't UGRD   
          
     
WHERE  1 = 1
and a.EMPLID in (select student_id from pop)
and a.INSTITUTION = 'NV280'","Student Course"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.StudentCourse"," WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
),

STULIST AS (
SELECT DISTINCT ltrim(SUBSTRING(PERSON.ID,1,7)) as PERSON_ID
FROM PERSON
LEFT OUTER JOIN PERSON_PIN PERSON_PIN
        ON PERSON.ID = PERSON_PIN.PERSON_PIN_ID AND
            PERSON_PIN.PERSON_PIN_USER_ID <> ' '
WHERE PERSON.ID IS NOT NULL
      and PERSON_PIN_USER_ID IS NOT NULL
    and PERSON.LAST_NAME <> 'DO NOT USE'
    AND PERSON.BIRTH_DATE IS NOT NULL
),

STUCRSLIST as (
SELECT DISTINCT STC_PERSON_ID + '$$' + ISNULL(STC_TERM, '000001') + '$$' + ISNULL(STC_COURSE_NAME, '') as nk,
      STC_PERSON_ID as student,
      ISNULL(STC_TERM, '000001') as term,
      ISNULL(STC_COURSE_NAME, '') as course,
      ISNULL(SEC_TERM+'_'+SEC_NAME, '') as section,
      ISNULL(GRD_GRADE, '') as grade_cd,
      cast(ISNULL(cast(GRD_VALUE as numeric(7,2)), '0') AS VARCHAR) as grade_points,
      CASE
        WHEN STC_CMPL_CRED = 0 THEN cast(ISNULL(cast(STC_CRED as numeric(7,2)), '0') AS VARCHAR)
        ELSE  cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)),0)  AS VARCHAR)
      END as credits_attempted,
      CASE
        WHEN STC_VERIFIED_GRADE IS NOT NULL THEN cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
        ELSE cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
      END credits_earned,
      case 
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'A' THEN 'REGISTERED'
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'N' THEN 'REGISTERED'
         WHEN GRD_GRADE = 'I' THEN 'IN_PROGRESS'    
         WHEN GRD_GRADE = 'S' THEN 'COMPLETED'  
         WHEN GRD_GRADE = 'T' THEN 'COMPLETED'
         ELSE 'COMPLETED'
      END as [status],
      
	   case 
         WHEN STC_STATUS = 'X' THEN 'F'  -- Dropped Class Before Drop Date
         WHEN STC_STATUS = 'C' THEN 'F'  -- Class Cancelled
         ELSE 'T'
      END as is_active
  FROM STUDENT_ACAD_CRED
    JOIN STC_STATUSES
      ON STC_STATUSES.STUDENT_ACAD_CRED_ID = STUDENT_ACAD_CRED.STUDENT_ACAD_CRED_ID AND
         POS = '1'
    LEFT OUTER JOIN COURSE_SECTIONS
      ON SEC_TERM = STC_TERM AND
         SEC_SUBJECT = STC_SUBJECT AND  
         SEC_NO = STC_SECTION_NO AND
         SEC_COURSE_NO = PARSENAME(REPLACE(STC_COURSE_NAME,'_', '.'),1)     
    LEFT OUTER JOIN GRADES
      ON GRD_GRADE_SCHEME = STUDENT_ACAD_CRED.STC_GRADE_SCHEME AND
         GRADES_ID = ISNULL(STUDENT_ACAD_CRED.STC_VERIFIED_GRADE,'0') 
  WHERE STUDENT_ACAD_CRED.STC_PERSON_ID IS NOT NULL
    AND STC_TERM IN (SELECT SEC_TERM FROM TERMLIST)
  AND STC_PERSON_ID IN (SELECT PERSON_ID FROM STULIST)
  AND STC_PERSON_ID IS NOT NULL
  AND STC_COURSE_NAME IS NOT NULL
)

SELECT nk,student,term,course,section,grade_cd,grade_points,credits_attempted,credits_earned,[status],is_active
  FROM STUCRSLIST ","StudentCourse"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.Subject","SELECT 
  stvsubj_code nk,
  stvsubj_desc name,
  'T' is_active
FROM stvsubj","Subject"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.StudentCourse","-- get last five terms based on current term
WITH getLastFiveTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),
 
-- get student population for last 5 terms determined in getLastFiveTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr 
  JOIN getLastFiveTerms ON getLastFiveTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
 
UNION
 
SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastFiveTerms ON getLastFiveTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
), --count = 17k
 
-- get all student registration audit data
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm
  , sfrstca_crn AS crn
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn
                        AND ssbsect_term_code = sfrstca_term_code
                        )
),
 
-- get all student registration data
studentRegRecs AS (
SELECT DISTINCT sfrstcr_pidm AS pidm
  , sfrstcr_crn AS crn
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn
),
 
-- compute students with dropped course
studentDroppedCrse AS (
SELECT *
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT *
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),
 
-- define grades points by grade code
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),
 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'B-' AS code  -- LH added for consistency on 030117
  , 2.5 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'C-' AS code -- LH added for consistency on 030117
  , 1.5 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),
 
-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
 , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course -- Modified to remove $$ in concatenation and match with Course nk
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF', 'AU')
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF', 'AU') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF', 'AU') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF', 'AU') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%')
          THEN 'COMPLETED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),
 
-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),
 
-- extract student course data for completed courses
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course -- Modified to remove $$ in concatenation and match with Course nk
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'A-', 'B', 'B-', 'C', 'C-', 'D')  -- LH updated 030117
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'A-', 'B', 'B-', 'C', 'C-', 'D') -- LH updated 030117
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL
),
 
-- extract student course data for dropped courses
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course -- Modified to remove $$ in concatenation and match with Course nk
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01
),
 
-- Combine all above categories
\\\""final\\\"" AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)
 
-- Wrapper query
SELECT * FROM \\\""final\\\""","Student Course"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.course","With Coreq_Data_Bank As (

select scbcrse_subj_code || scbcrse_crse_numb as course
, case when ssbsect_schd_code = 'B' then scbcrse_subj_code || scbcrse_crse_numb || ssbsect_schd_code
  Else Null End As Coreq
, ssbsect_schd_code
, ssbsect_subj_code
, ssbsect_crse_numb
, scbcrse_dept_code


from (
  SELECT a.SCBCRSE_EFF_TERM
      ,a.scbcrse_coll_code
      , a.scbcrse_dept_code
      , a.scbcrse_subj_code
      , a.scbcrse_crse_numb
  FROM scbcrse a
  WHERE 1=1
  and a.SCBCRSE_CSTA_CODE = 'A'
  and a.SCBCRSE_EFF_TERM = (  --DEDUPING LOGIC
    SELECT max(SCBCRSE_EFF_TERM)
    FROM scbcrse b 
    WHERE b.scbcrse_subj_code = a.scbcrse_subj_code
      And B.Scbcrse_Crse_Numb = A.Scbcrse_Crse_Numb
      )) Course
Left Join (Select Ssbsect_Subj_Code
            , ssbsect_crse_numb
            , Ssbsect_Schd_Code
            --, Count(Ssbsect_Schd_Code)
            , Stvschd_Desc 
            from ssbsect
            Left Join Stvschd On Ssbsect_Schd_Code = Stvschd_Code
            Where 1=1
            And Ssbsect_Term_Code = (Select Max(Ssbsect_Term_Code)
                                    From Ssbsect B
                                    Where B.Ssbsect_Crse_Numb = Ssbsect.Ssbsect_Crse_Numb
                                    And B.Ssbsect_Subj_Code = Ssbsect.Ssbsect_Subj_Code
                                    And B.Ssbsect_Schd_Code = Ssbsect.Ssbsect_Schd_Code
                                    )
            ) Section
  On Course.Scbcrse_Subj_Code = Section.Ssbsect_Subj_Code
  And Course.Scbcrse_Crse_Numb = Section.Ssbsect_Crse_Numb
left join scrlevl 
  on course.scbcrse_subj_code = scrlevl_subj_code
  and course.scbcrse_crse_numb = scrlevl_crse_numb
where 1=1
and SCRLEVL_LEVL_CODE = 'NC'

),

NCC_Course_tbl as ( 

select distinct  
  a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS NK
  , a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS CD
  , decode(SCRATTR_ATTR_CODE, 'ZZZ','0','1') AS \\\""LEVEL\\\""
  , a.SCBCRSE_SUBJ_CODE AS SUBJECT
  , nvl(scbcrse_dept_code, '0000') AS DEPT --placeholder added to DEPT script
  , SUBSTR(SCBCRSE_TITLE,1,100) AS title
  , dbms_lob.substr(text_table.SCBDESC_TEXT_NARRATIVE,3000) AS \\\""desc\\\""  
  , '' as course_type
  , CASE 
      WHEN a.scbcrse_credit_hr_ind IS NULL THEN a.scbcrse_credit_hr_low 
      WHEN a.scbcrse_credit_hr_ind IS NOT null then  a.scbcrse_credit_hr_high
    else 0 end AS CREDITS
  , CASE WHEN a.SCBCRSE_CSTA_CODE = 'A' 
    and SCRLEVL_LEVL_CODE = 'NC'
  --and a.scbcrse_eff_term >= 201010 
  	THEN 'T' ELSE 'F' END AS IS_ACTIVE
  , case when scbcrse_reps_code is not null then nvl(scbcrse_repeat_limit,0)
    else 0 end as repeatable_count
FROM (
  SELECT a.SCBCRSE_EFF_TERM,a.scbcrse_coll_code, a.scbcrse_dept_code, a.scbcrse_subj_code, a.scbcrse_crse_numb, a.scbcrse_credit_hr_low, a.scbcrse_credit_hr_ind
    , a.scbcrse_credit_hr_high, a.SCBCRSE_CIPC_CODE, a.scbcrse_csta_code, a.SCBCRSE_TITLE, a.scbcrse_divs_code,a.scbcrse_data_origin,a.scbcrse_repeat_limit,a.scbcrse_reps_code
  FROM scbcrse a
  WHERE a.SCBCRSE_EFF_TERM = (  --DEDUPING LOGIC
    SELECT max(SCBCRSE_EFF_TERM)
    FROM scbcrse b 
    WHERE b.scbcrse_subj_code = a.scbcrse_subj_code
      AND b.scbcrse_crse_numb = a.scbcrse_crse_numb
     -- AND B.scbcrse_eff_term >= 201110
      )
--      and a.scbcrse_subj_code = 'NURS'
    ) a
               left join(select scbdesc_subj_code, scbdesc_crse_numb, scbdesc_term_code_eff, SCBDESC_TEXT_NARRATIVE
                      from scbdesc text
                     where scbdesc_term_code_eff = (select max(scbdesc_term_code_eff) 
                      from scbdesc 
                      where scbdesc_subj_code = text.scbdesc_subj_code
                      and scbdesc_crse_numb = text.scbdesc_crse_numb)
                      order by 3 desc) text_table
             
             on SCBDESC_SUBJ_CODE = scbcrse_subj_code 
                and scbdesc_crse_numb = scbcrse_crse_numb
   
    LEFT JOIN  SCRATTR c ON a.SCBCRSE_EFF_TERM = c.SCRATTR_EFF_TERM 
  AND a.SCBCRSE_SUBJ_CODE = c.SCRATTR_SUBJ_CODE AND a.SCBCRSE_CRSE_NUMB = c.SCRATTR_CRSE_NUMB

  	LEFT JOIN SCRLEVL on scbcrse_subj_code = scrlevl_subj_code
			and scbcrse_crse_numb = scrlevl_crse_numb
			--and scbcrse_eff_term = scrlevl_eff_term

WHERE 1=1
--and scrlevl_levl_code = 'NC'


UNION
Select 'UNKNOWN' as NK
, 'UNKNOWN' as CD
, '1' as \\\""LEVEL\\\""
, 'DEFAULT' as subject
, '0000' as dept
, 'UNKNOWN' as title
, '' as \\\""desc\\\""
, '' as course_type
, 0 as credits
, 'T' as is_active
, 0 repeatable_count
from dual
--ORDER BY 1, 3, 4
),

coreq_course_tbl as (

select coreq as NK
, coreq as CD
, '1' as \\\""LEVEL\\\""
, ssbsect_subj_code as subject
, nvl(scbcrse_dept_code, '0000') AS DEPT
, coreq || ' LAB Component Course' as title
, 'Accompanying lab course for ' || course as \\\""desc\\\""
, ssbsect_schd_code as course_type
, 0 as credits
, case when scrlevl_levl_code = 'NC' then 'T'
else 'F' end as is_active
, 0 repeatable_count
from Coreq_Data_Bank
    LEFT JOIN SCRLEVL on ssbsect_subj_code = scrlevl_subj_code
      and ssbsect_crse_numb = scrlevl_crse_numb
where coreq is not null
),

transfer_course_tbl as (
 

select distinct shrtckn_subj_code || shrtckn_crse_numb as NK
, shrtckn_subj_code || shrtckn_crse_numb as CD
, '1' as \\\""LEVEL\\\""
, 'DEFAULT' as subject
, '0000' as dept
, 'TRANSFER' as title
, 'TRANSFER COURSE' as \\\""desc\\\""
, '' as course_type
, 0 as credits
, 'F' as is_active
, 0 repeatable_count
from shrtckn
where shrtckn_subj_code || shrtckn_crse_numb not in (select nk from NCC_Course_tbl)
ORDER BY 1, 3, 4
)

select * 
from NCC_Course_tbl
union 
select * 
from coreq_course_tbl
union
select * 
from transfer_course_tbl
","Course"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.EnrollmentApplication","WITH CURRENT_STUDENTS AS (SELECT DISTINCT
   substring(P.ID,1,7) nk
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'),

		 ALL_STUDENTS AS (

SELECT nk from CURRENT_STUDENTS

UNION 

SELECT DISTINCT
   substring(P.ID,1,7) nk 
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         substring(A.APPL_APPLICANT,1,7) NOT IN 
         (
            SELECT
               nk
            FROM
               CURRENT_STUDENTS
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID
),

ENROLLMENT_APPLICATIONS AS (
SELECT DISTINCT
   substring(P.ID,1,7) nk,
   substring(P.ID,1,7) student,
   SUBSTRING(T.TERMS_ID,1,6) app_term,  --   SELECT * FROM APPLICATIONS
   A.APPLICATIONS_ID app_number,
   REPLACE(CONVERT(CHAR(10), A.APPL_DATE, 111) , '/','-') app_dt,
   PE.PERSON_EMAIL_ADDRESSES personal_email,
   'T' is_active
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
	--	    AND A.APPL_ADMIT_STATUS IN ('NEWAP','RADM1','RADM2')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         A.APPL_START_TERM = T.TERMS_ID
		  AND 
		  T.TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          T.TERMS_ID is not NULL and
          T.TERM_REG_START_DATE is not null
	  LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STO'
	WHERE substring(P.ID,1,7) IN (SELECT * FROM ALL_STUDENTS))

	SELECT * FROM ENROLLMENT_APPLICATIONS EA1 
	
	where app_dt in 
	(
		SELECT max(app_dt) from ENROLLMENT_APPLICATIONS EA2 WHERE EA2.nk = EA1.nk
	)","EnrollmentApplication"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"core.StudentXStudentCategory","WITH one_term as (
  Select Min(Stvterm_Code) From Stvterm 
   where sysdate < stvterm_start_date
     And Stvterm_Desc Not Like '%Non-Credit' 
     And Stvterm_Desc Not Like 'Parson%'
),
Term_List As (
  Select Stvterm_Code Term From Stvterm 
   Where Stvterm_Code < (Select * From One_Term)
     And Stvterm_Desc Not Like '%Non-Credit' 
     And Stvterm_Desc Not Like 'Parson%'
     And Rownum < 5
   Order By 1 Desc
),
pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW')
      And Sfrstcr_Term_Code In (
      Select Term From (select * from term_list
))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
Where Saradap_Term_Code_Entry In (        
      Select Term From (select * from term_list
)))))
-- MEDI CODE
Select spriden_id || '$$' || Sprmedi_medi_Code As Nk
, Spriden_Id As Student
, Sprmedi_medi_Code As Category
, 'T' As Is_Active
From Sprmedi
  Left Join Spriden
  On Spriden_Pidm = Sprmedi_Pidm
Where 1=1
And Spriden_Pidm In (Select pidm From Pop)
and Sprmedi_medi_Code is not null
and Spriden_Change_Ind Is Null 
And Spriden_Entity_Ind = 'P'
-- UNION
Union
-- DISA CODE
Select spriden_id || '$$' || SPRMEDI_DISA_CODE As Nk
, Spriden_Id As Student
, Sprmedi_Disa_Code As Category
, 'T' As Is_Active
From Sprmedi
  Left Join Spriden
  on spriden_pidm = sprmedi_pidm
Where 1=1
And Spriden_Pidm In (Select pidm From pop)
and Sprmedi_Disa_Code is not null
and Spriden_Change_Ind Is Null 
And Spriden_Entity_Ind = 'P'
-- UNION
UNION
-- MAJOR CODES
Select Spriden_Id || '$$MAJR$$' || Sgbstdn_Majr_Code_1 As Nk,
       Spriden_Id As Student,
       'MAJR$$'||Sgbstdn_Majr_Code_1 As Category,
       'T' as is_active
  From Sgbstdn S Left Join Spriden On Sgbstdn_Pidm = Spriden_Pidm
                                  and spriden_change_ind is null
 Where Sgbstdn_Term_Code_Eff In (Select * From Term_List)
   And Sgbstdn_Pidm In (Select Pidm From Pop)
   And Sgbstdn_Term_Code_Eff = (Select Max(Sgbstdn_Term_Code_Eff)
                                  From Sgbstdn
                                 Where Sgbstdn_Pidm = S.Sgbstdn_Pidm
                                   And Sgbstdn_Term_Code_Eff In (Select * From Term_List))
-- UNION
UNION
-- STYP CODES
Select Spriden_Id || '$$STYP$$' || Sgbstdn_Styp_Code As Nk,
       Spriden_Id As Student,
       'STYP$$'||Sgbstdn_Styp_Code As Category,
       'T' as is_active
  From Sgbstdn S Left Join Spriden On Sgbstdn_Pidm = Spriden_Pidm
                                  and spriden_change_ind is null
 Where Sgbstdn_Term_Code_Eff In (Select * From Term_List)
   And Sgbstdn_Pidm In (Select Pidm From Pop)
   And Sgbstdn_Term_Code_Eff = (Select Max(Sgbstdn_Term_Code_Eff)
                                  From Sgbstdn
                                 Where Sgbstdn_Pidm = S.Sgbstdn_Pidm
                                   And Sgbstdn_Term_Code_Eff In (Select * From Term_List))
 order by 1,2","StudentXStudentCategory"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.EnrollmentApplication","with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),

CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-3*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC
),

STU_POP AS (
  SELECT SFRSTCR_PIDM AS PIDM
    FROM SFRSTCR
   WHERE SFRSTCR_TERM_CODE IN (SELECT * from cur_term)
  UNION
  SELECT SARADAP_PIDM AS PIDM
    FROM SARADAP
   WHERE SARADAP_TERM_CODE_ENTRY IN (SELECT * from cur_term)
),

email_list as (
  select goremal_pidm, goremal_email_address, goremal_version
    from goremal g join (select goremal_pidm pidm,
                                max(goremal_version) max_ver 
                         from goremal
                        where goremal_status_ind = 'A'
                          and goremal_emal_code = 'IND'
                        group by goremal_pidm) me on g.goremal_pidm = me.pidm
                                                 and g.goremal_version = me.max_ver
   where goremal_status_ind = 'A'
     and goremal_emal_code = 'IND'
     --and upper(goremal_email_address) not like '%HACC%'
),
app_list as (
  select p.spriden_id as nk,
         p.spriden_id as student,
         saradap_term_code_entry as app_term,
         saradap_appl_no as app_number,
         to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
         trim(goremal_email_address) as personal_email,
         'T' as is_active
    from saradap join max_list ml on saradap_pidm = ml.pidm
                                 and saradap_term_code_entry = ml.max_term
            left join email_list el on saradap_pidm = el.goremal_pidm
            left join spriden p on saradap_pidm = spriden_pidm
                               and spriden_change_ind is null
   where saradap_pidm in (select * from stu_pop)
     and SARADAP_APST_CODE= 'D'
)
select nk, student, app_term, app_number, app_dt, personal_email, is_active
  from app_list
 where to_date(app_dt, 'YYYY-MM-DD') >= to_date('2016-06-01', 'YYYY-MM-DD')","EnrollmentApplication"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.Subject","SELECT nk, name,
  CASE 
    WHEN is_active = 'Y' THEN 'T'
    ELSE 'F'
  END AS \\\""is_active\\\""
FROM EAB_SUBJECT
","Subject"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.Department","-- Fields: nk,name,is_active
-- Model Name: cat.Department
-- Name: Department
-- Output: Department_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get department data from Banner 
WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM department
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""

-- Notes: =>  DATA examples nk = 'CRJ'
-- 						name = 'Criminal Justice'

-- Change log:
--				Developer:
--				Change version:
--				Description","Departments"
1219,"Broward College",10510,"",48378,"Navigate:Broward College",47972,"Navigate",20,"cat.programcredential","SELECT 
code AS nk
, DESCRIPTION AS name
, CASE
	WHEN status = 'A' THEN 'T'
	ELSE 'F'
	END AS is_active
from UTL_CODE_TABLE 
WHERE 1=1
AND TABLE_NAME = 'AWARD-TYPE'
ORDER BY 1
","Program Credentials"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.studentterm","WITH PMT as (

select pgrm
, term_id
--, max(term_id) as max_term_id
, acyr
from (
  select sobcurr_program as pgrm
    , sobcurr_term_code_init as term_id
    , stvterm_acyr_code as acyr
  from sobcurr
  left join stvterm on stvterm_code = sobcurr_term_code_init
  where stvterm_code is not null
  union
  select smbpgen_program as program
    , smbpgen_term_code_eff as term_id
    , stvterm_acyr_code as acyr
from smbpgen
  left join stvterm on stvterm_code = smbpgen_term_code_eff
  where stvterm_code is not null
  ) main
where pgrm like '4%'
--group by program, term_id, acyr
order by 1,3
),


SGB as (
select * from (
 select sgbstdn_pidm,
      sgbstdn_program_1,
      sgbstdn_stst_code,
      sgbstdn_term_code_eff as max_eff_term,
   sgbstdn_term_code_ctlg_1,
    stvstst_reg_ind
  from sgbstdn
  left join stvstst on stvstst_code = sgbstdn_stst_code
  where sgbstdn_program_1 is not null
  and stvstst_code is not null) a
where max_eff_term = (select max(sgbstdn_term_code_eff)
                        from sgbstdn
                        right join stvterm on sgbstdn_term_code_eff = stvterm_code
                        where a.sgbstdn_pidm = sgbstdn_pidm 
                        and stvterm_end_date <= sysdate + 365 )
order by 1,4
),



POP AS (
select sorlcur_pidm pidm
from sorlcur tbl
where 1=1
and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
and sorlcur_cact_code = 'ACTIVE'
and sorlcur_priority_no = (select min(sorlcur_priority_no)
                           from sorlcur
                           where sorlcur_camp_code = 'NCC'
                           and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                           and sorlcur_cact_code = 'ACTIVE'
                           and sorlcur_term_code_end is null
                           and sorlcur_pidm = tbl.sorlcur_pidm
                           and sorlcur_term_code in (select distinct term from (


                                                      SELECT STVTERM_CODE term FROM STVTERM
                                                      WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                              FROM stvterm 
                                                                              where sysdate < stvterm_start_date 
                                                                              
                                                                              and(stvterm_code like '%10' 
                                                                              or stvterm_code like '%20' 
                                                                              or stvterm_code like '%30')
                                                                            )
                                                      and (stvterm_code like '%10' 
                                                            or stvterm_code like '%20' 
                                                            or stvterm_code like '%30')
                                                      and rownum < 5
                                                      ORDER BY 1 desc))

                          )
and sorlcur_term_code_end is null
and sorlcur_camp_code = 'NCC'
and sorlcur_term_code = (select max(sorlcur_term_code)
                          from sorlcur
                          where sorlcur_pidm = tbl.sorlcur_pidm
                          and sorlcur_camp_code = 'NCC'
                          and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                          and sorlcur_cact_code = 'ACTIVE'
                          and sorlcur_term_code_end is null
                          and sorlcur_priority_no = (select min(sorlcur_priority_no)
                                                      from sorlcur
                                                      where sorlcur_camp_code = 'NCC'
                                                      and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                                                      and sorlcur_cact_code = 'ACTIVE'
                                                      and sorlcur_term_code_end is null
                                                      and sorlcur_pidm = tbl.sorlcur_pidm
                                                      and sorlcur_term_code in (

                                                        select distinct term from (
                                                            SELECT STVTERM_CODE term FROM STVTERM
                                                            WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                                                    FROM stvterm 
                                                                                                    where sysdate < stvterm_start_date 
                                                                                                    --and sysdate <= stvterm_end_date
                                                                                                    and (stvterm_code like '%10' 
                                                                                                    or stvterm_code like '%20' 
                                                                                                    or stvterm_code like '%30')
                                                                                                    )
                                                                              and (stvterm_code like '%10' 
                                                                                  or stvterm_code like '%20' 
                                                                                  or stvterm_code like '%30')
                                                                              and rownum < 5
                                                                              ORDER BY 1 desc))
                                                    )
                          and sorlcur_term_code in ( select distinct term from (
                                                  SELECT STVTERM_CODE term FROM STVTERM
                                                  WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                          FROM stvterm 
                                                                          where sysdate < stvterm_start_date 
                                                                          --and sysdate <= stvterm_end_date
                                                                          and(stvterm_code like '%10' 
                                                                           or stvterm_code like '%20' 
                                                                           or stvterm_code like '%30')
                                                                        )
                                                  and (stvterm_code like '%10' 
                                                   or stvterm_code like '%20' 
                                                   or stvterm_code like '%30')
                                                  and rownum < 5
                                                  ORDER BY 1 desc))
                        )
)


select
       spriden_id student,
       SGB.max_eff_term term,
       SGB.sgbstdn_program_1 || '$$' || PMT.term_id \\\""program\\\"",
       decode(stvstst_reg_ind,'Y','T','F') is_active
from spriden
right join SGB on spriden_pidm = SGB.sgbstdn_pidm
left join PMT on SGB.sgbstdn_program_1 = PMT.pgrm 
--right join pop on spriden_pidm = pop.pidm 
where spriden_change_ind is null
and PMT.term_id = (select max(abc.term_id) 
                  from PMT abc 
                  where abc.pgrm = SGB.sgbstdn_program_1 
                  and abc.term_id < SGB.sgbstdn_term_code_ctlg_1) --make this <= when we are ready with the updates
and spriden_pidm in (select * from pop)","Student Term"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.EnrollmentApplication","with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),

CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-3*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC
),

STU_POP AS (
  SELECT SFRSTCR_PIDM AS PIDM
    FROM SFRSTCR
   WHERE SFRSTCR_TERM_CODE IN (SELECT * from cur_term)
  UNION
  SELECT SARADAP_PIDM AS PIDM
    FROM SARADAP
   WHERE SARADAP_TERM_CODE_ENTRY IN (SELECT * from cur_term)
),

email_list as (
  select goremal_pidm, goremal_email_address, goremal_version
    from goremal g join (select goremal_pidm pidm,
                                max(goremal_version) max_ver 
                         from goremal
                        where goremal_status_ind = 'A'
                          and goremal_emal_code = 'IND'
                        group by goremal_pidm) me on g.goremal_pidm = me.pidm
                                                 and g.goremal_version = me.max_ver
   where goremal_status_ind = 'A'
     and goremal_emal_code = 'IND'
     --and upper(goremal_email_address) not like '%HACC%'
),
app_list as (
  select p.spriden_id as nk,
         p.spriden_id as student,
         saradap_term_code_entry as app_term,
         saradap_appl_no as app_number,
         to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
         trim(goremal_email_address) as personal_email,
         'T' as is_active
    from saradap join max_list ml on saradap_pidm = ml.pidm
                                 and saradap_term_code_entry = ml.max_term
            left join email_list el on saradap_pidm = el.goremal_pidm
            left join spriden p on saradap_pidm = spriden_pidm
                               and spriden_change_ind is null
   where saradap_pidm in (select * from stu_pop)
     and SARADAP_APST_CODE= 'D'
)
select nk, student, app_term, app_number, app_dt, personal_email, is_active
  from app_list
 where to_date(app_dt, 'YYYY-MM-DD') >= to_date('2016-06-01', 'YYYY-MM-DD')","EnrollmentApplication"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"reg.StudentTestScore","WITH 

defaultValues AS (
	SELECT
	'default' nk,
    'default' student,
    'ACT' AS test_subject,
    0.0 AS score,
    'F' AS is_active
),

TMP_1 AS (
SELECT DISTINCT
   P.ID student
FROM
   PERSON P
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'
),

TMP_2 AS (
SELECT DISTINCT
   P.ID  
FROM
   PERSON P
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         A.APPL_APPLICANT NOT IN 
         (
            SELECT
               student
            FROM
               TMP_1
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID
),

TMP_3 AS (SELECT * FROM TMP_1 UNION SELECT * FROM TMP_2),

TMP_4 AS (

SELECT
   TS.student+'$$'+SNC.STNC_NON_COURSE as nk,
   TS.student,
   SNC.STNC_NON_COURSE AS test_subject,
   CAST(COALESCE(SNC.STNC_SCORE,0) AS NUMERIC(7,2)) AS score,
   'T' AS is_active
FROM
   TMP_3 TS,
   STUDENT_NON_COURSES SNC
WHERE
   TS.student = SNC.STNC_PERSON_ID
      AND
   SNC.STNC_STATUS = 'A' )

   SELECT TMP_4.* FROM TMP_4
   JOIN PERSON p on TMP_4.student = p.ID
   WHERE p.PERSON_CHANGE_DATE > GETDATE() - 1
   UNION
   SELECT * FROM defaultValues","StudentTestScore"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.Subject","-- Fields: nk,name,is_active
-- Model Name: cat.Subject
-- Name: Subject
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get subject data from Banner  
WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  'T' AS is_active
FROM stvsubj
),

-- Assign default values
\\\""default\\\"" AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM subject
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""



-- Notes: => DATA examples nk = 'ABE', 'AG'
-- 					name = 'Adulet Basic Education', 'Agriculture'

-- Change log:
--				Developer:
--				Change version:
--				Description","Subjects"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"campus_lkp","select campus_cd,
campus_desc
 from atlantatech.osf_cpl_campus_lkp","SSF_campus_lkp"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.Section","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-5
),

COURSES_TEMP AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk 
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
 --       APPROVAL_STATUS.CRS_STATUS = 'A'
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
        COURSES.CRS_MIN_CRED > 0 
		AND CRS_ACAD_LEVEL = 'UG'
       AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
		--	 AND CRS_DEPTS IN (SELECT DISTINCT DEPTS_ID
		--							 FROM    DEPTS
		--							 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A')
)

SELECT distinct SEC_TERM+'-'+SEC_NAME nk,
      COURSE_SECTIONS.COURSE_SECTIONS_ID cd,
     COURSE_SECTIONS.SEC_NO display_cd,
      ISNULL (COURSES.CRS_NAME, '') course,
      SEC_TERM term,

case when UPPER(SEC_LOCATION) IN ('LBC', 'UBC', 'MC', 'CWW') then UPPER(SEC_LOCATION)
        else 'OC' end
 campus, 
      cast(ISNULL(SEC_CAPACITY, 0) as Varchar) seats_offered,
	  CASE WHEN SEC_ALLOW_WAITLIST_FLAG = 'N' THEN '0'
			ELSE isnull(SEC_WAITLIST_MAX,'75')
			END  waitlist_capacity,  
      'F' is_unlimited_seating, 
       CASE
        WHEN  LAST_NAME IS NULL THEN 
           'TBD' 
        ELSE
           LAST_NAME  + ', ' + 
           REPLACE(ISNULL(FIRST_NAME,''), '`', '``') 
       END
       instructor_name,
      REPLACE(CONVERT(CHAR(10), SEC_START_DATE, 111) , '/','-') class_start_dt,
      COALESCE (REPLACE(CONVERT(CHAR(10), SEC_END_DATE, 111) , '/','-'), '2000-01-01') class_end_dt, -- Added COALESCE to handle null class_end_dt's
      null drop_start_dt,
      REPLACE(CONVERT(CHAR(10), SEC_START_DATE-1, 111) , '/','-')
       drop_end_dt,
      CASE
        WHEN  SEC_STATUS = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
  FROM COURSE_SECTIONS LEFT OUTER JOIN COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN TERMS_LS
      ON SEC_TERM = TERMS_LS.TERMS_ID
  LEFT JOIN TERMS
      ON SEC_TERM = TERMS.TERMS_ID
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1'
  LEFT JOIN COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
	 LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
  WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST) AND COURSES.CRS_NAME IN (SELECT * FROM COURSES_TEMP)","Section"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20," EnrollmentApplication","WITH CURRENT_STUDENTS AS (SELECT DISTINCT
   substring(P.ID,1,7) nk
FROM
   coll18_prod.dbo.PERSON P
      JOIN coll18_prod.dbo.PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN coll18_prod.dbo.PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
           AND  
        PE.PERSON_EMAIL_TYPES = 'P'
      JOIN coll18_prod.dbo.STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN coll18_prod.dbo.STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN coll18_prod.dbo.ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
          --  AND
        -- AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN coll18_prod.dbo.ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'),

		 ALL_STUDENTS AS (

SELECT nk from CURRENT_STUDENTS

UNION 

SELECT DISTINCT
   substring(P.ID,1,7) nk 
FROM
   coll18_prod.dbo.PERSON P
      JOIN coll18_prod.dbo.PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN coll18_prod.dbo.PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
           AND  
         PE.PERSON_EMAIL_TYPES = 'P'
      JOIN coll18_prod.dbo.APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         substring(A.APPL_APPLICANT,1,7) NOT IN 
         (
            SELECT
               nk
            FROM
               CURRENT_STUDENTS
         )
         --   AND
       --  A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN coll18_prod.dbo.APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
        --    AND
      --   APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN coll18_prod.dbo.TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID
),

ENROLLMENT_APPLICATIONS AS (
SELECT DISTINCT
   substring(P.ID,1,7) nk,
   substring(P.ID,1,7) student,
   SUBSTRING(T.TERMS_ID,1,6) app_term,  --   SELECT * FROM APPLICATIONS
   A.APPLICATIONS_ID app_number,
   REPLACE(CONVERT(CHAR(10), A.APPL_DATE, 111) , '/','-') app_dt,
   PE.PERSON_EMAIL_ADDRESSES personal_email,
   'T' is_active
FROM
   coll18_prod.dbo.PERSON P
      JOIN coll18_prod.dbo.PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      JOIN coll18_prod.dbo.APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
         --   AND
       --  A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
	--	    AND A.APPL_ADMIT_STATUS IN ('NEWAP','RADM1','RADM2')
      JOIN coll18_prod.dbo.APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
     --       AND
   --      APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN coll18_prod.dbo.TERMS T ON
         A.APPL_START_TERM = T.TERMS_ID
		  AND 
		  T.TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          T.TERMS_ID is not NULL and
          T.TERM_REG_START_DATE is not null
	  LEFT JOIN coll18_prod.dbo.PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
      --      AND  
       --  PE.PERSON_EMAIL_TYPES = 'STO'
	WHERE substring(P.ID,1,7) IN (SELECT * FROM ALL_STUDENTS))

	SELECT * FROM ENROLLMENT_APPLICATIONS EA1 
	
	where app_dt in 
	(
		SELECT max(app_dt) from ENROLLMENT_APPLICATIONS EA2 WHERE EA2.nk = EA1.nk
	)","EnrollmentApplication"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.CourseType","SELECT 
  stvschd_code nk,
  stvschd_desc name,
  'T' is_active
FROM stvschd","Course Type"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"catcc.TestSubject","SELECT DISTINCT 
      NON_COURSES_ID nk ,
      NCRS_SHORT_TITLE name,
      CAST(CAST(NCRS_MAX_SCORE AS DECIMAL(5,0)) AS VARCHAR) max_score,
      'T' is_active

  FROM NON_COURSES
    Where NON_COURSES_ID IS NOT NULL  AND 
          NON_COURSES.NCRS_CATEGORY_IDX != 'OTHER'  AND
		  NCRS_MAX_SCORE IS NOT NULL","Test Subject"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"reg.StudentTestScore"," with TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
),

tstlist as (
SELECT  DISTINCT STNC_PERSON_ID + '$$' + STNC_NON_COURSE as nk,
      STNC_PERSON_ID as student,
      STNC_NON_COURSE as test_subject,
      cast(ISNULL(cast(STNC_SCORE as numeric(7,2)), '0')  AS VARCHAR) as score,
      'T' as is_active
  FROM (SELECT STNC_PERSON_ID, STNC_TITLE, STNC_NON_COURSE, STNC_SCORE,
               ROW_NUMBER() OVER (PARTITION BY STNC_PERSON_ID, STNC_TITLE ORDER BY STNC_SCORE DESC) AS DUP
          FROM STUDENT_NON_COURSES
         WHERE STNC_STATUS = 'A') X
   JOIN STUDENT_TERMS  
       ON STNC_PERSON_ID = SUBSTRING(STUDENT_TERMS_ID, 1, (CHARINDEX('*', STUDENT_TERMS_ID) - 1))       
    JOIN STUDENT_PROGRAMS
       ON STNC_PERSON_ID = SUBSTRING(STUDENT_PROGRAMS_ID, 1, (CHARINDEX('*', STUDENT_PROGRAMS_ID) - 1))
    JOIN STPR_STATUSES
       ON STPR_STATUSES.STUDENT_PROGRAMS_ID = STUDENT_PROGRAMS.STUDENT_PROGRAMS_ID
      AND STPR_STATUSES.POS = '1'
      AND STPR_STATUSES.STPR_STATUS = 'A'
 where STUDENT_PROGRAMS.STUDENT_PROGRAMS_ID > ''
   and STUDENT_TERMS_ID is not null
   and SUBSTRING(STUDENT_TERMS_ID, CHARINDEX('*', STUDENT_TERMS_ID)+1, 5) in (SELECT SEC_TERM FROM TERMLIST)
)

SELECT nk, student, test_subject, score, is_active from tstlist 
JOIN PERSON_PIN pp on tstlist.student = pp.PERSON_PIN_ID
where pp.PERSON_PIN_USER_ID is not null
","Student Test Score"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.Subject","-- Fields: nk,name,is_active
-- Model Name: cat.Subject
-- Name: Subject
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get subject data from Banner  
WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  'T' AS is_active
FROM stvsubj
),

-- Assign default values
\\\""default\\\"" AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM subject
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Subjects"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.Section","SELECT distinct 
      COURSE_SECTIONS.COURSE_SECTIONS_ID nk,
       COURSE_SECTIONS.COURSE_SECTIONS_ID   cd, 
     COURSE_SECTIONS.SEC_NO display_cd,
      SEC_SUBJECT + '-' + SEC_COURSE_NO  course, 
      SEC_TERM     term, 
      ISNULL(SEC_LOCATION, 'MAIN')  campus,
      cast(ISNULL(SEC_CAPACITY, 0) as Varchar)  seats_offered, 
       'F' is_unlimited_seating ,
      CASE
        WHEN  LAST_NAME IS NULL THEN 
           'TBD' 
        ELSE
           LAST_NAME  + ', ' + 
           REPLACE(ISNULL(FIRST_NAME,''), '`', '``') 
       END
       instructor_name ,
      REPLACE(CONVERT(CHAR(10), SEC_START_DATE, 111) , '/','-') class_start_dt ,
      REPLACE(CONVERT(CHAR(10), SEC_END_DATE, 111) , '/','-') class_end_dt,
	  CASE   --drop start and end dates updated per Hocking's request to make them actual ranges
	    WHEN rus.RGUCS_DROP_START_DATE IS NOT NULL THEN REPLACE(CONVERT(CHAR(10), rus.RGUCS_DROP_START_DATE, 111) , '/','-')
		WHEN rus.RGUCS_DROP_START_DATE IS NULL AND SEC_OVR_DROP_START_DATE IS NOT NULL THEN REPLACE(CONVERT(CHAR(10), SEC_OVR_DROP_START_DATE, 111) , '/','-')
		WHEN rus.RGUCS_DROP_START_DATE IS NULL AND SEC_OVR_DROP_START_DATE IS NULL AND TERM_DROP_START_DATE IS NOT NULL THEN REPLACE(CONVERT(CHAR(10), TERM_DROP_START_DATE, 111) , '/','-')
		ELSE ''
	  END AS drop_start_dt,
	  CASE 
	    WHEN rus.RGUCS_DROP_END_DATE IS NOT NULL THEN REPLACE(CONVERT(CHAR(10), rus.RGUCS_DROP_END_DATE, 111) , '/','-')
		WHEN rus.RGUCS_DROP_END_DATE IS NULL AND SEC_OVR_DROP_END_DATE IS NOT NULL THEN REPLACE(CONVERT(CHAR(10), SEC_OVR_DROP_END_DATE, 111) , '/','-')
		WHEN rus.RGUCS_DROP_END_DATE IS NULL AND SEC_OVR_DROP_END_DATE IS NULL AND TERM_DROP_END_DATE IS NOT NULL THEN REPLACE(CONVERT(CHAR(10), TERM_DROP_END_DATE, 111) , '/','-')
		ELSE ''
	  END AS drop_end_dt,
      --case
      --    when SEC_OVR_CENSUS_DATES IS NULL then
      --   REPLACE(CONVERT(CHAR(10), TERM_CENSUS_DATES, 111), '/','-')
      --  else
      --   REPLACE(CONVERT(CHAR(10), SEC_OVR_CENSUS_DATES , 111) , '/','-')       
      -- end
      --  drop_start_dt,
      --case
      --    when SEC_OVR_CENSUS_DATES  IS NULL then
      --   REPLACE(CONVERT(CHAR(10), TERM_CENSUS_DATES, 111), '/','-') 
      --  else
      --   REPLACE(CONVERT(CHAR(10), SEC_OVR_CENSUS_DATES , 111) , '/','-')  
      -- end
      --  drop_end_dt,
      --CASE
      --    WHEN  SEC_STATUS = 'A' THEN 'T' 
      --    WHEN  (SEC_STATUS = 'C' OR SEC_STATUS = 'GH') THEN 'F' 
      -- END 
'T' is_active

  FROM COURSE_SECTIONS
   LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
   LEFT OUTER JOIN COURSE_SECTIONS_LS
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND
         COURSE_SECTIONS_LS.POS = '1'
    JOIN TERMS
	  ON SEC_TERM = TERMS_ID
	--JOIN TERMS_LS
      --ON SEC_TERM = TERMS_ID 
	    --AND TERMS_LS.POS = '1'
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1' AND
          (SEC_STATUS = 'A' OR 
           SEC_STATUS = 'C' OR
           SEC_STATUS = 'GH')
    LEFT JOIN REG_USER_SECTIONS rus
	       ON COURSE_SECTIONS.COURSE_SECTIONS_ID = RIGHT(rus.REG_USER_SECTIONS_ID, 6)
    Where (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )
       AND (SEC_NO < '600' OR SEC_NO > '799')

--order by SEC_TERM DESC","Section"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"core.studentcategory","Select Stvmedi_Code As Nk
, Stvmedi_Desc As \\\""Name\\\""
, 'T' As Is_Active
From Stvmedi

Union 
Select Stvdisa_Code As Nk
, STVDISA_DESC As \\\""Name\\\""
, 'T' As Is_Active
from STVDISA","StudentCategory"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.SeatsAvail","WITH sectionList AS (

SELECT distinct 
      COURSE_SECTIONS.COURSE_SECTIONS_ID nk
  FROM COURSE_SECTIONS 
   LEFT OUTER JOIN COURSE_SECTIONS_DETAILS_VIEW 
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_DETAILS_VIEW.COURSE_SECTIONS_ID 
       --  AND COURSE_SECTIONS_DETAILS_VIEW.POS = '1' -- SELECT * FROM COURSE_SECTIONS_DETAILS_VIEW
  /*  JOIN TERMS_LS  -- SELECT * FROM TERMS
      ON SEC_TERM = TERMS_ID AND
          TERMS_LS.POS = '1'
		  */
	JOIN TERMS 
	 ON TERMS.TERMS_ID = SEC_TERM
	 AND TERM_REPORTING_YEAR >=  (YEAR(GETDATE()) - 1) -- SELECT (YEAR(GETDATE()) - 5) FROM TERMS
	  and TERMS_ID is not NULL 
	  and TERM_REG_START_DATE is not null
	  AND TERMS.TERMS_ID LIKE '2%'
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1' AND
          (SEC_STATUS = 'A' OR 
           SEC_STATUS = 'C' OR
           SEC_STATUS = 'GH')
	

    Where 1=1
	-- AND (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )
     --  AND (CAST(SEC_NO AS INT) < 600 OR CAST(SEC_NO AS INT) > 799)
	 )

SELECT COURSE_SECTIONS_DETAILS_VIEW.COURSE_SECTIONS_ID AS nk,
       CASE
         WHEN CS_CAPACITY - CS_COUNT_STUDENTS >= 0 THEN CS_CAPACITY - CS_COUNT_STUDENTS
         ELSE 0
       END AS avail_seats,
       CASE
         WHEN CS_STATUS = 'A' THEN 'Y'
         ELSE 'N'
       END AS is_active
  FROM COURSE_SECTIONS_DETAILS_VIEW
 WHERE COURSE_SECTIONS_DETAILS_VIEW.COURSE_SECTIONS_ID IN (SELECT * FROM sectionList)","SeatsAvailable"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"catcc.PriorityRegSlot","with NOW_TERM AS (
  SELECT DISTINCT STVTERM_CODE as term_code
    FROM STVTERM
   WHERE STVTERM_END_DATE >= sysdate
)
select sfrctrl_term_code_host||'$$'||sfrctrl_pin_start as nk,
       sfrctrl_term_code_host as term,
       to_char(sfrctrl_begin_date,'YYYY-MM-DD')||'T00:00:00' as start_ts,
       to_char(sfrctrl_end_date,'YYYY-MM-DD')||'T23:59:59.999' as end_ts,
       'T' as is_active
  from SFRCTRL
 where (sfrctrl_PIN_START IS NOT NULL AND SFRCTRL_PIN_END IS NOT NULL)
   and (sfrctrl_hour_begin is null and sfrctrl_hour_end is null)
   and sfrctrl_term_code_host in (select * from now_term)
 ORDER BY 1,2","PriorityRegSlot"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"registration_status_lkp","select registration_status_cd,
registration_status_desc
 from atlantatech.osf_crl_course_registration_lkp","SSF_registration_status_lkp"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"catcc.TestSubject","
-- extract test subjects and scores from Banner
WITH testSubjects AS (
	SELECT UPPER(stvtesc_code) AS nk
	       , stvtesc_desc AS \\\""name\\\""
	       , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
	         	THEN TO_NUMBER(stvtesc_max_value) || '.00'
	        	ELSE stvtesc_max_value
	         END AS max_score -- test for decimal point and convert to decimal. This is done since navigate expects this data to be decimal and the data in banner may not be stored in decimal format.
	       , 'T' AS is_active
	  FROM stvtesc
	 WHERE 1=1
	   AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')  -- filter out any non digits. This is a decimal field in navigate and there have been instances where we have seen non-integer values in banner.
)

-- wrapper query
SELECT * FROM testSubjects","Test Subjects"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.CourseType","WITH courseType AS (
SELECT 
  stvschd_code nk,
  stvschd_desc \\\""name\\\"",
  'T' is_active
FROM stvschd
),

-- Assign default values
defaultValues AS (
Select 
'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM courseType
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","CourseType"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Term","-- get Terms from Banner
WITH term AS (
  SELECT 
  szvterm_code nk, 
  szvterm_desc \\\""name\\\"", 
  szvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(szvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and szvterm. If not available, assign default date
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(szvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and szvterm. If not available, assign default date
  to_char(szvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(szvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case 
    When (szvterm_Desc Like '%Fall%'
    or szvterm_Desc Like '%Winter%'
    or szvterm_Desc Like '%Spring%'
    or szvterm_Desc Like '%Summer%') 
    and szvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM szvterm 
  JOIN sfrrsts ON szvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code = 'RW' -- Confirm registration codes to include with BA/Member
  AND sfrrsts_ptrm_code = 'F15' -- Confirm ptrm code to include with BA/Member
  AND substr(szvterm_code,1,1) NOT IN ('6', '7', '8')
  AND szvterm_vpdi_code = 'PPCC'
  AND sfrrsts.SFRRSTS_VPDI_CODE = 'PPCC'
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in szvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
SELECT
  szvterm_code nk,
  szvterm_desc \\\""name\\\"",
  szvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(szvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(szvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case
    When (szvterm_Desc Like '%Fall%'
    or szvterm_Desc Like '%Winter%'
    or szvterm_Desc Like '%Spring%'
    or szvterm_Desc Like '%Summer%') 
    and szvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM szvterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = szvterm_code
                   AND sfrrsts_rsts_code = 'RW' -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_ptrm_code = 'F15'    -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_vpdi_code = 'PPCC') 
      AND szvterm_vpdi_code = 'PPCC'             
      AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8', '0')
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM finalDataSet","Terms"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.Department","-- get department data from Banner 
WITH department AS (
	SELECT stvdept_code nk,
	       stvdept_desc \\\""name\\\"",
	       'T' is_active
	  FROM stvdept
WHERE stvdept_code NOT IN ('ADLT','ALLD','AMAN','CCL','CERT','CONF','CONS','CONT','DEVE','DIRC','DISL','ENGL','FASH','FORS','GED','GRAP','GSAM','INFO','MACH',
    'MASO','MATH','MECO','META','MICR','PATC','PHYS','PLUM','PRIN','PSYC','QUIK','READ','SPEC','STUD','TECH','WIRE')
),

-- Assign default values
defaultValues AS (
	SELECT '0000' nk,
	       'Default' \\\""name\\\"",
	       'F' is_active
	  FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
	SELECT * FROM department
	UNION
	SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Department"
1026,"University of Wisconsin - Stout",10343,"",47988,"APS:University of Wisconsin - Stout",47975,"APS",24,"ps_class_tbl","select STRM from PS_CLASS_TBL","ps_class_tbl"
1021,"Houston Baptist University",10391,"",47987,"APS:Houston Baptist University",47975,"APS",24,"finance","DEFINE term_lower_bound = 200905
select a.tbraccd_pidm as entity_id
	, a.TBRACCD_EFFECTIVE_DATE as effective_date
	, a.tbraccd_term_code as term_code
	, a.tbraccd_tran_number as transaction_number
	, a.tbraccd_detail_code as detail_code 
	, d.tbbdetc_desc as detail_code_description
	, a.tbraccd_amount as amount
	, d.tbbdetc_dcat_code detail_category_code   		 
	, e.ttvdcat_desc detail_category_description        
	, to_char(a.tbraccd_entry_date,'yyyymmdd') as entry_date
	, to_char(a.tbraccd_due_date,'yyyymmdd') as due_date
	, a.tbraccd_balance as balance
	, a.tbraccd_srce_code as source_code
	, c.ttvsrce_desc as source_description
	, a.TBRACCD_DETAIL_CODE as detail_code_foapal 
	, a.TBRACCD_FEED_DATE as feed_date 
	, a.TBRACCD_FEED_DOC_CODE as feed_document 
	, d.tbbdetc_type_ind detail_type       				  
from tbraccd a
	join ttvsrce c on a.tbraccd_srce_code = c.ttvsrce_code
	join tbbdetc d on a.tbraccd_detail_code = d.tbbdetc_detail_code  
	join ttvdcat e on d.tbbdetc_dcat_code = e.ttvdcat_code    
where 1=1
and a.tbraccd_term_code >= '&term_lower_bound';","revenue_transactions"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.SectionTime","WITH SECTIONS_0 AS
(

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$8' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         8 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
          JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_MONDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_TUESDAY IS NULL        AND 
         COURSE_SEC_MEETING.CSM_WEDNESDAY IS NULL      AND 
         COURSE_SEC_MEETING.CSM_THURSDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_FRIDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_SATURDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_SUNDAY IS NULL
),

SECTIONS_1 AS
(
SELECT * FROM SECTIONS_0 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$1' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         1 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
        JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
          AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_SUNDAY = 'Y')
         ,

SECTIONS_2 AS
(
SELECT * FROM SECTIONS_1 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$2' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         2 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
         JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
           JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_MONDAY = 'Y')
         ,

SECTIONS_3 AS
(
SELECT * FROM SECTIONS_2 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$3' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         3 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
          JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_TUESDAY = 'Y'),

SECTIONS_4 AS
(
SELECT * FROM SECTIONS_3 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$4' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         4 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
          JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_WEDNESDAY = 'Y'),

SECTIONS_5 AS
(
SELECT * FROM SECTIONS_4 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$5' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         5 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
        'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
         JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
           JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_THURSDAY = 'Y'),

SECTIONS_6 AS
(
SELECT * FROM SECTIONS_5 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$6' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         6 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
          JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_FRIDAY = 'Y'),

SECTIONS_7 AS
(
SELECT * FROM SECTIONS_6 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$7' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section,
         COURSE_SECTIONS.COURSE_SECTIONS_ID COURSE_SECTIONS_ID, 
         SEC_NAME,
         7 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
         JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
           JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_SATURDAY = 'Y'),

sec8 as (SELECT  DISTINCT
       SECTIONS_7.nk||'$$'||REPLACE(from_tm||'$$'||to_tm,':','') as nk,
         section, 
         day_of_week,
         from_tm,
         to_tm,
         NVL(RTRIM(location),'TBD') as location,
         is_active   

 FROM SECTIONS_7),

 
-- Map of lecture to coreq lab (SEC_NAME - SEC_NAME)
LECTURE_LAB AS 
(
SELECT CS_LAB.SEC_TERM||'-'||CS_LAB.SEC_NAME LAB, CS_LEC.SEC_TERM||'-'||CS_LEC.SEC_NAME LEC 
FROM COLL_PRODUCTION.COURSE_SECTIONS CS_LAB 
JOIN COLL_PRODUCTION.COURSE_SECTIONS_LS CSLS ON 
  CS_LAB.COURSE_SECTIONS_ID = CSLS.COURSE_SECTIONS_ID AND CSLS.POS = 1 
JOIN COLL_PRODUCTION.COURSE_SECTIONS CS_LEC ON 
  CS_LEC.COURSE_SECTIONS_ID = CSLS.SEC_COREQ_SECS
WHERE CSLS.SEC_COREQ_SECS IS NOT NULL AND CS_LAB.SEC_COURSE_NO LIKE '%L'),

valid_sections as
(select * from sec8 where section not in(select LAB FROM LECTURE_LAB)),


invalid_sections as (
select
         lec || '$$' || day_of_week ||'$$'||REPLACE(from_tm||'$$'||to_tm,':','')  nk,
         lec section,
         day_of_week,
         from_tm,
         to_tm,
         location,
         is_active    
from sec8 
join LECTURE_LAB on LAB = section)

select * from valid_sections
union
select * from invalid_sections
         
 




/*

OLD VERSION, NO LECTURE LAB

-- todo add time restriction to sec_0
--     remove term from where clause, use join to terms instead

WITH SECTIONS_0 AS
(

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$8' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         8 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
          JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_MONDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_TUESDAY IS NULL        AND 
         COURSE_SEC_MEETING.CSM_WEDNESDAY IS NULL      AND 
         COURSE_SEC_MEETING.CSM_THURSDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_FRIDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_SATURDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_SUNDAY IS NULL
),

SECTIONS_1 AS
(
SELECT * FROM SECTIONS_0 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$1' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         1 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
        JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
          AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_SUNDAY = 'Y')
         ,

SECTIONS_2 AS
(
SELECT * FROM SECTIONS_1 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$2' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         2 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
         JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
           JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_MONDAY = 'Y')
         ,

SECTIONS_3 AS
(
SELECT * FROM SECTIONS_2 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$3' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         3 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
          JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_TUESDAY = 'Y'),

SECTIONS_4 AS
(
SELECT * FROM SECTIONS_3 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$4' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         4 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
          JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_WEDNESDAY = 'Y'),

SECTIONS_5 AS
(
SELECT * FROM SECTIONS_4 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$5' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         5 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
        'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
         JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
           JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_THURSDAY = 'Y'),

SECTIONS_6 AS
(
SELECT * FROM SECTIONS_5 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$6' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         6 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
          JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_FRIDAY = 'Y'),

SECTIONS_7 AS
(
SELECT * FROM SECTIONS_6 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$7' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         7 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_PRODUCTION.COURSE_SECTIONS
         JOIN COLL_PRODUCTION.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
           JOIN COLL_PRODUCTION.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_PRODUCTION.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_SATURDAY = 'Y')
         

SELECT  DISTINCT
       SECTIONS_7.nk||'$$'||REPLACE(from_tm||'$$'||to_tm,':','') as nk,
         section, 
         day_of_week,
         from_tm,
         to_tm,
         NVL(RTRIM(location),'TBD'),
         is_active   

 FROM SECTIONS_7 

*/","SectionTime"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"core.Student","with CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-3*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC
),

STU_POP AS (
  SELECT SFRSTCR_PIDM AS PIDM
    FROM SFRSTCR
   WHERE SFRSTCR_TERM_CODE IN (SELECT * from cur_term)
  UNION
  SELECT SARADAP_PIDM AS PIDM
    FROM SARADAP
   WHERE SARADAP_TERM_CODE_ENTRY IN (SELECT * from cur_term)
),

CUR_STU AS (
  SELECT PIDM,
         trim(replace(coalesce((select goremal_email_address
                 from goremal
                where goremal_emal_code IN ('HAWK', 'HACC')
                  and goremal_pidm = PIDM
                  and goremal_email_address LIKE '%@%hacc.edu'
                  and rownum = 1),
              (select goremal_email_address
                 from goremal
                where goremal_pidm = PIDM
                  and goremal_email_address NOT LIKE '%@%hacc.edu'
                  and rownum = 1),
               lower(spriden_id) || '@missing.hacc.edu'), ' ','')) email
    FROM STU_POP LEFT join spriden on pidm = spriden_pidm
                                  and spriden_change_ind is null
)

SELECT DISTINCT
  spriden_id nk,
  case
    when instr(email, '@') > 0 and email like '%@%hacc.edu' THEN substr(email, 0, instr(email, '@')-1)
    else spriden_id
  end username,
  case
    when email like '%@%.%' then email
    else lower(spriden_id) || '@missing.hacc.edu'
  end email,
  spriden_first_name first_name,
  spriden_last_name last_name,
  NVL(to_char(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') birthdate,
  CASE
    -- Restrict this to a particular list of programs if possible, to filter 
    -- on which students are actually active.
    WHEN EXISTS ( 
                  SELECT 1
                  FROM sgbstdn
                  WHERE sgbstdn_pidm = spriden.spriden_pidm
                ) THEN 'T'
    ELSE 'F'
  END is_active
FROM CUR_STU LEFT JOIN spbpers ON pidm = spbpers_pidm
                  join spriden on pidm = spriden_pidm
WHERE spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'","Student"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.StudentCourse","with CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-3*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC),

STU_POP AS (
  SELECT SFRSTCR_PIDM AS PIDM
    FROM SFRSTCR
   WHERE SFRSTCR_TERM_CODE IN (SELECT * from cur_term)
  UNION
  SELECT SARADAP_PIDM AS PIDM
    FROM SARADAP
   WHERE SARADAP_TERM_CODE_ENTRY IN (SELECT * from cur_term))

SELECT distinct
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb nk, 
  spriden_id student,
  stvterm_code term, 
  ssbsect_subj_code || ssbsect_crse_numb course,
  ssbsect.ssbsect_crn || '$$' || ssbsect_term_code section,
  sfrstcr_grde_code grade_cd,
  CASE 
    WHEN sfrstcr_rsts_code in ('RE', 'RA', 'RW', 'WR') and sfrstcr_grde_code = 'A' THEN 4.0
    WHEN sfrstcr_rsts_code in ('RE', 'RA', 'RW', 'WR') and sfrstcr_grde_code = 'B' THEN 3.0
    WHEN sfrstcr_rsts_code in ('RE', 'RA', 'RW', 'WR') and sfrstcr_grde_code = 'C' THEN 2.0
    WHEN sfrstcr_rsts_code in ('RE', 'RA', 'RW', 'WR') and sfrstcr_grde_code = 'D' THEN 1.0
    WHEN sfrstcr_rsts_code in ('RE', 'RA', 'RW', 'WR') and sfrstcr_grde_code = 'S' THEN 2.0
    WHEN sfrstcr_rsts_code in ('RE', 'RA', 'RW', 'WR') and sfrstcr_grde_code = 'PA' THEN 2.0
    WHEN sfrstcr_rsts_code in ('RE', 'RA', 'RW', 'WR') and sfrstcr_grde_code = 'CR' THEN 2.0
    -- Account for pass/fail classes.
    WHEN sfrstcr_rsts_code in ('RE', 'RA', 'RW', 'WR') and sfrstcr_gmod_code = 'P' and sfrstcr_grde_code = 'P' THEN sfrstcr_credit_hr

    -- Account for transfer classes, there is no record in how they store a passing tranfer class in this table, so assuming it follows 
    -- the same format as above. 
    WHEN sfrstcr_rsts_code in ('RE', 'RA', 'RW', 'WR') and sfrstcr_gmod_code = 'T' and sfrstcr_grde_code = 'P' THEN sfrstcr_credit_hr
    WHEN sfrstcr_rsts_code in ('RE', 'RA', 'RW', 'WR') and sfrstcr_grde_code IS NULL THEN 0.0
  ELSE 0.0
  END grade_points,
  COALESCE(sfrstcr_credit_hr, 0) credits_attempted,
  CASE
    WHEN sfrstcr_grde_code IS NOT NULL THEN sfrstcr_credit_hr
    ELSE 0
  END credits_earned,
  CASE
    WHEN sfrstcr_rsts_code IN ('RE', 'RA', 'RW', 'WR') AND stvterm_start_date > sysdate THEN 'REGISTERED'      
    WHEN sfrstcr_rsts_code IN ('RE', 'RA', 'RW', 'WR') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate THEN 'IN_PROGRESS'
    WHEN sfrstcr_rsts_code IN ('RE', 'RA', 'RW', 'WR') AND sfrstcr_grde_code IN ('A', 'B', 'C', 'D', 'S', 'P', 'PA', 'CR') THEN 'COMPLETED'
    ELSE 'UNKNOWN'
  END status,
  'T' is_active
FROM spriden JOIN sfrstcr ON spriden_pidm = sfrstcr_pidm
             JOIN stvterm ON stvterm_code = sfrstcr_term_code
             JOIN ssbsect ON ssbsect_crn = sfrstcr_crn AND ssbsect_term_code = sfrstcr_term_code
        LEFT JOIN stvrsts ON sfrstcr_rsts_code = stvrsts_code
        LEFT JOIN goremal ON spriden_pidm = goremal_pidm
                         AND goremal_emal_code IN ('HAWK', 'HACC')
WHERE spriden_change_ind IS NULL
  AND stvrsts_withdraw_ind = 'N'
  AND (stvrsts_withdraw_ind = 'N' AND (stvrsts_wait_ind = 'Y' OR stvrsts_incl_sect_enrl = 'Y'))
  AND stvterm_start_date <= sysdate
  and SPRIDEN_PIDM IN (select * from STU_POP)","Student Course"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"reg.StudentTestScore","with CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-1*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC
),
STU_POP AS (
  SELECT SFRSTCR_PIDM AS PIDM
    FROM SFRSTCR
   WHERE SFRSTCR_TERM_CODE IN (SELECT * from cur_term)
  UNION
  SELECT SARADAP_PIDM AS PIDM
    FROM SARADAP
   WHERE SARADAP_TERM_CODE_ENTRY IN (SELECT * from cur_term)
)
SELECT 
  spriden_id || '$$' || stvtesc_code nk,
  spriden_id student,
  UPPER(stvtesc_code) test_subject,
  MAX(to_number(sortest_test_score)) score,
  'T' is_active
FROM spriden JOIN sortest ON spriden_pidm = sortest_pidm
             JOIN stvtesc ON sortest_tesc_code = stvtesc_code
        LEFT JOIN general.goremal ON spriden_pidm = goremal_pidm
             JOIN sgbstdn ON spriden_pidm = sgbstdn_pidm
WHERE stvtesc_data_type = 'N'
  AND spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
  AND (goremal_email_address LIKE '%@%hacc.edu' AND goremal_email_address NOT LIKE '%norepl%')
  and spriden_pidm in (select pidm from stu_pop)
GROUP BY spriden_id || '$$' || stvtesc_code,
         spriden_id,
         stvtesc_code
UNION 
SELECT 
  spriden_id || '$$' || stvtesc_code nk,
  spriden_id student,
  UPPER(stvtesc_code) test_subject,
  MAX(to_number(sortest_test_score)) score,
  'T' is_active
FROM spriden JOIN sortest ON spriden_pidm = sortest_pidm
             JOIN stvtesc ON sortest_tesc_code = stvtesc_code
        LEFT JOIN general.goremal ON spriden_pidm = goremal_pidm
             JOIN sgbstdn ON spriden_pidm = sgbstdn_pidm
WHERE stvtesc_data_type = 'N'
  AND spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
  AND (goremal_email_address NOT LIKE '%@%hacc.edu')
  and spriden_pidm in (select pidm from stu_pop)
GROUP BY spriden_id || '$$' || stvtesc_code,
         spriden_id,
         stvtesc_code
ORDER BY 2,3","Test Scores"
1208,"Wiregrass Georgia Technical College",10505,"",48356,"Navigate:Wiregrass Georgia Technical College",47972,"Navigate",20,"cat.Program","? determine most recent term for each Program by finding the max term for each program in sobcurr
WITH maxEffectiveTerm AS (
SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
FROM sobcurr
GROUP BY sobcurr_program
),
programCredits as (
select smbpgen.smbpgen_program,
smbpgen.smbpgen_term_code_eff,
smbpgen.smbpgen_active_ind,
nvl(smbpgen.smbpgen_req_credits_overall, 0.0) as credits
from smbpgen join (select sMBPGEN_PROGRAM, max(smbpgen_term_code_eff) max_term
from smbpgen
where smbpgen_active_ind = 'Y'
group by sMBPGEN_PROGRAM) s on smbpgen.smbpgen_program = s.smbpgen_program
and smbpgen.smbpgen_term_code_eff = s.max_term
),
? Collection of program descriptions ? SMRPCMT
prog_desc as (
select smrpcmt_program, listagg(smrpcmt_text, ' ') within group (order by smrpcmt_text_seqno asc) smrpcmt_text ? within group (order by smrpcmt_prnt_code asc) as smrpcmt_text
from smrpcmt s1 join (select s2.smrpcmt_program as prgm, max(s2.smrpcmt_term_code_eff) as term
from smrpcmt s2 group by s2.smrpcmt_program) mx on s1.smrpcmt_term_code_eff = Mx.term
and s1.smrpcmt_program = Mx.Prgm
where 1=1 
? and smrpcmt_prnt_code is not null ? 20161214 YA EAB CHANGE ? Wiregrass Programs ? NAV Ticket Number 
and smrpcmt_text is not null
group by smrpcmt_program
order by smrpcmt_program
),
? extract program data from Banner
program AS (
SELECT DISTINCT
sobcurr_program || '$$' || stvterm_acyr_code AS nk,
sobcurr_program AS cd,
TO_NUMBER(stvterm_acyr_code) AS cat_yr,
smrprle_program_desc AS ""name"",
coalesce(smrpcmt_text, smrprle_program_desc, 'None') AS ""desc"",
NVL(credits, 0.0) AS CREDITS, ? confirm degree code to credits conversion with BA/Member. This logic may differ for different colleges and will need to be adjusted accordingly.
'' AS enrollment_notes,
'' AS registration_notes,
? Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_' Confirm with BA/Memeber.
sobcurr_program AS area_of_study,
'' AS concentration,
sobcurr_degc_code AS ""credential"",
DECODE (stvmajr_cipc_code,
null,
null,
SUBSTR(stvmajr_cipc_code,1,2)||'.'||SUBSTR(stvmajr_cipc_code,3)) AS cip,
CASE
WHEN sobcurr_degc_code IN ('AA','AS') THEN 'T'
ELSE 'F'
END AS is_transfer, ? Confirm with BA
CASE
WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T'
ELSE 'F'
END AS is_active
FROM sobcurr LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
LEFT JOIN smrprle ON smrprle_program = sobcurr_program
LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
LEFT JOIN stvmajr ON stvmajr_code = sobcurr_program --(SUBSTR(sobcurr_program,1,CAST(INSTR(sobcurr_program,'_') AS NUMBER)-1))
? Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_'. Confirm with BA/Memeber. Should match with area_of_study in SELECT portion of query.
LEFT JOIN programCredits ON sobcurr_program = smbpgen_program
LEFT JOIN prog_desc on sobcurr_program = smrpcmt_program
where smbpgen_term_code_eff >= '201212' ? per Bruce
and smbpgen_active_ind = 'Y' ? per Bruce
)
? Wrapper query
SELECT * FROM program","Program3"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.EnrollmentApplication","-- Columns: nk,student,app_term,app_number,app_dt,personal_email,is_active
-- Model: cat.EnrollmentApplication
with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),
now_term as (
  select stvterm_code as a_term
    from stvterm
   where stvterm_end_date >= sysdate
     and rownum = 1
   order by stvterm_code asc
),
TERM_LIST AS (
  select stvterm_code,
         (select a_term from now_term) as now_term
    from stvterm
   where stvterm_code <= (select * from now_term)
     and rownum < 5
   order by stvterm_code desc
),
FUTR_TERM as (
  select stvterm_code
    from stvterm
   where stvterm_end_date >= sysdate
),
ACTV_TERM as (
  select stvterm_code,
         now_term,
         case
           -- summer
           when substr(now_term,-2,2) = '50' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- spring
           when substr(now_term,-2,2) = '10' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- fall
           when substr(now_term,-2,2) = '80' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              else 'F'
            end         
           -- other
           else 'F'
         end as is_active
    from term_list
),
pop as  (
  select distinct s2.spriden_pidm as pidm, s2.spriden_id as student_id
    from saradap s1 join spriden s2 on s1.saradap_pidm = s2.spriden_pidm
                                   and s2.spriden_change_ind is null
   where s1.saradap_term_code_entry in (select stvterm_code from ACTV_TERM where is_active='T'
                                        union
                                        select stvterm_code from FUTR_TERM)
),
email_list as (
   Select Goremal_Pidm As Pidm,
         --Coalesce(
          ( select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'PERS' and rownum = 1 /*),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'BUS' and rownum = 1),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'OTH' and rownum = 1),
          ''
        */ ) as email
    from goremal g
   group by goremal_pidm
),
app_list as (
select p.student_id as nk,
       p.student_id as student,
       saradap_term_code_entry as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       trim(el.email) as personal_email,
       'T' as is_active
  from saradap join max_list ml on saradap_pidm = ml.pidm
                               and saradap_term_code_entry = ml.max_term
               left join pop p on saradap_pidm = p.pidm
               left join email_list el on saradap_pidm = el.pidm
 where saradap_term_code_entry in (select stvterm_code from ACTV_TERM where is_active='T'
                                   union
                                   select stvterm_code from FUTR_TERM)
   and p.student_id is not null
   and SARADAP_APST_CODE= 'D'
)
select nk, student, app_term, app_number, app_dt, personal_email, is_active
  from app_list
 where to_date(app_dt, 'YYYY-MM-DD') >= to_date('2016-06-01', 'YYYY-MM-DD')","Enrollment Table"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.Department","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Departments File

Fields: nk,name,is_active
*/

SELECT NVL(TRIM(dt.dept), '')  AS nk
       , NVL(TRIM(dt.txt), '') AS name
       , CASE
           WHEN dt.inactive_date IS NULL THEN 'T'
           ELSE 'F'
         END                   AS is_active
FROM informix.dept_table dt
WHERE 1=1
   --AND dt.dept <> ''  --Might be useful to not include this filter for student data
ORDER BY 1","Departments"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"reg.studenttestscore","WITH pop AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)))),

pilot_pop as (
select distinct spriden_id from spriden
where spriden_id in ('T20142073'
,'T20140697'
,'T20139119'
,'T10251137'
,'T20138021'
,'T20136434'
,'T20134673'
,'T20131375'
,'T20137438'
,'T20114175'
,'T20131469'
,'T20145320'
,'T20135191'
,'T20144781'
,'T20140735'
,'T20133146'
,'T20139433'
,'T20145098'
,'T20095402'
,'T10506206'
,'T20134956'
,'T20122902'
,'T20139358'
,'T20141010'
,'T20046439'
,'T20134456'
,'T20111699'
,'T20088198'
,'T20132140'
,'T20144577'
,'T20144248'
,'T20138423'
,'T10477229'
,'T20130807'
,'T20132168'
,'T10058915'
,'T10504163'
,'T20119930'
,'T20139673'
,'T20137195'
,'T20115410'
,'T20138371'
,'T20135216'
,'T20137107'
,'T20135351'
,'T10176118'
,'T20133133'
,'T20141011'
,'T20133981'
,'T20138465'
,'T20133607'
,'T20139457'
,'T20133061'
,'T20055122'
,'T20142927'
,'T10496770'
,'T20133798'
,'T20132597'
,'T10088929'
,'T20115225'
,'T20095609'
,'T20142869'
,'T20132854'
,'T20133799'
,'T20131545'
,'T10505966'
,'T20130703'
,'T10519131'
,'T20128360'
,'T10468056'
,'T20128050'
,'T20132842'
,'T20133042'
,'T20134959'
,'T20140283'
,'T20063121'
,'T20142881'
,'T20136737'
,'T10492037'
,'T20145332'
,'T20146144'
,'T20131168'
,'T20133280'
,'T10056173'
,'T20143531'
,'T10122923'
,'T10395150'
,'T20080238'
,'T20142208'
,'T20141858'
,'T20137198'
,'T10006300'
,'T20134879'
,'T20137647'
,'T20143392'
,'T20139792'
,'T20134644'
,'T10441633'
,'T20141013'
,'T20146342'
,'T20130969'
,'T20135704'
,'T10096962'
,'T10467557'
,'T20133983'
,'T20138838'
,'T10447438'
,'T20136594'
,'T10503497'
,'T20139562'
,'T20137273'
,'T20135272'
,'T10399168'
,'T10123727'
,'T20115291'
,'T20135996'
,'T20117080'
,'T20014160'
,'T20139032'
,'T20123489'
,'T10205738'
,'T20112755'
,'T20145718'
,'T20141014'
,'T20140833'
,'T20137665'
,'T20135779'
,'T20141321'
,'T10294503'
,'T20142481'
,'T20133108'
,'T20132864'
,'T20134933'
,'T10206792'
,'T20137254'
,'T20142607'
,'T20139474'
,'T20129043'
,'T20084202'
,'T20147275'
,'T20131170'
,'T20133604'
,'T20147323'
,'T20140182'
,'T10296455'
,'T20131501'
,'T10095922'
,'T10177472'
,'T20139589'
,'T20079879'
,'T20141492'
,'T10144590'
,'T20041336'
,'T20132583'
,'T20135635'
,'T10340233'
,'T20113607'
,'T20146431'
,'T10474490'
,'T20140921'
,'T20143550'
,'T10211487'
,'T10142228'
,'T10294986'
,'T20146774'
,'T20141823'
,'T10442942'
,'T20117727'
,'T20130512'
,'T20139125'
,'T20135468'
,'T20127746'
,'T20142967'
,'T20134186'
,'T20134824'
,'T20145002'
,'T10175892'
,'T20136057'
,'T20128367'
,'T20131053'
,'T10315652'
,'T20135488'
,'T10381462'
,'T20092053'
,'T20133344'
,'T20144169'
,'T20132403'
,'T20130460'
,'T20140664'
,'T20145935'
,'T20134091'
,'T20137110'
,'T20123052'
,'T20081397'
,'T20146761'
,'T20061897'
,'T10439742'
,'T20144153'
,'T20142248'
,'T20134386'
,'T20126393'
,'T20136676'
,'T20138302'
,'T10477366'
,'T20140082'
,'T20143694'
,'T20140705'
,'T20131175'
,'T20069501'
,'T20118589'
,'T20136743'
,'T10335488'
,'T10326611'
,'T10359491'
,'T10507529'
,'T20140978'
,'T20136077'
,'T20139909'
,'T20130710'
,'T20139042'
,'T20146808'
,'T20144583'
,'T20133348'
,'T10513922'
,'T20031817'
,'T20136112'
,'T20145515'
,'T20146268'
,'T20138257'
,'T20143079'
,'T20141619'
,'T10511698'
,'T20143695'
,'T20132887'
,'T20132148'
,'T20141583'
,'T20136957'
,'T20130975'
,'T20137029'
,'T20023954'
,'T10318698'
,'T20115504'
,'T20131477'
,'T20146959'
,'T20132346'
,'T20138232'
,'T20135079'
,'T10508075'
,'T20135080'
,'T10504843'
,'T20144756'
,'T20131054'
,'T20140255'
,'T20089878'
,'T20124754'
,'T10116061'
,'T20134893'
,'T10437101'
,'T20120062'
,'T20147250'
,'T20147251'
,'T20122420'
,'T20136746'
,'T20119127'
,'T20130252'
,'T20140922'
,'T20136838'
,'T20133660'
,'T20139295'
,'T20142545'
,'T20135939'
,'T20133594'
,'T10230617'
,'T20140256'
,'T20122937'
,'T20119377'
,'T10252559'
,'T20090331'
,'T10487852'
,'T20058984'
,'T20138040'
,'T20143776'
,'T20132075'
,'T10385531'
,'T20116854'
,'T20130202'
,'T20136974'
,'T20118914'
,'T20133990'
,'T20135281'
,'T20139682'
,'T20136799'
,'T20072936'
,'T20136840'
,'T20133111'
,'T20143795'
,'T20140536'
,'T20135201'
,'T20120559'
,'T20131220'
,'T20131818'
,'T20137687'
,'T20137304'
,'T20138259'
,'T20141688'
,'T20134390'
,'T20034050'
,'T20134096'
,'T20127085'
,'T10019429'
,'T20139803'
,'T20134098'
,'T20131292'
,'T20139634'
,'T20143295'
,'T20133318'
,'T20144758'
,'T20135009'
,'T10296471'
,'T20071143'
,'T20113869'
,'T20140459'
,'T20145541'
,'T20134082'
,'T20122948'
,'T20134190'
,'T10436612'
,'T20131221'
,'T20145566'
,'T20139851'
,'T20124519'
,'T20119193'
,'T20129204'
,'T10146291'
,'T20091274'
,'T20132027'
,'T20135783'
,'T20133610'
,'T20131443'
,'T20137691'
,'T10493936'
,'T20141390'
,'T20134255'
,'T20141648'
,'T20078519'
,'T10447063'
,'T20061306'
,'T20134900'
,'T20142574'
,'T20134901'
,'T10200437'
,'T20132559'
,'T20143964'
,'T20084632'
,'T20141534'
,'T10443090'
,'T20144716'
,'T20119912'
,'T20138678'
,'T10510280'
,'T20147181'
,'T20130292'
,'T20137382'
,'T20138847'
,'T20117223'
,'T20131821'
,'T20134822'
,'T20134137'
,'T20143406'
,'T20131891'
,'T20121708'
,'T20136206'
,'T20146440'
,'T20141395'
,'T20137203'
,'T10168440'
,'T20146109'
,'T10472273'
,'T20137699'
,'T10266376'
,'T20136922'
,'T10174716'
,'T20144899'
,'T20132031'
,'T20136021'
,'T20129743'
,'T20122640'
,'T20133354'
,'T10481027'
,'T20131445'
,'T20134314'
,'T20133499'
,'T20136686'
,'T20120128'
,'T20146817'
,'T20136750'
,'T10384075'
,'T20087760'
,'T20123538'
,'T20122329'
,'T20141300'
,'T20140005'
,'T20132663'
,'T20137052'
,'T20135285'
,'T10517523'
,'T20145693'
,'T20142576'
,'T20131154'
,'T10014257'
,'T20127008'
,'T10309100'
,'T20075322'
,'T20136447'
,'T20143091'
,'T20129206'
,'T20147283'
,'T20132783'
,'T20145561'
,'T20131734'
,'T10437963'
,'T10086976'
,'T10050205'
,'T20143610'
,'T20134358'
,'T20139143'
,'T20124815'
,'T20139013'
,'T20124623'
,'T20134476'
,'T20139574'
,'T20113016'
,'T20137702'
,'T20138053'
,'T20136295'
,'T20131550'
,'T20130825'
,'T20139541'
,'T20141887'
,'T10476936'
,'T20065512'
,'T20136779'
,'T20129271'
,'T20136980'
,'T20143058'
,'T20134359'
,'T20131306'
,'T20142925'
,'T20134767'
,'T20145801'
,'T20133417'
,'T10175235'
,'T20138430'
,'T20141947'
,'T20108165'
,'T20135786'
,'T10481144'
,'T20119833'
,'T20135872'
,'T20143742'
,'T20110228'
,'T20130958'
,'T20147260'
,'T20134478'
,'T20136956'
,'T20137386'
,'T20109857'
,'T20134197'
,'T20136690'
,'T20136850'
,'T20001238'
,'T20084053'
,'T20138396'
,'T20113414'
,'T20134103'
,'T10311169'
,'T20138734'
,'T20131248'
,'T10265914'
,'T20025324'
,'T20132174'
,'T20135124'
,'T20112243'
,'T20146364'
,'T20135945'
,'T20116400'
,'T20131794'
,'T10259274'
,'T20132081'
,'T20071682'
,'T20148029'
,'T20134290'
,'T20135289'
,'T20136342'
,'T20136616'
,'T20065403'
,'T20133462'
,'T20146673'
,'T20140678'
,'T20136106'
,'T20146891'
,'T20133966'
,'T20069324'
,'T20126031'
,'T20141629'
,'T20138454'
,'T20071432'
,'T20078935'
,'T20140212'
,'T20129628'
,'T10500206'
,'T20144519'
,'T20134791'
,'T20145441'
,'T20132977'
,'T10478796'
,'T20116519'
,'T20120398'
,'T10477645'
,'T20129661'
,'T20145218'
,'T20146757'
,'T20131971'
,'T20128268'
,'T20144380'
,'T20134651'
,'T10283489'
,'T20142624'
,'T20134396'
,'T20119458'
,'T10060725'
,'T20137929'
,'T20137329'
,'T20074716'
,'T20062336'
,'T20127505'
,'T10522482'
,'T10049390'
,'T20141588'
,'T20135361'
,'T20137072'
,'T10207952'
,'T20126577'
,'T20146460'
,'T20108892'
,'T20118363'
,'T20131669'
,'T20138322'
,'T10468446'
,'T20137460'
,'T20131601'
,'T10484588'
,'T20135480'
,'T20094863'
,'T20046244'
,'T20134917'
,'T20136968'
,'T20137179'
,'T20130175'
,'T10486170'
,'T20138082'
,'T20145264'
,'T20131826'
,'T20136194'
,'T20138460'
,'T20148240'
,'T10515725'
,'T20134918'
,'T20016534'
,'T20144635'
,'T10479503'
,'T20138149'
,'T20139865'
,'T20136801'
,'T20133371'
,'T20130256'
,'T10448705'
,'T20127982'
,'T20144930'
,'T20110308'
,'T20137629'
,'T20133100'
,'T20070882'
,'T20134773'
,'T20140040'
,'T10495201'
,'T20006056'
,'T20141233'
,'T10288911'
,'T20136991'
,'T20132351'
,'T20132548'
,'T20136536'
,'T20133084'
,'T20133596'
,'T20145386'
,'T20141889'
,'T20135791'
,'T20137062'
,'T20142933'
,'T20133703'
,'T20124009'
,'T20146636'
,'T20124628'
,'T10086790'
,'T20111398'
,'T20084752'
,'T20137718'
,'T20145178'
,'T10142257'
,'T20130647'
,'T20123940'
,'T10283820'
,'T20112971'
,'T20076464'
,'T20138952'
,'T20132485'
,'T20080343'
,'T10086855'
,'T20132424'
,'T10409070'
,'T10449553'
,'T20091507'
,'T10512048'
,'T20132654'
,'T20140344'
,'T20144164'
,'T10478308'
,'T20130212'
,'T20146190'
,'T20046319'
,'T20139987'
,'T10140198'
,'T10383977'
,'T10473289'
,'T20145505'
,'T20132044'
,'T20127784'
,'T20144931'
,'T10325462'
,'T20139824'
,'T20086350'
,'T20136692'
,'T10489634'
,'T20140058'
,'T20135643'
,'T20134685'
,'T20129943'
,'T20141635'
,'T10411480'
,'T20127057'
,'T10154990'
,'T10459511'
,'T20140935'
,'T10517646'
,'T20139581'
,'T20135218'
,'T20137346'
,'T20134588'
,'T20131535'
,'T20135295'
,'T20135644'
,'T10293158'
,'T20132460'
,'T20143444'
,'T20094793'
,'T20135434'
,'T20070281'
,'T20122450'
,'T20124359'
,'T20130930'
,'T20086621'
,'T20136860'
,'T20138099'
,'T20136584'
,'T20136913'
,'T10222992'
,'T20119775'
,'T20121198'
,'T20141030'
,'T10504585'
,'T20139671'
,'T20118744'
,'T10265820'
,'T20092446'
,'T20148020'
,'T20135647'
,'T20139813'
,'T10097674'
,'T20134210'
,'T20132089'
,'T20136585'
,'T20140047'
,'T10265625'
,'T20005802'
,'T10086480'
,'T20145445'
,'T20137213'
,'T20134830'
,'T20144689'
,'T20093769'
,'T20137816'
,'T20144255'
,'T20141057'
,'T20139814'
,'T20136757'
,'T20132581'
,'T20140266'
,'T10323807'
,'T10449081'
,'T20134653'
,'T20121852'
,'T20134925'
,'T20142418'
,'T20141700'
,'T10324606'
,'T20136199'
,'T20140767'
,'T20136870'
,'T20136946'
,'T20147121'
,'T20121549'
,'T20136758'
,'T20137561'
,'T20132181'
,'T20131317'
,'T10506766'
,'T20145894'
,'T20134212'
,'T20137214'
,'T20133213'
,'T20136012'
,'T10148685'
,'T20132695'
,'T20135877'
,'T20134260'
,'T20141909'
,'T20132879'
,'T20139075'
,'T20130653'
,'T10507745'
,'T20145055'
,'T20133572'
,'T20134782'
,'T20129069'
,'T20140686'
,'T10496038'
,'T20130837'
,'T20142837'
,'T20098073'
,'T20143749'
,'T20059555'
,'T20045708'
,'T20135234'
,'T20136460'
,'T20135978'
,'T20131723'
,'T20136354'
,'T20142897'
,'T20088032'
,'T20139077'
,'T20130874'
,'T20146844'
,'T10065938'
,'T20146531'
,'T20147453'
,'T20065690'
,'T20132052'
,'T20140352'
,'T20124929'
,'T20124823'
,'T10164489'
,'T20131073'
,'T20136865'
,'T20136356'
,'T20135110'
,'T20141652'
,'T20143566'
,'T20138868'
,'T20119530'
,'T20132674'
,'T10486697'
,'T20144881'
,'T10395596'
,'T20131603'
,'T20141417'
,'T10169417'
,'T20013500'
,'T20137067'
,'T20136201'
,'T20131489'
,'T20138074'
,'T10516932'
,'T20131075'
,'T20143425'
,'T20131608'
,'T10489712'
,'T20137190'
,'T20090327'
,'T20131589'
,'T20144817'
,'T20131828'
,'T20122897'
,'T20134298'
,'T20131200'
,'T20130442'
,'T20144818'
,'T20118274'
,'T20056793'
,'T20129067'
,'T20140577'
,'T20133626'
,'T20139643'
,'T20134157'
,'T20134006'
,'T20134502'
,'T20135443'
,'T20133736'
,'T20137735'
,'T10280754'
,'T20136431'
,'T20136868'
,'T20133580'
,'T20146338'
,'T20137069'
,'T20116883'
,'T20132058'
,'T10198943'
,'T20133759'
,'T20138696'
,'T20135485'
,'T20142900'
,'T10265632'
,'T20135879'
,'T20135800'
,'T20118508'
,'T10410602'
,'T20147272'
,'T20131322'
,'T20096013'
,'T20129188'
,'T20145180'
,'T20136914'
,'T20145615'
,'T10121006'
,'T10486354'
,'T20135301'
,'T20145373'
,'T20132509'
,'T20125878'
,'T20134800'
,'T10514685'
,'T20122676'
,'T20030478'
,'T20132772'
,'T20138580'
,'T20126931'
,'T20125412'
,'T20147935'
,'T10174344'
,'T20141083'
,'T20142423'
,'T10266523'
,'T20142644'
,'T10139773'
,'T10123768'
,'T20141421'
,'T20137645'
,'T20136694'
,'T20131617'
,'T20131278'
,'T20146017'
,'T20130218'
,'T20141426'
,'T20088160'
,'T20131836')) 

select
       spriden_id || '$$' || stvtesc_code nk,
       spriden_id student,
       stvtesc_code test_subject,
       max(to_number(sortest_test_score)) score,
       'T' active
  from sortest, spriden, stvtesc
       -- Need to remove A, since EAB only takes integers
 where stvtesc_data_type = 'N'
   and sortest_pidm = spriden_pidm
   and sortest_tesc_code = stvtesc_code
   and spriden_change_ind is null
   and spriden_pidm in (select * from pop)
and sortest_activity_date > sysdate-8 -- Incremental extract for changes within the last week
   --and spriden_id in (select * from pilot_pop)

   group by spriden_id || '$$' || stvtesc_code,
            spriden_id,
            stvtesc_code,
            'T'","Student Test Score"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.Subject","WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  'T' AS is_active
FROM stvsubj
),

-- Assign default values
defaultValues AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM subject
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Subject"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"inst.Campus","select stvcamp_code nk,
       stvcamp_desc name,
       DECODE(stvcamp_code, 'WEB', 'T', 'F') is_online,
       case
         when stvcamp_code not in ('CE', 'CR', 'EAB', 'NC') then 'T'
         else 'F'
       end is_active 
  from stvcamp
union
select 'DEFAULT' nk,
       'EAB Default Code' name,
       'F' is_online,
       'F' is_active
  from dual","Campus"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.sectiontime","with section_pop as ( --this is to make sure the sections we select are in line with sections in the Section file.

select section.crse_id || '$$' 
                            || section.strm || '$$'
                            || section.session_code || '$$' 
                            || section.CLASS_SECTION as nk
from PS_CLASS_TBL section
where 1=1
  and section.institution = 'NV280'
  and section.start_dt > sysdate-365 
),

location_pop as (
select
distinct a.facility_id as nk

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('A','L','M','N','W','H')
and a.setid = 'NV280'
and a.effdt = (select max(c.effdt) 
                from ps_facility_tbl c 
                where a.facility_id = c.facility_id 
                and a.setid = c.setid) 
),

dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'NV280'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

),

course_pop as (

SELECT o.CRSE_ID
FROM PS_CRSE_OFFER o
WHERE o.EFFDT = (SELECT MAX(EFFDT)
                FROM   PS_CRSE_OFFER
                WHERE  o.CRSE_ID = CRSE_ID)
and o.INSTITUTION = 'NV280'
--and o.acad_career = 'CRED'
and o.acad_org <> 'LCREDIT'
and o.crse_offer_nbr <> '1'
and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))

)

select distinct
a.crse_id || '$$' || a.strm || '$$' || a.session_code || '$$' --added session code
       || dates.date_diff || '$$' --for uniqueness
       || a.class_section || '$$' 
       || COALESCE(b.Day_of_Week, '') || '$$'
       || a.CLASS_MTG_NBR || '$$'   
       || NVL(TO_CHAR(a.MEETING_TIME_START, 'HH24:MI:SS'), '') || '$$'
       || NVL(TO_CHAR(a.MEETING_TIME_END, 'HH24:MI:SS'), '')        AS NK --unique NK
, a.crse_id || '$$' 
  || a.strm || '$$' 
  || a.session_code || '$$' 
  || dates.date_diff || '$$'
  || a.class_section as section
, CASE b.Day_of_Week 
            WHEN 'U' THEN 1 
            WHEN 'M' THEN 2 
            WHEN 'T' THEN 3 
            WHEN 'W' THEN 4 
            WHEN 'R' THEN 5 
            WHEN 'F' THEN 6 
            WHEN 'S' THEN 7 
           ELSE 8 
          END                                    AS Day_of_Week 
, NVL(TO_CHAR(a.MEETING_TIME_START, 'HH24:MI:SS'), '') as from_tm
, NVL(TO_CHAR(a.MEETING_TIME_END, 'HH24:MI:SS'), '') as to_tm
, facility_id as  \\\""location\\\""
, 'T' as is_active

from (
SELECT a.CRSE_ID, a.CLASS_SECTION, a.CRSE_OFFER_NBR, a.CLASS_MTG_NBR
             , a.STRM
             , a.session_code --added session code
             , a.MON, a.TUES, a.WED, a.THURS, a.FRI, a.SAT, a.SUN
             , a.MEETING_TIME_START, a.MEETING_TIME_END, a.START_DT, a.END_DT
             , b.FACILITY_ID, b.BLDG_CD, b.ROOM
      FROM SYSADM.PS_CLASS_MTG_PAT a
      JOIN SYSADM.PS_FACILITY_TBL b
        ON a.FACILITY_ID = b.FACILITY_ID
      --where a.institution = 'NV280' --and b.institution = 'NV280'
        ) a
left join dates on a.strm = dates.strm --added dates for nk link
          and a.session_code = dates.session_code
inner join (select CRSE_ID, CLASS_SECTION, CRSE_OFFER_NBR, CLASS_MTG_NBR --reordering of data for Day_Of_Week
             , STRM
             , session_code --added session code
             , Day_of_week
             from (select  CRSE_ID, CLASS_SECTION, CRSE_OFFER_NBR, CLASS_MTG_NBR
             , STRM
             , session_code --added session code
             , CASE WHEN MON='Y' then 'M' else 'N' end as MON 
             , CASE WHEN TUES='Y' then 'T' else 'N' end as TUES 
             , CASE WHEN WED='Y' then 'W' else 'N' end as WED 
             , CASE WHEN THURS='Y' then 'R' else 'N' end as THURS 
             , CASE WHEN FRI='Y' then 'F' else 'N' end as FRI 
             , CASE WHEN SAT='Y' then 'S' else 'N' end as SAT 
             , CASE WHEN SUN='Y' then 'U' else 'N' end as SUN
             from SYSADM.PS_CLASS_MTG_PAT
             where CLASS_MTG_NBR = 1 --comment this out for all section times, Nav cannot handle more than location per section currently
             )

            UNPIVOT(Day_of_week FOR sk IN (MON, TUES, WED, THURS, FRI, SAT, SUN)) --unpivor reorder


) b  
ON a.CRSE_ID = b.CRSE_ID
             AND a.STRM = b.STRM
             AND a.CLASS_SECTION = b.CLASS_SECTION
             AND a.CRSE_OFFER_NBR = b.CRSE_OFFER_NBR
             AND a.CLASS_MTG_NBR = b.CLASS_MTG_NBR
where 1=1 
and a.crse_id || '$$' 
    || a.strm || '$$' 
    || a.session_code || '$$' 
    --|| a.date_diff || '$$' --not needed for this population condition
    || a.class_section in (select * from section_pop) --population
and a.facility_id in (select * from location_pop)
and a.crse_id in (select * from course_pop)","SectionTime"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.StudentTerm","-- Fields  nk,student,term,program,is_active
-- Model Name  cat.StudentTerm
-- Name  Student Term
-- Output  Student_Term_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get the max term for each program that has a corresponding term assigned.
getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
  LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
WHERE stvterm_code IS NOT NULL
  GROUP BY  sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
SELECT sgbstdn_pidm
  , sgbstdn_program_1
  , sgbstdn_stst_code
  , sgbstdn_term_code_eff AS maxEffTerm
  , sgbstdn_term_code_ctlg_1
  , stvstst_reg_ind
FROM sgbstdn a
  LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
WHERE sgbstdn_program_1 IS NOT NULL
  AND stvstst_code IS NOT NULL
  AND sgbstdn_term_code_eff = (
                               SELECT MAX(sgbstdn_term_code_eff)
                               FROM sgbstdn
                                RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                               WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                AND stvterm_end_date <= sysdate + 365
                              )
),

-- final query to extract student term data
studentTerm AS (
SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
  , spriden_id AS student
  , studentDetails.maxEffTerm AS term
  , studentDetails.sgbstdn_program_1 || '$$' || getProgramMaxTerm.acyr AS \\\""program\\\""
  , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active -- set the record active if the corresponding stvstst_reg_ind is set to 'Y'
FROM spriden
  RIGHT JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
  JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
  JOIN studentPopulation ON studentPidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
)

-- wrapper query
select * from studentTerm
","Student Terms"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.Department","-- Fields: nk,name,is_active
-- Model Name: cat.Department
-- Name: Department
-- Output: Department_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get department data from Banner 
WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM department
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Departments"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"core.Student","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1  
  AND (sfrstcr_rsts_code LIKE ('R%') OR sfrstcr_rsts_code LIKE ('K%'))
  
---- UNION
--
--SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
--FROM saradap
--  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
--WHERE 1=1 
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
,COALESCE(SUBSTR(goremal_email_address,1,INSTR(goremal_email_address,'@')-1),lower(spriden_first_name)||lower(spriden_last_name)) AS username
  , COALESCE(goremal_email_address,lower(spriden_first_name)||lower(spriden_last_name)||'@missingemail.org') AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm AND spriden_change_ind IS NULL
  LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm AND spriden_change_ind IS NULL
  LEFT JOIN GOREMAL ON goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code IN ('STUE')
-- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student
","Student"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.studentterm","with program_bank as (
select DISTINCT ACAD_PLAN as pgrm, 
                EFFDT as effective_dt,
                ACAD_YEAR as CATALOG_YR
from ps_acad_plan_tbl a
left join ps_term_tbl b 
on effdt < term_end_dt and b.institution = a.institution
where 1=1
--and acad_plan = '1190'
and a.institution = 'DC279'
and a.acad_plan_type = 'MAJ'
--and a.acad_plan in ('1880')
and b.ACAD_YEAR = (select min(ACAD_YEAR) 
                  from ps_term_tbl 
                  where institution = 'DC279' and effdt < term_end_dt)
                  
),
pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,b.max_term as max_term_2
        ,a.acad_plan
        , TO_CHAR(a.declare_dt,'YYYY-MM-DD') as declare_dt
from ps_acad_plan a
inner join (select student_id, max_term
            from (
                  select b.emplid as student_id
                  , min(b.strm) as term
                  , max(b.strm) as max_term
                  --, b.strm as strm
                  from ps_stdnt_car_term b
                  where 1=1
                  and institution = 'DC279'
                  and ACAD_CAREER = 'CRED'
                  group by b.emplid
                  ) car_term
            where 1=1
            and max_term > 2154
           ) b
           on b.student_id = a.emplid
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid and institution = 'DC279')
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid and effdt = a.effdt and institution = 'DC279')
            and PROG_STATUS = 'AC'
and institution = 'DC279') c
            on a.emplid = c.emplid       
WHERE  1=1
        --and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
union --applicant pop
SELECT DISTINCT A.EMPLID student_id
, B.req_term as max_term
, B.REQ_TERM as max_term_2
, B.ACAD_PLAN
, TO_CHAR(A.ADM_APPL_DT,'YYYY-MM-DD') as declare_dt
  FROM PS_ADM_APPL_DATA A, PS_ADM_APPL_PLAN B 

  WHERE ( A.INSTITUTION = 'DC279' 
     AND A.EMPLID = B.EMPLID 
     AND A.ACAD_CAREER = B.ACAD_CAREER 
     AND A.STDNT_CAR_NBR = B.STDNT_CAR_NBR 
     AND A.ADM_APPL_NBR = B.ADM_APPL_NBR 
     AND B.EFFDT = 
        (SELECT MAX(B_ED.EFFDT) FROM PS_ADM_APPL_PLAN B_ED 
        WHERE B.EMPLID = B_ED.EMPLID 
          AND B.ACAD_CAREER = B_ED.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ED.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ED.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ED.APPL_PROG_NBR 
          AND B_ED.EFFDT <= SYSDATE) 
    AND B.EFFSEQ = 
        (SELECT MAX(B_ES.EFFSEQ) FROM PS_ADM_APPL_PLAN B_ES 
        WHERE B.EMPLID = B_ES.EMPLID 
          AND B.ACAD_CAREER = B_ES.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ES.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ES.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ES.APPL_PROG_NBR 
          AND B.EFFDT = B_ES.EFFDT) 
     AND B.REQ_TERM > '2154' 
     AND NOT EXISTS (SELECT 'X' 
  FROM PS_STDNT_ENRL C 
  WHERE A.INSTITUTION = C.INSTITUTION 
     AND C.STDNT_ENRL_STATUS = 'E' 
     AND A.EMPLID = C.EMPLID) )
     AND B.ACAD_CAREER = 'CRED'
     and a.emplid not in (select distinct emplid from ps_acad_plan)

)  
select distinct
pop.student_id || '$$' || pop.max_term as nk,
pop.student_id as student,
pop.max_term as term,

(select pgrm || '$$' || max(b.catalog_yr) from program_bank b
            where substr(pop.declare_dt,1,4) > b.catalog_yr
            and pop.acad_plan = b.pgrm
            group by pgrm) as program,
'T' as is_active


from pop

--left join pop on student_id = a.emplid and strm = max_term
where 1=1

order by 1,3 desc","Student_Term"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"reg.StudentTestScore","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','KV','KO')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","StudentTestScore"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"core.advisor","With Advr_Pidm As (
Select Sibinst_Pidm
From Sibinst a
Where Sibinst_Fcst_Code = 'AC'
--And Sibinst_Advr_Ind = 'Y'
And Sibinst_Term_Code_Eff = (Select Max(Sibinst_Term_Code_Eff) From Sibinst B Where A.Sibinst_Pidm = B.Sibinst_Pidm)
)
Select Spriden_Id Nk,
Spriden_Id Username,
  coalesce(( 
                select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'CAMP'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'PERS'
              and goremal_preferred_ind = 'Y'
              ),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              And Goremal_Emal_Code = 'CAMP'
              and goremal_preferred_ind = 'N'),
               lower(spriden_id) || '@missingemail.org') email,
Spriden_First_Name First_Name,
Spriden_Last_Name last_name,
'T' Is_Active
From Spriden
Where Spriden_Pidm In (Select * From Advr_Pidm)
and spriden_change_ind is null","Advisor"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.FirstTermFeed","with now_term as (
  select stvterm_code as a_term
    from stvterm
   where stvterm_end_date >= sysdate
     and rownum = 1
   order by stvterm_code asc
),
TERM_LIST AS (
  select stvterm_code,
         (select a_term from now_term) as now_term
    from stvterm
   where stvterm_code <= (select * from now_term)
     and rownum < 5
   order by stvterm_code desc
),
FUTR_TERM as (
  select stvterm_code
    from stvterm
   where stvterm_end_date >= sysdate
),
ACTV_TERM as (
  select stvterm_code,
         now_term,
         case
           -- summer
           when substr(now_term,-2,2) = '50' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- spring
           when substr(now_term,-2,2) = '10' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- fall
           when substr(now_term,-2,2) = '80' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              else 'F'
            end         
           -- other
           else 'F'
         end as is_active
    from term_list
),
STU_LIST AS (
  select sfrstcr_pidm as pidm
    from sfrstcr
   where sfrstcr_term_code in (select stvterm_code from ACTV_TERM where is_active='T')
     and sfrstcr_rsts_code IN ('RE','AU','RW','RC','R1','R2','R3','R4',
                               'R5','R6','R9','RL','U1','U2','U3','U4',
                               'U5','U6','U9')
  union
  select saradap_pidm as pidm
    from saradap
   where saradap_term_code_entry in (select stvterm_code from FUTR_TERM)
)
select /*csv*/
    spriden_id as nk,
    spriden_id as student,   
    min(saradap_term_code_entry) as term,
    'T' as is_active
  from saradap left join spriden on saradap_pidm = spriden_pidm
                                and spriden_change_ind is null
 where spriden_entity_ind = 'P'
   and saradap_pidm in (select * from stu_list)
 group by spriden_id","FirstTimeFeed"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.SeatsAvail","SELECT
  nk,
  avail_seats, 
  CASE 
    WHEN is_active = 'Y' THEN 'T' 
    ELSE 'F'
  END AS is_active
  FROM EAB_SECT_SEATS_AVAIL
WHERE campus LIKE 'C%'
   and academic_period = '201730'
","SeatsAvail"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"reg.StudentTestScore","WITH pop AS (
select distinct pidm
  from (Select Sfrstcr_Pidm pidm, 
               Sfrstcr_Term_Code term
          From Sfrstcr
         Where sfrstcr_rsts_code in ('RE','RW','RA')
           and sfrstcr_term_code in (select term 
                                       from (Select Stvterm_Code Term 
                                               FROM STVTERM
                                              Where STVTERM_CODE <= (Select Stvterm_Code
                                                                       From Stvterm
                                                                      Where Sysdate > Stvterm_Start_Date
                                                                        And substr(stvterm_code, -1, 1) IN ('0','9')
                                                                        and stvterm_code not in (Select Stvterm_Code
                                                                                                   From Stvterm
                                                                                                  Where Sysdate >= Stvterm_End_Date
                                                                                                    And substr(stvterm_code, -1, 1) IN ('0','9')))
                                                And Rownum < 5
                                              order by 1 desc))
         UNION (
         select saradap_pidm pidm,
                saradap_term_code_entry term
          from saradap
         where saradap_term_code_entry in (select term
                                            from (Select Stvterm_Code Term 
                                                    FROM STVTERM
                                                   Where STVTERM_CODE <= (Select Stvterm_Code
                                                                            From Stvterm
                                                                           Where Sysdate > Stvterm_Start_Date
                                                                             And substr(stvterm_code, -1, 1) IN ('0','9')
                                                                             and stvterm_code not in (Select Stvterm_Code From Stvterm 
                                                                                                     Where Sysdate >= Stvterm_End_Date
                                                                                                       And substr(stvterm_code, -1, 1) IN ('0','9')))
                                                                             And Rownum < 5
                                                                           order by 1 desc))
)))

SELECT spriden_id || '$$' || stvtesc_code nk,
       spriden_id student, 
       UPPER(stvtesc_code) test_subject,
       MAX(to_number(sortest_test_score)) score,
       'T' is_active
 FROM spriden JOIN sortest ON spriden_pidm = sortest_pidm
              JOIN stvtesc ON sortest_tesc_code = stvtesc_code
              JOIN sgbstdn ON spriden_pidm = sgbstdn_pidm 
  WHERE stvtesc_data_type = 'N'
    AND spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
    And Spriden_Pidm In (Select * From Pop)
  GROUP BY spriden_id || '$$' || stvtesc_code,
           spriden_id,
           stvtesc_code","Student Test Score"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Course","WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
GROUP BY scbcrse_subj_code, scbcrse_crse_numb
--HAVING MAX(scbcrse_eff_term) >= 201212 -- YA 20161221

),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk -- This nk does not use the standard $$ concatenation since the platform currently shows the nk field in the UI. This affects the following dependent scripts that need to be in sync - section, studentCourse
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
 -- , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\"" -- doesnt work 20161221 
  , replace(dbms_lob.SUBSTR(  -- YAHMAD 20161221 
          scrtext.scrtext_text|| ' '||scrtext2.scrtext_text
          || ' '||scrtext3.scrtext_text|| ' '||'...',3000)
          ,'   ...','') AS \\\""desc\\\"" -- Albany's YA 20161221 

  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE WHEN scbcrse.scbcrse_csta_code = 'A' -- SEE ALBANY'S IF THIS IS A PROBLEM 
          THEN 'T'
          ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active. This may be member specific. Confirm code with BA/Member.
FROM scbcrse

JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scrtext ON (scrtext.scrtext_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                                           AND scrtext.scrtext_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                                           AND scrtext.scrtext_eff_term = maxEffectiveTerm.maxTerm
                                           and scrtext.scrtext_seqno = '1' -- added 
                                           )
LEFT JOIN scrtext scrtext2 ON (scrtext2.scrtext_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                                           AND scrtext2.scrtext_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                                           AND scrtext2.scrtext_eff_term = maxEffectiveTerm.maxTerm
                                           and scrtext2.scrtext_seqno = '2'
                                           )
LEFT JOIN scrtext scrtext3 ON (scrtext3.scrtext_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                                           AND scrtext3.scrtext_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                                           AND scrtext3.scrtext_eff_term = maxEffectiveTerm.maxTerm
                                           and scrtext3.scrtext_seqno = '3'
                                           )
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
),

-- Assign default values
defaultValues AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM course
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Course"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.SeatsAvail","SELECT
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_seats_avail avail_seats, 
  'T' is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
             LEFT JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                              AND ssbsect_term_code = ssrmeet_term_code 
WHERE ssbsect_ssts_code = 'A'
  AND spriden_change_ind IS NULL ","SeatsAvail"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"event.TaskStatusFeed","WITH studentPop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW') -- Need to confirm
      and sfrstcr_term_code in (
        select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= ( -- excluding non credit terms, we are looking at students active in the previous 5 terms relative to the current term
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE'                         -- Need to confirm
                      and stvterm_desc not like '%Continuing Education'       -- Need to confirm
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                      )
          And Rownum < 15
          order by 1 desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= (
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE' 
                      and stvterm_desc not like '%Continuing Education'
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                      )
          And Rownum < 15
          order by 1 desc))
))),

-- Extract E_SUBMIT_GOV related events
E_SUBMIT_GOV AS (
SELECT
  spriden_id || '$$E_SUBMIT_GOV' AS nk
  , spriden_id AS student
  , 'E_SUBMIT_GOV' AS event
  , CASE WHEN (sprhold_from_date < sysdate and sprhold_to_date > sysdate)
          THEN 'ACTIVE'
          ELSE 'COMPLETED'
          END AS status
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPop
  JOIN spriden ON spriden_pidm = studentPop.pidm
  LEFT JOIN sprhold ON (sprhold_pidm = studentPop.pidm AND sprhold_hldd_code = 'PI')
WHERE spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
),

-- Extract E_SUBMIT_RESIDENCY related events
E_SUBMIT_RESIDENCY AS (
SELECT
  spriden_id || '$$E_SUBMIT_RESIDENCY' AS nk
  , spriden_id AS student
  , 'E_SUBMIT_RESIDENCY' AS event
  , CASE WHEN (sprhold_from_date < sysdate and sprhold_to_date > sysdate)
          THEN 'ACTIVE'
          ELSE 'COMPLETED'
          END AS status
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPop
  JOIN spriden ON spriden_pidm = studentPop.pidm
  LEFT JOIN sprhold ON (sprhold_pidm = studentPop.pidm AND sprhold_hldd_code = 'RC')
WHERE spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
),

-- Extract E_SUBMIT_TRANSCRIPTS related events
E_SUBMIT_TRANSCRIPTS AS (
SELECT
  spriden_id || '$$E_SUBMIT_TRANSCRIPTS' AS nk
  , spriden_id AS student
  , 'E_SUBMIT_TRANSCRIPTS' AS event
  , CASE WHEN (sprhold_from_date < sysdate and sprhold_to_date > sysdate)
          THEN 'ACTIVE'
          ELSE 'COMPLETED'
          END AS status
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPop
  JOIN spriden ON spriden_pidm = studentPop.pidm
  LEFT JOIN sprhold ON (sprhold_pidm = studentPop.pidm AND sprhold_hldd_code IN ('HS', 'CO', 'AT'))
WHERE spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
),

finalDataSet AS (
SELECT * FROM E_SUBMIT_GOV
UNION
SELECT * FROM E_SUBMIT_RESIDENCY
UNION
SELECT nk, student, event, status, status_changed_ts, is_active
  FROM (
        SELECT nk, student, event, status, status_changed_ts, is_active
        , ROW_NUMBER() OVER (PARTITION BY nk ORDER BY status) AS row_num
        FROM E_SUBMIT_TRANSCRIPTS
        )
  WHERE row_num = 1 -- Logic to pick the first event with an ACTIVE status per student if multiple events exist for the student with different statuses. 
                    -- This handles the condition where we must consider the event ACTIVE if ACTIVE and COMPLETED records exist for the event.
              
)

SELECT * from finalDataSet","Task Status Feed"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"inst.Campus","SELECT DISTINCT
  stvcamp_code nk, 
  stvcamp_desc name,
  CASE 
    WHEN stvcamp_desc = 'Any Campus' THEN 'T'
    ELSE 'F'
   END is_online,
  CASE
    WHEN stvcamp_desc = 'Any Campus' THEN 'F'
    ELSE 'T'
  END is_active
FROM stvcamp","Campus"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"core.advisor","

select a.emplid as nk
, a.emplid as username
, Nvl(email.EMAIL_ADDR, a.emplid || '@missing.nova.edu') as email
, b.first_name as first_name
, b.last_name as first_name
, 'T' as is_active

from PS_INSTR_ADVISOR a
left join PS_PERSONAL_DATA b
on a.emplid = b.emplid
LEFT JOIN PS_EMAIL_ADDRESSES email 
              ON email.EMPLID = a.EMPLID 
                 AND email.E_ADDR_TYPE IN ( 'VCCS' ) 
where a.ADVISOR = 'Y' 
and a.INSTITUTION = 'NV280'
and a.eff_status = 'A'","advisor"
835,"Whitehurst College",5336,"",47854,"Student Success Collaborative:Whitehurst College",22694,"Student Success Collaborative",2,"smart","select * from department_lkp","Department Query Transaction"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"catcc.TestSubject","-- Fields: nk,name,max_score,is_active
-- Model Name: catcc.TestSubject
-- Name: Test Subjects
-- Output: Test_Subjects_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- extract test subjects and scores from Banner
WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
          THEN TO_NUMBER(stvtesc_max_value) || '.00'
          ELSE stvtesc_max_value
          END AS max_score -- test for decimal point and convert to decimal. This is done since navigate expects this data to be decimal and the data in banner may not be stored in decimal format.
  , 'T' AS is_active
FROM stvtesc
WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')  -- filter out any non digits. This is a decimal field in navigate and there have been instances where we have seen non-integer values in banner.
)

-- wrapper query
SELECT * FROM testSubjects
","Test Subjects"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.Subject","SELECT nk, name, 
  CASE 
    WHEN is_active = 'Y' THEN 'T'
    ELSE 'F'
  END AS \\\""is_active\\\""
FROM EAB_SUBJECT
","Subjects"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"catcc.testsubject","SELECT 
  UPPER(stvtesc_code) nk,
  stvtesc_desc name,
  CASE 
    WHEN INSTR(stvtesc_max_value, '.') = 0 THEN to_number(stvtesc_max_value) || '.00'
    ELSE stvtesc_max_value 
  END AS max_score,
  'T' is_active
FROM stvtesc
WHERE  stvtesc_desc LIKE '%Accup%'
    OR stvtesc_desc LIKE '%SAT%'","test subject"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Section","-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , NVL(stvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt
  , CASE WHEN ssbsect_ssts_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active 
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
-- WHERE ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Comented out by default. Confirm with BA/Member.
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Section"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.SectionTime","WITH SECTIONS_0 AS
(

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$8' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         8 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
          JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
     OR UPPER(TERM_DESC) LIKE '%SPRING%FULL%'
      OR UPPER(TERM_DESC) LIKE '%FALL%FULL%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
          JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_MONDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_TUESDAY IS NULL        AND 
         COURSE_SEC_MEETING.CSM_WEDNESDAY IS NULL      AND 
         COURSE_SEC_MEETING.CSM_THURSDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_FRIDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_SATURDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_SUNDAY IS NULL
),

SECTIONS_1 AS
(
SELECT * FROM SECTIONS_0 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$1' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         1 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
        JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
          AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
    OR UPPER(TERM_DESC) LIKE '%SPRING%FULL%'
      OR UPPER(TERM_DESC) LIKE '%FALL%FULL%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
          JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_SUNDAY = 'Y')
         ,

SECTIONS_2 AS
(
SELECT * FROM SECTIONS_1 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$2' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         2 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
         JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
    OR UPPER(TERM_DESC) LIKE '%SPRING%FULL%'
      OR UPPER(TERM_DESC) LIKE '%FALL%FULL%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
           JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_MONDAY = 'Y')
         ,

SECTIONS_3 AS
(
SELECT * FROM SECTIONS_2 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$3' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         3 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
          JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
     OR UPPER(TERM_DESC) LIKE '%SPRING%FULL%'
      OR UPPER(TERM_DESC) LIKE '%FALL%FULL%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
          JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_TUESDAY = 'Y'),

SECTIONS_4 AS
(
SELECT * FROM SECTIONS_3 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$4' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         4 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
          JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
   OR UPPER(TERM_DESC) LIKE '%SPRING%FULL%'
      OR UPPER(TERM_DESC) LIKE '%FALL%FULL%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
          JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_WEDNESDAY = 'Y'),

SECTIONS_5 AS
(
SELECT * FROM SECTIONS_4 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$5' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         5 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
        'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
         JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
     OR UPPER(TERM_DESC) LIKE '%SPRING%FULL%'
      OR UPPER(TERM_DESC) LIKE '%FALL%FULL%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
           JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_THURSDAY = 'Y'),

SECTIONS_6 AS
(
SELECT * FROM SECTIONS_5 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$6' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         COURSE_SECTIONS.COURSE_SECTIONS_ID, 
         SEC_NAME,
         6 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
          JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%FULL%'
      OR UPPER(TERM_DESC) LIKE '%FALL%FULL%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
          JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_FRIDAY = 'Y'),

SECTIONS_7 AS
(
SELECT * FROM SECTIONS_6 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$7' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section,
         COURSE_SECTIONS.COURSE_SECTIONS_ID COURSE_SECTIONS_ID, 
         SEC_NAME,
         7 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
         JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
    OR UPPER(TERM_DESC) LIKE '%SPRING%FULL%'
      OR UPPER(TERM_DESC) LIKE '%FALL%FULL%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
           JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_SATURDAY = 'Y'),

sec8 as (SELECT  DISTINCT
       SECTIONS_7.nk||'$$'||REPLACE(from_tm||'$$'||to_tm,':','') as nk,
         section, 
         day_of_week,
         from_tm,
         to_tm,
         NVL(RTRIM(location),'TBD') as location,
         is_active   

 FROM SECTIONS_7),

 
-- Map of lecture to coreq lab (SEC_NAME - SEC_NAME)
LECTURE_LAB AS 
(
SELECT CS_LAB.SEC_TERM||'-'||CS_LAB.SEC_NAME LAB, CS_LEC.SEC_TERM||'-'||CS_LEC.SEC_NAME LEC 
FROM COLL_TEST.COURSE_SECTIONS CS_LAB 
JOIN COLL_TEST.COURSE_SECTIONS_LS CSLS ON 
  CS_LAB.COURSE_SECTIONS_ID = CSLS.COURSE_SECTIONS_ID AND CSLS.POS = 1 
JOIN COLL_TEST.COURSE_SECTIONS CS_LEC ON 
  CS_LEC.COURSE_SECTIONS_ID = CSLS.SEC_COREQ_SECS
WHERE CSLS.SEC_COREQ_SECS IS NOT NULL AND CS_LAB.SEC_COURSE_NO LIKE '%L'),

valid_sections as
(select * from sec8 where section not in(select LAB FROM LECTURE_LAB)),


invalid_sections as (
select
         lec || '$$' || day_of_week ||'$$'||REPLACE(from_tm||'$$'||to_tm,':','')  nk,
         lec section,
         day_of_week,
         from_tm,
         to_tm,
         location,
         is_active    
from sec8 
join LECTURE_LAB on LAB = section)

select * from valid_sections
union
select * from invalid_sections
         
 




/*

OLD VERSION, NO LECTURE LAB

-- todo add time restriction to sec_0
--     remove term from where clause, use join to terms instead

WITH SECTIONS_0 AS
(

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$8' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         8 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
          JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_MONDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_TUESDAY IS NULL        AND 
         COURSE_SEC_MEETING.CSM_WEDNESDAY IS NULL      AND 
         COURSE_SEC_MEETING.CSM_THURSDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_FRIDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_SATURDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_SUNDAY IS NULL
),

SECTIONS_1 AS
(
SELECT * FROM SECTIONS_0 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$1' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         1 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
        JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
          AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
    OR UPPER(TERM_DESC) LIKE '%SPRING%FULL%'
      OR UPPER(TERM_DESC) LIKE '%FALL%FULL%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
          JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_SUNDAY = 'Y')
         ,

SECTIONS_2 AS
(
SELECT * FROM SECTIONS_1 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$2' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         2 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
         JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
           JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_MONDAY = 'Y')
         ,

SECTIONS_3 AS
(
SELECT * FROM SECTIONS_2 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$3' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         3 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
          JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_TUESDAY = 'Y'),

SECTIONS_4 AS
(
SELECT * FROM SECTIONS_3 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$4' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         4 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
          JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_WEDNESDAY = 'Y'),

SECTIONS_5 AS
(
SELECT * FROM SECTIONS_4 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$5' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         5 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
        'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
         JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
           JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND 
         COURSE_SEC_MEETING.CSM_THURSDAY = 'Y'),

SECTIONS_6 AS
(
SELECT * FROM SECTIONS_5 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$6' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         6 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
          JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
          JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_FRIDAY = 'Y'),

SECTIONS_7 AS
(
SELECT * FROM SECTIONS_6 UNION 

SELECT 
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME || '$$7' nk,
         COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME section, 
         7 day_of_week,
         RTRIM(LTRIM(TO_CHAR(CSM_START_TIME,'HH24:MI'))) from_tm,
         RTRIM(LTRIM(TO_CHAR(CSM_END_TIME  ,'HH24:MI'))) to_tm,
         CSM_BLDG || ' ' || CSM_ROOM location,
         'T' is_active
      FROM 
        COLL_TEST.COURSE_SECTIONS
         JOIN COLL_TEST.TERMS ON TERMS.TERMS_ID = SEC_TERM
            AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
            AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
           JOIN COLL_TEST.COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
           JOIN COLL_TEST.SEC_STATUSES
            ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
    WHERE 
        SEC_TERM IS NOT NULL AND
         COURSE_SEC_MEETING.CSM_SATURDAY = 'Y')
         

SELECT  DISTINCT
       SECTIONS_7.nk||'$$'||REPLACE(from_tm||'$$'||to_tm,':','') as nk,
         section, 
         day_of_week,
         from_tm,
         to_tm,
         NVL(RTRIM(location),'TBD'),
         is_active   

 FROM SECTIONS_7 

*/
 ","SectionTime"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.StudentCourse","WITH COURSES_TEMP AS (SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
        COURSES.CRS_MIN_CRED > 0 
		AND CRS_ACAD_LEVEL = 'UG'
        AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
--			 AND CRS_DEPTS IN (SELECT DISTINCT DEPTS_ID
--									 FROM    DEPTS
--									 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A')
),
TERM_TEMP AS (
SELECT DISTINCT SUBSTRING(TERMS_ID,1,6) nk
  FROM TERMS
    where (TERM_REPORTING_YEAR > YEAR(getdate())-10 and
         TERM_REPORTING_YEAR <= YEAR(GETDATE())+10) AND
          TERMS_ID is not NULL 
),

COURSE_HISTORY AS (
SELECT DISTINCT 
      STC_PERSON_ID + '$$' + ISNULL(STC_TERM, '000001') + '$$' + ISNULL(STC_COURSE_NAME, '') nk, 
      STC_PERSON_ID student, 
      ISNULL(STC_TERM, '000001') term, 
      ISNULL(STC_COURSE_NAME, '') course, 
      SEC_TERM+'-'+SEC_NAME section, 
      ISNULL(GRD_GRADE, '') grade_cd,
      cast(ISNULL(cast(GRD_VALUE as numeric(7,2)), '0') AS VARCHAR)   grade_points, 
      CASE
         WHEN STC_CMPL_CRED = 0 THEN cast(ISNULL(cast(STC_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE  cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)),0)  AS VARCHAR)
       END  credits_attempted, 
      
      CASE
         WHEN STC_VERIFIED_GRADE IS NOT NULL THEN cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       END  credits_earned, 

      case 
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'A' THEN 'REGISTERED'
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'N' THEN 'REGISTERED'
         WHEN GRD_GRADE = 'I' THEN 'IN_PROGRESS'    
         WHEN GRD_GRADE = 'S' THEN 'COMPLETED'  
         WHEN GRD_GRADE = 'T' THEN 'COMPLETED'
		 WHEN STC_STATUS IN ('D','W','DG','X','NC') THEN 'UNKNOWN'
       ELSE 'COMPLETED'
       END    status, 
      'T' is_active

  FROM STUDENT_ACAD_CRED
    JOIN STC_STATUSES
      ON STC_STATUSES.STUDENT_ACAD_CRED_ID = STUDENT_ACAD_CRED.STUDENT_ACAD_CRED_ID AND
         POS = '1'
    LEFT OUTER JOIN COURSE_SECTIONS
      ON SEC_TERM = STC_TERM AND
         (SEC_NO < '600' OR SEC_NO > '799') AND
         SEC_SUBJECT = STC_SUBJECT AND  
         SEC_NO = STC_SECTION_NO AND
         SEC_COURSE_NO = PARSENAME(REPLACE(STC_COURSE_NAME,'-', '.'),1)     
         
    LEFT OUTER JOIN GRADES
      ON GRD_GRADE_SCHEME = STUDENT_ACAD_CRED.STC_GRADE_SCHEME AND
         GRADES_ID = ISNULL(STUDENT_ACAD_CRED.STC_VERIFIED_GRADE,'0') 
  WHERE STUDENT_ACAD_CRED.STC_PERSON_ID IS NOT NULL AND
      --  STC_STATUS NOT IN ('C','W','D','DG','X','NC') AND
        STC_REPL_CODE IS NULL AND
        (ISNULL(STC_SECTION_NO, '') < '600' OR ISNULL(STC_SECTION_NO, '') > '799')
        AND ISNULL(GRD_GRADE,'') NOT IN ('AU','U','W','F','DP','NC','EX','NR','PR','WD','WO','CT','CS','CW','AD','NC','WP','WF','CT')
        AND STC_COURSE_NAME in (Select * from COURSES_TEMP)
        AND STC_TERM in (Select * from TERM_TEMP)
 
 --     I use this subquery to ONLY pull people's ENTIRE TRANSCRIPT who have registration from this semester
 AND EXISTS (SELECT 1 FROM STUDENT_ACAD_CRED X
		JOIN STC_STATUSES Y
			ON X.STUDENT_ACAD_CRED_ID = Y.STUDENT_ACAD_CRED_ID
		JOIN TERMS T ON T.TERMS_ID = X.STC_TERM 
					AND T.TERM_END_DATE > DATEADD(mm, -6,GETDATE()) AND T.TERM_END_DATE < DATEADD(mm, 6,GETDATE())
		WHERE 
			Y.POS= 1    AND 
			STUDENT_ACAD_CRED.STC_PERSON_ID = X.STC_PERSON_ID) 
)
,

WAITLIST_HISTORY AS (

SELECT DISTINCT 
      WAIT_STUDENT + '$$' + WAIT_TERM + '$$' + ISNULL(c.CRS_NAME, '') nk, 
      WAIT_STUDENT student, 
      WAIT_TERM    term, 
      c.CRS_NAME   course, 
      SEC_TERM+'-'+SEC_NAME section, 
      '' grade_cd,
      '0'  grade_points, 
      '0' credits_attempted, 
      '0' credits_earned, 
	  'WAITLISTED'  status, 
      'T' is_active

	  FROM

		WAIT_LIST

		JOIN TERMS
		ON TERMS.TERMS_ID = WAIT_TERM

		JOIN COURSE_SECTIONS cs
		on cs.COURSE_SECTIONS_ID = WAIT_COURSE_SECTION

		JOIN COURSES c 
		on c.COURSES_ID = WAIT_COURSE

		WHERE (TERM_REPORTING_YEAR > YEAR(getdate())-2)

		AND WAIT_STATUS IN ('A','P')

		AND c.CRS_NAME in (SELECT nk FROM COURSES_TEMP)
)

SELECT * FROM COURSE_HISTORY UNION SELECT * FROM WAITLIST_HISTORY","StudentCourse"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Program","SELECT
  NK,
  CD,
  CAT_YR,
  \\\""NAME\\\"",
 \\\""DESC\\\"",
  CREDITS,
  ENROLLMENT_NOTES,
  AREA_OF_STUDY,
  CONCENTRATION,
  \\\""CREDENTIAL\\\"",
  CIP,
  IS_TRANSFER,
  IS_ACTIVE
FROM
  ZST_EAB_PROGRAM_EXTRACT
where MULTI_SOURCE = 'ACC'","Programs"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.FirstTermFeed","-- Fields: nk,student,term,is_active
-- Model Name: cat.FirstTermFeed
-- Name: FirstTermFeed
-- Query:

-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),



-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

firstTermFeed as (
select
    spriden_id as nk,
    spriden_id as student,   
    min(saradap_term_code_entry) as term,
    'T' as is_active
  from studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  WHERE spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
 group by spriden_id
)

select * from firstTermFeed","FirstTermFeed"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"reg.StudentTestScore","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE SUBSTR(stvterm_code, 1, 5) <= (SELECT MIN(SUBSTR(stvterm_code, 1, 5))
                                     FROM stvterm
                                     WHERE stvterm_start_date > sysdate)
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN CCCD_EAB_GENERAL_PERSON ON spriden_pidm = sortest_pidm  -- Custom view at Coastline replacing SPRIDEN
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
    and sortest_tsrc_code = 'TAPE'
  and sortest_tesc_code in
    (
        select stvtesc_code from stvtesc where stvtesc_code like '1P%'
        UNION
        select stvtesc_code from stvtesc where stvtesc_code like '2P%'
        UNION
        select stvtesc_code from stvtesc where stvtesc_code like '3P%'
    )

GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","Student Test Scores"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.StudentCourse","-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT szvterm_code
FROM szvterm
WHERE szvterm_code <= (
                      SELECT MIN(szvterm_code)
                      FROM szvterm
                        WHERE szvterm_start_date > sysdate
                      )
AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
AND szvterm_vpdi_code = 'PPCC'
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code LIKE 'R_'
  AND sfrstcr_vpdi_code = 'PPCC'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = saradap_term_code_entry
WHERE 1=1
      AND saradap_vpdi_code = 'PPCC'
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
  LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
  WHERE 
        szvcamp_vpdi_code = 'PPCC'
        AND szvcamp_eab_enable = 'Y'
        AND sfrstca_vpdi_code = 'PPCC'
        AND ssbsect_vpdi_code = 'PPCC'
        AND substr(sfrstca_term_code, 1, 1) NOT IN ('6', '7', '8')
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr 
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
    WHERE sfrstcr_vpdi_code = 'PPCC'
          AND ssbsect_vpdi_code = 'PPCC'
          AND substr(sfrstcr_term_code, 1, 1) NOT IN ('6', '7', '8')
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
WHERE ssbsect_vpdi_code = 'PPCC'
      AND substr(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
UNION
SELECT 'A*' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'B*' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C*' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D*' AS code
  , 1.0 AS gradePoint
FROM dual
UNION
SELECT 'CPL' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'PLA' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'S/A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'S/B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'S/C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'P' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'S' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'S*' AS code
  , 2.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || szvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , szvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code LIKE 'R_' -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code LIKE 'R_'  AND szvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code LIKE 'R_' AND szvterm_start_date <= sysdate AND szvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code LIKE 'R_' AND sfrstcr_grde_code IN ('A%', 'B%', 'C%', 'D%', 'S%', 'CPL', 'P%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN szvterm ON szvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
  LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
WHERE 1=1
  AND szvcamp_vpdi_code = 'PPCC'
  AND szvcamp_eab_enable = 'Y'
  AND substr(sobptrm_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND substr(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND substr(sfrstcr_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
  AND ssbsect_vpdi_code = 'PPCC'
  AND szvterm_vpdi_code = 'PPCC'
  AND sfrstcr_vpdi_code = 'PPCC'
  AND sobptrm_vpdi_code = 'PPCC'
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                    AND substr(shrtckn_term_code, 1, 1) NOT IN ('6', '7', '8')
                    AND shrtckn_vpdi_code = 'PPCC'
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm,
       shrtckg_tckn_seq_no,
       maxSeq,
       shrtckg_term_code term_code
FROM
(
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
  ,shrtckg_term_code
FROM shrtckg, getLastXTerms
WHERE shrtckg_vpdi_code = 'PPCC'
      AND substr(shrtckg_term_code, 1, 1) NOT IN ('6', '7', '8')
      and szvterm_code = shrtckg_term_code
GROUP BY shrtckg_term_code, shrtckg_pidm, shrtckg_tckn_seq_no) JOIN shrtckn ON shrtckn_term_code = shrtckg_term_code
WHERE shrtckn_pidm = shrtckg_pidm
      AND shrtckn_term_code = shrtckg_term_code
      AND shrtckg_tckn_seq_no = shrtckn_seq_no
      AND shrtckn_vpdi_code = 'PPCC'
),

-- extract student course data for completed courses. 
-- This query extracts from shrtckn and shrtckg and because of that needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , szvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN szvterm ON szvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            AND maxCompCrseGrade.term_code = shrtckg.shrtckg_term_code
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
  LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
WHERE szvcamp_vpdi_code = 'PPCC'
      AND szvcamp_eab_enable = 'Y'
      AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
      AND substr(shrtckn_term_code, 1, 1) NOT IN ('6', '7', '8')
      AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
      AND substr(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
      AND substr(shrtckg_term_code, 1, 1) NOT IN ('6', '7', '8')
      AND shrtckn_vpdi_code = 'PPCC'
      AND szvterm_vpdi_code = 'PPCC'
      AND ssbsect_vpdi_code = 'PPCC'
      AND shrtckg_vpdi_code = 'PPCC'
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","Student Courses"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"inst.Location","-- get building data from Banner
WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
       '' comments,
CASE WHEN (slbbldg_camp_code IN ('F', 'I', 'O', 'S', 'X') -- Campuses common to 2 and 4 year colleges
                  OR slbbldg_camp_code LIKE 'P%') -- Perimeter specific campuses
            THEN 'T'
            ELSE 'F' END is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
                '' comments,
CASE WHEN (slbbldg_camp_code IN ('F', 'I', 'O', 'S', 'X') -- Campuses common to 2 and 4 year colleges
                  OR slbbldg_camp_code LIKE 'P%') -- Perimeter specific campuses
            THEN 'T'
            ELSE 'F' END is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
),

-- Assign default values
defaultValues AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Locations"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.Section","-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
  SELECT DISTINCT
      Sfrrsts_Term_Code,
      Sfrrsts_Ptrm_Code,
      Sfrrsts_rsts_code,
      sfrrsts_activity_date,
      Sfrrsts_Start_Date,
      Sfrrsts_End_Date
    FROM Sfrrsts
   WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
  SELECT DISTINCT
      Sfrrsts_Term_Code, 
      Sfrrsts_Ptrm_Code, 
      sfrrsts_rsts_code, 
      sfrrsts_activity_date, 
      Sfrrsts_Start_Date, 
      Sfrrsts_End_Date
    FROM Sfrrsts
   WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
  SELECT Ssbsect_Crn crn,
         Ssbsect_Term_Code term,
         Ssbsect_Ptrm_Code ptrm, 
         Sobptrm_Desc||' ('|| Sobptrm_Weeks||' Weeks)' AS ptrm_desc
    FROM Ssbsect LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                                       AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
  SELECT sirasgn_term_code,
         sirasgn_crn, 
         sirasgn_pidm,
         sirasgn_primary_ind, 
         spriden_id, 
         spriden_first_name, 
         spriden_last_name
    FROM SIRASGN JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
   WHERE sirasgn_category = '01'
     AND sirasgn_primary_ind = 'Y'
     AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
),

courseLevl as (
  SELECT a.SCRLEVL_LEVL_CODE
         , a.SCRLEVL_SUBJ_CODE
         , a.SCRLEVL_CRSE_NUMB
  FROM scrlevl a join (SELECT MAX(SCRLEVL_EFF_TERM) as maxTerm
                              , SCRLEVL_SUBJ_CODE
                              , SCRLEVL_CRSE_NUMB
                       FROM scrlevl
                       GROUP by SCRLEVL_SUBJ_CODE, SCRLEVL_CRSE_NUMB) b on a.SCRLEVL_SUBJ_CODE = b.SCRLEVL_SUBJ_CODE
                                                                       and a.SCRLEVL_CRSE_NUMB = b.SCRLEVL_CRSE_NUMB
                                                                       and a.SCRLEVL_EFF_TERM = b.maxTerm
),

-- extract section from banner
section AS (
SELECT DISTINCT
    ssbsect_crn || '$$' || ssbsect_term_code AS nk
    , ssbsect_crn AS cd
    , ssbsect_subj_code || ssbsect_crse_numb AS course
    , stvterm_code AS term
    , NVL(stvcamp_code, 'DEFAULT') AS campus
    , ssbsect_max_enrl AS seats_offered
    , ssbsect_wait_capacity AS waitlist_capacity
    , 'N' AS is_unlimited_seating
    -- Check for valida instructor names. If no valid name exists, use default text.
    , CASE
        WHEN instructor.spriden_last_name IS NULL THEN 'TBD'
        ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
      END AS instructor_name
    , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
    , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
    , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
    , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
    , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
    , CASE
        WHEN ssbsect_ssts_code = 'A' THEN 'T'
        ELSE 'F'
      END AS is_active -- Identify if section is active by comparing the value in ssbsect_ssts_code. The default is 'A'. Confirm with BA/Member if this is different at their college.
  FROM ssbsect JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
               JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
          LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                                   AND instructor.sirasgn_crn = ssbsect_crn)
          LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                                AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
          LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                         AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
          LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                             AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
          left join courseLevl on (ssbsect_subj_code = courseLevl.SCRLEVL_SUBJ_CODE
                                   AND ssbsect_crse_numb = courseLevl.SCRLEVL_CRSE_NUMB)
 where SCRLEVL_LEVL_CODE in ('50','54')
),

-- Assign default values
defaultValues AS (
  SELECT 'UNKNOWN' AS nk
         , 'UNKNOWN' AS cd
         , 'UNKNOWN' AS course
         , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
         , 'DEFAULT' AS campus
         , 0 AS seats_offered
         , 0 AS waitlist_capacity
         , 'N' AS is_unlimited_seating
         , 'TBD' AS instructor_name
         , '2000-01-01' AS class_start_dt
         , '2000-01-02' AS class_end_dt
         , '2000-01-01' AS drop_start_dt
         , '2000-01-02' AS drop_end_dt
         , '2000-01-02' AS withdraw_end_dt
         , 'F' AS is_active
    FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
  SELECT * FROM section
  UNION
  SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Section"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.coursetype","Select distinct Ssbsect_Schd_Code as nk
            , Stvschd_Desc as \\\""name\\\""
            , 'T' as is_active
            from ssbsect
            Left Join Stvschd On Ssbsect_Schd_Code = Stvschd_Code","CourseType"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Subject","-- get subject data from Banner  
WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  case when length(stvsubj_code) >3 then 'T' ELSE 'F' END AS is_active
FROM stvsubj
),

-- Assign default values
defaultValues AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM subject
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Subject"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.Department","-- Fields nk,name,is_active
-- Model Name cat.Department
-- Name Department
-- Output Department_data#DateStamp.csv
-- Script Version (Product.Major.Minor.Custom) Nav.1.0.0
-- schema spec version
-- Author Doug Menezes
-- Query

-- get department data from Banner 

WITH real_deptsSUBJScamps as (
SELECT DISTINCT  --Distinct needed because we have to go to SSBSECT for Course Type Codes 
       a.SCBCRSE_COLL_CODE        
       , a.SCBCRSE_SUBJ_CODE     
       , a.SCBCRSE_CRSE_NUMB       
	    , a.SCBCRSE_DEPT_CODE     
		,a.SCBCRSE_EFF_TERM
	--	, a.scbcrse_camp_code
		    
FROM   SCBCRSE a 

--SECONDARY COURSE INFORMATION 
LEFT OUTER JOIN SSBSECT b 
             ON a.SCBCRSE_SUBJ_CODE = b.SSBSECT_SUBJ_CODE 
                AND a.SCBCRSE_CRSE_NUMB = b.SSBSECT_CRSE_NUMB 

				

WHERE  1 = 1 
   AND a.SCBCRSE_EFF_TERM = (--DEDUPING LOGIC 
                             SELECT MAX(SCBCRSE_EFF_TERM) 
                             FROM   SCBCRSE b 
                             WHERE  b.SCBCRSE_SUBJ_CODE = a.SCBCRSE_SUBJ_CODE 
                                AND b.SCBCRSE_CRSE_NUMB = a.SCBCRSE_CRSE_NUMB)                        
)

, department AS (
SELECT distinct stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active 
FROM stvdept Join real_deptsSUBJScamps on real_deptsSUBJScamps.SCBCRSE_DEPT_CODE = stvdept.stvdept_code
)

-- Assign default values
,defaultValues AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
)

,

-- Combine Banner data and default values
finalDataSet AS(
SELECT department.* FROM department join real_deptsSUBJScamps on real_deptsSUBJScamps.SCBCRSE_DEPT_CODE = DEPARTMENT.nk
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet


-- Notes =>  DATA examples nk = 'CRJ'
-- 						name = 'Criminal Justice'

-- Change log
--				Developer
--				Change version
--				Description","Department"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.SeatsAvail","SELECT
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_seats_avail avail_seats, 
  'T' is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
                  JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                              AND ssbsect_term_code = ssrmeet_term_code
WHERE spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code >= '201015'
  AND ssbsect_ssts_code = 'A'
  AND ssbsect_crn NOT LIKE '500%' 
  AND ssbsect_crn NOT LIKE '600%'","Seats Available"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.FirstTermFeed","WITH CURRENT_STUDENTS AS (SELECT DISTINCT
   substring(P.ID,1,7) nk
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'),

		 ALL_STUDENTS AS (

SELECT nk from CURRENT_STUDENTS

UNION 

SELECT DISTINCT
   substring(P.ID,1,7) nk 
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         substring(A.APPL_APPLICANT,1,7) NOT IN 
         (
            SELECT
               nk
            FROM
               CURRENT_STUDENTS
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID
)

SELECT DISTINCT
   substring(P.ID,1,7) nk,
   substring(P.ID,1,7) student,
   SUBSTRING(T.TERMS_ID,1,6) term,
   'T' is_active
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
		    AND
		 A.APPL_ADMIT_STATUS IN ('NEWAP','RADM1','RADM2')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         A.APPL_START_TERM = T.TERMS_ID
		  AND 
		  T.TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          T.TERMS_ID is not NULL and
          T.TERM_REG_START_DATE is not null
	WHERE substring(P.ID,1,7) IN (SELECT * FROM ALL_STUDENTS)
","FirstTermFeed"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.StudentCourse","with now_term as (
  select stvterm_code as a_term
    from stvterm
   where stvterm_end_date >= sysdate
     and rownum = 1
   order by stvterm_code asc
),
TERM_LIST AS (
  select stvterm_code,
         (select a_term from now_term) as now_term
    from stvterm
   where stvterm_code <= (select * from now_term)
     and rownum < 5
   order by stvterm_code desc
),
FUTR_TERM as (
  select stvterm_code
    from stvterm
   where stvterm_end_date >= sysdate
),
-- REGISTERED CODES
GRAD_RSTS as (
  select stvrsts_code
    from stvrsts
   where upper(stvrsts_gradable_ind) = 'Y'
    and upper(stvrsts_withdraw_ind) = 'N'
),
ACTV_TERM as (
  select stvterm_code,
         now_term,
         case
           -- summer
           when substr(now_term,-2,2) = '50' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- spring
           when substr(now_term,-2,2) = '10' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- fall
           when substr(now_term,-2,2) = '80' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              else 'F'
            end         
           -- other
           else 'F'
         end as is_active
    from term_list
),
-- STUDENTS FROM CURRENT AND FUTURE TERMS ONLY
NOW_STU AS (
  SELECT SFRSTCR_PIDM AS PIDM
    FROM SFRSTCR
   WHERE SFRSTCR_RSTS_CODE IN (select * from grad_rsts)
     AND SFRSTCR_TERM_CODE IN (select stvterm_code from ACTV_TERM where is_active='T')
  union
  select saradap_pidm as pidm
    from saradap
   where saradap_term_code_entry in (select stvterm_code from FUTR_TERM)
),
-- ONLY PULL THE LATEST GRADE
MAX_CRSE as (
  select shrtckn_pidm as pidm,
         shrtckn_subj_code as subj_code,
         shrtckn_crse_numb as crse_numb,
         max(shrtckg_seq_no) as max_seq_no
    from shrtckg join shrtckn on SHRTCKG_PIDM = SHRTCKN_PIDM
                             and SHRTCKG_TERM_CODE = SHRTCKN_TERM_CODE
                             and SHRTCKG_TCKN_SEQ_NO = SHRTCKN_SEQ_NO
   where shrtckg_pidm IN (select * from now_stu)
   group by shrtckn_pidm, shrtckn_subj_code, shrtckn_crse_numb
),
-- COURSES FOR HISTORIC STUDENTS
OLD_CRSE as (
  select spriden_id||'$$'||shrtckg_term_code||'$$'||shrtckn_subj_code||shrtckn_crse_numb as nk,
         spriden_id as student,
         shrtckg_term_code as term,
         shrtckn_subj_code||shrtckn_crse_numb as course,
         shrtckn_crn||'$$'||shrtckg_term_code as section,
         shrtckg_grde_code_final as grade_cd,
         case
            WHEN shrtckg_grde_code_final = 'A' THEN 4.0
            WHEN shrtckg_grde_code_final = 'B' THEN 3.0
            WHEN shrtckg_grde_code_final = 'C' THEN 2.0
            WHEN shrtckg_grde_code_final = 'D' THEN 1.0
            WHEN shrtckg_grde_code_final = 'S' THEN 2.0
            WHEN shrtckg_grde_code_final = 'PA' THEN 2.0
            WHEN shrtckg_grde_code_final = 'CR' THEN 2.0
            -- Account for pass/fail classes.
            WHEN shrtckg_gmod_code = 'P' and shrtckg_grde_code_final = 'P' THEN COALESCE(shrtckg_credit_hours, 0.0)
            -- Account for transfer classes, there is no record in how they store a passing tranfer class in this table
            WHEN shrtckg_gmod_code = 'T' and shrtckg_grde_code_final = 'P' THEN COALESCE(shrtckg_credit_hours, 0.0)
            WHEN shrtckg_grde_code_final IS NULL THEN 0.0
            ELSE 0.0
         end as grade_points,
         COALESCE(shrtckg_credit_hours, 0) credits_attempted,
         COALESCE(shrtckg_credit_hours, 0) credits_earned,
         CASE
           WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D', 'S', 'P', 'PA', 'CR') THEN 'COMPLETED'
           ELSE 'UNKNOWN'
         END status,
         'T' is_active
    from shrtckg join shrtckn on SHRTCKG_PIDM = SHRTCKN_PIDM
                             and SHRTCKG_TERM_CODE = SHRTCKN_TERM_CODE
                             and SHRTCKG_TCKN_SEQ_NO = SHRTCKN_SEQ_NO
                 join MAX_CRSE on shrtckg_pidm = pidm
                              and shrtckn_subj_code = subj_code
                              and shrtckn_crse_numb = crse_numb
                              and shrtckg_seq_no = max_seq_no
            left join spriden on shrtckg_pidm = spriden_pidm
                             and spriden_change_ind is null
   where shrtckg_pidm IN (select * from now_stu)
),
-- COURSES FOR CURRENT AND FUTURE STUDENTS
NOW_CRSE AS (
  SELECT distinct
    spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || ssbsect_crse_numb nk, 
    spriden_id student,
    stvterm_code term, 
    ssbsect_subj_code || ssbsect_crse_numb course,
    ssbsect.ssbsect_crn || '$$' || ssbsect_term_code section,
    CASE
      when sfrstcr_grde_code is null and stvterm_start_date <= sysdate AND stvterm_end_date > sysdate THEN 'P'
      when sfrstcr_grde_code is null then 'UNKNOWN'
      ELSE sfrstcr_grde_code
    END grade_cd,
    CASE 
      WHEN sfrstcr_rsts_code in (select * from grad_rsts) then
        case
          when sfrstcr_grde_code = 'A' THEN 4.0
          WHEN sfrstcr_grde_code = 'B' THEN 3.0
          WHEN sfrstcr_grde_code = 'C' THEN 2.0
          WHEN sfrstcr_grde_code = 'D' THEN 1.0
          WHEN sfrstcr_grde_code = 'S' THEN 2.0
          WHEN sfrstcr_grde_code = 'PA' THEN 2.0
          WHEN sfrstcr_grde_code = 'CR' THEN 2.0
          -- Account for pass/fail classes.
          WHEN sfrstcr_gmod_code = 'P' and sfrstcr_grde_code = 'P' THEN sfrstcr_credit_hr
          -- Account for transfer classes, there is no record in how they store a passing tranfer class in this table
          WHEN sfrstcr_gmod_code = 'T' and sfrstcr_grde_code = 'P' THEN sfrstcr_credit_hr
          WHEN sfrstcr_grde_code IS NULL THEN 0.0
          else 0.0
        end
      ELSE 0.0
    END grade_points,
    COALESCE(sfrstcr_credit_hr, 0) credits_attempted,
    CASE
      WHEN sfrstcr_grde_code IS NOT NULL THEN sfrstcr_credit_hr
      ELSE 0
    END credits_earned,
    CASE
      WHEN stvterm_start_date > sysdate THEN 'REGISTERED'      
      WHEN stvterm_start_date <= sysdate AND stvterm_end_date > sysdate THEN 'IN_PROGRESS'
      WHEN sfrstcr_grde_code IN ('A', 'B', 'C', 'D', 'S', 'P', 'PA', 'CR') THEN 'COMPLETED'
      ELSE 'UNKNOWN'
    END status,
    'T' is_active
  FROM spriden JOIN sfrstcr ON spriden_pidm = sfrstcr_pidm
               JOIN stvterm ON stvterm_code = sfrstcr_term_code
         RIGHT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
                           AND ssbsect_term_code = sfrstcr_term_code
               JOIN stvrsts ON sfrstcr_rsts_code = stvrsts_code
          LEFT JOIN sirasgn ON ssbsect.ssbsect_term_code = sirasgn_term_code 
                           AND ssbsect.ssbsect_crn = sirasgn_crn
  WHERE spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
    AND stvrsts_withdraw_ind = 'N'
    AND (stvrsts_withdraw_ind = 'N' AND (stvrsts_wait_ind = 'Y' OR stvrsts_incl_sect_enrl = 'Y'))
    and sfrstcr_pidm in (select pidm from NOW_STU)
    and sfrstcr_term_code in (select * from FUTR_TERM)
)
-- Pull from both sources into one
SELECT * FROM NOW_CRSE
union
select * from old_crse
order by 2,3,4","Student Course"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Department","WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
case when length(stvdept_code) >3 then 'T' ELSE 'F' END AS is_active
FROM stvdept
),

-- Assign default values
defaultValues AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM department
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Departments"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"core.advisor","SELECT distinct FACULTY_ID nk, 
PERSON_PIN_USER_ID username,
ISNULL(PERSON_EMAIL_ADDRESSES, '') email,
ISNULL(FIRST_NAME, '') first_name,
LAST_NAME last_name,
'T' is_active
FROM FACULTY
LEFT OUTER JOIN PERSON_PIN 
ON FACULTY_ID = PERSON_PIN_ID
LEFT OUTER JOIN PERSON
ON FACULTY_ID = PERSON.ID
LEFT OUTER JOIN PEOPLE_EMAIL
ON FACULTY_ID = PEOPLE_EMAIL.ID AND
PERSON_EMAIL_TYPES = 'STA'
JOIN PERSTAT
ON PERSTAT_HRP_ID = FACULTY_ID AND
PERSTAT_END_DATE IS NULL

WHERE FACULTY_ID IS NOT NULL
AND PERSON_PIN_USER_ID IS NOT NULL
AND FAC_ADVISE_FLAG = 'Y'","Advisor"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.EnrollmentApplication","with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),
pop AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)))),
email_list as (
  select goremal_pidm as pidm,
         coalesce(
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'FAPA' and rownum = 1),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'PER1' and rownum = 1),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'PER2' and rownum = 1),
--            (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'O365' and rownum = 1),
          ''
         ) as email
    from goremal g
   group by goremal_pidm
),
app_list as (
select spriden_id as nk,
       spriden_id as student,
       saradap_term_code_entry as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       trim(el.email) as personal_email,
       'T' as is_active
  from saradap join max_list ml on saradap_pidm = ml.pidm
                               and saradap_term_code_entry = ml.max_term
               left join spriden on saradap_pidm = spriden_pidm
                                and spriden_change_ind is null
               left join email_list el on saradap_pidm = el.pidm
 where saradap_pidm in (select * from pop)
   --and p.student_id is not null
   --and SARADAP_APST_CODE= 'D'
)

select nk, student, app_term, app_number, app_dt, personal_email, is_active
  from app_list
 where to_date(app_dt, 'YYYY-MM-DD') >= to_date('2016-01-01', 'YYYY-MM-DD')
 --AND personal_email is null","Enrollment Application"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.Section","-- Fields: nk,cd,course,term,campus,seats_offered,is_unlimited_seating,instructor_name,class_start_dt,class_end_dt,drop_start_dt,drop_end_dt,withdraw_end_dt,is_active
-- Model Name: cat.Section
-- Name: Section
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query: 

-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , NVL(stvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , CASE
      WHEN NVL(stvcamp_code, 'DEFAULT') IN ('X', 'S', 'O', 'F', 'A', 'I', '1') THEN CASE WHEN ssbsect_ssts_code = 'A' THEN 'T' ELSE 'F' END 
      ELSE 'F'
    END AS is_active --Identify if section is active by comparing the value in ssbsect_ssts_code, but only if on a valid 4 year campus.
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
-- WHERE ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Comented out by default. Confirm with BA/Member.
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM section
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Sections"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.studentTerm","  WITH PMT as ( --this is the lookup of program codes so we pull in the right program code from PRGM lkp
Select Sobcurr_Program || '$$' || Stvterm_Acyr_Code nk_value,
Sobcurr_Program pgrm
From Sobcurr
JOIN (SELECT sgbstdn_program_1, MAX(sgbstdn_term_code_eff) AS max_eff_term
      FROM sgbstdn
      Group By Sgbstdn_Program_1
) T On T.Sgbstdn_Program_1 = Sobcurr_Program
Join Stvterm On Max_Eff_Term = Stvterm_Code
Where Stvterm_Code = Max_Eff_Term
),

SGB as ( --this is the list of students and terms and appropriate program information
select * from (
 select sgbstdn_pidm,
      sgbstdn_program_1,
      sgbstdn_stst_code,
      sgbstdn_term_code_eff as max_eff_term,
    sgbstdn_term_code_ctlg_1,
    stvstst_reg_ind
  from sgbstdn
  left join stvstst on stvstst_code = sgbstdn_stst_code
  where sgbstdn_program_1 is not null
  and stvstst_code is not null) a
where max_eff_term = (select max(sgbstdn_term_code_eff)
                        from sgbstdn
                        right join stvterm on sgbstdn_term_code_eff = stvterm_code
                        where a.sgbstdn_pidm = sgbstdn_pidm 
                        and stvterm_end_date <= sysdate + 365 )

order by 1,4
),

pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW')
      and sfrstcr_term_code in (
      Select Term From (           
                Select Stvterm_Code Term From Stvterm 
                Where Stvterm_Code < (
                      Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      And Stvterm_Desc Not Like '%Non-Credit' 
                      And Stvterm_Desc Not Like 'Parson%')
                And Stvterm_Desc Not Like '%Non-Credit' 
                And Stvterm_Desc Not Like 'Parson%'
                And Rownum < 5
                Order By 1 Desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      Select Term From (           
                Select Stvterm_Code Term From Stvterm 
                Where Stvterm_Code < (
                      Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      And Stvterm_Desc Not Like '%Non-Credit' 
                      And Stvterm_Desc Not Like 'Parson%')
                And Stvterm_Desc Not Like '%Non-Credit' 
                And Stvterm_Desc Not Like 'Parson%'
                And Rownum < 5
                Order By 1 Desc)
))))


select spriden_id || '$$' || SGB.max_eff_term nk,
       spriden_id student,
       SGB.max_eff_term term,
       PMT.nk_value \\\""program\\\"",
       decode(stvstst_reg_ind,'Y','T','F') is_active
from spriden
right join SGB on spriden_pidm = SGB.sgbstdn_pidm
JOIN goremal ON spriden_pidm = goremal_pidm --may be surperflous now
join PMT on SGB.sgbstdn_program_1 = PMT.pgrm 

--right join pop on spriden_pidm = pop.pidm 
where spriden_change_ind is null
and spriden_entity_ind = 'P'
  AND EXISTS ( SELECT 1 
                 FROM sgbstdn
                WHERE sgbstdn_program_1 IS NOT NULL
                  And Sgbstdn_Stst_Code = 'AS')
  AND goremal_email_address LIKE '%@students.snead.edu' --may be surperflous now
  AND goremal_emal_code = 'CAMP' --may be superflous now

And Spriden_Pidm In (Select * From Pop)
order by 2","Student Term"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.StudentTerm","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
	  AND TERM_REPORTING_YEAR > YEAR(getdate())-10
	  AND  UPPER(TERM_DESC) NOT LIKE '%FIRE%' AND 
		  UPPER(TERM_DESC) NOT LIKE '%CON ED%' AND 
		  UPPER(TERM_DESC) NOT LIKE '%CONT ED%' AND 
		  UPPER(TERM_DESC) NOT LIKE '%CE%' 
),

PROGLIST AS (
SELECT DISTINCT 
       REPLACE(ACAD_PROGRAM_REQMTS_ID , '*','$$')                                        nk
  FROM ACAD_PROGRAM_REQMTS
    LEFT OUTER JOIN ACAD_PROGRAMS
      ON SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
    LEFT OUTER JOIN PROGRAM_STATUS
      ON PROGRAM_STATUS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
        WHERE 
          POS = 1 AND 
          SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) <> 'NOND' and
          SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) <> 'UNDEC'
 and   ISNUMERIC(SUBSTRING(ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) + 1, 4)) = 1
),


STULIST AS (
SELECT 
   substring(P.ID,1,7) PERSON_ID
FROM PERSON AS P
INNER JOIN PEOPLE_EMAIL PE
ON P.ID = PE.ID AND PE.PERSON_EMAIL_TYPES IN ('BCS')
INNER JOIN PERSON_PIN PP 
ON P.ID = PP.PERSON_PIN_ID
GROUP BY	P.ID,
			P.FIRST_NAME,
			P.LAST_NAME,
			P.GENDER,
			P.BIRTH_DATE,
			PE.PERSON_EMAIL_ADDRESSES,
			PP.PERSON_PIN_USER_ID

),

STUTRMLIST AS (
SELECT DISTINCT  SUBSTRING(SP.STUDENT_PROGRAMS_ID, 1, CHARINDEX('*',SP.STUDENT_PROGRAMS_ID)-1)+'$$'+SEC_TERM as nk,
    SUBSTRING(SP.STUDENT_PROGRAMS_ID, 1, CHARINDEX('*',SP.STUDENT_PROGRAMS_ID)-1) as student,
    SEC_TERM as term,
    replace(SP.STPR_STU_PGM_IDX, '*', '$$') as program,
    'T' as is_active   
 FROM STUDENT_PROGRAMS SP
    JOIN STPR_STATUSES
       ON STPR_STATUSES.STUDENT_PROGRAMS_ID = SP.STUDENT_PROGRAMS_ID
          AND  STPR_STATUSES.POS = '1' AND STPR_STATUSES.STPR_STATUS = 'A'
    JOIN TERMLIST TL ON SP.STUDENT_PROGRAMS_CHGDATE > TL.TERM_START_DATE
	                AND SP.STUDENT_PROGRAMS_CHGDATE < TL.TERM_END_DATE
	JOIN STULIST SL ON SL.PERSON_ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID, 1, CHARINDEX('*',SP.STUDENT_PROGRAMS_ID)-1)
	JOIN PROGLIST PL ON PL.nk =  replace(SP.STPR_STU_PGM_IDX, '*', '$$')
  WHERE TL.SEC_TERM IN 
  (SELECT  MAX(TL.SEC_TERM) SEC_TERM 
FROM TERMLIST TL WHERE SP.STUDENT_PROGRAMS_CHGDATE > TL.TERM_START_DATE
	                AND SP.STUDENT_PROGRAMS_CHGDATE < TL.TERM_END_DATE )
)
SELECT *
  FROM STUTRMLIST","StudentTerm"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.StudentTerm","WITH studentTerm AS (
SELECT NK,
  STUDENT,
  TERM,
  \\\""PROGRAM\\\"",
  IS_ACTIVE
FROM zst_eab_stuterm_extract
WHERE MULTI_SOURCE = 'PCC'

)

-- wrapper query
select * from studentTerm","Student Terms"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.StudentCourse","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Student Course File

Fields  nk,student,term,course,section,grade_cd,grade_points,credits_attempted,credits_earned,status,is_active
*/

SELECT NVL(cwr.id, '') || '$$' || NVL(REPLACE(cwr.yr, ' ', ''), '') || NVL(TRIM(cwr.sess), '') || '$$' ||
       NVL(TRIM(cwr.crs_no), '') || NVL(TRIM(smr_mr.im), '')                              AS nk  --Student, Term, Course
       , NVL(cwr.id, '')                                                                  AS student
       , NVL(REPLACE(cwr.yr, ' ', ''), '') || '$$' || NVL(TRIM(cwr.sess), '')             AS term
       , NVL(TRIM(cwr.crs_no), '') || NVL(TRIM(smr_mr.im), '')                            AS course
       , NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')                      AS section
       , NVL(cwr.grd, '')                                                                 AS grade_cd
       , TRIM('')                                                            AS grade_points
       , NVL(cwr.hrs, 0) * CASE
                             WHEN att.grd IS NOT NULL THEN 1
                             ELSE 0
                           END                                                            AS credits_attempted
       , NVL(cwr.hrs, 0) * CASE
                             WHEN earn.grd IS NOT NULL THEN 1
                             ELSE 0
                           END                                                            AS credits_earned
       , TRIM(CASE
           WHEN cwr.stat IN ('R', 'C', 'E', 'T') AND acr.beg_date > TODAY                                THEN 'REGISTERED'
           WHEN cwr.stat IN ('R', 'C', 'E', 'T') AND acr.beg_date <= TODAY AND acr.end_date >= TODAY     THEN 'IN_PROGRESS'
           WHEN cwr.stat IN ('R', 'C', 'E', 'T') AND acr.end_date < TODAY THEN CASE
                                                                                 WHEN cwr.grd <= crr.grd THEN 'COMPLETED'
                                                                                 ELSE 'UNKNOWN'
                                                                               END
           WHEN cwr.stat IN ('L')                                                                        THEN 'WAITLISTED'
           ELSE 'UNKNOWN'
         END)                                                                              AS status --REGISTERED, IN_PROGRESS, COMPLETED, WAITLISTED, UNKNOWN
       --, crr.grd AS test_grade  --Troubleshooting field
       , CASE
           WHEN cwr.stat IN ('R', 'L', 'C', 'E', 'T') THEN 'T'
           ELSE 'F'
         END                                                                              AS is_active        
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id = '594311'
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population
--Student/class info
JOIN informix.cw_rec cwr
  ON population.id = cwr.id
--Course level info
LEFT JOIN informix.crs_rec cr
       ON cr.crs_no = cwr.crs_no
          AND cwr.cat = cr.cat
--Section level info          
LEFT JOIN informix.sec_rec sr
       ON sr.crs_no = cr.crs_no
          AND sr.cat = cr.cat
          AND sr.sec_no = cwr.sec
          AND sr.yr = cwr.yr
          AND sr.sess = cwr.sess          
--Course Type Information from section meetings
LEFT JOIN (SELECT DISTINCT smr.crs_no, smr.yr, smr.sess, smr.sec_no  --Distinct needed for multiple meetings with the same course type
                           , mr.im
           FROM informix.secmtg_rec smr
           LEFT JOIN informix.mtg_rec mr
                  ON mr.mtg_no = smr.mtg_no) smr_mr
       ON smr_mr.crs_no = sr.crs_no
          AND smr_mr.yr = sr.yr
          AND smr_mr.sess = sr.sess
          AND smr_mr.sec_no = sr.sec_no   
--Does the class count towards the degree based on grade?
LEFT JOIN informix.crsreq_rec crr
       ON crr.crsreq_crs_no = cwr.crs_no
          AND crr.crsreq_cat = cwr.cat   
          AND crr.crsreq_no = (SELECT MAX(crr1.crsreq_no)
                               FROM informix.crsreq_rec crr1
                               WHERE crr1.crsreq_crs_no = cwr.crs_no
                                  AND crr1.crsreq_cat = cwr.cat)
--Term Information
LEFT JOIN informix.acad_cal_rec acr
       ON acr.prog = cwr.prog
          AND acr.yr = cwr.yr
          AND acr.sess = cwr.sess  
          AND acr.subsess = ''             
--Does the grade count towards attempted credits?       
LEFT JOIN (SELECT DISTINCT grd
           FROM informix.grd_table
           WHERE att_fctr = 1) att
       ON att.grd = cwr.grd              
--Does the grade count towards earned credits?       
LEFT JOIN (SELECT DISTINCT grd
           FROM informix.grd_table
           WHERE earn_fctr = 1) earn
       ON earn.grd = cwr.grd         
WHERE 1=1
--ORDER BY 1","StudentCourse"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.Section","WITH 

termList AS (
   SELECT DISTINCT SEC_TERM
     FROM COLL_TEST.COURSE_SECTIONS
    JOIN COLL_TEST.TERMS
      ON SEC_TERM = TERMS_ID
      AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%FULL%'
      OR UPPER(TERM_DESC) LIKE '%FALL%FULL%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
    WHERE SEC_TERM IS NOT NULL
      AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
),

coursesTemp AS (
  SELECT distinct NVL(COURSES.CRS_NAME,'') nk 
  FROM COLL_TEST.COURSES
    Join COLL_TEST.APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
    Join COLL_TEST.COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
   CRS_ACAD_LEVEL = 'UG'
    AND CRS_DEPTS IN (
        SELECT DISTINCT DEPTS_ID
        FROM   COLL_TEST. DEPTS
        WHERE  DEPTS_ACTIVE_FLAG='A')
),

validSections AS (
  SELECT COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME nk,
      COURSE_SECTIONS.COURSE_SECTIONS_ID cd,
     COURSE_SECTIONS.SEC_NO display_cd,

      NVL (COURSES.CRS_NAME, '') course,
      COURSE_SECTIONS.SEC_TERM term,

  -- This will need to be modified per member
  CASE WHEN UPPER(SEC_LOCATION) IN ('BC', 'PC', 'MP', 'MC', 'OS', 'RO', 'DQ', 'SP', 'SS', 'WA', 'WN') THEN UPPER(SEC_LOCATION)
        ELSE 'DEFAULT' END  campus, 
      NVL(SEC_CAPACITY, 0)  seats_offered,
      'F' is_unlimited_seating, 
       CASE
        WHEN  LAST_NAME IS NULL THEN 
           'TBD' 
        ELSE
           LAST_NAME  || ', ' || NVL(FIRST_NAME,'') 
       END  instructor_name,
      COALESCE (REPLACE(TO_CHAR (SEC_START_DATE,        'YYYY-MM-DD') , '/' , '-') , '1900-01-01') class_start_dt,
      COALESCE (REPLACE(TO_CHAR (SEC_END_DATE,          'YYYY-MM-DD') , '/' , '-') , '1900-01-02') class_end_dt, 
      COALESCE (REPLACE(TO_CHAR (SEC_OVR_CENSUS_DATES , 'YYYY-MM-DD') , '/' , '-') , REPLACE(TO_CHAR (TERM_CENSUS_DATES, 'YYYY-MM-DD'), '/','-') ) drop_start_dt,
      COALESCE (
      REPLACE(
      TO_CHAR (SEC_OVR_CENSUS_DATES , 'YYYY-MM-DD') , '/' , '-') , 
      REPLACE(TO_CHAR (TERM_CENSUS_DATES, 'YYYY-MM-DD'), '/','-') ) drop_end_dt,
      CASE
       WHEN SEC_STATUS = 'AC' AND ( (COURSE_SECTIONS_LS.SEC_COREQ_SECS IS NULL) OR
                                    (COURSE_SECTIONS_LS.SEC_COREQ_SECS IS NOT NULL AND 
                                      COURSE_SECTIONS.SEC_COURSE_NO NOT LIKE '%L'))
          THEN 'T' 
        ELSE 'F' 
      END is_active
  FROM COLL_TEST.COURSE_SECTIONS 
  JOIN termList ON COURSE_SECTIONS.SEC_TERM = termList.SEC_TERM
  LEFT OUTER JOIN COLL_TEST.COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID 
     AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN COLL_TEST.TERMS_LS
      ON COURSE_SECTIONS.SEC_TERM = TERMS_ID
      and TERMS_LS.POS = '1'
  LEFT JOIN COLL_TEST.SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
      AND SEC_STATUSES.POS = '1'
  LEFT JOIN COLL_TEST.COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
  JOIN coursesTemp ON COURSES.CRS_NAME = coursesTemp.nk
  LEFT OUTER JOIN COLL_TEST.COURSE_SEC_FACULTY
    ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
  LEFT OUTER JOIN COLL_TEST.PERSON
    ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
)

  SELECT * FROM validSections
 WHERE DISPLAY_CD NOT LIKE 'X%' OR DISPLAY_CD NOT LIKE 'Y%'
","Section"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"reg.AccountHold","SELECT A.EMPLID||'$$'||A.SRVC_IND_CD AS NK,
       A.EMPLID AS STUDENT,
       A.SRVC_IND_CD AS IDENTIFIER,
       TRIM(COALESCE(A.SRVC_IND_REASON, A.SRVC_IND_CD)) AS MESSAGE,
       CASE
         WHEN A.SCC_SI_END_DT IS NOT NULL THEN
           CASE
             WHEN A.SRVC_IND_ACTIVE_DT < SYSDATE AND A.SCC_SI_END_DT > SYSDATE THEN 'T'
             ELSE 'F'
           END
         ELSE
           CASE
             WHEN A.SRVC_IND_ACTIVE_DT < SYSDATE THEN 'T'
             ELSE 'F'
           END
       END AS IS_ACTIVE
  FROM PS_SRVC_IND_DATA A JOIN PS_PERSONAL_DATA B ON A.EMPLID = B.EMPLID
   WHERE A.INSTITUTION = 'TN293' 
     AND A.SRVC_IND_ACTIVE_DT >= to_date('2016-06-01', 'YYYY-MM-DD')
  ORDER BY 1","AccountHold"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.Section","-- Fields: nk,cd,course,term,campus,seats_offered,is_unlimited_seating,instructor_name,class_start_dt,class_end_dt,drop_start_dt,drop_end_dt,withdraw_end_dt,is_active
-- Model Name: cat.Section
-- Name: Section
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query: 

-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate + 365
      
                      )
AND ROWNUM < 40
ORDER BY 1 DESC
),
-- get drop dates from sfrrsts for specific registration drop codes 
sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm.stvterm_code AS term
  , NVL(stvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , CASE   --Updated 11/16/2016 per instructions from Cassandra Coleman.  Only sections from certain campus codes should be considered active.
      WHEN ssbsect_camp_code IN ('X', 'S', 'PZ', 'PX', 'PW', 'PT', 'PS', 'PR', 'PO', 'PN', 'PM', 'PL', 'PI', 'PG', 'PF', 'PE', 'PC', 'PA', 'P', 'O', 'I', 'F') THEN CASE
                                        WHEN ssbsect_ssts_code = 'A' THEN 'T'
                                        ELSE 'F'
                                      END
      ELSE 'F'
    END AS is_active -- Identify if section is active by comparing the value in ssbsect_ssts_code. The default is 'A'. 
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
JOIN getLastXTerms ON getLastXTerms.stvterm_code = ssbsect_term_code -- scoping the number of terms
-- WHERE ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Comented out by default. Confirm with BA/Member.
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM section
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Sections"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.sectiontime","with section_pop as ( --this is to make sure the sections we select are in line with sections in the Section file.

select section.crse_id || '$$' 
                            || section.strm || '$$'
                            || section.session_code || '$$' 
                            || section.CLASS_SECTION as nk
from PS_CLASS_TBL section
where 1=1
  and section.institution = 'TN293'
  and section.start_dt > sysdate-365 
),

location_pop as (
select
distinct a.facility_id as nk

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('HT','MAIN')
and a.setid = 'TN293'
and a.effdt = (select max(c.effdt) 
                from ps_facility_tbl c 
                where a.facility_id = c.facility_id 
                and a.setid = c.setid) 
),

dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'TN293'
and acad_career = 'CRED'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

),

course_pop as (

SELECT o.CRSE_ID
FROM PS_CRSE_OFFER o
WHERE o.EFFDT = (SELECT MAX(EFFDT)
                FROM   PS_CRSE_OFFER
                WHERE  o.CRSE_ID = CRSE_ID)
and o.INSTITUTION = 'TN293'
and o.acad_career = 'CRED'
and o.acad_org = 'SCREDIT'
--and o.crse_offer_nbr <> '1'
and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))

)

select distinct
a.crse_id || '$$' || a.strm || '$$' || a.session_code || '$$' --added session code
       || dates.date_diff || '$$' --for uniqueness
       || a.class_section || '$$' 
       || COALESCE(b.Day_of_Week, '') || '$$'
       || a.CLASS_MTG_NBR || '$$'   
       || NVL(TO_CHAR(a.MEETING_TIME_START, 'HH24:MI:SS'), '') || '$$'
       || NVL(TO_CHAR(a.MEETING_TIME_END, 'HH24:MI:SS'), '')        AS NK --unique NK
, a.crse_id || '$$' 
  || a.strm || '$$' 
  || a.session_code || '$$' 
  || dates.date_diff || '$$'
  || a.class_section as section
, CASE b.Day_of_Week 
            WHEN 'U' THEN 1 
            WHEN 'M' THEN 2 
            WHEN 'T' THEN 3 
            WHEN 'W' THEN 4 
            WHEN 'R' THEN 5 
            WHEN 'F' THEN 6 
            WHEN 'S' THEN 7 
           ELSE 8 
          END                                    AS Day_of_Week 
, NVL(TO_CHAR(a.MEETING_TIME_START, 'HH24:MI:SS'), '') as from_tm
, NVL(TO_CHAR(a.MEETING_TIME_END, 'HH24:MI:SS'), '') as to_tm
, facility_id as  \\\""location\\\""
, 'T' as is_active

from (
SELECT a.CRSE_ID, a.CLASS_SECTION, a.CRSE_OFFER_NBR, a.CLASS_MTG_NBR
             , a.STRM
             , a.session_code --added session code
             , a.MON, a.TUES, a.WED, a.THURS, a.FRI, a.SAT, a.SUN
             , a.MEETING_TIME_START, a.MEETING_TIME_END, a.START_DT, a.END_DT
             , a.FACILITY_ID
             --, b.BLDG_CD, b.ROOM
      FROM SYSADM.PS_CLASS_MTG_PAT a
      --JOIN SYSADM.PS_FACILITY_TBL b
        --ON a.FACILITY_ID = b.FACILITY_ID
      --where a.institution = 'TN293' --and b.institution = 'TN293'
        ) a
left join dates on a.strm = dates.strm --added dates for nk link
          and a.session_code = dates.session_code
left join (select CRSE_ID, CLASS_SECTION, CRSE_OFFER_NBR, CLASS_MTG_NBR --reordering of data for Day_Of_Week
             , STRM
             , session_code --added session code
             , Day_of_week
             from (select  CRSE_ID, CLASS_SECTION, CRSE_OFFER_NBR, CLASS_MTG_NBR
             , STRM
             , session_code --added session code
             , CASE WHEN MON='Y' then 'M' else 'N' end as MON 
             , CASE WHEN TUES='Y' then 'T' else 'N' end as TUES 
             , CASE WHEN WED='Y' then 'W' else 'N' end as WED 
             , CASE WHEN THURS='Y' then 'R' else 'N' end as THURS 
             , CASE WHEN FRI='Y' then 'F' else 'N' end as FRI 
             , CASE WHEN SAT='Y' then 'S' else 'N' end as SAT 
             , CASE WHEN SUN='Y' then 'U' else 'N' end as SUN
             from SYSADM.PS_CLASS_MTG_PAT
             where CLASS_MTG_NBR = 1 --comment this out for all section times, Nav cannot handle more than location per section currently
             )

            UNPIVOT(Day_of_week FOR sk IN (MON, TUES, WED, THURS, FRI, SAT, SUN)) --unpivor reorder


) b  
ON a.CRSE_ID = b.CRSE_ID
             AND a.STRM = b.STRM
             AND a.CLASS_SECTION = b.CLASS_SECTION
             AND a.CRSE_OFFER_NBR = b.CRSE_OFFER_NBR
             AND a.CLASS_MTG_NBR = b.CLASS_MTG_NBR
where 1=1 
and a.crse_id || '$$' 
    || a.strm || '$$' 
    || a.session_code || '$$' 
    --|| a.date_diff || '$$' --not needed for this population condition
    || a.class_section in (select * from section_pop) --population
and a.facility_id in (select * from location_pop)
and a.crse_id in (select * from course_pop)","SectionTime"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.Department","SELECT DISTINCT DEPTS_ID  nk, 
       DEPTS_DESC  name,
        'T' is_active
 FROM    DEPTS
","Department"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.EnrollmentApplication","-- Columns: nk,student,app_term,app_number,app_dt,personal_email,is_active
-- Model: cat.EnrollmentApplication
with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),
now_term as (
  select stvterm_code as a_term
    from stvterm
   where stvterm_end_date >= sysdate
     and rownum = 1
   order by stvterm_code asc
),
TERM_LIST AS (
  select stvterm_code,
         (select a_term from now_term) as now_term
    from stvterm
   where stvterm_code <= (select * from now_term)
     and rownum < 5
   order by stvterm_code desc
),
FUTR_TERM as (
  select stvterm_code
    from stvterm
   where stvterm_end_date >= sysdate
),
ACTV_TERM as (
  select stvterm_code,
         now_term,
         case
           -- summer
           when substr(now_term,-2,2) = '50' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- spring
           when substr(now_term,-2,2) = '10' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- fall
           when substr(now_term,-2,2) = '80' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              else 'F'
            end         
           -- other
           else 'F'
         end as is_active
    from term_list
),
pop as  (
  select distinct s2.spriden_pidm as pidm, s2.spriden_id as student_id
    from saradap s1 join spriden s2 on s1.saradap_pidm = s2.spriden_pidm
                                   and s2.spriden_change_ind is null
   where s1.saradap_term_code_entry in (select stvterm_code from ACTV_TERM where is_active='T'
                                        union
                                        select stvterm_code from FUTR_TERM)
),
email_list as (
  select goremal_pidm as pidm,
         coalesce(
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'PERS' and rownum = 1),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'BUS' and rownum = 1),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'OTH' and rownum = 1),
          ''
         ) as email
    from goremal g
   group by goremal_pidm
),
app_list as (
select p.student_id as nk,
       p.student_id as student,
       saradap_term_code_entry as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       trim(el.email) as personal_email,
       'T' as is_active
  from saradap join max_list ml on saradap_pidm = ml.pidm
                               and saradap_term_code_entry = ml.max_term
               left join pop p on saradap_pidm = p.pidm
               left join email_list el on saradap_pidm = el.pidm
 where saradap_term_code_entry in (select stvterm_code from ACTV_TERM where is_active='T'
                                   union
                                   select stvterm_code from FUTR_TERM)
   and p.student_id is not null
   and SARADAP_APST_CODE= 'D'
)
select nk, student, app_term, app_number, app_dt, personal_email, is_active
  from app_list
 where to_date(app_dt, 'YYYY-MM-DD') >= to_date('2016-06-01', 'YYYY-MM-DD')","EnrollmentApplicationTable"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.StudentTerm","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm 
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND (sfrstcr_rsts_code LIKE ('R%') OR sfrstcr_rsts_code LIKE ('K%'))
  
/* UNION

SELECT DISTINCT saradap_pidm AS studentPidm 
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1 */
),

-- get the max term for each program that has a corresponding term assigned.
getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
  LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
left join smbpgen ON sobcurr_program = smbpgen_program
WHERE stvterm_code IS NOT NULL
and smbpgen_active_ind = 'Y'
  GROUP BY  sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
SELECT sgbstdn_pidm
  , sgbstdn_program_1
  , sgbstdn_stst_code
  , sgbstdn_term_code_eff AS maxEffTerm
  , sgbstdn_term_code_ctlg_1
  , stvstst_reg_ind
FROM sgbstdn a
LEFT JOIN sfrstcr b ON sgbstdn_pidm = sfrstcr_pidm
  LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
WHERE sgbstdn_program_1 IS NOT NULL
  AND stvstst_code IS NOT NULL
  AND sgbstdn_term_code_eff = (
                               SELECT MAX(sgbstdn_term_code_eff)
                               FROM sgbstdn
                                RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                               WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                AND stvterm_end_date <= sysdate + 365
                              )
   AND   SFrstcr_TERM_CODE = ( select max(SFRSTCR_TERM_CODE)
   from SFRSTCR bb
   where b.sfrstcr_pidm = bb.sfrstcr_pidm
   )                         

),

-- final query to extract student term data
studentTerm AS (
SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
  , spriden_id AS student
  , studentDetails.maxEffTerm AS term
  , studentDetails.sgbstdn_program_1 || '$$' || getProgramMaxTerm.acyr AS \\\""program\\\""
  , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active 
FROM spriden
  RIGHT JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
  JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
  JOIN studentPopulation ON studentPidm = spriden_pidm
WHERE spriden_change_ind IS NULL 
)

-- wrapper query
select * from studentTerm","StudentTerm"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.subject","SELECT a.STVSUBJ_CODE AS NK, a.STVSUBJ_DESC AS NAME, 'T' AS IS_ACTIVE
FROM STVSUBJ a
UNION
Select 'DEFAULT' as NK
, 'DEFAULT' as Name
, 'T' as IS_ACTIVE
from dual","Subject"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.Program","with text1 as (
  SELECT PGRM,
         LISTAGG(txt2, '') WITHIN GROUP (ORDER BY pgrm, txt1) txt
    FROM (select SMRPCMT_PROGRAM pgrm, 
                 smrpcmt_text_seqno txt1, 
                 smrpcmt_text txt2
            from SMRPCMT c
           where 1=1
             and smrpcmt_term_code_eff = (select max(smrpcmt_term_code_eff) 
                                            from smrpcmt b 
                                           where b.SMRPCMT_PROGRAM = c.SMRPCMT_PROGRAM 
                                             and b.SMRPCMT_text_seqno = c.SMRPCMT_text_seqno)
           order by 1,2)
           group by PGRM
),

Programs As (
  Select sobcurr_program pgrm, 
         Sobcurr_Term_Code_Init,
         Sobcurr_Degc_Code,
         Smbpgen_Req_Credits_Overall credit_count, 
         Max_Eff_Term, 
         NVL(Majr,replace(SOBCURR_PROGRAM,SOBCURR_DEGC_CODE||'-','')) MAJR
    From Sobcurr Left Join ( Select Distinct Smbpgen_Program,
                                             Smbpgen_Req_Credits_Overall
                                        From Smbpgen a
                                       Where Smbpgen_Term_Code_Eff = ( Select Max(Smbpgen_Term_Code_Eff)
                                                                         From Smbpgen B 
                                                                        Where B.Smbpgen_Program = A.Smbpgen_Program)) abc on abc.smbpgen_program = sobcurr.sobcurr_program
                 Left Join ( SELECT DISTINCT sgbstdn_program_1, 
                                             sgbstdn_term_code_eff AS max_eff_term, 
                                             Sgbstdn_Majr_Code_1 As Majr
                               From Sgbstdn def
                              Where 1=1
                                And Sgbstdn_Term_Code_Eff = (Select Max(Sgbstdn_Term_Code_Eff) 
                                                               From Sgbstdn Hij 
                                                              Where Def.Sgbstdn_Program_1 = Hij.Sgbstdn_Program_1)) T On T.Sgbstdn_Program_1 = sobcurr.sobcurr_program
   Where 1=1 
     And Sobcurr_Term_Code_Init = (Select Max(C.Sobcurr_Term_Code_Init) 
                                     From Sobcurr C
                                    Where C.Sobcurr_Program = Sobcurr.Sobcurr_Program)
)

Select Distinct
  programs.pgrm || '$$' || nvl(Stvterm_Acyr_Code,'0000') Nk,
  Programs.Pgrm Cd,
  Case
    When STVMAJR_SEVIS_EQUIV Is Not Null Then Substr(STVMAJR_SEVIS_EQUIV,1,2)||'.'||Substr(STVMAJR_SEVIS_EQUIV, 3)
    When Stvmajr_Cipc_Code Is Not Null Then Substr(Stvmajr_Cipc_Code,1,2)||'.'||Substr(Stvmajr_Cipc_Code, 3)
    When Stvmajr_Cipc_Code In ('900000', '480101') Then '24.0102'
    else null 
  end as Cip_Nk,
  Smrprle_Program_Desc \\\""name\\\"",
  nvl(To_Number(Stvterm_Acyr_Code),0000) Cat_Yr,
  Text1.Txt As \\\""desc\\\"",
  nvl(credit_count,60) as credits, 
  '' enrollment_notes,
  '' registration_notes,
  COALESCE(programs.MAJR, '') area_of_study,
  '' Concentration,
  Programs.Sobcurr_Degc_Code Credential,
  case
    when programs.sobcurr_degc_code in ('AA','AS') then 'T' 
    else 'F'
  end as is_transfer,
  Case
    WHEN stvterm_code between to_char(to_number(max_eff_term, '999999')-400) and max_eff_term THEN 'T'
    ELSE 'F'
  END is_active
 From Programs LEFT JOIN sgbstdn ON sgbstdn_program_1 = programs.pgrm
               LEFT JOIN stvterm ON sgbstdn_term_code_eff = stvterm_code
               LEFT JOIN smrprle ON smrprle_program = programs.pgrm
               Left Join Stvmajr On Stvmajr_Code = Programs.Majr
               Left Join Text1 On Text1.Pgrm = Programs.Pgrm
--where programs.pgrm = 'STC-DRFT'
union
select 'UNDECLARED$$0000' as NK,
       'UNDECLARED' As Cd,
       '' CIP_NK,
       'UNDECLARED' As \\\""name\\\"",
       0000 as cat_yr,
       'You are currently undeclared, please apply for a program to graduate with a valid degree.' as \\\""desc\\\"",
       3 as CREDITS,
       '' as ENROLLMENT_NOTES,
       '' as REGISTRATION_NOTES,
       'UNDC' as AREA_OF_STUDY,
       '' as CONCENTRATION,
       '000000' as CREDENTIAL,
       'F' as IS_TRANSFER,
       'T' as IS_ACTIVE
  From Dual
 order by 1,3,13
  
  ","Program"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.studentcourse","WITH pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select emplid, max(strm)
              from ps_stdnt_car_term b
              where institution = 'NV280'
              and ACAD_CAREER = 'CRED'

              group by emplid) b
              on a.emplid = b.emplid         
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid  
WHERE  1=1
        and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      ) 
        and acad_plan in ('2120','2124','2130','3400')

) 


SELECT a.EMPLID || '$$' || a.ARTICULATION_TERM || '$$' || REPLACE(transConvert.SUBJECT, ' ', '') || REPLACE(transConvert.CATALOG_NBR, ' ', '') as NK 
, a.EMPLID                                                                          AS STUDENT
, a.ARTICULATION_TERM                                                             AS TERM
, COALESCE(REPLACE(COALESCE(transConvert.SUBJECT, a.COMP_SUBJECT_AREA),' ',''), 'ELEC')              
           || CASE 
                 WHEN (transConvert.CATALOG_NBR LIKE '9%' OR transConvert.CATALOG_NBR IS NULL) THEN '9100' 
                 ELSE REPLACE(transConvert.CATALOG_NBR, ' ','') 
               END                                                                AS COURSE  
, ''                                                                              AS SECTION
, NVL(a.CRSE_GRADE_INPUT, ' ')                                                    AS GRADE_CD
, 0                                                                               AS GRADE_POINTS  
, a.UNT_TAKEN                                                                     AS ATTEMPTED_CREDITS
, CASE 
            WHEN ( a.EARN_CREDIT = 'Y' AND ( a.REPEAT_CODE IN ( 'INCL' ) OR a.REPEAT_CODE = ' ' ) )            --Update, member-specific
              THEN a.UNT_TRNSFR 
            ELSE 0 
END                                                                               AS EARNED_CREDITS
, 'COMPLETED'                                                                     AS STATUS
, 'T'                                                                             AS is_active

FROM  PS_TRNS_CRSE_DTL a 
                  
        --DEEPER COURSE INFORMATION - INST SPECIFIC 
        LEFT JOIN (SELECT ACAD_GROUP 
                          , ACAD_CAREER 
                          , SUBJECT 
                          , CATALOG_NBR 
                          , CRSE_ID 
                          , INSTITUTION 
                          , CRSE_OFFER_NBR 
                   FROM   PS_CRSE_OFFER a 
                   WHERE  EFFDT = (SELECT Max(EFFDT) 
                                   FROM   PS_CRSE_OFFER 
                                   WHERE  CRSE_ID = a.CRSE_ID 
                                      AND EFFDT <= SYSDATE)) transConvert 
               ON transConvert.ACAD_CAREER = a.ACAD_CAREER 
                  AND transConvert.INSTITUTION = a.INSTITUTION 
                  AND transConvert.CRSE_ID = a.CRSE_ID 
                  AND transConvert.CRSE_OFFER_NBR = a.CRSE_OFFER_NBR 
                  
WHERE  1 = 1
 and a.EMPLID in (select student_id from pop)
 and a.institution = 'NV280'

 and a.ACAD_CAREER = 'CRED'","StudentCourseTransfer"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.Program","-- determine most recent term for each Program

WITH maxEffectiveTerm AS (
  SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
  FROM sobcurr
  GROUP BY sobcurr_program
  ),
 

-- determine the max sorcmjr term by sorcmjr_curr_rule to consume flags that help identify active programs for the upcoming term. This logic is very specific to Gavilan.
maxSorcmjrTerm AS (
  SELECT MAX(sorcmjr_term_code_eff)                                             AS maxSorcmjrTerm
         , sorcmjr_curr_rule
  FROM sorcmjr
  WHERE sorcmjr_term_code_eff <= '201630' -- Specific to current upcoming term. This will ensure we can identify active programs for the upcoming term.
  GROUP BY sorcmjr_curr_rule
),


-- This is Gavilan specific logic. Concatenate program descriptions stored in smrpcmt. Use the smrpcmt_text_seqno field to identify the order for concatenation.
programDescription AS (
  SELECT smrpcmt_program
        , LISTAGG (smrpcmt_text, ' ')
       WITHIN GROUP (ORDER BY smrpcmt_program, smrpcmt_text_seqno)              AS description
  FROM smrpcmt baseTable
  WHERE smrpcmt_term_code_eff = (SELECT max(smrpcmt_term_code_eff)
                                  FROM smrpcmt compTable
                                  WHERE compTable.smrpcmt_program = baseTable.smrpcmt_program
                                )
  GROUP BY BaseTable.smrpcmt_program
  ),

-- extract program data from Banner
program_GGE AS (
  SELECT DISTINCT
       case when sobcurr_program like 'C%' then sobcurr_program || '$$' || stvterm_acyr_code        -- LH note Programs that have 'C%' are exempt
            else sobcurr_program || '$$' || stvterm_acyr_code || '$$' || 'GGE' end     AS nk,       -- LH updated to cASe when statement to adjust name of program
       sobcurr_program || '_GGE'                                                       AS cd,       -- LH added _GCE to name of program
       TO_NUMBER(stvterm_acyr_code)                                                    AS cat_yr,
       cASe when sobcurr_program like 'C%' then smrprle_program_desc
            else smrprle_program_desc|| ' CGE' end                                     AS  \\\""name \\\"",   -- LH updated to add CGE to the name of the program description
--smrprle_program_desc AS  \\\""desc \\\"", -- Original logic. Not relevant to Gavilan. Gavilan specific logic implemented below.
       NVL (programDescription.description, 'No program description available.')       AS  \\\""desc \\\"",
       COALESCE (sfrcplr_program_hours, 0)                                             AS credits, -- Gavilan specific logic
       ''                                                                              AS enrollment_notes,
       ''                                                                              AS registration_notes,
       COALESCE (substr(sobcurr_program, 1, CAST(INSTR(sobcurr_program, '_') AS NUMBER) -1), sobcurr_program) AS area_of_study, -- Logic may be member specific. Confirm with BA
       ''                                                                              AS concentration,
       sobcurr_degc_code                                                               AS  \\\""credential \\\"",
       DECODE (stvmajr_cipc_code, null, null,
               SUBSTR(stvmajr_cipc_code,1,2) || '.' || SUBSTR(stvmajr_cipc_code,3)
               )                                                                       AS cip,
       CASE WHEN sobcurr_degc_code IN ('AA-T','AS-T') THEN 'T' ELSE 'F' END            AS is_transfer, -- Confirm with BA
--CASE WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T' ELSE 'F' END AS is_active -- Removed this logic for Gavilan  AND implemented custom logic below.
       CASE WHEN (smrprle_curr_ind = 'Y'
                AND sobcurr_lock_ind = 'Y'
                AND smrprle_web_ind = 'Y'
                AND sorcmjr_rec_ind = 'Y'
                AND sorcmjr_adm_ind = 'Y'
                AND sorcmjr_stu_ind = 'Y'
                AND smrprle_program <> 'CCC_APPLY'
               ) THEN 'T' 
             ELSE 'F' 
             END                                                                       AS is_active
FROM sobcurr
  LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
  LEFT JOIN smrprle ON smrprle_program = sobcurr_program
  LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
  LEFT JOIN stvmajr ON stvmajr_code = COALESCE ((SUBSTR(sobcurr_program, 1, CAST(INSTR(sobcurr_program, '_') AS NUMBER) -1)), sobcurr_program)  -- Logic may be member specific. Confirm with BA
  LEFT JOIN maxSorcmjrTerm ON sorcmjr_curr_rule = sobcurr_curr_rule
  LEFT JOIN sorcmjr ON sorcmjr.sorcmjr_curr_rule = sobcurr_curr_rule  AND sorcmjr.sorcmjr_term_code_eff = maxSorcmjrTerm -- Gavilan specific logic to identify active programs
  LEFT JOIN programDescription ON smrpcmt_program = sobcurr_program -- Gavilan specific logic to extract program descriptions
  LEFT JOIN sfrcplr ON sfrcplr_program = sobcurr_program
),


program_IGET AS (
   SELECT DISTINCT
       sobcurr_program || '$$' || stvterm_acyr_code || '$$' || 'IGET'           AS nk,
       cASe when sobcurr_program like 'C%' then sobcurr_program 
            else sobcurr_program|| '_IGET' end                                  AS cd, --LH updated to exempt programs beginngin with C  AND to add _IGET to the names
       TO_NUMBER(stvterm_acyr_code)                                             AS cat_yr,
       cASe when sobcurr_program like 'C%' then smrprle_program_desc
            else smrprle_program_desc|| ' IGET' end                             AS \\\""name \\\"",-- JG INCLUDED PATHWAY IN NAME ON 12/19/16
--smrprle_program_desc AS  \\\""desc \\\"", -- Original logic. Not relevant to Gavilan. Gavilan specific logic implemented below.
       NVL (programDescription.description, 'No program description available.')AS  \\\""desc \\\"",
       COALESCE (sfrcplr_program_hours, 0)                                      AS credits, -- Gavilan specific logic
       ''                                                                       AS enrollment_notes,
       '' AS registration_notes,
       COALESCE (substr(sobcurr_program, 1, CAST(INSTR(sobcurr_program, '_') 
                AS NUMBER) -1), sobcurr_program)                                AS area_of_study, -- Logic may be member specific. Confirm with BA
       '' AS concentration,
       sobcurr_degc_code AS  \\\""credential \\\"",
       DECODE (stvmajr_cipc_code, null, null,
               SUBSTR(stvmajr_cipc_code,1,2) || '.' || SUBSTR(stvmajr_cipc_code,3)
              )                                                                 AS cip,
       CASE WHEN sobcurr_degc_code IN ('AA-T','AS-T') THEN 'T' ELSE 'F' END     AS is_transfer, -- Confirm with BA
--CASE WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T' ELSE 'F' END AS is_active -- Removed this logic for Gavilan  AND implemented custom logic below.
       CASE WHEN (smrprle_curr_ind = 'Y'
         AND sobcurr_lock_ind = 'Y'
         AND smrprle_web_ind = 'Y'
         AND sorcmjr_rec_ind = 'Y'
         AND sorcmjr_adm_ind = 'Y'
         AND sorcmjr_stu_ind = 'Y'
         AND smrprle_program <> 'CCC_APPLY'
        ) THEN 'T' 
      ELSE 'F' 
      END                                                                       AS is_active
  FROM sobcurr
    LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
    LEFT JOIN smrprle ON smrprle_program = sobcurr_program
    LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
    LEFT JOIN stvmajr ON stvmajr_code = COALESCE (
                                                  (SUBSTR(sobcurr_program, 1, 
                                                  CAST(INSTR(sobcurr_program, '_') 
                                                  AS NUMBER) -1)), sobcurr_program)  -- Logic may be member specific. Confirm with BA
    LEFT JOIN maxSorcmjrTerm ON sorcmjr_curr_rule = sobcurr_curr_rule
    LEFT JOIN sorcmjr ON sorcmjr.sorcmjr_curr_rule = sobcurr_curr_rule 
                      AND sorcmjr.sorcmjr_term_code_eff = maxSorcmjrTerm -- Gavilan specific logic to identify active programs
    LEFT JOIN programDescription ON smrpcmt_program = sobcurr_program -- Gavilan specific logic to extract program descriptions
    LEFT JOIN sfrcplr ON sfrcplr_program = sobcurr_program
),


program_CSU AS (
SELECT DISTINCT
      sobcurr_program || '$$' || stvterm_acyr_code || '$$' || 'CSU'             AS nk,
      cASe when sobcurr_program like 'C%' then sobcurr_program 
            else sobcurr_program|| '_CSU' end                                   AS cd, --LH updated to exempt programs beginngin with C  AND to add _CSU to the names
       TO_NUMBER(stvterm_acyr_code)                                             AS cat_yr,
       cASe when sobcurr_program like 'C%' then smrprle_program_desc
            else smrprle_program_desc|| ' CSU' end                               AS \\\""name \\\"", -- JG INCLUDED PATHWAY IN NAME ON 12/19/16
--smrprle_program_desc AS  \\\""desc \\\"", -- Original logic. Not relevant to Gavilan. Gavilan specific logic implemented below.
       NVL (programDescription.description, 'No program description available.') AS \\\""desc \\\"",
       COALESCE (sfrcplr_program_hours, 0)                                      AS credits, -- Gavilan specific logic
       ''                                                                       AS enrollment_notes,
       ''                                                                       AS registration_notes,
       COALESCE (substr(sobcurr_program, 1, 
                CAST(INSTR(sobcurr_program, '_') AS NUMBER) -1), 
                sobcurr_program)                                                AS area_of_study, -- Logic may be member specific. Confirm with BA
       ''                                                                       AS concentration,
       sobcurr_degc_code                                                        AS  \\\""credential \\\"",
       DECODE (stvmajr_cipc_code, null, null,
                                    SUBSTR(stvmajr_cipc_code,1,2) || '.' || 
                                    SUBSTR(stvmajr_cipc_code,3)
                                    )                                           AS cip,
       CASE WHEN sobcurr_degc_code IN ('AA-T','AS-T') THEN 'T' ELSE 'F' END     AS is_transfer, -- Confirm with BA
--CASE WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T' ELSE 'F' END AS is_active -- Removed this logic for Gavilan  AND implemented custom logic below.
       CASE WHEN (smrprle_curr_ind = 'Y'
                AND sobcurr_lock_ind = 'Y'
                AND smrprle_web_ind = 'Y'
                AND sorcmjr_rec_ind = 'Y'
                AND sorcmjr_adm_ind = 'Y'
                AND sorcmjr_stu_ind = 'Y'
                AND smrprle_program <> 'CCC_APPLY'
               ) THEN 'T' 
      ELSE 'F' 
      END AS is_active
  FROM sobcurr
    LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
    LEFT JOIN smrprle ON smrprle_program = sobcurr_program
    LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
    LEFT JOIN stvmajr ON stvmajr_code = COALESCE ((SUBSTR(sobcurr_program, 1, CAST(INSTR(sobcurr_program, '_') AS NUMBER) -1)), sobcurr_program)  -- Logic may be member specific. Confirm with BA
    LEFT JOIN maxSorcmjrTerm ON sorcmjr_curr_rule = sobcurr_curr_rule
    LEFT JOIN sorcmjr ON sorcmjr.sorcmjr_curr_rule = sobcurr_curr_rule  AND sorcmjr.sorcmjr_term_code_eff = maxSorcmjrTerm -- Gavilan specific logic to identify active programs
    LEFT JOIN programDescription ON smrpcmt_program = sobcurr_program -- Gavilan specific logic to extract program descriptions
    LEFT JOIN sfrcplr ON sfrcplr_program = sobcurr_program
),
 

-- Combine Banner data  AND default values
-- Create 3 distinct NKs by adding CGE, IGET, AND CSU to their NK  AND Program Codes
finalDatASet AS (
SELECT * FROM program_GGE
  UNION
SELECT * FROM program_IGET
  UNION
SELECT * FROM program_CSU
)


-- Wrapper query
SELECT * FROM finalDatASet","Programs"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.Program","-- determine most recent term for each Program by finding the max term for each program in sobcurr
WITH maxEffectiveTerm AS (
SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
  FROM sobcurr
  GROUP BY sobcurr_program
),

-- extract program data from Banner
program AS (
SELECT DISTINCT
sobcurr_program || '$$' || stvterm_acyr_code AS nk,
sobcurr_program AS cd,
TO_NUMBER(stvterm_acyr_code) AS cat_yr,
smrprle_program_desc AS \\\""name\\\"",
smrprle_program_desc AS \\\""desc\\\"",
decode (sobcurr_degc_code, 'AS', 60,
                           'AA', 60,
                           'AST', 60,
                           'AAT', 60,
                            'AAS', 67,
                            'STC', 9,
                            'CERT', 50,
                              99) AS credits, -- confirm degree code to credits conversion with BA/Member. This logic may differ for different colleges and will need to be adjusted accordingly.
'' AS enrollment_notes,
'' AS registration_notes,
 -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_' Confirm with BA/Memeber.
COALESCE (substr(sobcurr_program, 1, CAST(INSTR(sobcurr_program, '_') AS NUMBER) -1), '') AS area_of_study,
'' AS concentration,
sobcurr_degc_code AS \\\""credential\\\"",
DECODE (stvmajr_cipc_code, null, null,
                                    SUBSTR(stvmajr_cipc_code,1,2) || '.' || SUBSTR(stvmajr_cipc_code,3)
                                    ) AS cip,
CASE WHEN sobcurr_degc_code IN ('AA', 'AST', 'AAT') THEN 'T' ELSE 'F' END AS is_transfer, 
CASE WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm 
        AND sobcurr_program LIKE '3%' THEN 'T' ELSE 'F' END AS is_active
FROM sobcurr
  LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
  LEFT JOIN smrprle ON smrprle_program = sobcurr_program
  LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
  LEFT JOIN sorcmjr ON sorcmjr_curr_rule = sobcurr_curr_rule
  LEFT JOIN stvmajr ON stvmajr_code = sorcmjr_majr_code -- Coastline specific logic
WHERE smrprle_program_desc IS NOT NULL
  )

-- Wrapper query
SELECT * FROM program","Programs"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.Subject","SELECT DISTINCT SUBJECTS_ID nk,
      SUBJ_DESC name,
      'T' is_active
  FROM SUBJECTS 
  where SUBJ_DESC NOT IN ('Ability to Benefit', 'Basic Math Equivalency', 'Basic Skills Development', 
                   'Communications I Equivalency', 'Communications II Equivalency', 'Course Waiver') AND
        SUBJ_DESC NOT LIKE 'DO NOT USE%'
-- AND SUBJECTS_ID not in ('COMM1', 'COMM2', 'COMMFND', 'MATHALG', 'MATHPRE', 'RDGCOMM', 'RDGFUND', 'RDGNONE', 'XKAP')","Subject"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.term","WITH REG_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('RW')
and sfrrsts_ptrm_code = '41'
),

REG_END_DATE as (

select ssrmeet_term_code, max(to_char(SSRMEET_START_DATE,'YYYY-MM-DD')) as reg_end_date
from ssrmeet
group by ssrmeet_term_code

)

select stvterm_code nk,
          stvterm_desc name,
          stvterm_acyr_code cat_yr,

          coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt,
          coalesce(reg_end_date,to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt,
          to_char(stvterm_start_date,'YYYY-MM-DD') term_start_dt,
          to_char(stvterm_end_date,'YYYY-MM-DD') term_end_dt,
            CASE 
    WHEN stvterm_code like '%10' or stvterm_code like '%20' or stvterm_code like '%30' then 'T' 
    ELSE 'F'
  END is_active
  from stvterm
  left join REG_DATES on stvterm_code = sfrrsts_term_code
  left join REG_END_DATE on stvterm_code = ssrmeet_term_code
","Term"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.SeatsAvail","WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk 
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
WHERE 1=1
  AND ssbsect_ssts_code = 'A' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01'
--  AND ssbsect_camp_code = 'M'
)

-- wrapper query
SELECT * FROM seatsAvail","SeatsAvail"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.studentcourse","WITH pop as (
  
select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,b.max_term as max_term_2
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select student_id, max_term
            from (
                  select b.emplid as student_id
                  , min(b.strm) as term
                  , max(b.strm) as max_term
                  --, b.strm as strm
                  from ps_stdnt_car_term b
                  where 1=1
                  and institution = 'TN293'
                  and ACAD_CAREER = 'CRED'
                  group by b.emplid
                  ) car_term
            where 1=1
            and term = (
                   select distinct strm
                   from (select strm, ACAD_CAREER, institution 
                          from PS_TERM_TBL 
                          where strm <= (SELECT MIN(SUBSTR(STRM, 1, 2) || SUBSTR(STRM, 3, 1)+1 || SUBSTR(STRM, 4, 1)) AS strm
                                         FROM PS_TERM_TBL
                                         WHERE STRM = (select MIN(strm) AS strm 
                                                       from PS_TERM_TBL 
                                                       where acad_career = 'CRED'
                                                          AND term_end_dt > sysdate))
                   order by strm desc) a
                    where 
                    rownum < 8
                    --and term_begin_dt < '31-JUL-15'
                   and institution = 'TN293' 
                    and acad_career = 'CRED'
                    and a.strm = term
                    )
           ) b
           on b.student_id = a.emplid
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid       
WHERE  1=1
        --and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
),
dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'NV280'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

)                     

( --Institutional coursework
SELECT 
a.EMPLID || '$$' || a.strm || '$$' || REPLACE(b.SUBJECT, ' ', '') || REPLACE(b.CATALOG_NBR, ' ', '') as NK 
,a.EMPLID                                                                            AS STUDENT
, a.STRM                                                                            AS TERM
, REPLACE(b.SUBJECT, ' ', '') || REPLACE(b.CATALOG_NBR, ' ', '')                    AS COURSE
, case when b.start_dt > sysdate-365 and b.institution = 'TN293' 
then b.crse_id || '$$' 
|| b.strm || '$$' 
|| b.session_code || '$$'
|| dates.date_diff || '$$'
|| b.CLASS_SECTION
else '' end                                                                         AS SECTION
, a.CRSE_GRADE_OFF                                                                  AS GRADE_CD
, a.GRADE_POINTS                                                                    AS GRADE_POINTS
, a.UNT_TAKEN                                                                       AS ATTEMPTED_CREDITS
, CASE 
            WHEN ( a.EARN_CREDIT = 'Y' 
                   --AND a.STDNT_ENRL_STATUS = 'E'                                                                          --Update, member-specific
                   AND a.GRADE_DT IS NOT NULL ) THEN a.UNT_EARNED 
            ELSE 0 
  END                                                                               AS EARNED_CREDITS
, CASE WHEN a.STDNT_ENRL_STATUS = 'E'
        --and a.GRADING_SCHEME = 'STD'
        and a.ACAD_CAREER='CRED'
        and a.GRADING_BASIS_ENRL in ('GRD','HNR','PNP') 
        and a.CRSE_GRADE_OFF in ('A', 'B', 'C','D','P')
  THEN 'COMPLETED'
  WHEN A.ACAD_CAREER='CRED'
       and A.STDNT_ENRL_STATUS='E'
       and A.GRADING_BASIS_ENRL IN ('AUD','DEV','GRD','HNR','PNP')
       and A.GRADE_DT is null
       and a.UNITS_ATTEMPTED <> 'I'
  then 'REGISTERED'
  WHEN A.ACAD_CAREER='CRED'
     and A.STDNT_ENRL_STATUS='D'
  THEN 'UNKNOWN'   
  WHEN a.UNITS_ATTEMPTED = 'I' 
  then 'IN_PROGRESS' --might want to check via dates here  
  ELSE 'UNKNOWN'
  END                                                                               AS STATUS
, 'T'                                                                               as is_active
        
FROM 
(SELECT * 
            FROM   PS_STDNT_ENRL
         WHERE  ACAD_CAREER IN ( 'CRED' )) a             --Update, member-specific 
        
--COURSE INFO 
LEFT JOIN PS_CLASS_TBL b 
       ON b.CLASS_NBR = a.CLASS_NBR 
          AND b.STRM = a.STRM 
--          AND b.ACAD_CAREER IN ( 'UGRD' )                 --Removed to bring in all coursework even if it isn't UGRD   
left join dates on b.strm = dates.strm
and b.session_code = dates.session_code            
     
WHERE  1 = 1
and a.EMPLID in (select student_id from pop)
and a.INSTITUTION = 'TN293' --may not be necessary 
--and something about effective dates
  )  ","Student Course"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"catcc.TestSubject","SELECT
  nk,
  name, 
  CASE 
    WHEN INSTR(max_score, '.') = 0 THEN to_number(max_score) || '.00'
    ELSE max_score
  END AS max_score, 
  CASE 
    WHEN is_active = 'Y' THEN 'T'
    ELSE 'F'
  END AS is_active
FROM EAB_TST
where not regexp_like(max_score, '\\\\D')","Test Subjects"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"core.FacultyType","SELECT 
  stvfstp_Code AS nk,
  stvfstp_Code AS \\\""type\\\"",
  stvfstp_desc AS description
FROM stvfstp
UNION
SELECT 
  stvfctg_Code AS nk,
  stvfctg_Code AS \\\""type\\\"",
  stvfctg_Desc AS description
FROM stvfctg
union 
select 'Staff' as Nk,
'Staff' as \\\""type\\\"",
'Staff' as Description
from dual
 Order By 1","Faculty Type"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.ProgramCredential","SELECT DISTINCT 
	sobcurr_degc_code AS nk
	, sobcurr_degc_code AS short_credential
	, 'T' AS is_active
FROM sobcurr","Program Credential"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.StudentTerm","with now_term as (
  select stvterm_code as a_term
    from stvterm
   where stvterm_end_date >= sysdate
     and rownum = 1
   order by stvterm_code asc
),
TERM_LIST AS (
  select stvterm_code,
         (select a_term from now_term) as now_term
    from stvterm
   where stvterm_code <= (select * from now_term)
     and rownum < 5
   order by stvterm_code desc
),
FUTR_TERM as (
  select stvterm_code
    from stvterm
   where stvterm_end_date >= sysdate
),
ACTV_TERM as (
  select stvterm_code,
         now_term,
         case
           -- summer
           when substr(now_term,-2,2) = '50' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- spring
           when substr(now_term,-2,2) = '10' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- fall
           when substr(now_term,-2,2) = '80' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              else 'F'
            end         
           -- other
           else 'F'
         end as is_active
    from term_list
),
CUR_STU AS (
  SELECT SFRSTCR_PIDM as pidm
    FROM SFRSTCR
   WHERE SFRSTCR_TERM_CODE IN (select stvterm_code from ACTV_TERM where is_active='T')
  UNION
  SELECT SARADAP_PIDM as pidm
    FROM SARADAP
   WHERE SARADAP_TERM_CODE_ENTRY IN (select stvterm_code from FUTR_TERM)
),

getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
  LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
WHERE stvterm_code IS NOT NULL
  GROUP BY  sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
  SELECT sgbstdn_pidm
    , sgbstdn_program_1
    , sgbstdn_stst_code
    , sgbstdn_term_code_eff AS maxEffTerm
    , sgbstdn_term_code_ctlg_1
    , stvstst_reg_ind
  FROM sgbstdn a
    LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
  WHERE sgbstdn_program_1 IS NOT NULL
    AND stvstst_code IS NOT NULL
    AND sgbstdn_term_code_eff = (
                                 SELECT MAX(sgbstdn_term_code_eff)
                                 FROM sgbstdn
                                  RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                                 WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                  AND stvterm_end_date <= sysdate + 365
                                )
)

select spriden.spriden_id || '$$' || sdtl.maxEffTerm nk,
       spriden.spriden_id student,
       sdtl.maxEffTerm term,
       sdtl.sgbstdn_program_1 || '$$' || gpmt.acyr \\\""program\\\"",
       decode(sdtl.stvstst_reg_ind,'Y','T','F') is_active
  from studentDetails sdtl
         left join spriden on sdtl.sgbstdn_pidm = spriden_pidm
                          and spriden_change_ind is null
         left join stvterm on sdtl.maxEffTerm = stvterm_code
         left join stvstst on stvstst_code = sdtl.sgbstdn_stst_code
         left join getProgramMaxTerm gpmt on sdtl.sgbstdn_program_1 = gpmt.prog
 where sdtl.sgbstdn_program_1 not in ('NONDEG', 'NON_DEGREE')
   and spriden.spriden_pidm in (select * from CUR_STU)
 order by 1","Student Term"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.Course","WITH get_last_and_next_terms as (
  SELECT * from (
        select stvterm_code from stvterm where stvterm_code <=
                                    (select min(stvterm_code) as stvterm_code
                                    from stvterm
                                    where stvterm_start_date > sysdate
                                    and stvterm_code not like '%5'                                                                                                                                                                                                            
                                    )
                                    and stvterm_code not like '%5'
                            order by stvterm_code desc)   
                            where rownum < 6
        
),
 
active_courses as (
select distinct scbcrse_subj_code, scbcrse_crse_numb 
from ssbsect
-- and scbcrse_eff_term >= 201010 
join scbcrse 
on scbcrse_crse_numb = ssbsect_crse_numb
and scbcrse_subj_code = ssbsect_subj_code
where ssbsect_term_code in (select stvterm_code from get_last_and_next_terms)
),
 
 
courses as (
select distinct 
  a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS NK
  , a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS CD
  , decode(SCRATTR_ATTR_CODE, 'ZZZ','0','1') AS  \\\""LEVEL\\\""
  , a.SCBCRSE_SUBJ_CODE AS SUBJECT
  , nvl(scbcrse_dept_code, '0000') AS DEPT 
  , SUBSTR(SCBCRSE_TITLE,1,100) AS title
  , CASE WHEN SCBDESC_TEXT_NARRATIVE LIKE '%COREQUISITE: %'
            THEN dbms_lob.substr(LTRIM(REPLACE(text_table.SCBDESC_TEXT_NARRATIVE, 'COREQUISITE: ', '')),3000)
        WHEN SCBDESC_TEXT_NARRATIVE LIKE '%PREQUISITE: %'
            THEN dbms_lob.substr(LTRIM(REPLACE(text_table.SCBDESC_TEXT_NARRATIVE, 'PREQUISITE: ', '')),3000)
        WHEN SCBDESC_TEXT_NARRATIVE LIKE '%PREREQUISITE: %'
            THEN dbms_lob.substr(LTRIM(REPLACE(text_table.SCBDESC_TEXT_NARRATIVE, 'PREREQUISITE: ', '')),3000)
        WHEN SCBDESC_TEXT_NARRATIVE LIKE '%PREREQUISITES: %'
            THEN dbms_lob.substr(LTRIM(REPLACE(text_table.SCBDESC_TEXT_NARRATIVE, 'PREREQUISITES: ', '')),3000)
        ELSE dbms_lob.substr(text_table.SCBDESC_TEXT_NARRATIVE,3000)
    END AS \\\""desc\\\"" 
  , ssbsect_schd_code AS course_type
  , CASE
    WHEN a.scbcrse_credit_hr_ind IS NULL THEN a.scbcrse_credit_hr_low
    ELSE a.scbcrse_credit_hr_high
  END AS CREDITS  
 ,CASE 
   WHEN a.SCBCRSE_CSTA_CODE = 'A'   
        AND a.scbcrse_subj_code||a.scbcrse_crse_numb in (select scbcrse_subj_code||scbcrse_crse_numb from active_courses) 
            THEN 'T' 
   ELSE 'F' 
  END AS IS_ACTIVE                
FROM (
  SELECT a.SCBCRSE_EFF_TERM,a.scbcrse_coll_code, a.scbcrse_dept_code, a.scbcrse_subj_code, a.scbcrse_crse_numb, a.scbcrse_credit_hr_low, scbcrse_credit_hr_ind
    , a.scbcrse_credit_hr_high, a.SCBCRSE_CIPC_CODE, a.scbcrse_csta_code, a.SCBCRSE_TITLE, a.scbcrse_divs_code,a.scbcrse_data_origin,a.scbcrse_repeat_limit,a.scbcrse_reps_code
  FROM scbcrse a
  WHERE a.SCBCRSE_EFF_TERM = (  
    SELECT max(SCBCRSE_EFF_TERM)
    FROM scbcrse b
    WHERE b.scbcrse_subj_code = a.scbcrse_subj_code
      AND b.scbcrse_crse_numb = a.scbcrse_crse_numb
     -- AND B.scbcrse_eff_term >= 201110
      )
--      and a.scbcrse_subj_code = 'NURS'
    ) a
               left join(select scbdesc_subj_code, scbdesc_crse_numb, scbdesc_term_code_eff, SCBDESC_TEXT_NARRATIVE
                      from scbdesc text
                     where scbdesc_term_code_eff = (select max(scbdesc_term_code_eff)
                      from scbdesc
                      where scbdesc_subj_code = text.scbdesc_subj_code
                      and scbdesc_crse_numb = text.scbdesc_crse_numb)
                      order by 3 desc) text_table
            
             on SCBDESC_SUBJ_CODE = scbcrse_subj_code
                and scbdesc_crse_numb = scbcrse_crse_numb
  
    LEFT JOIN  SCRATTR c ON a.SCBCRSE_EFF_TERM = c.SCRATTR_EFF_TERM
  AND a.SCBCRSE_SUBJ_CODE = c.SCRATTR_SUBJ_CODE AND a.SCBCRSE_CRSE_NUMB = c.SCRATTR_CRSE_NUMB
 
                LEFT JOIN SCRLEVL on scbcrse_subj_code = scrlevl_subj_code
                                                and scbcrse_crse_numb = scrlevl_crse_numb
                                                --and scbcrse_eff_term = scrlevl_eff_term
  left join (select distinct ssbsect_crse_numb,ssbsect_subj_code, ssbsect_schd_code
            from ssbsect where ssbsect_camp_code = 'M' and ssbsect_term_Code >= '200510')
        on scbcrse_subj_code = ssbsect_subj_code
      and scbcrse_crse_numb = ssbsect_crse_numb
WHERE 1=1
 
UNION -- Extract external (transfer) courses fom shrtckn
SELECT distinct
  shrtckn_subj_code || shrtckn_crse_numb AS nk
  , shrtckn_subj_code || shrtckn_crse_numb AS cd
  , '1' AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , shrtckn_crse_title AS title
  , shrtckn_crse_title AS \\\""desc\\\""
  , 'TRFR' AS course_type
  , 0 AS credits
  , 'F' AS is_active
  FROM shrtckn
    WHERE NOT EXISTS (SELECT 1
                      FROM scbcrse
                        WHERE scbcrse.scbcrse_subj_code = shrtckn.shrtckn_subj_code
                          AND scbcrse.scbcrse_crse_numb = shrtckn.shrtckn_crse_numb
                      )
 
UNION
 
Select 'UNKNOWN' as NK
, 'UNKNOWN' as CD
, '1' as \\\""LEVEL\\\""
, 'DEFAULT' as subject
, '0000' as dept
, 'UNKNOWN' as title
, '' as \\\""desc\\\""
, '' as course_type
, 0 as creditsl
, 'T' as is_active
from dual
ORDER BY 1, 3, 4
 
)
 
select * from courses ","Course"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.programcredential","SELECT DISTINCT 
	sobcurr_degc_code AS nk
	, sobcurr_degc_code AS short_credential
	, 'T' AS is_active
FROM sobcurr","Program Credentials"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.Program","with max_prog_list as (
  SELECT sgbstdn_program_1 as program_code,
         MAX(sgbstdn_term_code_eff) AS max_eff_term
    FROM sgbstdn
   GROUP BY sgbstdn_program_1
),
prog_desc as (
  select smrpcmt_program, listagg(smrpcmt_text, ' ') within group (order by smrpcmt_prnt_code asc) as smrpcmt_text
    from smrpcmt s1 join (select s2.smrpcmt_program as prgm, max(s2.smrpcmt_term_code_eff) as term
                            from smrpcmt s2 group by s2.smrpcmt_program) mx on s1.smrpcmt_term_code_eff = Mx.term
                                                                           and s1.smrpcmt_program = Mx.Prgm
   group by smrpcmt_program
   order by smrpcmt_program
)
select distinct
      sobcurr_program || '$$' || init_year as nk,
      sobcurr_program as cd,
      DECODE(stvmajr_cipc_code,  null, null, SUBSTR(stvmajr_cipc_code, 1, 2) || '.' || SUBSTR(stvmajr_cipc_code, 3)) cip,
      init_year cat_yr,
      smrprle_program_desc name,
      substr(coalesce(smrpcmt_text, stvmajr_desc),1,1000) AS \\\""desc\\\"",
      DECODE(sobcurr_degc_code, 'AA', 60, 'AA-T', 60, 'AS', 60, 'AS-T', 60, 'CERT', 18, 'CERTT', 30, 'CERTF', 60, 99) credits, 
      '' enrollment_notes,
      '' registration_notes,
      COALESCE(stvmajr_code, '') area_of_study,
      '' concentration,
      Sobcurr_Degc_Code Credential,
      case when sobcurr_degc_code in ('AA','AA-T','AS','AS-T','CERT','CERTF','CERTT') then 'Y' else 'N' end as is_transfer,
    case when SOBCURR_LOCK_IND= 'Y' then 'T' else 'F' end as is_active -- 20170125 per NAV BA 262 -- YA, EAB 
  /*case -- commented out 20170125 per NAV BA 262 -- YA, EAB 
        when stvterm_code = max_eff_term and sobcurr_degc_code in ('AA','AA-T','AS','AS-T','CERT') then 'T'
        else 'F'
      end   as is_active*/
   
  from sobcurr left join sgbstdn on sobcurr_program = sgbstdn_program_1
                    join stvterm on sgbstdn_term_code_eff = stvterm_code
                    join max_prog_list on sgbstdn_program_1 = program_code
               LEFT JOIN smrprle ON sobcurr_program = smrprle_program
               left join prog_desc on sobcurr_program = smrpcmt_program
               LEFT JOIN stvmajr ON sgbstdn_majr_code_1 = stvmajr_code
               left join (select stvterm_acyr_code as init_year,
                                 stvterm_code as init_term
                            from stvterm join sobcurr on stvterm_code = sobcurr_term_code_init) t on sobcurr_term_code_init = t.init_term
 order by nk, is_active","Program"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"core.Student","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get current and future terms
getCurrAndFutureTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_start_date > sysdate
  AND stvterm_code NOT IN ('999999')
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , gobtpac_external_user AS username
  , TRIM(COALESCE(
                (SELECT REPLACE(goremal_email_address, '.@', '@') FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'GSU' -- try to get campus email. Confirm goremal_emal_code with BA/Member.
                )
                , (SELECT REPLACE(goremal_email_address, '.@', '@') FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'IND' -- try to get Personal email. Confirm goremal_emal_code with BA/Member.
                  )
--                , (SELECT goremal_email_address FROM goremal
--                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N' AND goremal_emal_code = 'GC' -- try to get campus email even if goremal_preferred_ind set to 'N'. Confirm goremal_emal_code with BA/Member.
--                  )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm
  LEFT JOIN gobtpac ON gobtpac.gobtpac_pidm = spriden.spriden_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student","Students"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.StudentTerm","-- GET ALL STUDENTS WITH ACTIVE PROGRAM
WITH STUDENTS_ACTIVE_PROGRAM AS (

SELECT DISTINCT
   SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)+'$$'+TERMS.TERMS_ID  nk,
   SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)   student,
   TERMS.TERMS_ID  term
FROM
   STUDENT_PROGRAMS SP
      LEFT OUTER JOIN STUDENT_PROGRAMS_LS SPL ON -- if multiple programs and not code as prim or secon pull pos 1
         SPL.STUDENT_PROGRAMS_ID = SP.STUDENT_PROGRAMS_ID
            AND
         SPL.POS = 1
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'
   ,
   ( -- FIND LAST TERM REGISTERED FOR
      SELECT DISTINCT 
         SUBSTRING(ST.STUDENT_TERMS_ID,1,7) AS ID,
         MAX(DATEDIFF(DAY, '19000101', TERM_START_DATE)) AS TERMSTART
      FROM
         STUDENT_TERMS ST
            JOIN TERMS ON
               SUBSTRING(ST.STUDENT_TERMS_ID,9,6) = TERMS.TERMS_ID
        GROUP BY SUBSTRING(ST.STUDENT_TERMS_ID,1,7)
   ) STUTERM
      LEFT OUTER JOIN TERMS ON
         STUTERM.TERMSTART = DATEDIFF(DAY, '19000101', TERMS.TERM_START_DATE)
   WHERE
      SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7) = STUTERM.ID
),

-- GET ALL FUTURE APPLICANTS, WE'LL GET TERM AND PROGRAM LATER AS CAN HAVE MULTIPLE OPEN APPS AND WE ONLY WANT LATEST???
APPLICANTS AS (
SELECT DISTINCT
   A.APPL_APPLICANT student  
FROM
   APPLICATIONS A,
   APPL_STATUSES AS APPS,
   TERMS T
WHERE
   T.TERM_START_DATE >= GETDATE()
      AND
   A.APPL_START_TERM = T.TERMS_ID
      AND
   A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
      AND
   APPS.POS = 1
      AND
   APPS.APPL_STATUS IN ('ACC', 'MOVE')
      AND
   A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      AND
   A.APPL_APPLICANT NOT IN 
   (
      SELECT
         student
      FROM
         STUDENTS_ACTIVE_PROGRAM
   )
),

STUDENTS_AND_APPLICANTS as (SELECT nk,student,term FROM STUDENTS_ACTIVE_PROGRAM UNION SELECT null, student,null from APPLICANTS),

-- GETS STUDENTS PRIMARY CODED PROGRAM
PRIMARY_PROGRAM as (SELECT 
    nk,student,term,SUBSTRING(SP.STUDENT_PROGRAMS_ID,9,20) program
	FROM
   STUDENTS_AND_APPLICANTS
      JOIN STUDENT_PROGRAMS SP ON      
         STUDENTS_AND_APPLICANTS.student = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
            AND 
         SP.STPR_ADMIT_STATUS = 'PRIM' 
            AND
         SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, LEN(SP.STUDENT_PROGRAMS_ID)) NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN STPR_STATUSES SS ON
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A'      
      LEFT JOIN ACAD_PROGRAMS ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID 
      LEFT OUTER JOIN ACAD_PROGRAMS_LS ON 
         ACAD_PROGRAMS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS_LS.ACAD_PROGRAMS_ID 
            AND 
         ACAD_PROGRAMS_LS.POS = '1' 
),

-- GETS STUDENTS SECONDARY CODED PROGRAM
SECONDARY_PROGRAM as (SELECT 
    nk,student,term,SUBSTRING(SP.STUDENT_PROGRAMS_ID,9,20) program
	FROM
    STUDENTS_AND_APPLICANTS
      JOIN STUDENT_PROGRAMS SP ON      
         STUDENTS_AND_APPLICANTS.student = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
            AND 
         SP.STPR_ADMIT_STATUS = 'SECON' 
            AND
         SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, LEN(SP.STUDENT_PROGRAMS_ID)) NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN STPR_STATUSES SS ON
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A'      
      LEFT JOIN ACAD_PROGRAMS ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID 
      LEFT OUTER JOIN ACAD_PROGRAMS_LS ON 
         ACAD_PROGRAMS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS_LS.ACAD_PROGRAMS_ID 
            AND 
         ACAD_PROGRAMS_LS.POS = '1' 
),

-- GETS STUDENTS PROGRAM IN POS ONE
POS_ONE_PROGRAM as (SELECT 
    nk,student,term,SUBSTRING(SP.STUDENT_PROGRAMS_ID,9,20) program
	FROM
    STUDENTS_AND_APPLICANTS
      JOIN STUDENT_PROGRAMS SP ON      
         STUDENTS_AND_APPLICANTS.student = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
            AND
         SUBSTRING(SP.STUDENT_PROGRAMS_ID,9, LEN(SP.STUDENT_PROGRAMS_ID)) NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      LEFT OUTER JOIN STUDENT_PROGRAMS_LS SPL ON -- if multiple programs and not code as prim or secon pull pos 1
         SPL.STUDENT_PROGRAMS_ID = SP.STUDENT_PROGRAMS_ID
            AND
         SPL.POS = 1
      JOIN STPR_STATUSES SS ON
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A'      
      LEFT JOIN ACAD_PROGRAMS ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID 
      LEFT OUTER JOIN ACAD_PROGRAMS_LS ON 
         ACAD_PROGRAMS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS_LS.ACAD_PROGRAMS_ID 
            AND 
         ACAD_PROGRAMS_LS.POS = '1' 
),



-- DID NOT FIND PROGRAM LET LOOK AT LATEST ACC/MOVE APPLICATION
APPLICANT_PROGRAM as (SELECT 
    STUTERM.ID+'$$'+TERMS.TERMS_ID nk,
	student,
	TERMS.TERMS_ID term,
	A.APPL_ACAD_PROGRAM program,
	'T' is_active
	FROM
    STUDENTS_AND_APPLICANTS
      JOIN APPLICATIONS A ON
         A.APPL_APPLICANT = STUDENTS_AND_APPLICANTS.student
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES APPS ON
         APPS.APPLICATIONS_ID = A.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
   ,
   (
      SELECT DISTINCT 
         A.APPL_APPLICANT AS ID,
         MAX(DATEDIFF(DAY, '19000101', TERM_START_DATE)) AS TERMSTART
      FROM
         APPLICATIONS A
            JOIN APPL_STATUSES APPS ON
               APPS.APPLICATIONS_ID = A.APPLICATIONS_ID
                  AND
               APPS.POS = 1
                  AND
               APPS.APPL_STATUS IN ('ACC', 'MOVE')
            JOIN TERMS ON
               A.APPL_START_TERM = TERMS.TERMS_ID
      WHERE         
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      GROUP BY A.APPL_APPLICANT
   ) STUTERM
      JOIN TERMS ON
         STUTERM.TERMSTART = DATEDIFF(DAY, '19000101', TERMS.TERM_START_DATE)
WHERE
   STUDENTS_AND_APPLICANTS.student = STUTERM.ID
      AND
   TERMS.TERMS_ID = A.APPL_START_TERM
     AND
   STUDENTS_AND_APPLICANTS.nk is null)
   ,

   CURRENT_STUDENTS AS (

SELECT
   sa.nk nk,
   sa.student student,
   sa.term term,
   isnull(pp.program, isnull(sp.program, isnull(pop.program, ''))) program,
   'T' is_active
FROM
    STUDENTS_AND_APPLICANTS sa
	left outer join PRIMARY_PROGRAM pp on pp.student = sa.student
	left outer join SECONDARY_PROGRAM sp on sp.student = sa.student
	left outer join POS_ONE_PROGRAM pop on pop.student = sa.student

	WHERE sa.nk is not  null),

ST_TM_BAD_PROGRAM AS (
	SELECT nk,student,term,program,is_active FROM CURRENT_STUDENTS 
	UNION  
	SELECT nk,student,term,program,is_active FROM APPLICANT_PROGRAM 
)

SELECT 
app.nk nk,
app.student student,
app.term term,
REPLACE(req.ACAD_PROGRAM_REQMTS_ID , '*','$$') program,
app.is_active 

FROM ST_TM_BAD_PROGRAM app
LEFT OUTER JOIN ACAD_PROGRAMS acad on acad.ACAD_PROGRAMS_ID = app.program
LEFT OUTER JOIN TERMS t on t.TERMS_ID = app.term
LEFT OUTER JOIN ACAD_PROGRAM_REQMTS req
      ON SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = acad.ACAD_PROGRAMS_ID
WHERE
req.ACAD_PROGRAM_REQMTS_ID = 
(
select top 1 ACAD_PROGRAM_REQMTS_ID
FROM ACAD_PROGRAM_REQMTS
WHERE SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = acad.ACAD_PROGRAMS_ID
AND RIGHT(ACAD_PROGRAM_REQMTS_ID, 4 ) < t.TERM_REPORTING_YEAR
ORDER BY ACAD_PROGRAM_REQMTS_ID desc
)","StudentTerm"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.department","select '1' as nk
, 'Main Campus' as \\\""name\\\""
, 'T' as is_active
from dual","Department"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"core.Student","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get current and future terms
getCurrAndFutureTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_start_date > sysdate
  AND stvterm_code NOT IN ('999999')
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , gobtpac_external_user AS username
  , TRIM(COALESCE(
                (SELECT REPLACE(goremal_email_address, '.@', '@') FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'GSU' -- try to get campus email. Confirm goremal_emal_code with BA/Member.
                )
                , (SELECT REPLACE(goremal_email_address, '.@', '@') FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'IND' -- try to get Personal email. Confirm goremal_emal_code with BA/Member.
                  )
--                , (SELECT goremal_email_address FROM goremal
--                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N' AND goremal_emal_code = 'GC' -- try to get campus email even if goremal_preferred_ind set to 'N'. Confirm goremal_emal_code with BA/Member.
--                  )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm
  LEFT JOIN gobtpac ON gobtpac.gobtpac_pidm = spriden.spriden_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student","Students"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.Department","WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'T' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM department
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Department"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"catcc.StudentXPriorityRegSlot","WITH getLastXTerms AS (
  SELECT stvterm_code
    FROM stvterm
   WHERE stvterm_code <= (select stvterm_code
                            from stvterm
                           where stvterm_start_date < sysdate
                             and stvterm_end_date > sysdate
                             and substr(stvterm_code, -1, 1) IN ('0','9')
                             and rownum = 1)
     AND ROWNUM < 6
   ORDER BY 1 DESC
),

-- Extract students associated with priority registration slots
finalDataSet AS (SELECT
  spriden_id || '$$' || sfrwctl_term_code || '$$' || sfrwctl_priority AS nk
  , spriden_id AS student
  , sfrwctl_term_code || '$$' || sfrwctl_priority AS priority_reg_slot
  , 'T' AS is_active
FROM sfbrgrp
  JOIN sfbwctl ON (sfbwctl.sfbwctl_term_code = sfbrgrp.sfbrgrp_term_code
                  AND sfbwctl.sfbwctl_rgrp_code = sfbrgrp.sfbrgrp_rgrp_code)
  JOIN sfrwctl ON (sfrwctl.sfrwctl_term_code = sfbwctl.sfbwctl_term_code
                  AND sfrwctl.sfrwctl_priority = sfbwctl.sfbwctl_priority)
  LEFT JOIN spriden ON spriden_pidm = sfbrgrp_pidm
where sfbrgrp_term_code in (SELECT * from getLastXTerms)
)

-- Wrapper query
SELECT * FROM finalDataSet","StudentXPriorityRegSlot"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.department","SELECT
  a.STVDEPT_CODE AS NK
  , a.STVDEPT_DESC AS NAME
  , 'T' AS IS_ACTIVE
FROM STVDEPT a
","Department"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"reg.studenttestscore","
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                        and (stvterm_code like '%10' 
                              or stvterm_code like '%20' 
                              --or stvterm_code like '%30'
                            )
                      )
AND ROWNUM < 5
and (stvterm_code like '%10' 
      or stvterm_code like '%20' 
      or stvterm_code like '%30'
                            )
ORDER BY 1 DESC
),


POP AS (
select distinct studentPidm from (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
  FROM sfrstcr  
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code

  WHERE 1=1
    AND sfrstcr_rsts_code IN ('RE','RW')
 /*   
  UNION

  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
  FROM saradap
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
  WHERE 1=1
*/
) current_and_applicants

inner join (

  select distinct sorlcur_pidm pidm
  from sorlcur tbl
  where 1=1
  and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
  and sorlcur_cact_code = 'ACTIVE'
  and sorlcur_term_code_end is null
  and sorlcur_camp_code = 'NCC'
  and sorlcur_priority_no = (select min(sorlcur_priority_no)
                             from sorlcur
                             where sorlcur_camp_code = tbl.sorlcur_camp_code
                             and sorlcur_lmod_code = tbl.sorlcur_lmod_code
                             and sorlcur_cact_code = tbl.sorlcur_cact_code
                             and sorlcur_term_code_end is null
                             and sorlcur_pidm = tbl.sorlcur_pidm
                             and sorlcur_term_code in (select stvterm_code from getLastXTerms)

                            )
  and sorlcur_term_code = (select max(sorlcur_term_code)
                            from sorlcur
                             where sorlcur_camp_code = tbl.sorlcur_camp_code
                             and sorlcur_lmod_code = tbl.sorlcur_lmod_code
                             and sorlcur_cact_code = tbl.sorlcur_cact_code
                             and sorlcur_term_code_end is null
                             and sorlcur_pidm = tbl.sorlcur_pidm
                             and sorlcur_term_code in (select stvterm_code from getLastXTerms)
                             )
) on pidm = studentpidm
)
select
       spriden_id || '$$' || stvtesc_code nk,
       spriden_id student,
       --stvtesc_code || '$$' || stvtesc_desc test_subject, HP 082814
       stvtesc_code test_subject,
       max(sortest_test_score) score,
       'T' active
  from sortest, spriden, stvtesc
       -- Need to remove A, since EAB only takes integers
 where stvtesc_data_type = 'N'
   and sortest_pidm = spriden_pidm
   and sortest_tesc_code = stvtesc_code
   and spriden_change_ind is null
   and spriden_pidm in (select * from pop)
   and (stvtesc_desc LIKE '%Accup%'
    OR stvtesc_desc LIKE '%SAT%')
   group by spriden_id || '$$' || stvtesc_code,
            spriden_id,
            stvtesc_code,
            'T'","Student Test Score"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.studentcourse","WITH pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,b.max_term as max_term_2
        ,a.acad_plan
        ,to_char(a.declare_dt,'YYYY-MM-DD') as declare_dt
from ps_acad_plan a
inner join (select student_id, max_term
            from (
                  select b.emplid as student_id
                  , min(b.strm) as term
                  , max(b.strm) as max_term
                  --, b.strm as strm
                  from ps_stdnt_car_term b
                  where 1=1
                  and institution = 'DC279'
                  and ACAD_CAREER = 'CRED'
                  group by b.emplid
                  ) car_term
            where 1=1
            and max_term > 2154
           ) b
           on b.student_id = a.emplid
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid and institution = 'DC279')
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid and effdt = a.effdt and institution = 'DC279')
            and PROG_STATUS = 'AC'
and institution = 'DC279') c
            on a.emplid = c.emplid       
WHERE  1=1
        --and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
union --applicant pop
SELECT DISTINCT A.EMPLID student_id
, B.req_term as max_term
, B.REQ_TERM as max_term_2
, B.ACAD_PLAN
, TO_CHAR(A.ADM_APPL_DT,'YYYY-MM-DD') as declare_dt
  FROM PS_ADM_APPL_DATA A, PS_ADM_APPL_PLAN B 

  WHERE ( A.INSTITUTION = 'DC279' 
     AND A.EMPLID = B.EMPLID 
     AND A.ACAD_CAREER = B.ACAD_CAREER 
     AND A.STDNT_CAR_NBR = B.STDNT_CAR_NBR 
     AND A.ADM_APPL_NBR = B.ADM_APPL_NBR 
     AND B.EFFDT = 
        (SELECT MAX(B_ED.EFFDT) FROM PS_ADM_APPL_PLAN B_ED 
        WHERE B.EMPLID = B_ED.EMPLID 
          AND B.ACAD_CAREER = B_ED.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ED.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ED.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ED.APPL_PROG_NBR 
          AND B_ED.EFFDT <= SYSDATE) 
    AND B.EFFSEQ = 
        (SELECT MAX(B_ES.EFFSEQ) FROM PS_ADM_APPL_PLAN B_ES 
        WHERE B.EMPLID = B_ES.EMPLID 
          AND B.ACAD_CAREER = B_ES.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ES.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ES.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ES.APPL_PROG_NBR 
          AND B.EFFDT = B_ES.EFFDT) 
     AND B.REQ_TERM > '2154' 
     AND NOT EXISTS (SELECT 'X' 
  FROM PS_STDNT_ENRL C 
  WHERE A.INSTITUTION = C.INSTITUTION 
     AND C.STDNT_ENRL_STATUS = 'E' 
     AND A.EMPLID = C.EMPLID) )
     AND B.ACAD_CAREER = 'CRED'
     and a.emplid not in (select distinct emplid from ps_acad_plan)

),
dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'NV280'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

)                 

( --Institutional coursework
SELECT 
a.EMPLID || '$$' || a.strm || '$$' || REPLACE(b.SUBJECT, ' ', '') || REPLACE(b.CATALOG_NBR, ' ', '') as NK 
,a.EMPLID                                                                            AS STUDENT
, a.STRM                                                                            AS TERM
, REPLACE(b.SUBJECT, ' ', '') || REPLACE(b.CATALOG_NBR, ' ', '')                    AS COURSE
, case when b.start_dt > sysdate-365 and b.institution = 'NV280' 
then b.crse_id || '$$' 
|| b.strm || '$$' 
|| b.session_code || '$$'
|| dates.date_diff || '$$'
|| b.CLASS_SECTION
else '' end                                                                         AS SECTION
, a.CRSE_GRADE_OFF                                                                  AS GRADE_CD
, a.GRADE_POINTS                                                                    AS GRADE_POINTS
, a.UNT_TAKEN                                                                       AS ATTEMPTED_CREDITS
, CASE 
            WHEN ( a.EARN_CREDIT = 'Y' 
                   --AND a.STDNT_ENRL_STATUS = 'E'                                                                          --Update, member-specific
                   AND a.GRADE_DT IS NOT NULL ) THEN a.UNT_EARNED 
            ELSE 0 
  END                                                                               AS EARNED_CREDITS
, CASE WHEN a.STDNT_ENRL_STATUS = 'E'
        --and a.GRADING_SCHEME = 'STD'
        and a.ACAD_CAREER='CRED'
        and a.GRADING_BASIS_ENRL in ('GRD','HNR','PNP') 
        and a.CRSE_GRADE_OFF in ('A', 'B', 'C', 'D','P')
  THEN 'COMPLETED'
  WHEN A.ACAD_CAREER='CRED'
       and A.STDNT_ENRL_STATUS='E'
       and A.GRADING_BASIS_ENRL IN ('AUD','DEV','GRD','HNR','PNP')
       and A.GRADE_DT is null
       and a.UNITS_ATTEMPTED <> 'I'
  then 'REGISTERED'
  WHEN a.UNITS_ATTEMPTED = 'I' 
  then 'IN_PROGRESS' --might want to check via dates here
  ELSE 'UNKNOWN'
  END                                                                               AS STATUS
, 'T'                                                                               as is_active
        
FROM 
(SELECT * 
            FROM   PS_STDNT_ENRL 
            WHERE  ACAD_CAREER IN ( 'CRED' )) a             --Update, member-specific 
        
--COURSE INFO 
LEFT JOIN PS_CLASS_TBL b 
       ON b.CLASS_NBR = a.CLASS_NBR 
          AND b.STRM = a.STRM 
--          AND b.ACAD_CAREER IN ( 'UGRD' )                 --Removed to bring in all coursework even if it isn't UGRD   
left join dates on b.strm = dates.strm
and b.session_code = dates.session_code            
     
WHERE  1 = 1
and a.EMPLID in (select student_id from pop)
and a.INSTITUTION = 'DC279') --may not be necessary","Student Course"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"catcc.TestSubject","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Test Subject File

Fields  nk,name,max_score,is_active
*/

SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl3), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl3) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('MAA')   
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl4), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl4) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('MAA')    
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl5), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl5) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('MAA')  
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl1), ' ', ''), '')       AS nk
       , NVL(TRIM(exam) || ' ' || TRIM(txt), '')  AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('MTH') 
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl1), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl1) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('CPT2')   
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl2), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl2) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('CPT2')       
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl3), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl3) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('CPT2')   
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl4), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl4) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('CPT2')    
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl5), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl5) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('CPT2')  
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl1), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl1) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('RET2')   
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl2), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl2) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('RET2')       
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl3), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl3) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('RET2')   
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl4), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl4) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('RET2')    
UNION
SELECT NVL(TRIM(exam) || '$$' 
       || REPLACE(TRIM(lbl5), ' ', ''), '')       AS nk
       , NVL(TRIM(txt), '') || ': ' || TRIM(lbl5) AS name
       , '0'                                      AS max_score
       , CASE
           WHEN inactive_date IS NULL OR inactive_date > TODAY THEN 'T'
           ELSE 'F'
         END                                      AS is_active
FROM informix.exam_table
WHERE exam IN ('RET2')  
ORDER BY 1","TestSubjects"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"core.Student","

--STUDENTS
SELECT 
   substring(P.ID,1,7) nk,
   PP.PERSON_PIN_USER_ID username,
   isnull(PE.PERSON_EMAIL_ADDRESSES,'') email,
   REPLACE(P.FIRST_NAME, '`', '``') first_name,
   P.LAST_NAME last_name,
   REPLACE(CONVERT(CHAR(10), P.BIRTH_DATE, 111) , '/','-') birthdate,
   'T' is_active
 FROM PERSON AS P
INNER JOIN PEOPLE_EMAIL PE
ON P.ID = PE.ID AND PE.PERSON_EMAIL_TYPES IN ('BCS')
INNER JOIN PERSON_PIN PP 
ON P.ID = PP.PERSON_PIN_ID
INNER JOIN STUDENT_RESTRICTIONS
ON STR_STUDENT = P.ID
AND STR_RESTRICTION = 'NAV07'


GROUP BY	P.ID,
			P.FIRST_NAME,
			P.LAST_NAME,
			P.GENDER,
			P.BIRTH_DATE,
			PE.PERSON_EMAIL_ADDRESSES,
			PP.PERSON_PIN_USER_ID

UNION 

--FACULTY
SELECT 
   substring(P.ID,1,7) nk,
   PP.PERSON_PIN_USER_ID username,
   isnull(PE.PERSON_EMAIL_ADDRESSES,'') email,
   REPLACE(P.FIRST_NAME, '`', '``') first_name,
   P.LAST_NAME last_name,
   REPLACE(CONVERT(CHAR(10), P.BIRTH_DATE, 111) , '/','-') birthdate,
   'T' is_active
 FROM PERSON AS P
INNER JOIN PEOPLE_EMAIL PE
ON P.ID = PE.ID AND PE.PERSON_EMAIL_TYPES IN ('BCS')
INNER JOIN PERSON_PIN PP 
ON P.ID = PP.PERSON_PIN_ID
INNER JOIN  
 (SELECT STAD_FACULTY
FROM coll18_production.dbo.STUDENT_ADVISEMENT
WHERE (STAD_END_DATE IS NULL OR STAD_END_DATE >= GETDATE())
GROUP BY STAD_FACULTY) f on P.ID = f.STAD_FACULTY

GROUP BY	P.ID,
			P.FIRST_NAME,
			P.LAST_NAME,
			P.GENDER,
			P.BIRTH_DATE,
			PE.PERSON_EMAIL_ADDRESSES,
			PP.PERSON_PIN_USER_ID
","Student"
1021,"Houston Baptist University",10391,"",47987,"APS:Houston Baptist University",47975,"APS",24,"hr","WITH JOBS AS (
select      NBRJOBS_PIDM            pidm,
            NBRJOBS_PERS_CHG_DATE   chg_date, 
            NBRJOBS_EFFECTIVE_DATE  eff_date,
            NBRJOBS_POSN            posn,
            NBRJOBS_SUFF            suff,
            NBRJOBS_DESC            description, 
            NBRJOBS_STATUS          status,
            NBRJOBS_ECLS_CODE 		ecls_code,
            NBRJOBS_FTE 			fte,
            NBRJOBS_JCRE_CODE 		reason_code,
     LEAD(NBRJOBS_PERS_CHG_DATE,1) 	OVER (PARTITION BY NBRJOBS_PIDM, NBRJOBS_POSN, NBRJOBS_SUFF order by NBRJOBS_EFFECTIVE_DATE asc) 	end_chg_date,
     LEAD(NBRJOBS_EFFECTIVE_DATE,1) OVER (PARTITION BY NBRJOBS_PIDM, NBRJOBS_POSN, NBRJOBS_SUFF order by NBRJOBS_EFFECTIVE_DATE asc) 	end_eff_date,
     LEAD(NBRJOBS_STATUS,1)  		OVER (PARTITION BY NBRJOBS_PIDM, NBRJOBS_POSN, NBRJOBS_SUFF order by NBRJOBS_EFFECTIVE_DATE asc) 	new_status
     from NBRJOBS a
)
SELECT a.pidm 								AS EMPLOYEE_ID, 
LEAST(a.chg_date, a.eff_date) 				AS PERSONEL_DATE_START,
GREATEST(a.end_chg_date, a.end_eff_date) 	AS PERSONEL_DATE_END,
a.eff_date 									AS EFFECTIVE_DATE, 
a.POSN 										AS POSITION_CODE,
a.SUFF 										AS POSITION_SUFFIX_CODE,
a.DESCRIPTION 								AS JOB_TITLE,
CASE WHEN a.new_status = 'T' OR a.status='T' THEN 'Y' ELSE 'N' END AS TERMINATED_IND,
CASE WHEN (a.new_status = 'A' and a.new_status <> a.status) THEN 'Y' ELSE 'N' END as REACTIVATED_IND, 
a.STATUS 									AS JOB_STATUS,
a.ECLS_CODE 								AS EMPLOYMENT_CLASS,
a.FTE 										AS FTE,
b.NBBPOSN_ESOC_CODE 						AS SOC_CODE,
b.NBBPOSN_PFOC_CODE 						AS OA_CODE,
'' 											AS CENSUS_CODE, 
'' 											AS CUPA_CODE, 
b.NBBPOSN_ECIP_CODE 						AS CIP_CODE
FROM jobs a
LEFT OUTER JOIN nbbposn b
ON a.posn = b.nbbposn_posn
where a.end_chg_date is NULL 
or a.chg_date > to_date('30-06-2009','DD-MM-YYYY') 
or a.end_chg_date > to_date('30-06-2009','DD-MM-YYYY');","hr_jobs"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.Department","SELECT 
  stvdivs_code nk,
  stvdivs_desc name,
  'T' is_active
FROM stvdivs

UNION

SELECT 
  '0000' nk,
  'Default' name,
  'T' is_active
FROM dual","Department"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"student_course_work","select student_id,
academic_period,
campus_cd,
college_cd,
department_cd,
include_in_gpa_ind,
course_credits,
course_cd,
course_ref_no,
registered_ind,
registration_status_cd,
registration_status_date,
repeat_ind,
attempted_credits,
earned_credits,
gpa_credits,
passed_credits,
gradable_ind,
midterm_grade,
final_grade,
final_grade_date,
final_grade_official_ind,
grade_points,
inst_course_ind,
transfer_course_ind,
in_progress_course_ind,
course_type_cd,
chksum
 from atlantatech.osf_sc_student_course","SSF_student_course_work"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"course_status_lkp","select course_type_cd,
course_type_desc
 from atlantatech.osf_ctl_course_type_lkp","SSF_course_status_lkp"
1021,"Houston Baptist University",10391,"",47987,"APS:Houston Baptist University",47975,"APS",24,"finance","select fgbopal_coas_code as coas_code
, fgbopal_fund_code as fund_code
, fgbopal_orgn_code as organization_code
, fgbopal_acct_code as account_code                   
, fgbopal_prog_code as program_code
, fgbopal_actv_code as activity_code
, fgbopal_locn_code as location_code
, fgbopal_fsyr_code as fiscal_year
, to_char(fgbopal_activity_date, 'yyyymmdd') as activity_date
, fspr as fiscal_period
, ytd_actv as ytd_activity
, adopt_bud as adopted_budget
, bud_adjt as budjet_adjustment
, acctd_bud as accounted_budget
, fgbopal_activity_date as transaction_date
, fgbopal_cmt_type as commitment_type
from fgbopal a
UNPIVOT EXCLUDE NULLS 
((ytd_actv, adopt_bud, bud_adjt, acctd_bud) FOR ( fspr ) IN 
	(
		(fgbopal_00_ytd_actv, fgbopal_00_adopt_bud, fgbopal_00_bud_adjt, fgbopal_00_acctd_bud) AS '00', 
		(fgbopal_01_ytd_actv, fgbopal_01_adopt_bud, fgbopal_01_bud_adjt, fgbopal_01_acctd_bud) AS '01', 
		(fgbopal_02_ytd_actv, fgbopal_02_adopt_bud, fgbopal_02_bud_adjt, fgbopal_02_acctd_bud) AS '02',
		(fgbopal_03_ytd_actv, fgbopal_03_adopt_bud, fgbopal_03_bud_adjt, fgbopal_03_acctd_bud) AS '03',
		(fgbopal_04_ytd_actv, fgbopal_04_adopt_bud, fgbopal_04_bud_adjt, fgbopal_04_acctd_bud) AS '04',
		(fgbopal_05_ytd_actv, fgbopal_05_adopt_bud, fgbopal_05_bud_adjt, fgbopal_05_acctd_bud) AS '05',
		(fgbopal_06_ytd_actv, fgbopal_06_adopt_bud, fgbopal_06_bud_adjt, fgbopal_06_acctd_bud) AS '06',
		(fgbopal_07_ytd_actv, fgbopal_07_adopt_bud, fgbopal_07_bud_adjt, fgbopal_07_acctd_bud) AS '07',
		(fgbopal_08_ytd_actv, fgbopal_08_adopt_bud, fgbopal_08_bud_adjt, fgbopal_08_acctd_bud) AS '08',
		(fgbopal_09_ytd_actv, fgbopal_09_adopt_bud, fgbopal_09_bud_adjt, fgbopal_09_acctd_bud) AS '09',
		(fgbopal_10_ytd_actv, fgbopal_10_adopt_bud, fgbopal_10_bud_adjt, fgbopal_10_acctd_bud) AS '10',
		(fgbopal_11_ytd_actv, fgbopal_11_adopt_bud, fgbopal_11_bud_adjt, fgbopal_11_acctd_bud) AS '11',
		(fgbopal_12_ytd_actv, fgbopal_12_adopt_bud, fgbopal_12_bud_adjt, fgbopal_12_acctd_bud) AS '12',
		(fgbopal_13_ytd_actv, fgbopal_13_adopt_bud, fgbopal_13_bud_adjt, fgbopal_13_acctd_bud) AS '13',
		(fgbopal_14_ytd_actv, fgbopal_14_adopt_bud, fgbopal_14_bud_adjt, fgbopal_14_acctd_bud) AS '14'
	)
)
where fgbopal_coas_code in ('1')
and fgbopal_fsyr_code in ('09','10','11','12','13','14','15')  ;","operating_ledger"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.sectiontime","SELECT a.ssbsect_term_code || '$$' || a.ssbsect_crn || '$$'
       || COALESCE(b.Day_of_Week, '') || '$$'    
       || COALESCE(b.ssrmeet_begin_time, '') || '$$'
       || COALESCE(b.ssrmeet_end_time, '') || '$$'         AS NK 
       , a.ssbsect_crn || '$$' || a.ssbsect_term_code     AS Section 
       , CASE b.Day_of_Week 
            WHEN 'U' THEN 1 
            WHEN 'M' THEN 2 
            WHEN 'T' THEN 3 
            WHEN 'W' THEN 4 
            WHEN 'R' THEN 5 
            WHEN 'F' THEN 6 
            WHEN 'S' THEN 7 
           ELSE 8 
          END                                    AS Day_of_Week 
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_begin_time,1,2) || ':' || SUBSTR(b.ssrmeet_begin_time,3,2) || ':00'  
            ELSE ''
          END                                    AS From_Tm
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_end_time,1,2)   || ':' || SUBSTR(b.ssrmeet_end_time,3,2) || ':00' 
            ELSE ''
          END                                    AS To_Tm
        , CASE WHEN a.SSBSECT_SSTS_CODE = 'A' THEN 'T' ELSE 'F' END AS IS_ACTIVE   
        , CASE WHEN b.SSRMEET_ROOM_CODE is not null and b.SSRMEET_BLDG_CODE is not null then b.SSRMEET_BLDG_CODE||'$$'||b.SSRMEET_ROOM_CODE
          when b.ssrmeet_room_code is null and b.ssrmeet_bldg_code is null then
           (select CASE WHEN c.SSRMEET_BLDG_CODE || c.SSRMEET_ROOM_CODE is null 
                    then 'EAB0'
                    when c.SSRMEET_ROOM_CODE is null and c.SSRMEET_BLDG_CODE is not null
                    then c.SSRMEET_BLDG_CODE
                    else c.SSRMEET_BLDG_CODE || '$$' || c.SSRMEET_ROOM_CODE
                    end
             from ssrmeet c 
              where c.ssrmeet_crn = ssbsect_crn and c.ssrmeet_term_code = ssbsect_term_code and rownum = 1)
          when SSRMEET_ROOM_CODE is null and SSRMEET_BLDG_CODE is not null then SSRMEET_BLDG_CODE 
          --when SSRMEET_ROOM_CODE
          else 'EAB0' end as \\\""Location\\\""
FROM ssbsect a 
LEFT OUTER JOIN ( SELECT ssrmeet_crn
                          , ssrmeet_term_code
                          , Day_of_Week
                          , ssrmeet_begin_time
                          , ssrmeet_end_time
                          , ssrmeet_bldg_code
                          , ssrmeet_room_code
                   FROM   ( SELECT ssrmeet_crn
                                   , ssrmeet_term_code
                                   , ssrmeet_begin_time
                                   , ssrmeet_end_time
                                   , ssrmeet_bldg_code
                                   , ssrmeet_room_code
                                   , ssrmeet_Sun_day
                                   , ssrmeet_Mon_day
                                   , ssrmeet_Tue_day
                                   , ssrmeet_Wed_day
                                   , ssrmeet_Thu_day
                                   , ssrmeet_Fri_day
                                   , ssrmeet_Sat_day 
                             FROM   ssrmeet) 
                  UNPIVOT(Day_of_week FOR sk IN (ssrmeet_sun_day
                                                 , ssrmeet_Mon_day
                                                 , ssrmeet_Tue_day
                                                 , ssrmeet_Wed_day
                                                 , ssrmeet_Thu_day
                                                 , ssrmeet_Fri_day
                                                 , ssrmeet_Sat_day))
                  WHERE  1=1 
                     --AND ssrmeet_term_code = '201402' 
                     --AND ssrmeet_crn = '4757' 
                ) b ON b.ssrmeet_crn = a.ssbsect_crn 
                       AND b.ssrmeet_term_code = a.ssbsect_term_code 
WHERE 1=1 
   AND ssbsect_term_code > '201510'  
and SSBSECT_CAMP_CODE = 'NCC'
   and ssrmeet_bldg_code in ('GREGG',
'INTERN',
'NAUTO',
'NMAIN',
'NWELL',
'ONLINE')
ORDER BY 1 desc, 3, 4","SectionTime"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.SectionTime","WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
        --WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NULL
        --  THEN ssrmeet_room_code
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'A' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                              AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code) -- Lookup day of week code
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. We do not need to extract sections times for past terms as section times are used for students to build their schedule.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM sectionTime","SectionTime"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.Term","WITH REG_DATES AS (
  SELECT SFRRSTS_TERM_CODE, SFRRSTS_START_DATE, SFRRSTS_END_DATE
    from SFRRSTS
   WHERE SFRRSTS_RSTS_CODE = 'RE'
     AND sfrrsts_ptrm_code = '1'
   order by 1 ASC  
)

SELECT 
  stvterm_code nk, 
  stvterm_desc name, 
  stvterm_acyr_code cat_yr,
  NVL(to_char(sfrrsts_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt,
  NVL(to_char(sfrrsts_end_date, 'YYYY-MM-DD'), '1900-01-02') registration_end_dt,
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  CASE 
    when stvterm_code in ('000000', '900000', '999999') then 'F'
    WHEN sysdate <= stvterm_end_date THEN 'T'
    ELSE 'F'
  END is_active
 FROM stvterm left JOIN REG_DATES ON stvterm_code = sfrrsts_term_code
 WHERE UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
 ORDER BY 1","Term"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"academic_standing_lkp","select 
academic_standing_cd,
academic_standing_desc
 from atlantatech.osf_asl_academic_standing_lkp","SSF_academic_standing_lkp"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.Section","WITH SFRRSTS_DATES as (
  Select Sfrrsts_Term_Code,
         Sfrrsts_Ptrm_Code,
         Sfrrsts_Rsts_Code,
         Sfrrsts_Start_Date,
         Sfrrsts_End_Date
  From Sfrrsts
  where Sfrrsts_rsts_code in ('DD','DW','DC')
),
SSRMEET_DATES as (
  select distinct ssrmeet_term_code,
         ssrmeet_crn,
         ssrmeet_start_date,
         ssrmeet_end_date
    from ssrmeet
   where ssrmeet_schd_code <> 'FIN'
   and ssrmeet_mtyp_code <> 'FIN'
)
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_crn cd,
  ssbsect_subj_code || ssbsect_crse_numb course,
  ssbsect_term_code term,
  NVL(stvcamp_code, 'DEFAULT') campus,
  ssbsect_max_enrl seats_offered,
  ssbsect_wait_avail waitlist_capacity,
  'N' is_unlimited_seating,
  CASE 
    WHEN spriden_last_name IS NULL THEN 'TBD'
    ELSE spriden_last_name || ', ' || spriden_first_name
  END instructor_name,
  NVL(to_char(ssrmeet_start_date, 'YYYY-MM-DD'), '2000-01-01') class_start_dt,
  NVL(to_char(ssrmeet_end_date, 'YYYY-MM-DD'), '2000-01-02') class_end_dt,
  Case
    When Sfrrsts_rsts_code In ('DD','DW','DC') and Sfrrsts_Start_Date is not null Then to_char(Sfrrsts_Start_Date,'YYYY-MM-DD')
    Else to_char(ssrmeet_start_date, 'YYYY-MM-DD')
  End As Drop_Start_Dt,
  Case 
    When Sfrrsts_rsts_code In ('DD','DW','DC') and Sfrrsts_End_Date is not null Then to_char(Sfrrsts_End_Date,'YYYY-MM-DD')
    else to_char(ssbsect_drop_cut_off_date, 'YYYY-MM-DD') 
  end as drop_end_dt,
  '' as withdraw_end_dt,
  CASE 
    WHEN ssbsect_ssts_code = 'A' AND ssrmeet_start_date > (sysdate - 184) THEN 'T'
    ELSE 'F'
  END is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
             LEFT JOIN ssrmeet_dates ON ssbsect_crn = ssrmeet_crn
                                    AND ssbsect_term_code = ssrmeet_term_code
             LEFT JOIN stvcamp ON ssbsect_camp_code = stvcamp_code
             LEFT JOIN SFRRSTS_DATES ON SSBSECT_TERM_CODE = SFRRSTS_TERM_CODE
                                    AND SSBSECT_PTRM_CODE = SFRRSTS_PTRM_CODE
WHERE spriden_change_ind IS NULL 
  AND Sfrrsts_Start_Date >= sysdate-365*3
  and Sfrrsts_Start_Date < sysdate
  and substr(ssbsect_term_code, -1, 1) != '5'

UNION

  select 'UNKNOWN' as NK
  , 'UNKNOWN' as CD
  , 'UNKNOWN' as COURSE
  , '000000' as TERM    --[Member Specific] Change to a valid default term
  ,  'DEFAULT' as CAMPUS
  ,  0 AS SEATS_OFFERED
  ,  0 as waitlist_capacity
  , 'N' AS IS_UNLIMITED_SEATING
  , 'TBD' AS INSTRUCTOR_NAME
  , '2000-01-01' AS CLASS_START_DT
  , '2000-01-01' AS CLASS_END_DATE
  , '2000-01-01' AS DROP_START_DT
  , '2000-01-01' AS DROP_END_DT
  , '2000-01-01' AS WITHDRAW_END_DT
  , 'T' AS IS_ACTIVE
  from dual
order by nk asc, class_start_dt desc, class_end_dt asc","Section"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.Course","WITH

validDepartments AS (
SELECT DISTINCT DEPTS_ID  nk
 FROM    DEPTS
 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A'
),

validSubjects AS (
  SELECT DISTINCT SUBJECTS_ID nk
  FROM SUBJECTS 
  where SUBJ_DESC NOT IN ('Ability to Benefit', 'Basic Math Equivalency', 'Basic Skills Development', 
                   'Communications I Equivalency', 'Communications II Equivalency', 'Course Waiver') AND
        SUBJ_DESC NOT LIKE 'DO NOT USE%' AND
        SUBJECTS_ID not in ('COMM1', 'COMM2', 'COMMFND', 'MATHALG', 'MATHPRE', 'RDGCOMM', 'RDGFUND', 'RDGNONE', 'XKAP')
)

SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk,  
      ISNULL(COURSES.CRS_NAME,'') cd, 
       '1'  level,
      ISNULL(CRS_SUBJECT,'') subject, 
      ISNULL(CRS_DEPTS,'')    dept,  
      CASE
        WHEN CRS_TITLE IS NULL
          THEN 
          RTRIM(REPLACE(ISNULL(CRS_SHORT_TITLE,''), char(253) , ' ' )) 
      ELSE
          RTRIM(REPLACE(ISNULL(CRS_TITLE,''), char(253) , ' ' ))     
      END title,
      rtrim(ISNULL(REPLACE(REPLACE(REPLACE(CAST(ISNULL(COURSES.CRS_DESC,'') AS VARCHAR(1200)), char(253) , ' ' ), char(10), ''), char(13), ''),' ')) \\\""desc\\\"",
      '' course_type,
      LEFT(RIGHT(ISNULL(CRS_MIN_CRED,'0'), 8), 4) credits,
      CASE
        when APPROVAL_STATUS.CRS_STATUS = 'A' THEN 'T'
      ELSE 'F'
      END is_active
      
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
    Join validSubjects on validSubjects.nk = CRS_SUBJECT
    Join validDepartments on validDepartments.nk = CRS_DEPTS
  Where 
        COURSES.CRS_MIN_CRED > 0 
       AND CRS_NO <> '999' AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  ","Course"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.StudentTerm","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
),

PROGLIST AS (
SELECT DISTINCT REPLACE(ACAD_PROGRAM_REQMTS_ID , '*','$$') as PROG_ID
  FROM ACAD_PROGRAM_REQMTS
  LEFT OUTER JOIN ACAD_PROGRAMS
    ON SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
    LEFT OUTER JOIN PROGRAM_STATUS
      ON PROGRAM_STATUS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
 WHERE SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) NOT IN ('CE', 'NS.NDS')
),

STULIST AS (

SELECT DISTINCT
   substring(P.ID,1,7) PERSON_ID
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
           
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
),

STUTRMLIST AS (
SELECT DISTINCT  parsename(replace(STUDENT_TERMS_ID,'*','.'), 3)+'$$'+parsename(replace(STUDENT_TERMS_ID,'*','.'),2) as nk,
    parsename(replace(STUDENT_TERMS_ID, '*', '.'), 3) as student,
    parsename(replace(STUDENT_TERMS_ID, '*', '.'), 2) as term,
    replace(STUDENT_PROGRAMS.STPR_STU_PGM_IDX, '*', '$$') as program,
    'T' as is_active   
 FROM STUDENT_TERMS        
    LEFT OUTER JOIN STUDENT_PROGRAMS
       ON SUBSTRING(STUDENT_TERMS_ID, 1,    CHARINDEX('*', STUDENT_TERMS_ID) - 1) =
          SUBSTRING(STUDENT_PROGRAMS_ID, 1, (CHARINDEX('*', STUDENT_PROGRAMS_ID) - 1))
    LEFT OUTER JOIN STPR_STATUSES
       ON STPR_STATUSES.STUDENT_PROGRAMS_ID = STUDENT_PROGRAMS.STUDENT_PROGRAMS_ID
          AND  STPR_STATUSES.POS = '1' AND STPR_STATUSES.STPR_STATUS = 'A'
)
,


APPLICANT_PROGRAM as (SELECT 
    STUTERM.ID+'$$'+TERMS.TERMS_ID nk,
	PERSON_ID,
	TERMS.TERMS_ID term,
	A.APPL_ACAD_PROGRAM program,
	'T' is_active
	FROM
    STULIST
      JOIN APPLICATIONS A ON
         A.APPL_APPLICANT = STULIST.PERSON_ID
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
   ,
   (
      SELECT DISTINCT 
         A.APPL_APPLICANT AS ID,
         MAX(DATEDIFF(DAY, '19000101', TERM_START_DATE)) AS TERMSTART
      FROM
         APPLICATIONS A
            JOIN TERMS ON
               A.APPL_START_TERM = TERMS.TERMS_ID
      WHERE         
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      GROUP BY A.APPL_APPLICANT
   ) STUTERM
      JOIN TERMS ON
         STUTERM.TERMSTART = DATEDIFF(DAY, '19000101', TERMS.TERM_START_DATE)
WHERE
   STULIST.PERSON_ID = STUTERM.ID
      AND
   TERMS.TERMS_ID = A.APPL_START_TERM),

OLD_FINISH AS (

SELECT isnull(STUTRMLIST.nk, APPLICANT_PROGRAM.nk) nk,
	STULIST.PERSON_ID,
	isnull(STUTRMLIST.term, APPLICANT_PROGRAM.term) term,
	isnull(STUTRMLIST.program, APPLICANT_PROGRAM.program) program,
	isnull(STUTRMLIST.is_active, APPLICANT_PROGRAM.is_active) is_active
  FROM STULIST
  LEFT JOIN STUTRMLIST on STUTRMLIST.student = STULIST.PERSON_ID
  LEFT JOIN APPLICANT_PROGRAM on APPLICANT_PROGRAM.PERSON_ID = STULIST.PERSON_ID
  JOIN TERMLIST on TERMLIST.SEC_TERM in (STUTRMLIST.term, APPLICANT_PROGRAM.term)
  JOIN PROGLIST on PROG_ID in (STUTRMLIST.program, APPLICANT_PROGRAM.program) ),

  ALL_VALID_TERMS as (

  SELECT DISTINCT SUBSTRING(TERMS_ID,1,6) nk
  FROM TERMS
    where (TERM_REPORTING_YEAR > YEAR(getdate())-10 and
         TERM_REPORTING_YEAR <= YEAR(GETDATE())+1) AND
          TERMS_ID is not NULL and
          TERM_REG_START_DATE is not null)

  SELECT OLD.* FROM OLD_FINISH OLD
  JOIN ALL_VALID_TERMS AVT on OLD.term = AVT.nk
  WHERE program not like 'HS%'
  ","Applicant - Student Term"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"cat.course","WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk -- This nk does not use the standard $$ concatenation since the platform currently shows the nk field in the UI. This affects the following dependent scripts that need to be in sync - section, studentCourse
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'DEV', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE WHEN scbcrse.scbcrse_csta_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to A, set the course to active
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
),

-- Assign default values
defaultValues AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM course
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet

","Course"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"event.TaskStatusFeed","with cur_terms as (
select distinct nk
from eab_trm
where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-365
and substr(college, 0, 1) = 'P'
order by nk desc),
cur_stu as (
select distinct id as stu_id
from eab_stdnt_active
where current_enroll_pc = 'Y'
and academic_period in (select nk from cur_terms)),
this_term as (
select MIN(NK)
from eab_trm
where to_date(term_end_dt,'YYYY-MM-DD') > sysdate
and college = 'CC'
)
-------------------------------------------
select id ||'$$EAB_STUDENT_ORIENTATION$$' as nk,
id as student,
'EAB_STUDENT_ORIENTATION' as event,
'' as repeated_by_nk,
'COMPLETED' as status,
'1900-01-01' as status_changed_ts,
'Y' as is_active
from (select distinct id from eab_stdnt_active WHERE home_college = 'CC')
WHERE ID in (select * from cur_stu)
UNION
----------------------------------------------
SELECT NK,
STUDENT,
'EAB_STUDENT_TEST_SCORE' as event,
'' as repeated_by_nk,
'COMPLETED' as status,
'1900-01-01' as status_changed_ts,
'Y' as is_active
FROM EAB_STUDENT_TEST_SCORE
WHERE STUDENT in (select * from cur_stu)
UNION
-----------------------------------------------
select id ||'$$E_SCHEDULE_NEXT_TERM$$' as nk,
id as student,
'E_SCHEDULE_NEXT_TERM' as event,
'' as repeated_by_nk,
'COMPLETED' as status,
'1900-01-01' as status_changed_ts,
'Y' as is_active
from (select distinct id from eab_stdnt_active WHERE ORIEN_IND = 'Y' and home_college = 'CC')
WHERE ID in (select * from cur_stu)","TaskStatusFeed-Test"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"core.student","
WITH POP AS (
select sorlcur_pidm pidm
from sorlcur tbl
where 1=1
and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
and sorlcur_cact_code = 'ACTIVE'
and sorlcur_priority_no = (select min(sorlcur_priority_no)
                           from sorlcur
                           where sorlcur_camp_code = 'NCC'
                           and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                           and sorlcur_cact_code = 'ACTIVE'
                           and sorlcur_term_code_end is null
                           and sorlcur_pidm = tbl.sorlcur_pidm
                           and sorlcur_term_code in (select distinct term from (


                                                      SELECT STVTERM_CODE term FROM STVTERM
                                                      WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                              FROM stvterm 
                                                                              where sysdate < stvterm_start_date 
                                                                              
                                                                              and(stvterm_code like '%10' 
                                                                              or stvterm_code like '%20' 
                                                                              or stvterm_code like '%30')
                                                                            )
                                                      and (stvterm_code like '%10' 
                                                            or stvterm_code like '%20' 
                                                            or stvterm_code like '%30')
                                                      and rownum < 5
                                                      ORDER BY 1 desc))

                          )
and sorlcur_term_code_end is null
and sorlcur_camp_code = 'NCC'
and sorlcur_term_code = (select max(sorlcur_term_code)
                          from sorlcur
                          where sorlcur_pidm = tbl.sorlcur_pidm
                          and sorlcur_camp_code = 'NCC'
                          and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                          and sorlcur_cact_code = 'ACTIVE'
                          and sorlcur_term_code_end is null
                          and sorlcur_priority_no = (select min(sorlcur_priority_no)
                                                      from sorlcur
                                                      where sorlcur_camp_code = 'NCC'
                                                      and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
                                                      and sorlcur_cact_code = 'ACTIVE'
                                                      and sorlcur_term_code_end is null
                                                      and sorlcur_pidm = tbl.sorlcur_pidm
                                                      and sorlcur_term_code in (

                                                        select distinct term from (
                                                            SELECT STVTERM_CODE term FROM STVTERM
                                                            WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                                                    FROM stvterm 
                                                                                                    where sysdate < stvterm_start_date 
                                                                                                    --and sysdate <= stvterm_end_date
                                                                                                    and (stvterm_code like '%10' 
                                                                                                    or stvterm_code like '%20' 
                                                                                                    or stvterm_code like '%30')
                                                                                                    )
                                                                              and (stvterm_code like '%10' 
                                                                                  or stvterm_code like '%20' 
                                                                                  or stvterm_code like '%30')
                                                                              and rownum < 5
                                                                              ORDER BY 1 desc))
                                                    )
                          and sorlcur_term_code in ( select distinct term from (
                                                  SELECT STVTERM_CODE term FROM STVTERM
                                                  WHERE STVTERM_CODE <= (SELECT min(STVTERM_CODE) 
                                                                          FROM stvterm 
                                                                          where sysdate < stvterm_start_date 
                                                                          --and sysdate <= stvterm_end_date
                                                                          and(stvterm_code like '%10' 
                                                                           or stvterm_code like '%20' 
                                                                           or stvterm_code like '%30')
                                                                        )
                                                  and (stvterm_code like '%10' 
                                                   or stvterm_code like '%20' 
                                                   or stvterm_code like '%30')
                                                  and rownum < 5
                                                  ORDER BY 1 desc))
                        )
),
enrollment as (

select distinct pidm,
'Dual-Enrolled' as enrollment_status
from (
select sprcmnt_pidm as pidm,
sprcmnt_cmtt_code as enrollment_status
from SPRCMNT a
where sprcmnt_cmtt_code in ('GSC','KSC','NHD','NHM','PSU')
and sprcmnt_activity_date = (select max(sprcmnt_activity_date)
                            from sprcmnt b
                            where a.sprcmnt_pidm = b.sprcmnt_pidm
                            and a.sprcmnt_cmtt_code = b.sprcmnt_cmtt_code)
))
select spriden_id nk,
       nvl((select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'SE'
                and goremal_status_ind = 'A'),spriden_id) username,
       --nvl((select gobtpac_external_user from gobtpac where gobtpac_pidm = spriden_pidm), spriden_id) username,
               coalesce(( 
                select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'SE'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'SE'
              and goremal_preferred_ind = 'N'
              ),
               lower(spriden_id) || '@missingemail.org') email,
       spriden_first_name first_name,
       spriden_last_name last_name,
       --nvl(to_char(spbpers_birth_date,'YYYY-MM-DD'),'2000-01-01') birthdate,
       '2001-01-01' birthdate,
       'N' as veteran_ind,
       enrollment_status as enrollment_status,
'T' as is_active
  from spriden
left join enrollment on spriden_pidm = enrollment.pidm
  --join spbpers on spriden_pidm = spbpers_pidm
where spriden_change_ind is null
 --and sgbstdn_camp_code in ('NCC')
 and spriden_pidm in (select * from pop)","Student"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.SectionTime","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'P'),

sect_time as (
select distinct *
  from eab_sect_time
 where substr(campus,0,1)='P'
   and academic_period in (select nk from cur_terms)),

list_loc as (
select distinct location as loc
  from (select
    CASE
      when substr(location, -1, 1) = '$' then substr(location, 0, instr(location, '$')-1)
      else location
    END location
    from sect_time))

select distinct nk,section,day_of_week,from_tm,to_tm,location,is_active from (
SELECT
  section ||'$$'|| coalesce(day_of_week, 8) ||'$$'||
  coalesce(substr(from_tm, 0, 2), '00')||coalesce(substr(from_tm, 4, 2), '00') ||'$$'||
  coalesce(substr(to_tm, 0, 2),'00')||coalesce(substr(to_tm, 4, 2), '00') nk,
  section,
  coalesce(day_of_week, 8) day_of_week,
  from_tm,
  to_tm,
  CASE
    when substr(location, -1, 1) = '$' then substr(location, 0, instr(location, '$')-1)
    else location
  END location,
  CASE 
    WHEN is_active = 'Y' THEN 'T'
    ELSE 'F'
  END AS is_active
FROM SECT_TIME
WHERE campus LIKE 'P%'
  and academic_period in (select nk from cur_terms)
  and location in (select loc from list_loc))","SectionTime"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Department","-- get department data from Banner 
WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept
WHERE LENGTH(stvdept_code) = 3
),

-- Assign default values
defaultValues AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM department
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Departments"
1021,"Houston Baptist University",10391,"",47987,"APS:Houston Baptist University",47975,"APS",24,"finance","define COAS_FILTER = '(''1'')'
select 
'acct' as code_type
, a.ftvacct_coas_code as coas_code
, a.ftvacct_acct_code as code
, a.ftvacct_title as name
, a.ftvacct_eff_date as effective_date
, a.ftvacct_activity_date as activity_date
, a.ftvacct_nchg_date as next_change_date
, a.ftvacct_term_date as term_date
, a.ftvacct_status_ind as status_ind
, a.ftvacct_data_entry_ind as data_entry_ind  
, a.ftvacct_acct_code_pred as predecessor_value 
, a.ftvacct_atyp_code as type_code
, b.ftvatyp_title as type_title
, a.ftvacct_normal_bal as acct_normal_balance
, '' as fund_grant_code
from ftvacct a
left outer join (
    select ftvatyp_atyp_code, ftvatyp_title
    from ftvatyp a
    where ftvatyp_coas_code in &COAS_FILTER
    and ftvatyp_eff_date =
        (select max(ftvatyp_eff_date)
        from ftvatyp
        where ftvatyp_coas_code in &COAS_FILTER
        and ftvatyp_atyp_code = a.ftvatyp_atyp_code
        )
    ) b
    on a.ftvacct_atyp_code = b.ftvatyp_atyp_code
where ftvacct_coas_code in &COAS_FILTER
UNION
select 
'actv' as code_type
, a.ftvactv_coas_code as coas_code
, a.ftvactv_actv_code as code
, a.ftvactv_title as name
, a.ftvactv_eff_date as effective_date
, a.ftvactv_activity_date as activity_date
, a.ftvactv_nchg_date as next_change_date
, a.ftvactv_term_date as term_date
, a.ftvactv_status_ind as status_ind
, '' as data_entry_ind  
, '' as predecessor_value 
, '' as type_code
, '' as type_title
, '' as acct_normal_balance
, '' as fund_grant_code
from ftvactv a
where a.ftvactv_coas_code in &COAS_FILTER
UNION
select 
'fund' as code_type
, a.ftvfund_coas_code as coas_code
, a.ftvfund_fund_code as code
, a.ftvfund_title as name
, a.ftvfund_eff_date as effective_date
, a.ftvfund_activity_date as activity_date
, a.ftvfund_nchg_date as next_change_date
, a.ftvfund_term_date as term_date
, a.ftvfund_status_ind as status_ind
, a.ftvfund_data_entry_ind as data_entry_ind  
, a.ftvfund_fund_code_pred as predecessor_value 
, a.ftvfund_ftyp_code as type_code
, b.ftvftyp_title as type_title
, '' as acct_normal_balance
, a.ftvfund_grnt_code as fund_grant_code
from ftvfund a
left outer join (
    select ftvftyp_ftyp_code, ftvftyp_title
    from ftvftyp a
    where ftvftyp_coas_code in &COAS_FILTER
    and ftvftyp_eff_date =
        (select max(ftvftyp_eff_date)
        from ftvftyp
        where ftvftyp_coas_code in &COAS_FILTER
        and ftvftyp_ftyp_code = a.ftvftyp_ftyp_code
        )
    ) b
    on a.ftvfund_ftyp_code = b.ftvftyp_ftyp_code
where ftvfund_coas_code in &COAS_FILTER
UNION
select
'locn' as code_type
, a.ftvlocn_coas_code as coas_code
, a.ftvlocn_locn_code as code
, a.ftvlocn_title as name
, a.ftvlocn_eff_date as effective_date
, a.ftvlocn_activity_date as activity_date
, a.ftvlocn_nchg_date as next_change_date
, a.ftvlocn_term_date as term_date
, a.ftvlocn_status_ind as status_ind
, '' as data_entry_ind  
, a.ftvlocn_locn_code_pred as predecessor_value 
, '' as type_code
, '' as type_title
, '' as acct_normal_balance
, '' as fund_grant_code
from ftvlocn a
where a.ftvlocn_coas_code in &COAS_FILTER
UNION
select
'orgn' as code_type,
a.ftvorgn_coas_code as coas_code,
a.ftvorgn_orgn_code as code,
a.ftvorgn_title as name,
a.ftvorgn_eff_date as effective_date,
a.ftvorgn_activity_date as activity_date,
a.ftvorgn_nchg_date as next_change_date,
a.ftvorgn_term_date as term_date
, a.ftvorgn_status_ind as status_ind
, a.ftvorgn_data_entry_ind as data_entry_ind  
, a.ftvorgn_orgn_code_pred as predecessor_value 
, '' as type_code
, '' as type_title
, '' as acct_normal_balance
, '' as fund_grant_code
from ftvorgn a
where ftvorgn_coas_code in &COAS_FILTER
UNION
select 
'prog' as code_type
, a.ftvprog_coas_code as coas_code 
, a.ftvprog_prog_code as code
, a.ftvprog_title as name
, a.ftvprog_eff_date as effective_date
, a.ftvprog_activity_date as activity_date
, a.ftvprog_nchg_date as next_change_date
, a.ftvprog_term_date as term_date
, a.ftvprog_status_ind as status_ind
, a.ftvprog_data_entry_ind as data_entry_ind  
, a.ftvprog_prog_code_pred as predecessor_value 
, '' as type_code
, '' as type_title
, '' as acct_normal_balance
, '' as fund_grant_code
from ftvprog a
where ftvprog_coas_code in &COAS_FILTER;","FOAPAL_lookup"
1219,"Broward College",10510,"",48378,"Navigate:Broward College",47972,"Navigate",20,"cat.Department","SELECT DISTINCT
DEPTCODE AS nk
, a.NAME as name
, 'T' AS is_active

FROM DEPARTMENT_MASTER a

WHERE 1=1
AND name = (
	SELECT MAX(NAME)
	FROM DEPARTMENT_MASTER
	WHERE a.DEPTCODE = DEPTCODE
	)

UNION ALL

SELECT 'NA','NA','T'

ORDER BY 1
","Departments"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.Term","-- get Terms from Banner
WITH term AS (SELECT 
  stvterm_code nk, 
  stvterm_desc \\\""name\\\"", 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case 
    When (Stvterm_Desc Like '%Fall%'
    or Stvterm_Desc Like '%Winter%'
    or Stvterm_Desc Like '%Spring%'
    or Stvterm_Desc Like '%Summer%') 
    and stvterm_code not in ('999999','000000')
    and stvterm_code like '%2' THEN 'T' -- Logic to set just Coastline terms that end in 3 as active
    ELSE 'F'
  END is_active
  /*CASE sobterm_reg_allowed WHEN 'Y' THEN 'T'
                  ELSE 'F'
                  END is_active*/

FROM stvterm 
  JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
  --JOIN sobterm ON sobterm_term_code = stvterm_code -- Coastline logic but no access to sobterm
WHERE sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member
  AND sfrrsts_ptrm_code = '1' -- Confirm ptrm code to include with BA/Member
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in stvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
SELECT
  stvterm_code nk,
  stvterm_desc \\\""name\\\"",
  stvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case
    When (Stvterm_Desc Like '%Fall%'
    or Stvterm_Desc Like '%Winter%'
    or Stvterm_Desc Like '%Spring%'
    or Stvterm_Desc Like '%Summer%') 
    and stvterm_code not in ('999999','000000')
    and stvterm_code like '%2' THEN 'T'  -- Logic to set just Coastline terms that end in 3 as active
    ELSE 'F'
  END is_active
  /*CASE sobterm_reg_allowed WHEN 'Y' THEN 'T'
                  ELSE 'F'
                  END is_active*/
FROM stvterm
--JOIN sobterm ON sobterm_term_code = stvterm_code -- Coastline logic but no access to sobterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = stvterm_code
                   AND sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_ptrm_code = '1') -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM finalDataSet","Terms"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"catcc.TestSubject","WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
          THEN TO_NUMBER(stvtesc_max_value) || '.00'
          ELSE stvtesc_max_value
          END AS max_score
  , 'T' AS is_active
FROM stvtesc
WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')
)

-- wrapper query
SELECT * FROM testSubjects","TestSubject"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.CourseType","WITH CRTPLIST AS (
	SELECT DISTINCT CRS_CRED_TYPE, count(*) CRS_COUNT
	  FROM COURSES
	 WHERE CRS_MIN_CRED > 0
	 GROUP BY CRS_CRED_TYPE
)

SELECT CRED_TYPES_ID nk,
       CRTP_DESC name,
	   CASE
         WHEN CRS_COUNT > 0 THEN 'T'
		 ELSE 'F'
	   END is_active
  FROM CRED_TYPES LEFT JOIN CRTPLIST ON CRED_TYPES_ID = CRS_CRED_TYPE
","CourseType"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"catcc.testsubject","select distinct a.test_id || '_' || a.test_component as nk
, a.descr as \\\""name\\\""
, a.max_score as max_score
, 'T' as is_active
from  PS_SA_TCMP_REL_TBL a
           WHERE  EFFDT = (SELECT Max(EFFDT) 
                           FROM   PS_SA_TCMP_REL_TBL 
                           WHERE  a.TEST_ID = TEST_ID
                           and a.test_component = test_component)","Test Subject"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.subject","with NOVA_subjects as (
  
select distinct a.subject as NK
, a.descr as \\\""name\\\""
, case when eff_status = 'A' then 'T' else 'F' end as is_active
from PS_SUBJECT_TBL a
where INSTITUTION = 'NV280'
--and eff_status = 'A'
and effdt = (select max(effdt) from PS_SUBJECT_TBL b where a.subject = b.subject and a.institution = b.institution)
),


OTHER_SUBJECTS as (
select subject as NK
, descr as \\\""name\\\""
, 'F' as is_active
from PS_SUBJECT_TBL a
where INSTITUTION <> 'NV280'
--and eff_status = 'A'
and effdt = (select max(effdt) from PS_SUBJECT_TBL b where a.subject = b.subject and a.institution = b.institution)

)
select * from NOVA_subjects

union 

select * from OTHER_SUBJECTS
where NK not in (select NK from NOVA_SUBJECTS)","Subject"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.Program","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Programs File

Fields: nk,cd,cat_yr,name,desc,credits,enrollment_notes,registration_notes,area_of_study,concentration,credential,cip,is_transfer,is_active
*/

SELECT NVL(TRIM(mmt.major), '') || '$$' || NVL(TRIM(mmt.deg), '') || '$$' || NVL('20' || SUBSTR(mmt.fa_yr, 1, 2), '') AS nk
       , NVL(TRIM(mmt.major), '') || '_' || NVL(TRIM(mmt.deg), '')                                        AS cd
       , NVL('20' || SUBSTR(mmt.fa_yr, 1, 2), '')                                                         AS cat_yr
       , NVL(TRIM(mt.txt), '')                                                                            AS name
       , TRIM(NVL(NVL(NVL(TRIM(mdt.txt), TRIM(mt.ltr_txt)), TRIM(mt.txt)), ''))                           AS desc
       --, NVL(NVL(mt.ltr_txt, mt.txt), '')                                                                 AS desc
       , mmt.credits_for_deg                                                                              AS credits
       , ''                                                                                               AS enrollment_notes
       , ''                                                                                               AS registration_notes
       , NVL(TRIM(mt.txt), '')                                                                            AS area_of_study
       , ''                                                                                               AS concentration
       --, NVL(dt.txt, '')                                                                                  AS credential_old  --left in for troubleshooting if needed
       , CASE
            WHEN LOWER(dt.txt) LIKE '%no deg%' THEN 'No degree listed'
            WHEN INSTR(dt.txt, ':') = 0 THEN NVL(TRIM(dt.txt), '')
            ELSE NVL(SUBSTR(dt.txt, 1, INSTR(dt.txt, ':')-1), '')
         END                                                                                              AS credential
       , NVL(mt.cip_no, '')                                                                               AS cip
       , CASE
            WHEN LOWER(mt.ltr_txt) LIKE '%transfer%' THEN 'T'
            WHEN LOWER(dt.txt) LIKE '%transfer%' THEN 'T'
            ELSE 'F'
         END                                                                                              AS is_transfer
       , CASE
            WHEN mmt.inactive_date IS NULL THEN CASE
                                                  WHEN latest.fa_yr = mmt.fa_yr THEN 'T'
                                                  ELSE 'F'
                                                END
            ELSE 'F'
         END                                                                                              AS is_active
       --, latest.RN troubleshooting only
FROM informix.mhfamajor_table mmt 
JOIN informix.major_table mt
  ON mmt.major = mt.major
LEFT JOIN informix.deg_table dt
       ON mmt.deg = dt.deg
LEFT JOIN informix.mhmajordesc_table mdt
       ON mmt.major = mdt.major        
LEFT JOIN (SELECT mmt.major, mmt.deg, mmt.fa_yr
                  , ROW_NUMBER() OVER(PARTITION BY mmt.major, mmt.deg
                                      ORDER BY mmt.fa_yr DESC) AS RN
           FROM informix.mhfamajor_table mmt
           WHERE 1=1
              --AND mmt.deg <> ''
          ) latest
       ON latest.major = mmt.major
          AND latest.deg = mmt.deg
          AND latest.RN = 1
WHERE 1=1
   AND mmt.deg <> ''        
UNION   
--No degree records
SELECT NVL(TRIM(mmt.major), '') || '$$' || NVL('20' || SUBSTR(mmt.fa_yr, 1, 2), '')                       AS nk
       , NVL(TRIM(mmt.major), '')                                                                         AS cd
       , NVL('20' || SUBSTR(mmt.fa_yr, 1, 2), '')                                                         AS cat_yr
       , NVL(TRIM(mt.txt), '')                                                                            AS name
       , TRIM(NVL(NVL(NVL(TRIM(mdt.txt), TRIM(mt.ltr_txt)), TRIM(mt.txt)), ''))                           AS desc
       --, NVL(NVL(mt.ltr_txt, mt.txt), '')                                                                 AS desc
       , mmt.credits_for_deg                                                                              AS credits
       , ''                                                                                               AS enrollment_notes
       , ''                                                                                               AS registration_notes
       , NVL(TRIM(mt.txt), '')                                                                            AS area_of_study
       , ''                                                                                               AS concentration
       --, ''                                                                                               AS credential_old  --left in for troubleshooting if needed
       , 'No degree listed'                                                                               AS credential
       , NVL(mt.cip_no, '')                                                                               AS cip
       , CASE
            WHEN LOWER(mt.ltr_txt) LIKE '%transfer%' THEN 'T'
            ELSE 'F'
         END                                                                                              AS is_transfer
       , CASE
            WHEN mmt.inactive_date IS NULL THEN CASE
                                                  WHEN latest.fa_yr = mmt.fa_yr THEN 'T'
                                                  ELSE 'F'
                                                END
            ELSE 'F'
         END                                                                                              AS is_active
FROM informix.mhfamajor_table mmt 
JOIN informix.major_table mt
  ON mmt.major = mt.major
LEFT JOIN informix.mhmajordesc_table mdt
       ON mmt.major = mdt.major      
LEFT JOIN (SELECT mmt.major, mmt.fa_yr
                  , ROW_NUMBER() OVER(PARTITION BY mmt.major
                                      ORDER BY mmt.fa_yr DESC) AS RN
           FROM informix.mhfamajor_table mmt
           WHERE 1=1
              --AND mmt.deg = ''
          ) latest
       ON latest.major = mmt.major
          AND latest.RN = 1
WHERE 1=1       
   AND mmt.deg = ''
UNION
--Yearless records
SELECT NVL(TRIM(mmt.major), '') || '$$' || NVL(TRIM(mmt.deg), '')                                         AS nk
       , NVL(TRIM(mmt.major), '')                                                                         AS cd
       , '0000'                                                                                           AS cat_yr
       , NVL(TRIM(mt.txt), '')                                                                            AS name
       , TRIM(NVL(NVL(NVL(TRIM(mdt.txt), TRIM(mt.ltr_txt)), TRIM(mt.txt)), ''))                           AS desc
       --, NVL(NVL(mt.ltr_txt, mt.txt), '')                                                                 AS desc
       , mmt.credits_for_deg                                                                              AS credits
       , ''                                                                                               AS enrollment_notes
       , ''                                                                                               AS registration_notes
       , NVL(TRIM(mt.txt), '')                                                                            AS area_of_study
       , ''                                                                                               AS concentration
       --, NVL(dt.txt, '')                                                                                  AS credential_old  --left in for troubleshooting if needed
       , CASE
            WHEN LOWER(dt.txt) LIKE '%no deg%' THEN 'No degree listed'
            WHEN INSTR(dt.txt, ':') = 0 THEN NVL(dt.txt, '')
            ELSE NVL(SUBSTR(dt.txt, 1, INSTR(dt.txt, ':')-1), '')
         END                                                                                              AS credential
       , NVL(mt.cip_no, '')                                                                               AS cip
       , CASE
            WHEN LOWER(mt.ltr_txt) LIKE '%transfer%' THEN 'T'
            WHEN LOWER(dt.txt) LIKE '%transfer%' THEN 'T'
            ELSE 'F'
         END                                                                                              AS is_transfer
       , 'F'                                                                                              AS is_active
FROM informix.mhfamajor_table mmt 
JOIN informix.major_table mt
  ON mmt.major = mt.major   
LEFT JOIN informix.deg_table dt
       ON mmt.deg = dt.deg
LEFT JOIN informix.mhmajordesc_table mdt
       ON mmt.major = mdt.major           
WHERE 1=1
   AND LOWER(dt.txt) LIKE '%no deg%'
   AND mmt.fa_yr = (SELECT MAX(mmt1.fa_yr)
                    FROM informix.mhfamajor_table mmt1
                    WHERE mmt.major = mmt1.major
                       AND mmt1.deg <> '')  ","Programs"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.sectiontime","SELECT a.ssbsect_term_code || '$$' || a.ssbsect_crn || '$$'
       || COALESCE(b.Day_of_Week, '') || '$$'    
       || COALESCE(b.ssrmeet_begin_time, '') || '$$'
       || COALESCE(b.ssrmeet_end_time, '') || '$$'         AS NK 
       , a.ssbsect_crn || '$$' || a.ssbsect_term_code     AS Section 
       , CASE b.Day_of_Week 
            WHEN 'U' THEN 1 
            WHEN 'M' THEN 2 
            WHEN 'T' THEN 3 
            WHEN 'W' THEN 4 
            WHEN 'R' THEN 5 
            WHEN 'F' THEN 6 
            WHEN 'S' THEN 7 
           ELSE 8 
          END                                    AS Day_of_Week 
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_begin_time,1,2) || ':' || SUBSTR(b.ssrmeet_begin_time,3,2) || ':00'  
            ELSE ''
          END                                    AS From_Tm
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_end_time,1,2)   || ':' || SUBSTR(b.ssrmeet_end_time,3,2) || ':00' 
            ELSE ''
          END                                    AS To_Tm
        , CASE WHEN a.SSBSECT_SSTS_CODE = 'A' THEN 'T' ELSE 'F' END AS IS_ACTIVE   
        , CASE WHEN b.SSRMEET_ROOM_CODE is not null and b.SSRMEET_BLDG_CODE is not null then b.SSRMEET_BLDG_CODE||'$$'||b.SSRMEET_ROOM_CODE
          when b.ssrmeet_room_code is null and b.ssrmeet_bldg_code is null then
           (select CASE WHEN c.SSRMEET_BLDG_CODE || c.SSRMEET_ROOM_CODE is null 
                    then 'EAB0'
                    when c.SSRMEET_ROOM_CODE is null and c.SSRMEET_BLDG_CODE is not null
                    then c.SSRMEET_BLDG_CODE
                    else c.SSRMEET_BLDG_CODE || '$$' || c.SSRMEET_ROOM_CODE
                    end
             from ssrmeet c 
              where c.ssrmeet_crn = ssbsect_crn and c.ssrmeet_term_code = ssbsect_term_code and rownum = 1)
          when SSRMEET_ROOM_CODE is null and SSRMEET_BLDG_CODE is not null then SSRMEET_BLDG_CODE 
          --when SSRMEET_ROOM_CODE
          else 'EAB0' end as \\\""Location\\\""
FROM ssbsect a 
LEFT OUTER JOIN ( SELECT ssrmeet_crn
                          , ssrmeet_term_code
                          , Day_of_Week
                          , ssrmeet_begin_time
                          , ssrmeet_end_time
                          , ssrmeet_bldg_code
                          , ssrmeet_room_code
                   FROM   ( SELECT ssrmeet_crn
                                   , ssrmeet_term_code
                                   , ssrmeet_begin_time
                                   , ssrmeet_end_time
                                   , ssrmeet_bldg_code
                                   , ssrmeet_room_code
                                   , ssrmeet_Sun_day
                                   , ssrmeet_Mon_day
                                   , ssrmeet_Tue_day
                                   , ssrmeet_Wed_day
                                   , ssrmeet_Thu_day
                                   , ssrmeet_Fri_day
                                   , ssrmeet_Sat_day 
                             FROM   ssrmeet) 
                  UNPIVOT(Day_of_week FOR sk IN (ssrmeet_sun_day
                                                 , ssrmeet_Mon_day
                                                 , ssrmeet_Tue_day
                                                 , ssrmeet_Wed_day
                                                 , ssrmeet_Thu_day
                                                 , ssrmeet_Fri_day
                                                 , ssrmeet_Sat_day))
                  WHERE  1=1 
                     --AND ssrmeet_term_code = '201402' 
                     --AND ssrmeet_crn = '4757' 
                ) b ON b.ssrmeet_crn = a.ssbsect_crn 
                       AND b.ssrmeet_term_code = a.ssbsect_term_code 
  left join scrlevl
  on a.SSBSECT_SUBJ_CODE = scrlevl_subj_code
  and a.SSBSECT_CRSE_NUMB = scrlevl_crse_numb
where 1=1
and SCRLEVL_LEVL_CODE = 'NC' 
AND ssbsect_term_code > '201510'  
and SSBSECT_CAMP_CODE = 'NCC'
and ssrmeet_bldg_code in ('GREGG',
'INTERN',
'NAUTO',
'NMAIN',
'NWELL',
'ONLINE')
ORDER BY 1 desc, 3, 4","SectionTime"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.CourseType","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Course Type File

Fields: nk,name,is_active
*/

SELECT NVL(TRIM(it.im), '')      AS nk
       , NVL(TRIM(it.descr), '') AS name
       , CASE
           WHEN inactive_date IS NULL THEN 'T'
           ELSE 'F'
         END               AS is_active
FROM informix.im_table it
WHERE 1=1
ORDER BY 1    ","CourseType"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"catcc.TestSubject","SELECT NON_COURSES_ID AS nk,
       NCRS_SHORT_TITLE AS name,
	   NCRS_MAX_SCORE AS max_score,
	   'T' as is_active
  FROM NON_COURSES
 WHERE NCRS_MAX_SCORE IS NOT NULL
   AND NCRS_TYPE IN ('TEST', 'ATEST')","TestSubject"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.Section","with ssbsect_terms as (
  select distinct ssbsect_term_code
    from ssbsect
),
shrtckn_list as (
  select shrtckn_crn,
        shrtckn_term_code,
        shrtckn_subj_code,
        shrtckn_crse_numb,
        SHRTCKN_PTRM_START_DATE,
        SHRTCKN_PTRM_END_DATE,
        SHRTCKN_SCHD_CODE,
        SHRTCKN_CAMP_CODE
    from shrtckn
   where shrtckn_term_code not in (select * from ssbsect_terms)
     and shrtckn_dept_code is not null
   group by shrtckn_crn,
            shrtckn_term_code,
            shrtckn_subj_code,
            shrtckn_crse_numb,
            SHRTCKN_PTRM_START_DATE,
            SHRTCKN_PTRM_END_DATE,
            SHRTCKN_SCHD_CODE,
            SHRTCKN_CAMP_CODE
),
crse_list as (
  select distinct
      ssbsect_subj_code,
      ssbsect_crse_numb,
      ssbsect_schd_code
    from ssbsect
),
link_lab_list as (
  select ssbsect_subj_code as subj_code,
         ssbsect_crse_numb as crse_numb,
         count(*) as link_lab
    from crse_list
   group by ssbsect_subj_code, ssbsect_crse_numb
)
SELECT /*csv*/
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_crn cd, 
  case
    when upper(trim(ssbsect_schd_code)) = 'LAB' and link_lab > 1 then ssbsect_subj_code||ssbsect_crse_numb||'L'
    else ssbsect_subj_code||ssbsect_crse_numb
  end as course,
  ssbsect_term_code term,
  ssbsect_camp_code campus,
  ssbsect_max_enrl seats_offered,
  CASE 
    WHEN ssbsect_max_enrl IS NOT NULL THEN 'F'
    ELSE 'T'
  END is_unlimited_seating,
  CASE
    WHEN spriden_last_name IS NULL THEN 'STAFF'
    ELSE spriden_last_name || ', ' || spriden_first_name
  END AS instructor_name,
  NVL(to_char(ssrmeet_start_date, 'YYYY-MM-DD'), '2000-01-01') class_start_dt,
  NVL(to_char(ssrmeet_end_date, 'YYYY-MM-DD'), '2000-01-02') class_end_dt,
  to_char(ssrmeet_start_date, 'YYYY-MM-DD') drop_start_dt,
  -- There is a bug that when this value is null it defaults to today's date.
  COALESCE(to_char(ssbsect_drop_cut_off_date, 'YYYY-MM-DD'),
           to_char(ssrmeet_start_date + 30, 'YYYY-MM-DD')) drop_end_dt,
  '' withdraw_end_dt, 
  CASE
    WHEN ssbsect_ssts_code = 'A'
     AND ssrmeet_start_date >= sysdate-150 THEN 'T'
    ELSE 'F'
  END is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
                              AND spriden_change_ind IS NULL
             LEFT JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                              AND ssbsect_term_code = ssrmeet_term_code
             left join link_lab_list on ssbsect_subj_code = subj_code
                                    and ssbsect_crse_numb = crse_numb 

union
-- Historical sections
select shrtckn_crn||'$$'||shrtckn_term_code as nk,
       shrtckn_crn as cd,
       shrtckn_subj_code||shrtckn_crse_numb as course,
       shrtckn_term_code as term,
       nvl(SHRTCKN_CAMP_CODE, 'XX') as campus,
       0 as seats_offered,
       'F' as is_unlimited_seating,
       'STAFF' as instructor_name,
       nvl(to_char(SHRTCKN_PTRM_START_DATE, 'YYYY-MM-DD'), SUBSTR(shrtckn_term_code,1,4)||'-01-01') as class_start_dt,
       nvl(to_char(SHRTCKN_PTRM_END_DATE, 'YYYY-MM-DD'), SUBSTR(shrtckn_term_code,1,4)||'-01-02') as class_start_dt,
       '' as drop_start_dt,
       '' as drop_end_dt,
       '' as withdraw_end_dt,
       'F' as is_active
  from shrtckn_list
 where shrtckn_subj_code||shrtckn_crse_numb in (select scbcrse_subj_code||scbcrse_crse_numb
                                                  from scbcrse
                                                 where scbcrse_csta_code = 'A')","Section"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.Subject","-- Fields: nk,name,is_active
-- Model Name: cat.Subject
-- Name: Subject
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get subject data from Banner  
WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  'T' AS is_active
FROM stvsubj
),

-- Assign default values
\\\""default\\\"" AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM subject
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""

-- Notes: => DATA examples nk = 'ABE', 'AG'
-- 					name = 'Adulet Basic Education', 'Agriculture'

-- Change log:
--				Developer:
--				Change version:
--				Description","Subjects"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.SectionTime","SELECT a.ssbsect_term_code || '$$' || a.ssbsect_crn || '$$'
       || COALESCE(b.Day_of_Week, '') || '$$'    
       || COALESCE(b.ssrmeet_begin_time, '') || '$$'
       || COALESCE(b.ssrmeet_end_time, '')         AS NK 
       , a.ssbsect_crn || '$$' || a.ssbsect_term_code     AS Section 
       , CASE b.Day_of_Week 
            WHEN 'U' THEN 1 
            WHEN 'M' THEN 2 
            WHEN 'T' THEN 3 
            WHEN 'W' THEN 4 
            WHEN 'R' THEN 5 
            WHEN 'F' THEN 6 
            WHEN 'S' THEN 7 
           ELSE 8 
          END                                    AS Day_of_Week 
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_begin_time,1,2) || ':' || SUBSTR(b.ssrmeet_begin_time,3,2) || ':00'  
            ELSE ''
          END                                    AS From_Tm
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_end_time,1,2)   || ':' || SUBSTR(b.ssrmeet_end_time,3,2) || ':00' 
            ELSE ''
          END                                    AS To_Tm
        , CASE WHEN b.SSRMEET_ROOM_CODE is not null and b.SSRMEET_BLDG_CODE is not null then b.SSRMEET_BLDG_CODE||'$$'||b.SSRMEET_ROOM_CODE
          when b.ssrmeet_room_code is null and b.ssrmeet_bldg_code is null then
            (select CASE WHEN c.SSRMEET_BLDG_CODE || c.SSRMEET_ROOM_CODE is null 
                    then 'EAB0'
                    when c.SSRMEET_ROOM_CODE is null and c.SSRMEET_BLDG_CODE is not null
                    then c.SSRMEET_BLDG_CODE
                    else c.SSRMEET_BLDG_CODE || '$$' || c.SSRMEET_ROOM_CODE
                    end
             from ssrmeet c 
              where c.ssrmeet_crn = ssbsect_crn and c.ssrmeet_term_code = ssbsect_term_code and rownum = 1)
          when SSRMEET_ROOM_CODE is null and SSRMEET_BLDG_CODE is not null then SSRMEET_BLDG_CODE 
          else 'EAB0' end as \\\""Location\\\""
, CASE WHEN a.SSBSECT_SSTS_CODE = 'A' THEN 'T' ELSE 'F' END AS IS_ACTIVE   
FROM ssbsect a 
LEFT OUTER JOIN ( SELECT ssrmeet_crn
                          , ssrmeet_term_code
                          , Day_of_Week
                          , ssrmeet_begin_time
                          , ssrmeet_end_time
                          , ssrmeet_bldg_code
                          , ssrmeet_room_code
                   FROM   ( SELECT ssrmeet_crn
                                   , ssrmeet_term_code
                                   , ssrmeet_begin_time
                                   , ssrmeet_end_time
                                   , ssrmeet_bldg_code
                                   , ssrmeet_room_code
                                   , ssrmeet_Sun_day
                                   , ssrmeet_Mon_day
                                   , ssrmeet_Tue_day
                                   , ssrmeet_Wed_day
                                   , ssrmeet_Thu_day
                                   , ssrmeet_Fri_day
                                   , ssrmeet_Sat_day 
                             FROM   ssrmeet) 
                  UNPIVOT(Day_of_week FOR sk IN (ssrmeet_sun_day
                                                 , ssrmeet_Mon_day
                                                 , ssrmeet_Tue_day
                                                 , ssrmeet_Wed_day
                                                 , ssrmeet_Thu_day
                                                 , ssrmeet_Fri_day
                                                 , ssrmeet_Sat_day))
                  WHERE  1=1 
                ) b ON b.ssrmeet_crn = a.ssbsect_crn 
                       AND b.ssrmeet_term_code = a.ssbsect_term_code 
WHERE 1=1 
   AND ssbsect_term_code > '201510' 
   and SSBSECT_CAMP_CODE = 'M' -- Need to confirm
   
ORDER BY 1 desc, 3, 4","Section Time"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Program","-- determine most recent term for each Program by finding the max term for each program in sobcurr
WITH maxEffectiveTerm AS (
  SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
    FROM sobcurr
   GROUP BY sobcurr_program
),

programCredits as (
  select smbpgen.smbpgen_program,
         smbpgen.smbpgen_term_code_eff,
         smbpgen.smbpgen_active_ind,
         nvl(smbpgen.smbpgen_req_credits_overall, 0.0) as credits
    from smbpgen join (select sMBPGEN_PROGRAM, max(smbpgen_term_code_eff) max_term
                         from smbpgen
                        where smbpgen_active_ind = 'Y'
                        group by sMBPGEN_PROGRAM) s on smbpgen.smbpgen_program = s.smbpgen_program
                                                   and smbpgen.smbpgen_term_code_eff = s.max_term
),

-- Collection of program descriptions
prog_desc as (
  select smrpcmt_program, listagg(smrpcmt_text, ' ') within group (order by smrpcmt_text_seqno asc) smrpcmt_text -- within group (order by smrpcmt_prnt_code asc) as smrpcmt_text
    from smrpcmt s1 join (select s2.smrpcmt_program as prgm, max(s2.smrpcmt_term_code_eff) as term
                            from smrpcmt s2 group by s2.smrpcmt_program) mx on s1.smrpcmt_term_code_eff = Mx.term
                                                                           and s1.smrpcmt_program = Mx.Prgm
   where --smrpcmt_prnt_code is not null
      smrpcmt_text is not null
   group by smrpcmt_program
   order by smrpcmt_program
),

-- extract program data from Banner
program AS (
  SELECT DISTINCT
      sobcurr_program || '$$' || stvterm_acyr_code AS nk,
      sobcurr_program AS cd,
      TO_NUMBER(stvterm_acyr_code) AS cat_yr,
       smrprle_program_desc		  	AS \\\""name\\\"",
      replace(replace(coalesce(smrpcmt_text, smrprle_program_desc, 'None'),chr(10)),chr(13)) AS \\\""desc\\\"",
      NVL(credits, 0.0) AS CREDITS, -- confirm degree code to credits conversion with BA/Member. This logic may differ for different colleges and will need to be adjusted accordingly.
      '' AS enrollment_notes,
      '' AS registration_notes,
       -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' --- instead of underscores '_' Confirm with BA/Memeber.
      sobcurr_program AS area_of_study,
      '' AS concentration,
      sobcurr_degc_code AS \\\""credential\\\"",
      DECODE (stvmajr_cipc_code,
              null,
              null,
              SUBSTR(stvmajr_cipc_code,1,2)||'.'||SUBSTR(stvmajr_cipc_code,3)) AS cip,
      CASE
        WHEN sobcurr_degc_code IN ('AA','AS') THEN 'T'
        ELSE 'F'
      END AS is_transfer, -- Confirm with BA
      CASE
        WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T'
        ELSE 'F'
      END AS is_active
    FROM sobcurr LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
                 LEFT JOIN smrprle ON smrprle_program = sobcurr_program
                 LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
                 LEFT JOIN stvmajr ON stvmajr_code = sobcurr_program --(SUBSTR(sobcurr_program,1,CAST(INSTR(sobcurr_program,'_') AS NUMBER)-1))   -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_'. Confirm with BA/Memeber. Should match with area_of_study in SELECT portion of query.
                 LEFT JOIN programCredits ON sobcurr_program = smbpgen_program
                 LEFT JOIN prog_desc on sobcurr_program = smrpcmt_program
   where  smbpgen_term_code_eff >= '201212' -- per Bruce
    and  smbpgen_active_ind = 'Y' -- per Bruce
)

-- Wrapper query
SELECT * FROM program
","Programs"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.SectionTime","WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE null
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
        --WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NULL
        --  THEN ssrmeet_room_code
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'A' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                              AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code) -- Lookup day of week code
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. We do not need to extract sections times for past terms as section times are used for students to build their schedule.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM sectionTime","SectionTime"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.seatsavail","with section_pop as ( --this is to make sure the sections we select are in line with sections in the Section file.

select section.crse_id || '$$' 
                            || section.strm || '$$' 
                            || section.CLASS_SECTION as nk
from PS_CLASS_TBL section
where 1=1
  and section.institution = 'DC279'
  and section.start_dt > sysdate-365 
),

location_pop as (
select
distinct a.facility_id as nk,
b.location

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('MAIN')
and a.setid = 'DC279'
and a.effdt = (select max(c.effdt) 
                from ps_facility_tbl c 
                where a.facility_id = c.facility_id 
                and a.setid = c.setid) 
),

dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'DC279'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

),

course_pop as (

SELECT o.CRSE_ID
FROM PS_CRSE_OFFER o
WHERE o.EFFDT = (SELECT MAX(EFFDT)
                FROM   PS_CRSE_OFFER
                WHERE  o.CRSE_ID = CRSE_ID)
and o.INSTITUTION = 'DC279'
--and o.acad_career = 'CRED'
--and o.acad_org <> 'LCREDIT'
--and o.crse_offer_nbr <> '1'
and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))

)

select distinct section.crse_id || '$$' || section.strm || '$$' || section.session_code || '$$'
                || dates.date_diff || '$$' || section.CLASS_SECTION as nk

, section.ENRL_CAP - section.ENRL_TOT as seats_avail
, 'T' as is_active
from PS_CLASS_TBL section
left join PS_CLASS_MTG_PAT meetings on section.strm = meetings.strm
                  and section.session_code = meetings.session_code
                  and section.class_section = meetings.class_section
                  and section.crse_offer_nbr = meetings.crse_offer_nbr
                  and section.crse_id = meetings.crse_id
left join dates on section.strm = dates.strm --added dates for nk link
          and section.session_code = dates.session_code
where 1=1 
and section.institution = 'DC279' --member specific
and section.start_dt > sysdate-365 --designed to limit the sections to only relevant ones in the present and future
and section.crse_id || '$$' || section.strm || '$$' || section.class_section in (select * from section_pop) --population
and meetings.facility_id in (select nk from location_pop)
and section.crse_id in (select * from course_pop)","SeatsAvail"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"core.student","WITH pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW')
      and sfrstcr_term_code in (
      Select Term From (           
                Select Stvterm_Code Term From Stvterm 
                Where Stvterm_Code <= (
                      Select min(Stvterm_Code) From Stvterm 
                      where sysdate <= stvterm_start_date
                      And Stvterm_Desc Not Like '%Non-Credit' 
                      And Stvterm_Desc Not Like 'Parson%')
                And Stvterm_Desc Not Like '%Non-Credit' 
                And Stvterm_Desc Not Like 'Parson%'
                And Rownum < 5
                Order By 1 Desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      Select Term From (           
                Select Stvterm_Code Term From Stvterm 
                Where Stvterm_Code <= (
                      Select min(Stvterm_Code) From Stvterm 
                      where sysdate <= stvterm_start_date
                      And Stvterm_Desc Not Like '%Non-Credit' 
                      And Stvterm_Desc Not Like 'Parson%')
                And Stvterm_Desc Not Like '%Non-Credit' 
                And Stvterm_Desc Not Like 'Parson%'
                And Rownum < 5
                Order By 1 Desc)
))))

SELECT DISTINCT
  spriden_id nk,
  spriden_id username,
  lower(spriden_id) || '@students.snead.edu' email,
  spriden_first_name first_name,
  spriden_last_name last_name,
  NVL(to_char(spbpers_birth_date,'YYYY-MM-DD'),'2000-01-01') birthdate,
  'N' as veteran_ind,
  SGBSTDN_STYP_CODE as Enrollment_status,
  CASE 
    WHEN EXISTS (
                  SELECT 1
                  FROM sgbstdn
                  -- WHERE sgbstdn_program_1 IN ('AA_LAR_LART', 'APP_NUR_NURA', 'AS_BUS_BADM', 'AA_SOC_PSYC', 'AS_HSC_PRNU', 'AAS_NUR_NURS', 'AS_PRE_PPMD', 'AA_EDU_EDUC', 'AAS_BUS_BUSN', 'AS_SCI_BIOL', 'AS_EGR_ENMC', 'AA_SOC_CRJT', 'AS_BUS_ACCT', 'AS_EGR_ENGR', 'AS_PPH_PPHM', 'APP_RAD_RADA', 'APP_DHG_DHYA', 'AA_ART_ART', 'AS_BUS_MGMT', 'AA_MUS_MUSC', 'AAS_PTA_PTHA', 'APP_PTA_PTAA', 'AA_COM_ENGL', 'AS_HSV_HSSW', 'AA_SOC_HIST', 'AAS_CHD_CDED', 'AS_PRE_PPVM', 'AS_CHD_ECEO', 'AA_SOC_SOCI', 'AAS_IND_INTD', 'AS_PRE_PPDE', 'AA_SOC_POSC', 'APP_VET_VETA', 'AAS_AVS_AVPP', 'AS_EGR_ENEE', 'AS_SCI_CHEM', 'AAS_CIS_CSPR', 'AA_LAN_SPAN', 'AAS_BUS_BADC', 'AAS_HR_HRES', 'AAS_DGM_DMSP', 'APP_OTA_OTAA', 'CER_CHD_CDCM', 'AS_MTH_MATH', 'AS_BUS_MIS', 'AA_SOC_PLGL', 'AAS_ACC_ACAS', 'AS_CHD_ECEN', 'AAS_VET_VETT', 'AA_COM_INED')
               ) THEN 'T'   -- The above can be replaced to use the batch configuration 
                              -- parameter file instead of listing each program in the query
                              -- itself. Will need to find a list of programs that quality the students
                              -- as being active. Defaulting to the entire program list. Will be determined via the pilot cohort.
    ElSE 'F' 
  END is_active
FROM spriden RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm
              LEFT JOIN goremal ON spriden_pidm = goremal_pidm
              LEFT JOIN sgbstdn ON spriden_pidm = sgbstdn_pidm
Where Spriden_Change_Ind Is Null 

  And Spriden_Entity_Ind = 'P' -- Indicates that the row is a person. 'C' indicates a non-person such as a location.

  And Spriden_Pidm In (Select * From Pop)","student"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"inst.Campus","-- Fields: nk,name,is_online,is_active
-- Model Name: inst.Campus
-- Name: Campus
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get campus data from Banner 
WITH campus AS (
SELECT DISTINCT stvcamp_code nk
                , stvcamp_desc \\\""name\\\""
   /*, CASE WHEN stvcamp_code = 'O' -- Logic to identify online campuses. Confirm with BA.
                			THEN 'T'
                			ELSE 'F' END is_online*/
                , 'F' is_online		
                ,  CASE WHEN stvcamp_code = 'G'
                		THEN 'T'
                		ELSE 'F' END is_active
FROM stvcamp
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
UNION 
SELECT 'ONLINE' nk
       , 'Online' \\\""name\\\""
       , 'T' is_online
       , 'T' is_active
FROM dual      
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM campus
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Campus"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.CourseType","-- Fields: nk,name,is_active
-- Model Name: cat.CourseType
-- Name: Course Type
-- Output: Course_Type_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get courseType data from Banner  
WITH courseType AS (
SELECT 
  stvschd_code nk,
  stvschd_desc \\\""name\\\"",
  'T' is_active
FROM stvschd
),

-- Assign default values
\\\""default\\\"" AS (
Select 
'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM courseType
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Course Type"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"catcc.TestSubject","-- extract test subjects and scores from Banner
WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
          THEN TO_NUMBER(stvtesc_max_value) || '.00'
          ELSE stvtesc_max_value
          END AS max_score -- test for decimal point and convert to decimal
  , 'T' AS is_active
FROM stvtesc
WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')  -- filter out any non digits
)

-- wrapper query
SELECT * FROM testSubjects","Test Subjects"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"core.Student","-- Get the term from 1 year ago this term
with cutoffterm as (
  select to_char(to_number(stvterm_code) - 100)
    from stvterm
   where stvterm_end_date >= sysdate                                         
     and substr(stvterm_code, -1, 1) = '0'
     and rownum = 1
     order by stvterm_code asc
),
-- Get a range of for-credit terms starting from one year ago
term_list as (
  select distinct stvterm_code as term_code
    from stvterm
   where substr(stvterm_code, -1, 1) = '0'
     AND stvterm_code >= (select * from cutoffterm)
),
-- Get PIDM's of accepted applicants within the range of terms
app_list as (
  select sarappd_pidm as pidm
    from sarappd inner join stvapdc on stvapdc_code = sarappd_apdc_code
                                   and stvapdc_stdn_acc_ind = 'Y'
   where sarappd_term_code_entry in (select * from term_list)
),
-- Get PIDM's of all enrolled students within the range of term
enr_list as (
  select sfrstcr_pidm as pidm
    from sfrstcr
   where sfrstcr_term_code in (select * from term_list)
),
-- Use union to filter out duplicates
pop as (
  select pidm from app_list
  union
  select pidm from enr_list
)
-- The main query goes here
select spriden_id nk,
       spriden_id username,
       coalesce(( 
        select goremal_email_address 
        from goremal
        where goremal_pidm = spriden_pidm 
        and goremal_email_address like '%mycom.marin.edu'
        and goremal_status_ind = 'A'
        and rownum = 1),
       lower(spriden_id) || '@missingemail.org') email,
       spriden_first_name first_name,
       spriden_last_name last_name,
       nvl(to_char(spbpers_birth_date,'YYYY-MM-DD'),'2000-01-01') birthdate,
'T' as is_active
  from spriden
  join spbpers on spriden_pidm = spbpers_pidm
 where spriden_change_ind is null
 and spriden_pidm in (select * from pop)","Student"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"core.Student","-- Fields  nk,username,email,first_name,last_name,birthdate,is_active
-- Model Name  core.Student
-- Name  Student
-- Output  Student_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT stvterm_code
                      FROM stvterm
                        WHERE stvterm_start_date < sysdate
                        AND stvterm_end_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , spriden_id AS username
  , TRIM(COALESCE(
                (SELECT goremal_email_address FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'GC' -- try to get campus email. Confirm goremal_emal_code with BA/Member.
                )
                , (SELECT goremal_email_address FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'PE' -- try to get Personal email. Confirm goremal_emal_code with BA/Member.
                  )
                , (SELECT goremal_email_address FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N' AND goremal_emal_code = 'GC' -- try to get campus email even if goremal_preferred_ind set to 'N'. Confirm goremal_emal_code with BA/Member.
                  )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student
","Students"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.Section","WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , NVL(stvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt 
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt 
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt 
  , CASE WHEN ssbsect_ssts_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active 
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Section"
835,"Whitehurst College",5336,"",47854,"Student Success Collaborative:Whitehurst College",22694,"Student Success Collaborative",2,"","select batch_id from batch_template limit 1","Simple Query Transaction"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"core.studentxstudentcategory","WITH pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW')
      and sfrstcr_term_code in (
      Select Term From (           
                Select Stvterm_Code Term From Stvterm 
                Where Stvterm_Code < (
                      Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      And Stvterm_Desc Not Like '%Non-Credit' 
                      And Stvterm_Desc Not Like 'Parson%')
                And Stvterm_Desc Not Like '%Non-Credit' 
                And Stvterm_Desc Not Like 'Parson%'
                And Rownum < 5
                Order By 1 Desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      Select Term From (           
                Select Stvterm_Code Term From Stvterm 
                Where Stvterm_Code < (
                      Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      And Stvterm_Desc Not Like '%Non-Credit' 
                      And Stvterm_Desc Not Like 'Parson%')
                And Stvterm_Desc Not Like '%Non-Credit' 
                And Stvterm_Desc Not Like 'Parson%'
                And Rownum < 5
                Order By 1 Desc)
))))


Select spriden_id || '$$' || Sprmedi_medi_Code As Nk
, Spriden_Id As Student
, Sprmedi_medi_Code As \\\""Category\\\""
, 'T' As Is_Active
From Sprmedi
  Left Join Spriden
  On Spriden_Pidm = Sprmedi_Pidm
Where 1=1
And Spriden_Pidm In (Select pidm From Pop)
and Sprmedi_medi_Code is not null
Union

Select spriden_id || '$$' || SPRMEDI_DISA_CODE As Nk
, Spriden_Id As Student
, Sprmedi_Disa_Code As \\\""Category\\\""
, 'T' As Is_Active
From Sprmedi
  Left Join Spriden
  on spriden_pidm = sprmedi_pidm
Where 1=1
And Spriden_Pidm In (Select pidm From pop)
and Sprmedi_Disa_Code is not null","StudentXStudentCategory"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.EnrollmentApplication","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                        and (stvterm_code like '%10' 
                              or stvterm_code like '%20' 
                              --or stvterm_code like '%30'
                            )
                      )
AND ROWNUM < 5
ORDER BY 1 DESC
),
 
 
POP AS (
	select distinct studentPidm from (
	  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
	  FROM sfrstcr  
		JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
	 
	  WHERE 1=1
		AND sfrstcr_rsts_code IN ('RE','RW')
		
	  UNION
	 
	  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
	  FROM saradap
		JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
	  WHERE 1=1) current_and_applicants
	 
	inner join (
	 
	  select distinct sorlcur_pidm pidm
	  from sorlcur tbl
	  where 1=1
	  and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
	  and sorlcur_cact_code = 'ACTIVE'
	  and sorlcur_term_code_end is null
	  and sorlcur_camp_code = 'NCC'
	  and sorlcur_priority_no = (select min(sorlcur_priority_no)
								 from sorlcur
								 where sorlcur_camp_code = tbl.sorlcur_camp_code
								 and sorlcur_lmod_code = tbl.sorlcur_lmod_code
								 and sorlcur_cact_code = tbl.sorlcur_cact_code
								 and sorlcur_term_code_end is null
								 and sorlcur_pidm = tbl.sorlcur_pidm
								 and sorlcur_term_code in (select stvterm_code from getLastXTerms)
	 
								)
	  and sorlcur_term_code = (select max(sorlcur_term_code)
								from sorlcur
								 where sorlcur_camp_code = tbl.sorlcur_camp_code
								 and sorlcur_lmod_code = tbl.sorlcur_lmod_code
								 and sorlcur_cact_code = tbl.sorlcur_cact_code
								 and sorlcur_term_code_end is null
								 and sorlcur_pidm = tbl.sorlcur_pidm
								 and sorlcur_term_code in (select stvterm_code from getLastXTerms)
								 )
	) on pidm = studentpidm
),

-- Get student population for only current and future terms from application table
studentPopulation AS (
select  saradap_pidm AS pidm,
        saradap_term_code_entry AS term,
        saradap_appl_no AS appl_no
from saradap
join pop on saradap_pidm = pop.studentPidm
where saradap_term_code_entry in 
      (        
      select term from (           
          Select Stvterm_Code Term -- Get current term and all future terms
          FROM STVTERM
          Where STVTERM_CODE >= (
                      
                      SELECT MAX(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date < sysdate
                                )
                      )
      )
),

-- Get the most recent term and most recent application number for each student
studentMaxTerm AS (
SELECT pidm AS pidm
  , MAX(term) AS maxTerm
  , MAX (appl_no) AS maxApplNo
FROM studentPopulation
  GROUP BY pidm
),

-- get student emails
email_list as (
  select goremal_pidm as pidm,
     coalesce(( 
                select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'SE'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'SE'
              and goremal_preferred_ind = 'N'
              ),
            (select goremal_email_address
                from goremal
                where goremal_pidm = spriden_pidm
                and goremal_emal_code = 'E'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and goremal_email_address like '%@ccsnh.edu%'
              ),
               lower(spriden_id) || '@missingemail.org') email
    from goremal g join spriden on spriden_pidm = g.goremal_pidm and spriden_change_ind is null
),

enrollmentApplication as (
select DISTINCT spriden_id as nk,
       spriden_id as student,
       studentMaxTerm.maxTerm as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       TRIM(email_list.email) as personal_email,
       case
        when saradap_term_code_entry is not null then 'T'
        else 'F'
       end as is_active
  from saradap
    join studentMaxTerm on saradap_pidm = studentMaxTerm.pidm
                              and saradap_term_code_entry = studentMaxTerm.maxTerm
                              and saradap_appl_no = studentMaxTerm.maxApplNo
    join spriden on saradap_pidm = spriden_pidm
    left join email_list on saradap_pidm = email_list.pidm
  where spriden_change_ind is NULL
    and spriden_entity_ind = 'P'
)

select  *
  from enrollmentApplication
","cat.EnrollmentApplication"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.SectionTime","-- Unpivot day of week from ssrmeet into a single column. ssrmeet stores data for each day of the week in separate columns. In naviagate, we store this data in a single column as day_of_week.
WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
        --WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NULL
        --  THEN ssrmeet_room_code
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'A' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                              AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code) -- Lookup day of week code
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. We do not need to extract sections times for past terms as section times are used for students to build their schedule.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM sectionTime","Section Times"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.section","--must add session code here
with instructor as (
select a.crse_id, a.class_section, a.strm, a.session_code, a.emplid, a.instr_role,a.crse_offer_nbr,b.name 
from PS_CLASS_INSTR a
left join PS_PERSONAL_DATA b
on a.emplid = b.emplid
where 1=1
and INSTR_ROLE = 'PI'
--and a.class_section = '001M'
--and a.crse_id = '245006'
--and a.strm = '2154'
),

location_pop as (
select
distinct a.facility_id as nk

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('HT','MAIN')
and a.setid = 'TN293'
and a.effdt = (select max(c.effdt) 
                from ps_facility_tbl c 
                where a.facility_id = c.facility_id 
                and a.setid = c.setid) 
),
dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'TN293'
and acad_career = 'CRED'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

),

course_bank as (

select course_cd,
sum(institution_count) as inst
from (
      SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','') as course_cd,
      case when c.institution = 'TN293' then '1' else '0' end as institution_count
      from (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.acad_career = 'CRED'
                    --and o.acad_org <> 'LCREDIT'
                    and o.crse_offer_nbr <> 1
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
                    ) C
        )
group by course_cd

),

notes as (
select  a.CRSE_ID,
a.CRSE_OFFER_NBR,
a.STRM,
a.SESSION_CODE,
a.CLASS_SECTION,
a.CLASS_NOTES_SEQ,
a.CLASS_NOTE_NBR,
a.DESCRLONG as DESCR_1,
b.DESCR as DESCR_2,
b.DESCRLONG as DESCR_3
from PS_CLASS_NOTES a
left join PS_CLASS_NOTES_TBL b
  on a.class_note_nbr = b.class_note_nbr
where 1=1
  and b.institution = 'TN293'
  and b.effdt = (select max(effdt) from PS_CLASS_NOTES_TBL c where b.class_note_nbr = c.class_note_nbr)
--order by 1,3,4,6
)

select distinct section.crse_id || '$$' 
                || section.strm || '$$' 
                || section.session_code || '$$'
                || dates.date_diff || '$$'
                || section.CLASS_SECTION as nk
, section.CLASS_NBR || ' - ' || section.CLASS_SECTION || ' - ' || weeks_of_instruct || 'W' as cd
, REPLACE(section.SUBJECT, ' ','') || REPLACE(section.CATALOG_NBR, ' ','') as COURSE
, section.strm as TERM
--, case when section.session_code = '1' then section.strm
--  else section.strm || '-' || section.session_code end as TERM
, case when section.instruction_mode = 'HY' 
        then 'ONL-P'
        when section.instruction_mode = 'WW'
        then 'ONL'
        else section.CAMPUS 
  end as CAMPUS
, section.enrl_cap as seats_offered
, case when section.enrl_cap in ('0') then 'Y'
else 'N' end as is_unlimited_seating
, nvl(instructor.name, 'TBD') as instructor_name
, to_char(section.start_dt,'YYYY-MM-DD') as class_start_date
, to_char(section.end_dt,'YYYY-MM-DD') as class_end_date
, to_char(dates.FIRST_ENRL_DT,'YYYY-MM-DD') as drop_start_date
, to_char(dates.sixty_PCT_DT,'YYYY-MM-DD') as drop_end_date
, to_char(dates.last_wait_dt,'YYYY-MM-DD') as withdraw_end_dt
, coalesce(cast(notes.notes.DESCR_1 as varchar2(1000)),notes.DESCR_2,cast(notes.DESCR_3 as varchar2(1000))) as note
, CASE WHEN CLASS_STAT = 'A'  and meetings.facility_id in (select * from location_pop)
then 'T'
else 'F' end as is_active
from PS_CLASS_TBL section
left join PS_CLASS_MTG_PAT meetings on section.strm = meetings.strm
                  and section.session_code = meetings.session_code
                  and section.class_section = meetings.class_section
                  and section.crse_offer_nbr = meetings.crse_offer_nbr
                  and section.crse_id = meetings.crse_id
left join instructor on section.crse_id = instructor.crse_id 
          and section.strm = instructor.strm 
          and section.session_code = instructor.session_code
          and section.class_section = instructor.class_section
          and section.crse_offer_nbr = instructor.crse_offer_nbr
left join dates on section.strm = dates.strm
               and section.session_code = dates.session_code
left join notes on section.strm = notes.strm
                  and section.session_code = notes.session_code
                  and section.class_section = notes.class_section
                  and section.crse_offer_nbr = notes.crse_offer_nbr
                  and section.crse_id = notes.crse_id
inner join (
        SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION 
                FROM PS_CRSE_OFFER o
                WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.INSTITUTION = 'TN293'
                    and o.acad_career = 'CRED'
                and o.acad_org = 'SCREDIT'
                --and o.crse_offer_nbr <> '1'
                and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
) course on section.crse_id = course.crse_id

where 1=1
--and notes.DESCR_2 is not null
and section.institution = 'TN293' --member specific
and section.start_dt > sysdate-365 --designed to limit the sections to only relevant ones in the present and future","Section"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"core.Student","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE SUBSTR(stvterm_code, 1, 5) <= (SELECT MIN(SUBSTR(stvterm_code, 1, 5))
                                     FROM stvterm
                                     WHERE stvterm_start_date > sysdate)
AND ROWNUM < 25
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , NVL(CCCD_EAB_THIRD_PARTY_ID.USERID, spriden_id) as username
  , TRIM(COALESCE(
                (SELECT goremal_email_address FROM CCCD_EAB_EMAIL
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'CCCD' AND rownum < 2 -- try to get campus email. Confirm goremal_emal_code with BA/Member.
                )
                , (SELECT goremal_email_address FROM CCCD_EAB_EMAIL
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'HOME' AND rownum < 2 -- try to get Personal email. Confirm goremal_emal_code with BA/Member.
                  )
                , (SELECT goremal_email_address FROM CCCD_EAB_EMAIL
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N' AND goremal_emal_code = 'CCCD' AND rownum < 2 -- try to get campus email even if goremal_preferred_ind set to 'N'. Confirm goremal_emal_code with BA/Member.
                  )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM CCCD_EAB_GENERAL_PERSON -- Custom view at Coastline since no access to SPRIDEN
  LEFT JOIN CCCD_EAB_THIRD_PARTY_ID on spriden_pidm = person_uid -- Custom view to get usernames at Coastline. Not all spriden_pidm's may exist in this view
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  -- LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm -- Not needed at Coastline as SPBPERS columns already included in above view
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student","Students"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.Section","with cur_term as (
  SELECT stvterm_code
    FROM stvterm
   WHERE UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     AND STVTERM_CODE not in ('000000', '900000', '999999')
   ORDER BY 1
),
sect_desc as (
  select SSRTEXT_TERM_CODE,
         ssrtext_crn,
         listagg(ssrtext_text, ' ') within group (order by SSRTEXT_SEQNO asc) as text
    from ssrtext
   where SSRTEXT_VERSION <> 0
   group by SSRTEXT_TERM_CODE, ssrtext_crn
),
sect_extract as (
  SELECT 
    ssbsect_crn || '$$' || ssbsect_term_code nk,
    ssbsect_crn cd, 
    ssbsect_subj_code || ssbsect_crse_numb course,
    ssbsect_term_code term,
    ssbsect_camp_code campus,
    ssbsect_max_enrl seats_offered,
    SSBSECT_WAIT_CAPACITY waitlist_capacity,
    CASE 
      WHEN ssbsect_max_enrl IS NOT NULL THEN 'N'
      ELSE 'Y'
    END is_unlimited_seating,
    CASE
      WHEN spriden_last_name IS NULL THEN 'TBD'
      ELSE spriden_last_name || ', ' || spriden_first_name
    END AS instructor_name,
    NVL(to_char(ssrmeet_start_date, 'YYYY-MM-DD'), '2000-01-01') class_start_dt,
    NVL(to_char(ssrmeet_end_date, 'YYYY-MM-DD'), '2000-01-02') class_end_dt,
    to_char(ssrmeet_start_date, 'YYYY-MM-DD') drop_start_dt,
    -- There is a bug that when this value is null it defaults to today's date.
    COALESCE(to_char(ssbsect_drop_cut_off_date, 'YYYY-MM-DD'), to_char(ssbacrl_drop_cut_off_date, 'YYYY-MM-DD'), to_char(ssrmeet_start_date + 30, 'YYYY-MM-DD')) drop_end_dt, 
    trim(sect_desc.text) as note,
    CASE
      WHEN ssbsect_ssts_code = 'A' AND ssrmeet_start_date > (sysdate - 184) THEN 'T'
      ELSE 'F'
    END is_active
  FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                                AND ssbsect_crn = sirasgn_crn
               LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
               LEFT JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                                AND ssbsect_term_code = ssrmeet_term_code 
               LEFT JOIN ssbacrl ON ssbsect_term_code = ssbacrl_term_code
               left join sect_desc on ssbsect_term_code = sect_desc.ssrtext_term_code
                                  and ssbsect_crn = sect_desc.ssrtext_crn
  WHERE spriden_change_ind IS NULL 
    AND sirasgn_primary_ind = 'Y'
    AND ssbsect_term_code in (select * from cur_term)
)
select * from sect_extract where note is not null","Section"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.Program","with prgm_desc as (
  select 'PCADMJST' as program, 'The Associate in Science in Administration of Justice for Transfer degree (As-T) prepares students for transfer primarily to a California State University in a similar major with guaranteed junior standing and priority admission to pursue a Bachelor''s Degree in Administration of Justice. The Associate in Science in Administration of Justice for Transfer is designed to prepare students to continue studies toward a B.A. or B.S. degree in Administration of Justice or for entry-level into a variety of career options. Students who pursue an Administration of Justice degree enjoy a wealth of career options including law enforcement, probation, and parole. They work in multiple specialty areas including detectives, S.W.A.T., narcotics, K-9 handler and motors office' as description from dual union
  select 'PCAGRIAA' as program, 'The Agriculture major is designed for students who are seeking an Associate''s Degree as terminal academic goal or who plan to transfer to a four-year college or university.  The courses in the program represent the normal core undergraduate requirements to transfer to the CSU system. Upon transferring and graduating examples of career options include, but are not limited to, Agriculture Business and Agriculture Production areas.' as description from dual union
  select 'PCARTSAT' as program, 'This Associate in Arts in Studio Art for Transfer degree is designed to prepare students for transfer to a four-year university to continue their studies toward earning a B.A. in Art or Studio Art. The students who achieve this Studio Art AA-T degree will have the skills necessary to create many kinds of 2-D and 3-D art projects. They will be trained to use visual media to generate ideas, solve visual problems, and enhance perception and to think and respond critically to visual information in their lives. They will be able to identify and describe the historical and cultural contexts of works of art in order to evaluate the relationship between works of art and their time and culture. They will also be able to assess the role of the visual arts in contemporary culture as a vehicle of human expression in order to evaluate and value that creative impulse in their own lives' as description from dual union
  select 'PCBADMST' as program, 'The Associate in Science in Business Administration for Transfer is designed to prepare students to continue studies toward a B.A. or B.S. degree in Business Administration or for entry-level into a variety of career options. Students who pursue a Business Administration degree enjoy a wealth of career options ranging business, industry, teaching, research, and agriculture. They work in multiple specialty areas including: accounting, finance, marketing, management, human resources, logistics, and information systems.' as description from dual union
  select 'PCBUSIAA' as program, 'Porterville College''s two-year Business degree prepares a student to work in an exciting and growing field. The Business program is a great opportunity for people who enjoy performing a variety of tasks and working as part of a team. Successful graduates are in great demand and enjoy health and life insurance, excellent working conditions and other fringe benefits such as modern offices. Graduates have a wide range of career options including: business, industry, research, and agriculture. They work in multiple-specialty areas including: accounting, finance, marketing, management, human resources, logistics, and information systems.' as description from dual union
  select 'PCCHDVAA' as program, 'The Associate of Arts degree in Child Development prepares students to work with children from birth to adolescent.  The program provides a well-sequenced experience to prepare students for careers as Early Childhood Educators.' as description from dual union
  select 'PCCMRTAA' as program, 'The Commercial Art Associate in Arts Degree will prepare students to work in the fields of graphic arts and illustration. Students will learn how to do design layouts in advertising, print, and digital media and will learn to produce illustrations with commercial applications, such as for books and graphic novels, magazines and the web and for advertising, editorial, and technical purposes. The degree also prepares students for transfer to a four year university to continue their studies toward earning a B.A. in Commercial Art., Graphic Design, or Illustration.' as description from dual union
  select 'PCCMSTAT' as program, 'The Associate in Arts in Communication Studies for Transfer program is designed to prepare students to continue studies toward a B.A. degree in Communication Studies or for entry level into a variety of career options that require competent and ethical communication skills. Students who pursue advanced Communication degrees enjoy a wealth of career options ranging from Public Relations Officer, Human Resources Managers, Retail Managers, Politician, Lawyers, College Professors, and numerous options in Mass Communications such as radio and television. Communication courses focus on how people use messages to generate meaning within and across various contexts, cultures, and channels.' as description from dual union
  select 'PCCOMMAT' as program, 'PC Communication AA-T-CSU' as description from dual union
  select 'PCENGLAA' as program, 'The Associate of Arts degree in English is dedicated to teaching students to reach an optimum level of performance in writing.  The program is dedicated to teaching students to reach university-level standards in reading, writing, and thinking.' as description from dual union
  select 'PCENGLAT' as program, 'The Associate in Arts in English for Transfer is designed for students planning to transfer to the California State University or other institutions to continue studies toward a Bachelor in Arts in English or for other programs that require a foundation of close textual reading, effective writing, and critical thinking. Students will explore literature from a variety of critical perspectives and will apply their understanding of history, sociology, and philosophy and other areas of study to written and spoken language, particularly texts of artistic and social value. English majors will gain a variety of critical reading, writing, and thinking skills that foster a broad understanding of culture, history, and diversity as well as a sense of the ways reading and writing have changed over time.' as description from dual union
  select 'PCHISTAT' as program, 'The Associate in Arts in History for Transfer degree is designed for students planning to transfer to the California State University or other institutions to continue studies toward a B.A. in History or for other programs that require an introductory foundation of the knowledge and skills to interpret and build understanding of our political, economic, and social past. Students who pursue History degrees at transfer institutions establish a foundation for careers in education, law, politics, information management, business, travel, government, and journalism. Additionally, History students also find success in museum, library, and archival.' as description from dual union
  select 'PCINFOAA' as program, 'The Information Systems Program is designed for students who are pursuing a career in the computer and information technology field. The Program offers both a certificate and an Associate Degree as well as prepares students for transferring to four-year institutions. Careers are available in data communications and networking, computer software engineering, database administration, computer systems analysis and design.' as description from dual union
  select 'PCISSCAA' as program, 'The Associate of Arts degree in Biological and Physical Science is suggested for students planning entry into an allied health program or a career in the sciences.' as description from dual union
  select 'PCISSCAS' as program, 'The Associate in Science degree in Biological and Physical Science is suggested for students who plan to continue their studies in the sciences at a four-year university with a goal of obtaining a bachelor''s or higher degree in the sciences or a medical related field.' as description from dual union
  select 'PCLAAHAA' as program, 'The Associate Degree in Liberal Arts is designed for students who wish to have a broad knowledge of liberal arts and sciences plus additional coursework in an area of emphasis. This area of emphasis would be an ideal choice for students who plan to transfer to the California State University (CSU) or University of California (UC). Students can satisfy general education requirements plus focus on transferable course work that relate to majors at these institutions. Please consult with a counselor for information regarding your intended major at the specific college or university of your choice.' as description from dual union
  select 'PCLADNAS' as program, 'The purpose of the Porterville College LVN to Associate Degree Program is to provide the foundation for students to be become competent registered nurses. The program is to provide a positive, innovative model that fosters development of critical thinking and problem solving skills so that students are equipped to deliver care to diverse populations in a variety of health care settings. LVN to RN nursing education prepares the graduate to provide services to those who needhealthcare. Nursing is an art and science incorporating knowledge from the behavioral, biological and physical sciences. Nursing embodies a holistic concept of health in which the physical,psychological, intellectual, social and spiritual aspects of human functioning are interrelated,interdependent, and of equal importance. The LVN to ADN Degree program is for students already possessing a LVN license, nursing prerequisites, IV certification and experience as an LVN that allows advanced placement in the ADN program. ADN coursework is completed over two semesters. The successful RN may begin employment in a wide variety of entry level positions. The role of anew graduate is usually that of a staff nurse. With additional education, a nurse may advance to a position of supervisor, administrator, clinical specialist, educator, or researcher. Upon successful completion of the LVN to ADN Degree program, graduates are eligible to take the National Council Licensure Examination for licensure as a Registered Nurse in the State of California.' as description from dual union
  select 'PCLAMSAA' as program, 'The Associate Degree in Liberal Arts is designed for students who wish to have a broad knowledge of liberal arts and sciences plus additional coursework in an area of emphasis. This area of emphasis would be an ideal choice for students who plan to transfer to the California State University (CSU) or University of California (UC). Students can satisfy general education requirements plus focus on transferable course work that relate to majors at these institutions. Please consult with a counselor for information regarding your intended major at the specific college or university of your choice.' as description from dual union
  select 'PCLASBAA' as program, 'The Associate Degree in Liberal Arts is designed for students who wish to have a broad knowledge of liberal arts and sciences plus additional coursework in an area of emphasis. This area of emphasis would be an ideal choice for students who plan to transfer to the California State University (CSU) or University of California (UC). Students can satisfy general education requirements plus focus on transferable course work that relate to majors at these institutions. Please consult with a counselor for information regarding your intended major at the specific college or university of your choice.' as description from dual union
  select 'PCMATHST' as program, 'The Associate in Science in Mathematics for Transfer is designed to prepare students to continue studies toward a B.A. or B.S. degree in Mathematics or for entry-level into a variety of career options. Students who pursue a Mathematics degree enjoy a wealth of career options ranging from Business, Engineering, Computer Science, Education, the Sciences and the many others.' as description from dual union
  select 'PCNRSPAS' as program, 'The purpose of the Associate Degree Program is to provide the foundation for students to become competent registered nurses.  The aim of the Program is to provide a positive, innovative learning model that fosters the development of critical thinking and problem solving skills so that the graduate nurse is equipped to deliver care to a culturally diverse population in a variety of healthcare settings. Registered nursing education prepares the graduate to provide services to those who need healthcare. As needs are varied so are educational programs, which may proceed from the simpler to the more complex in accordance with the career ladder concept. The progression is as follows: nurse assistant (CNA), licensed vocational nurse (LVN), registered nurse (RN), and other nurses with Bachelor of Science, Master of Science or Doctorate in Nursing and special certifications. The successful RN may begin employment in a wide variety of entry-level positions. The role of a new graduate is usually that of a staff nurse. With additional education, a nurse may advance to a position of supervision, administrator, clinical specialist, educator, or researcher. Associate Degree Nursing (ADN) is a four-semester program after the prerequisite courses have been completed. In addition, students must complete all the Porterville College general education requirements for graduation. Upon successful completion of the ADN Program, graduates are eligible to take the National Council Licensure Examination for licensure as a Registered Nurse in the State of California.' as description from dual union
  select 'PCPHILAT' as program, 'The Associate in Arts in Philosophy for Transfer program prepares students to continue studies toward a bachelors of arts in philosophy. Successful completion of the Associate in Arts in Philosophy for Transfer guarantees the student acceptance to a California State University (but does not guarantee acceptance to particular campus or major) to pursue a baccalaureate degree. With its emphasis on developing strong analytical and logical reasoning skills, a philosophy degree serves as outstanding preparation for law school, graduate school, business school, and medical school. Career opportunities with a Philosophy Baccalaureate degree include a broad range of fields such as business, education, ethics, government, law, management, publishing, religious service, scientific research, social work, and teaching.' as description from dual union
  select 'PCPOLSAT' as program, 'The Associate in Arts in Political Science for Transfer is designed for students planning to transfer to the California State University or other institutions to continue studies toward a Bachelor in Art in Political Science, Government, or Public Administration. They are also prepared to continue in other programs of study that require an introductory foundation of the knowledge and skills to interpret, understand, and effectively participate in political, social and organizational environments. Students who pursue Political Science degrees at transfer institutions prepare a foundation for careers in politics, law, government education, business, travel, information management, and journalism. Political Science is frequently the most common BA degree for students admitted into law schools in the United States. Political Science majors often find successful careers in business, in government service, and in non-profit organizations.' as description from dual union
  select 'PCSOCIAT' as program, 'The mission of the Social Science Division is to promote a social, philosophical, psychological, and historical understanding and appreciation of the human condition. The core disciplines of Anthropology, Economics, Geography, History, Human Services, Philosophy, political Science, Psychology, and Sociology encourage students to investigate human existence from a variety of theoretical, methodological and cross-cultural perspectives.' as description from dual union
  select 'PCSOCSAA' as program, 'The mission of the Social Science Division is to promote a social, philosophical, psychological, and historical understanding and appreciation of the human condition. The core disciplines of Anthropology, Economics, Geography, History, Human Services, Philosophy, political Science, Psychology, and Sociology encourage students to investigate human existence from a variety of theoretical, methodological and cross-cultural perspectives.' as description from dual union
  select 'PGAGRIAA' as program, 'The Agriculture major is designed for students who are seeking an Associate''s Degree as terminal academic goal or who plan to transfer to a four-year college or university.  The courses in the program represent the normal core undergraduate requirements to transfer to the CSU system. Upon transferring and graduating examples of career options include, but are not limited to, Agriculture Business and Agriculture Production areas.' as description from dual union
  select 'PGBUSIAA' as program, 'Porterville College''s two-year Business degree prepares a student to work in an exciting and growing field. The Business program is a great opportunity for people who enjoy performing a variety of tasks and working as part of a team. Successful graduates are in great demand and enjoy health and life insurance, excellent working conditions and other fringe benefits such as modern offices. Graduates have a wide range of career options including: business, industry, research, and agriculture. They work in multiple-specialty areas including: accounting, finance, marketing, management, human resources, logistics, and information systems.' as description from dual union
  select 'PGCHDVAA' as program, 'The Associate of Arts degree in Child Development prepares students to work with children from birth to adolescent.  The program provides a well-sequenced experience to prepare students for careers as Early Childhood Educators.' as description from dual union
  select 'PGCMRTAA' as program, 'The Commercial Art Associate in Arts Degree will prepare students to work in the fields of graphic arts and illustration. Students will learn how to do design layouts in advertising, print, and digital media and will learn to produce illustrations with commercial applications, such as for books and graphic novels, magazines and the web and for advertising, editorial, and technical purposes. The degree also prepares students for transfer to a four year university to continue their studies toward earning a B.A. in Commercial Art., Graphic Design, or Illustration.' as description from dual union
  select 'PGENGLAA' as program, 'The Associate of Arts degree in English is dedicated to teaching students to reach an optimum level of performance in writing.  The program is dedicated to teaching students to reach university-level standards in reading, writing, and thinking.' as description from dual union
  select 'PGINFOAA' as program, 'The Information Systems Program is designed for students who are pursuing a career in the computer and information technology field. The Program offers both a certificate and an Associate Degree as well as prepares students for transferring to four-year institutions. Careers are available in data communications and networking, computer software engineering, database administration, computer systems analysis and design.' as description from dual union
  select 'PGISSCAA' as program, 'The Associate of Arts degree in Biological and Physical Science is suggested for students planning entry into an allied health program or a career in the sciences.' as description from dual union
  select 'PGISSCAS' as program, 'The Associate in Science degree in Biological and Physical Science is suggested for students who plan to continue their studies in the sciences at a four-year university with a goal of obtaining a bachelor''s or higher degree in the sciences or a medical related field.' as description from dual union
  select 'PGLAAHAA' as program, 'The Associate Degree in Liberal Arts is designed for students who wish to have a broad knowledge of liberal arts and sciences plus additional coursework in an area of emphasis.This area of emphasis would be an ideal choice for students who plan to transfer to the California State University (CSU) or University of California (UC). Students can satisfy general education requirements plus focus on transferable course work that relate to majors at these institutions. Please consult with a counselor for information regarding your intended major at the specific college or university of your choice.' as description from dual union
  select 'PGLADNAS' as program, 'The purpose of the Porterville College LVN to Associate Degree Program is to provide the foundation for students to be become competent registered nurses. The program is to provide a positive, innovative model that fosters development of critical thinking and problem solving skills so that students are equipped to deliver care to diverse populations in a variety of health care settings. LVN to RN nursing education prepares the graduate to provide services to those who needhealthcare. Nursing is an art and science incorporating knowledge from the behavioral, biological and physical sciences. Nursing embodies a holistic concept of health in which the physical,psychological, intellectual, social and spiritual aspects of human functioning are interrelated,interdependent, and of equal importance. The LVN to ADN Degree program is for students already possessing a LVN license, nursing prerequisites, IV certification and experience as an LVN that allows advanced placement in the ADN program. ADN coursework is completed over two semesters. The successful RN may begin employment in a wide variety of entry level positions. The role of anew graduate is usually that of a staff nurse. With additional education, a nurse may advance to a position of supervisor, administrator, clinical specialist, educator, or researcher. Upon successful completion of the LVN to ADN Degree program, graduates are eligible to take the National Council Licensure Examination for licensure as a Registered Nurse in the State of California.' as description from dual union
  select 'PGLAMSAA' as program, 'The Associate Degree in Liberal Arts is designed for students who wish to have a broad knowledge of liberal arts and sciences plus additional coursework in an area of emphasis. This area of emphasis would be an ideal choice for students who plan to transfer to the California State University (CSU) or University of California (UC). Students can satisfy general education requirements plus focus on transferable course work that relate to majors at these institutions. Please consult with a counselor for information regarding your intended major at the specific college or university of your choice.' as description from dual union
  select 'PGLASBAA' as program, 'The Associate Degree in Liberal Arts is designed for students who wish to have a broad knowledge of liberal arts and sciences plus additional coursework in an area of emphasis. This area of emphasis would be an ideal choice for students who plan to transfer to the California State University (CSU) or University of California (UC). Students can satisfy general education requirements plus focus on transferable course work that relate to majors at these institutions. Please consult with a counselor for information regarding your intended major at the specific college or university of your choice.' as description from dual union
  select 'PGNRSPAS' as program, 'The purpose of the Associate Degree Program is to provide the foundation for students to become competent registered nurses.  The aim of the Program is to provide a positive, innovative learning model that fosters the development of critical thinking and problem solving skills so that the graduate nurse is equipped to deliver care to a culturally diverse population in a variety of healthcare settings. Registered nursing education prepares the graduate to provide services to those who need healthcare. As needs are varied so are educational programs, which may proceed from the simpler to the more complex in accordance with the career ladder concept. The progression is as follows: nurse assistant (CNA), licensed vocational nurse (LVN), registered nurse (RN), and other nurses with Bachelor of Science, Master of Science or Doctorate in Nursing and special certifications. The successful RN may begin employment in a wide variety of entry-level positions. The role of a new graduate is usually that of a staff nurse. With additional education, a nurse may advance to a position of supervision, administrator, clinical specialist, educator, or researcher. Associate Degree Nursing (ADN) is a four-semester program after the prerequisite courses have been completed. In addition, students must complete all the Porterville College general education requirements for graduation. Upon successful completion of the ADN Program, graduates are eligible to take the National Council Licensure Examination for licensure as a Registered Nurse in the State of California.' as description from dual union
  select 'PGSOCSAA' as program, 'The mission of the Social Science Division is to promote a social, philosophical, psychological, and historical understanding and appreciation of the human condition. The core disciplines of Anthropology, Economics, Geography, History, Human Services, Philosophy, political Science, Psychology, and Sociology encourage students to investigate human existence from a variety of theoretical, methodological and cross-cultural perspectives.' as description from dual union
  select 'PIADMJST' as program, 'The Associate in Science in Administration of Justice for Transfer degree (As-T) prepares students for transfer primarily to a California State University in a similar major with guaranteed junior standing and priority admission to pursue a Bachelor''s Degree in Administration of Justice. The Associate in Science in Administration of Justice for Transfer is designed to prepare students to continue studies toward a B.A. or B.S. degree in Administration of Justice or for entry-level into a variety of career options. Students who pursue an Administration of Justice degree enjoy a wealth of career options including law enforcement, probation, and parole. They work in multiple specialty areas including detectives, S.W.A.T., narcotics, K-9 handler and motors officer. Students must satisfy both of the following requirements in order to earn the Associate in Science in Administration of Justice for Transfer degree:' as description from dual union
  select 'PIAGRIAA' as program, 'The Agriculture major is designed for students who are seeking an Associate''s Degree as terminal academic goal or who plan to transfer to a four-year college or university.  The courses in the program represent the normal core undergraduate requirements to transfer to the CSU system. Upon transferring and graduating examples of career options include, but are not limited to, Agriculture Business and Agriculture Production areas.' as description from dual union
  select 'PIARTSAT' as program, 'This Associate in Arts in Studio Art for Transfer degree is designed to prepare students for transfer to a four-year university to continue their studies toward earning a B.A. in Art or Studio Art. The students who achieve this Studio Art AA-T degree will have the skills necessary to create many kinds of 2-D and 3-D art projects. They will be trained to use visual media to generate ideas, solve visual problems, and enhance perception and to think and respond critically to visual information in their lives. They will be able to identify and describe the historical and cultural contexts of works of art in order to evaluate the relationship between works of art and their time and culture. They will also be able to assess the role of the visual arts in contemporary culture as a vehicle of human expression in order to evaluate and value that creative impulse in their own lives' as description from dual union
  select 'PIBADMST' as program, 'The Associate in Science in Business Administration for Transfer is designed to prepare students to continue studies toward a B.A. or B.S. degree in Business Administration or for entry-level into a variety of career options. Students who pursue a Business Administration degree enjoy a wealth of career options ranging business, industry, teaching, research, and agriculture. They work in multiple specialty areas including: accounting, finance, marketing, management, human resources, logistics, and information systems.' as description from dual union
  select 'PIBUSIAA' as program, 'Porterville College''s two-year Business degree prepares a student to work in an exciting and growing field. The Business program is a great opportunity for people who enjoy performing a variety of tasks and working as part of a team. Successful graduates are in great demand and enjoy health and life insurance, excellent working conditions and other fringe benefits such as modern offices. Graduates have a wide range of career options including: business, industry, research, and agriculture. They work in multiple-specialty areas including: accounting, finance, marketing, management, human resources, logistics, and information systems.' as description from dual union
  select 'PICHDVAA' as program, 'The Associate of Arts degree in Child Development prepares students to work with children from birth to adolescent.  The program provides a well-sequenced experience to prepare students for careers as Early Childhood Educators.' as description from dual union
  select 'PICMRTAA' as program, 'The Commercial Art Associate in Arts Degree will prepare students to work in the fields of graphic arts and illustration. Students will learn how to do design layouts in advertising, print, and digital media and will learn to produce illustrations with commercial applications, such as for books and graphic novels, magazines and the web and for advertising, editorial, and technical purposes. The degree also prepares students for transfer to a four year university to continue their studies toward earning a B.A. in Commercial Art., Graphic Design, or Illustration.' as description from dual union
  select 'PICMSTAT' as program, 'The Associate in Arts in Communication Studies for Transfer program is designed to prepare students to continue studies toward a B.A. degree in Communication Studies or for entry level into a variety of career options that require competent and ethical communication skills. Students who pursue advanced Communication degrees enjoy a wealth of career options ranging from Public Relations Officer, Human Resources Managers, Retail Managers, Politician, Lawyers, College Professors, and numerous options in Mass Communications such as radio and television. Communication courses focus on how people use messages to generate meaning within and across various contexts, cultures, and channels.' as description from dual union
  select 'PICOMMAT' as program, 'PC Communication AA-T-IGETC' as description from dual union
  select 'PIENGLAA' as program, 'The Associate of Arts degree in English is dedicated to teaching students to reach an optimum level of performance in writing.  The program is dedicated to teaching students to reach university-level standards in reading, writing, and thinking.' as description from dual union
  select 'PIENGLAT' as program, 'The Associate in Arts in English for Transfer is designed for students planning to transfer to the California State University or other institutions to continue studies toward a Bachelor in Arts in English or for other programs that require a foundation of close textual reading, effective writing, and critical thinking. Students will explore literature from a variety of critical perspectives and will apply their understanding of history, sociology, and philosophy and other areas of study to written and spoken language, particularly texts of artistic and social value. English majors will gain a variety of critical reading, writing, and thinking skills that foster a broad understanding of culture, history, and diversity as well as a sense of the ways reading and writing have changed over time.' as description from dual union
  select 'PIHISTAT' as program, 'The Associate in Arts in History for Transfer degree is designed for students planning to transfer to the California State University or other institutions to continue studies toward a B.A. in History or for other programs that require an introductory foundation of the knowledge and skills to interpret and build understanding of our political, economic, and social past. Students who pursue History degrees at transfer institutions establish a foundation for careers in education, law, politics, information management, business, travel, government, and journalism. Additionally, History students also find success in museum, library, and archival.' as description from dual union
  select 'PIINFOAA' as program, 'The Information Systems Program is designed for students who are pursuing a career in the computer and information technology field. The Program offers both a certificate and an Associate Degree as well as prepares students for transferring to four-year institutions. Careers are available in data communications and networking, computer software engineering, database administration, computer systems analysis and design.' as description from dual union
  select 'PIISSCAA' as program, 'The Associate of Arts degree in Biological and Physical Science is suggested for students planning entry into an allied health program or a career in the sciences.' as description from dual union
  select 'PIISSCAS' as program, 'The Associate in Science degree in Biological and Physical Science is suggested for students who plan to continue their studies in the sciences at a four-year university with a goal of obtaining a bachelor''s or higher degree in the sciences or a medical related field.' as description from dual union
  select 'PILAAHAA' as program, 'The Associate Degree in Liberal Arts is designed for students who wish to have a broad knowledge of liberal arts and sciences plus additional coursework in an area of emphasis. This area of emphasis would be an ideal choice for students who plan to transfer to the California State University (CSU) or University of California (UC). Students can satisfy general education requirements plus focus on transferable course work that relate to majors at these institutions. Please consult with a counselor for information regarding your intended major at the specific college or university of your choice.' as description from dual union
  select 'PILADNAS' as program, 'The purpose of the Porterville College LVN to Associate Degree Program is to provide the foundation for students to be become competent registered nurses. The program is to provide a positive, innovative model that fosters development of critical thinking and problem solving skills so that students are equipped to deliver care to diverse populations in a variety of health care settings. LVN to RN nursing education prepares the graduate to provide services to those who needhealthcare. Nursing is an art and science incorporating knowledge from the behavioral, biological and physical sciences. Nursing embodies a holistic concept of health in which the physical,psychological, intellectual, social and spiritual aspects of human functioning are interrelated,interdependent, and of equal importance. The LVN to ADN Degree program is for students already possessing a LVN license, nursing prerequisites, IV certification and experience as an LVN that allows advanced placement in the ADN program. ADN coursework is completed over two semesters. The successful RN may begin employment in a wide variety of entry level positions. The role of anew graduate is usually that of a staff nurse. With additional education, a nurse may advance to a position of supervisor, administrator, clinical specialist, educator, or researcher. Upon successful completion of the LVN to ADN Degree program, graduates are eligible to take the National Council Licensure Examination for licensure as a Registered Nurse in the State of California.' as description from dual union
  select 'PILAMSAA' as program, 'The Associate Degree in Liberal Arts is designed for students who wish to have a broad knowledge of liberal arts and sciences plus additional coursework in an area of emphasis. This area of emphasis would be an ideal choice for students who plan to transfer to the California State University (CSU) or University of California (UC). Students can satisfy general education requirements plus focus on transferable course work that relate to majors at these institutions. Please consult with a counselor for information regarding your intended major at the specific college or university of your choice.' as description from dual union
  select 'PILASBAA' as program, 'The Associate Degree in Liberal Arts is designed for students who wish to have a broad knowledge of liberal arts and sciences plus additional coursework in an area of emphasis. This area of emphasis would be an ideal choice for students who plan to transfer to the California State University (CSU) or University of California (UC). Students can satisfy general education requirements plus focus on transferable course work that relate to majors at these institutions. Please consult with a counselor for information regarding your intended major at the specific college or university of your choice.' as description from dual union
  select 'PIMATHST' as program, 'The Associate in Science in Mathematics for Transfer is designed to prepare students to continue studies toward a B.A. or B.S. degree in Mathematics or for entry-level into a variety of career options. Students who pursue a Mathematics degree enjoy a wealth of career options ranging from Business, Engineering, Computer Science, Education, the Sciences and the many others.' as description from dual union
  select 'PINRSPAS' as program, 'The purpose of the Associate Degree Program is to provide the foundation for students to become competent registered nurses.  The aim of the Program is to provide a positive, innovative learning model that fosters the development of critical thinking and problem solving skills so that the graduate nurse is equipped to deliver care to a culturally diverse population in a variety of healthcare settings. Registered nursing education prepares the graduate to provide services to those who need healthcare. As needs are varied so are educational programs, which may proceed from the simpler to the more complex in accordance with the career ladder concept. The progression is as follows: nurse assistant (CNA), licensed vocational nurse (LVN), registered nurse (RN), and other nurses with Bachelor of Science, Master of Science or Doctorate in Nursing and special certifications. The successful RN may begin employment in a wide variety of entry-level positions. The role of a new graduate is usually that of a staff nurse. With additional education, a nurse may advance to a position of supervision, administrator, clinical specialist, educator, or researcher. Associate Degree Nursing (ADN) is a four-semester program after the prerequisite courses have been completed. In addition, students must complete all the Porterville College general education requirements for graduation. Upon successful completion of the ADN Program, graduates are eligible to take the National Council Licensure Examination for licensure as a Registered Nurse in the State of California.' as description from dual union
  select 'PIPHILAT' as program, 'The Associate in Arts in Philosophy for Transfer program prepares students to continue studies toward a bachelors of arts in philosophy. Successful completion of the Associate in Arts in Philosophy for Transfer guarantees the student acceptance to a California State University (but does not guarantee acceptance to particular campus or major) to pursue a baccalaureate degree. With its emphasis on developing strong analytical and logical reasoning skills, a philosophy degree serves as outstanding preparation for law school, graduate school, business school, and medical school. Career opportunities with a Philosophy Baccalaureate degree include a broad range of fields such as business, education, ethics, government, law, management, publishing, religious service, scientific research, social work, and teaching.' as description from dual union
  select 'PIPOLSAT' as program, 'The Associate in Arts in Political Science for Transfer is designed for students planning to transfer to the California State University or other institutions to continue studies toward a Bachelor in Art in Political Science, Government, or Public Administration. They are also prepared to continue in other programs of study that require an introductory foundation of the knowledge and skills to interpret, understand, and effectively participate in political, social and organizational environments. Students who pursue Political Science degrees at transfer institutions prepare a foundation for careers in politics, law, government education, business, travel, information management, and journalism. Political Science is frequently the most common BA degree for students admitted into law schools in the United States. Political Science majors often find successful careers in business, in government service, and in non-profit organizations.' as description from dual union
  select 'PISOCIAT' as program, 'The mission of the Social Science Division is to promote a social, philosophical, psychological, and historical understanding and appreciation of the human condition. The core disciplines of Anthropology, Economics, Geography, History, Human Services, Philosophy, political Science, Psychology, and Sociology encourage students to investigate human existence from a variety of theoretical, methodological and cross-cultural perspectives.' as description from dual union
  select 'PISOCSAA' as program, 'The mission of the Social Science Division is to promote a social, philosophical, psychological, and historical understanding and appreciation of the human condition. The core disciplines of Anthropology, Economics, Geography, History, Human Services, Philosophy, political Science, Psychology, and Sociology encourage students to investigate human existence from a variety of theoretical, methodological and cross-cultural perspectives.' as description from dual union
  select 'PNADMJCR' as program, 'The Administration of Justice Certificate prepares students for careers in law enforcement, probation, and parole. They can also work in multiple specialty areas including detectives, S.W.A.T., narcotics, K-9 handler, and motors officer. Career opportunities are expected to continue to be strong in these areas. The curriculum surveys the history, development, theory and practical application of knowledge in areas of law enforcement, corrections, probation and parole. Curriculum is kept current by continuous contact with other colleges and criminal justice agencies. The training programs are certified by the California Commission on Peace Officers Standards and Training (P.O.S.T.) and Standards and Training for Corrections (S.T.C.).' as description from dual union
  select 'PNCHPTCR' as program, 'Supporting Early Learning and Development; planning and guiding early learning and development;creating and maintaining program policies and practices; advancing the early childhood profession.Associate Teacher Child Development Permit or Preschool Teacher as required for employment in private centers by the State Department of Social Services **DSS Title 22.' as description from dual union
  select 'PNCMSTCR' as program, 'The Communication Studies certificate program is designed to enhance a student''s ability to communicate in social, professional, and relational contexts. This certificate is intended to enhance the communication skills of students from all majors and career plans. Communication courses focus on how people use messages to generate meaning within and across various contexts, cultures, and channels.' as description from dual union
  select 'PNENTRCR' as program, 'Students receive a comprehensive academic experience in entrepreneurship that starts with the classroom and links to the community. It integrates core business concepts around the formation, start-up, and growth of an entrepreneurial firm. The certificate prepares students to conceive, develop and launch new ventures and to turn innovative ideas into products that can be brought to market. Emphasis is placed on the financial, legal, and marketing aspects of start-up businesses. Completion of this certificate will provide the student with the entrepreneurial skills that are required to succeed in the small business area.' as description from dual union
  select 'PNFTSFCR' as program, 'The Fire Technology Structural Fire Fighter Certificate program is intended to provide students with the skills, understanding and hands-on training needed for fire service employment opportunities. The Fire Technology Structural Fire Fighter Certificate program focuses on an introduction to fire protection education, career opportunities in fire protection and related fields, philosophy and history of fire protection, fire loss analysis, organization and function of public and private fire protection services, fire departments as part of local government, laws and regulations affecting the fire service, fire service nomenclature, basic fire chemistry and physics, basic fire control strategy and tactics, and common fire protection systems. Additional emphasis is given to foundation skills and assessment techniques to care for an ill or injured person in the pre-hospital setting and follows state regulations for EMT-I training and leads to certification at the county level.' as description from dual union
  select 'PNHMSCCR' as program, 'The Human Services Certificate prepares students for entry level positions in Human Services programs and/or matriculation into the Social Work or Alcohol and Substance Abuse Counseling options in the Human Services Associate Degree Program. The program introduces students to Human Services or Alcohol and Substance Abuse Counseling theories and to the integration of theory and practice.' as description from dual union
  select 'PNINDMCR' as program, 'The Industrial Maintenance Certificate Program will prepare students in electrical control systems, residential and commercial wiring, electrical motor control, hydraulics, pneumatics, piping systems, welding, and programmable logic controllers (PLC) to enter into the industrial maintenance workforce. The goal for the Industrial Maintenance Certificate program is to provide an opportunity for students to complete a short-term, intensive, hands-on program preparing them for employment in the Industrial Maintenance field.' as description from dual union
  select 'PNINFOCR' as program, 'The Information Systems Program is designed for students who are pursuing a career in the computer and information technology field. The Program offers both a certificate and an Associate Degree as well as prepares students for transferring to four-year institutions. Careers in data communications and networking, computer software engineering, database administration, computer systems analysis and design, not only are in great demand but also represent some of the professions with highest income level among all career choices.' as description from dual union
  select 'PNPLVNCR' as program, 'Vocational nursing includes an introduction to the basic principles and theories of nursing, personal and community health; normal growth and development; normal aging processes and geriatric nursing; and ethics and interpersonal relationships. Integration of these principles, including anatomy and physiology, provides a foundation in nursing upon which the student can build skills, knowledge and understanding in identifying nursing needs of patients with common disorders and disturbances of the body systems. This is a three-semester certificate program. The program includes classes on the college campus with clinical training at approved hospitals within the area. Upon successful completion of the program, the student is eligible to take the examination for licensure as a Vocational Nurse. Only students who have met all admission requirements will be considered for the program.' as description from dual union
  select 'PNPSYTCR' as program, 'Psychiatric Technology includes the study of the developmentally disabled, the mentally ill and basic nursing skills. Courses included are: Fundamentals of Nursing, Medical/Surgical Nursing, Growth and Development, Communications, Developmental Disabilities and Psychiatric Nursing. This is a three semester certificate program with classes beginning each semester. The program includes classes on the college campus plus clinical training at Porterville Developmental Center, local mental health clinics, and other approved facilities. Individuals who successfully complete this program are eligible to take the examination to become a Licensed Psychiatric Technician. Only students who have the prerequisites and have met all admission requirements will be considered for the program.' as description from dual union
  select 'PNPTUWCR' as program, 'The Power Technician Utility Worker Certificate program is intended to provide students with the skills, understanding and hands-on training needed for public utility service employment opportunities. The power Technician Utility Worker Certificate program focuses on OSHA, basic electricity, basic climbing, standards interpretation, excavation, reading technical drawings, heights safety, tools, ropes and knots, pole testing, technical math, physical training, physical test battery, and environmental awareness. This program will give the students a strong foundation and preparation for enter level work in the utilities field.' as description from dual union
  select 'PNRCCICR' as program, 'Supporting Early Learning and Development; planning and guiding early learning and development; creating and maintaining program policies and practices; advancing the early childhood profession. Child Development Permit: Teacher as required for employment in funded child care programs. State Department of Education, Title V, DSS (Department of Social Services).' as description from dual
)
SELECT nk,
       cd,
       cat_yr,
       name,
       coalesce(pd.description,program_desc) as \\\""desc\\\"",
       credits,
       enrollment_notes,
       registration_notes, 
       area_of_study, 
       concentration, 
       credential, 
       DECODE(cip, null, null, SUBSTR(cip, 1, 2) || '.' || SUBSTR(cip, 3)) as cip,
       is_transfer,
       is_active
  FROM EAB_PROGRAM ep left join prgm_desc pd on ep.cd = pd.program
 WHERE college LIKE 'P%'","Program"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.Department","SELECT 
  stvdivs_code nk,
  stvdivs_desc name,
  'T' is_active
FROM stvdivs
UNION
SELECT 
  '0000' nk,
  'Default',
  'T' is_active
FROM dual
","Department"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"reg.StudentTestScore","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT szvterm_code
FROM szvterm
WHERE szvterm_code <= (
                      SELECT MIN(szvterm_code)
                      FROM szvterm
                        WHERE szvterm_start_date > sysdate
                      )
AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
AND szvterm_vpdi_code = 'PPCC'
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = sfrstcr_term_code
WHERE sfrstcr_rsts_code LIKE 'R_'
      AND sfrstcr_vpdi_code = 'PPCC'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = saradap_term_code_entry
WHERE saradap_vpdi_code = 'PPCC' 
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
  AND substr(stvtesc_code, 2, 1) != 'Z' 
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","Student Test Scores"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.StudentCourse","-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

occupationActiveTerm as (
  select stvterm_code as term
    from stvterm
   where stvterm_end_date >= to_date(to_char(to_number(to_char(sysdate,'YYYY'))-10)||'-'||to_char(sysdate,'MM-DD'),'YYYY-MM-DD')
     and stvterm_start_date < sysdate
     and stvterm_code not in ('999999','000000')
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE')
  and sfrstcr_levl_code in ('50', '54')
  and sfrstcr_term_code >= '201212'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE
      WHEN sfrstcr_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE') AND sfrstcr_levl_code in ('50', '54') and stvterm_start_date > sysdate THEN 'REGISTERED'
      WHEN sfrstcr_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE') AND sfrstcr_levl_code in ('50', '54') and stvterm_start_date <= sysdate AND stvterm_end_date > sysdate THEN 'IN_PROGRESS'
      WHEN sfrstcr_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE') AND sfrstcr_levl_code in ('50', '54') and (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') THEN 
        CASE
          WHEN ssbsect_subj_code IN ('SOC','SOCI','PSY','PSYC','EMP','EMPL','ECO','ECON','PHY','PHYS','SPC','SPCH','ART','ARTS','HUM','HUMN') THEN 'COMPLETED'
          ELSE
            CASE
              WHEN stvterm_code IN (SELECT * FROM occupationActiveTerm) then 'COMPLETED'
              ELSE 'UNKNOWN'
            END
        END 
      WHEN sfrstcr_rsts_code IN ('WL') THEN 'WAITLISTED' -- Waitlisted students.
      ELSE 'UNKNOWN'
     END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') THEN -- Grade codes are Member specific. Confirm with BA.
      CASE
        WHEN shrtckn_subj_code IN ('SOC','SOCI','PSY','PSYC','EMP','EMPL','ECO','ECON','PHY','PHYS','SPC','SPCH','ART','ARTS','HUM','HUMN') THEN 'COMPLETED'
        ELSE
          CASE
            WHEN shrtckn_term_code IN (SELECT * FROM occupationActiveTerm) then 'COMPLETED'
            ELSE 'UNKNOWN'
          END
        END
      ELSE 'UNKNOWN'
    END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse where student is not null
UNION
SELECT * FROM completedCourses where student is not null
UNION
SELECT * FROM droppedCourses where student is not null
)

-- Wrapper query
SELECT * FROM finalDataSet","StudentCourse"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"grade_lkp","select grade_cd,
grade_desc
 from atlantatech.osf_gdl_grade_lkp","SSF_grade_lkp"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"noah_college","SELECT DISTINCT STVCOLL_CODE   AS COLLEGE_CD
                , STVCOLL_DESC AS COLLEGE_NAME

FROM STVCOLL
  
ORDER BY 1","College lkp"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.Program","SELECT nk, cd, cat_yr, name, program_desc \\\""desc\\\"", credits, enrollment_notes, registration_notes, 
area_of_study, concentration, credential, DECODE(cip, null, null, SUBSTR(cip, 1, 2) || '.' || SUBSTR(cip, 3)) cip,
is_transfer, is_active
FROM EAB_PROGRAM
WHERE college LIKE 'C%'
","Program"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.Term","SELECT 
  stvterm_code nk, 
  stvterm_desc name, 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt,
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt,
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active
  Case 
    When Stvterm_Desc Not Like '%Non-Credit' 
    and stvterm_desc not like 'Parson%' and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code IN ('RW', 'RE')
  AND sfrrsts_ptrm_code = '1'

UNION 

SELECT
  stvterm_code nk,
  stvterm_desc name,
  stvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt,
  '1900-01-02' registration_end_dt,
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  Case 
    When Stvterm_Desc Not Like '%Non-Credit' 
    and stvterm_desc not like 'Parson%' and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm
WHERE NOT EXISTS (SELECT 1
	                FROM sfrrsts
	               WHERE sfrrsts_term_code = stvterm_code
	                 AND sfrrsts_rsts_code IN ('RW', 'RE')
	                 AND sfrrsts_ptrm_code = '1')","Term"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"core.advisor","With Advr_Pidm As (
Select Sibinst_Pidm
From Sibinst a
Where Sibinst_Fcst_Code = 'AC'
And Sibinst_Advr_Ind = 'Y'
And Sibinst_Term_Code_Eff = (Select Max(Sibinst_Term_Code_Eff) From Sibinst B Where A.Sibinst_Pidm = B.Sibinst_Pidm)
)

Select Spriden_Id Nk,
           coalesce(
            ( select gobtpac_external_user
                from gobtpac
                where gobtpac_pidm = spriden_pidm
              ),
            (select substr(goremal_email_address,1,instr(goremal_email_address,'@')-1) 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'E'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select substr(goremal_email_address,1,instr(goremal_email_address,'@')-1)
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'E'
              and goremal_preferred_ind = 'N'
              and rownum = 1
              ),
               lower(spriden_id) || '@missingemail.org') Username,
               coalesce(( 
                select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'E'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'E'
              and goremal_preferred_ind = 'N'
and rownum = 1
              ),
               lower(spriden_id) || '@missingemail.org') email,
      Spriden_First_Name First_Name,
      Spriden_Last_Name last_name,
      'T' Is_Active
From Spriden
Where Spriden_Pidm In (Select * From Advr_Pidm)
and spriden_change_ind is null","Advisor"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"inst.Campus","-- get campus data from Banner 
WITH campus AS (
SELECT DISTINCT stvcamp_code nk
                , stvcamp_desc \\\""name\\\""
                , CASE WHEN stvcamp_code = 'O'
                			THEN 'T'
                			ELSE 'F' END is_online
                , CASE WHEN stvcamp_code IN ('G','H','M','O')
                			THEN 'T' 
                			ELSE 'F' END is_active
FROM stvcamp
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM campus
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Campus"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.studentcourse","with now_term as (
  select stvterm_code as a_term
    From Stvterm
   Where Stvterm_start_Date >= Sysdate
     And Stvterm_Desc Not Like '%Non-Credit' 
     And Stvterm_Desc Not Like 'Parson%'
     and rownum = 1
   order by stvterm_code asc
),
Term_List As (
  Select stvterm_code as term
    from stvterm
   Where Stvterm_Code <= (Select * From Now_Term)
     And Stvterm_Desc Not Like '%Non-Credit' 
     And Stvterm_Desc Not Like 'Parson%'
     and rownum <= 20
   Order By Stvterm_Code Desc
),
pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where Sfrstcr_Rsts_Code In ('RE','RW')
      and sfrstcr_term_code in (select * from term_list)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select * from term_list)
))),
MAX_CRSE as (
  select shrtckn_pidm as pidm,
         shrtckn_subj_code as subj_code,
         shrtckn_crse_numb as crse_numb,
         max(shrtckg_seq_no) as max_seq_no
    from shrtckg join shrtckn on SHRTCKG_PIDM = SHRTCKN_PIDM
                             and SHRTCKG_TERM_CODE = SHRTCKN_TERM_CODE
                             and SHRTCKG_TCKN_SEQ_NO = SHRTCKN_SEQ_NO
   where shrtckg_pidm IN (select * from pop)
   Group By Shrtckn_Pidm, Shrtckn_Subj_Code, Shrtckn_Crse_Numb
),
stdnt_crse as (
select spriden_id||'$$'||shrtckg_term_code||'$$'||shrtckn_subj_code||shrtckn_crse_numb as nk,
       spriden_id as student,
       shrtckg_term_code as term,
       shrtckn_subj_code||shrtckn_crse_numb as course,
       shrtckn_crn||'$$'||shrtckg_term_code as section,
       shrtckg_grde_code_final as grade_cd,
       case
          WHEN shrtckg_grde_code_final = 'A' THEN 4.0
          WHEN shrtckg_grde_code_final = 'B' THEN 3.0
          WHEN shrtckg_grde_code_final = 'C' THEN 2.0
          WHEN shrtckg_grde_code_final = 'D' THEN 1.0
          WHEN shrtckg_grde_code_final = 'S' THEN 2.0
          WHEN shrtckg_grde_code_final = 'PA' THEN 2.0
          WHEN shrtckg_grde_code_final = 'CR' THEN 2.0
          -- Account for pass/fail classes.
          WHEN shrtckg_gmod_code = 'P' and shrtckg_grde_code_final = 'P' THEN COALESCE(shrtckg_credit_hours, 0.0)
          -- Account for transfer classes, there is no record in how they store a passing tranfer class in this table
          WHEN shrtckg_gmod_code = 'T' and shrtckg_grde_code_final = 'P' THEN COALESCE(shrtckg_credit_hours, 0.0)
          WHEN shrtckg_grde_code_final IS NULL THEN 0.0
          ELSE 0.0
       end as grade_points,
       COALESCE(shrtckg_credit_hours, 0) credits_attempted,
       COALESCE(shrtckg_credit_hours, 0) credits_earned,
       CASE
         WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D', 'S', 'P', 'PA', 'CR') THEN 'COMPLETED'
         ELSE 'UNKNOWN'
       End Status,
       'T' Is_Active
  from shrtckg join shrtckn on SHRTCKG_PIDM = SHRTCKN_PIDM
                           and SHRTCKG_TERM_CODE = SHRTCKN_TERM_CODE
                           and SHRTCKG_TCKN_SEQ_NO = SHRTCKN_SEQ_NO
               join MAX_CRSE on shrtckg_pidm = pidm
                            and shrtckn_subj_code = subj_code
                            and shrtckn_crse_numb = crse_numb
                            and shrtckg_seq_no = max_seq_no
          left join spriden on shrtckg_pidm = spriden_pidm
                           And Spriden_Change_Ind Is Null
 Where Shrtckg_Pidm In (Select * From Pop)
)
Select *
  From Stdnt_Crse
where course Is Not Null
order by student, term","Student Course 2"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"core.StudentCategory","Select Stvmedi_Code As Nk,
       Stvmedi_Desc As Name,
       'T' as Is_Active
  From Stvmedi
 Union
Select Stvdisa_Code As Nk,
       Stvdisa_Desc As Name,
       'T' As Is_Active
  From Stvdisa
 Union
Select 'STYP$$'||Stvstyp_Code As Nk,
       Stvstyp_Desc As Name,
       'T' As Is_Active
  From Stvstyp
 Union
Select 'MAJR$$'||Stvmajr_Code As Nk,
       Stvmajr_Desc As Name,
       'T' as is_active
  From Stvmajr","StudentCategory"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.Term","SELECT 
  nk,
  name, 
  cat_yr,
  registration_start_dt,
  registration_end_dt,
  term_start_dt,
  term_end_dt,
  is_active
FROM EAB_TRM
WHERE college LIKE 'P%'","Term"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"_APL_Academic_Period_Lkp_","select 
academic_period,
academic_period_desc,
academic_year,
academic_year_desc,
academic_period_type,
academic_period_start,
academic_period_end
 from atlantatech.osf_apl_academic_period_lkp","SSF_academic_period_lkp"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.SectionTime","-- Fields	nk,section,day_of_week,from_tm,to_tm,Location,is_active
-- Model Name	cat.SectionTime
-- Name	SectionTime
-- Output	SectionTime_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- Unpivot day of week from ssrmeet into a single column. ssrmeet stores data for each day of the week in separate columns. In naviagate, we store this data in a single column as day_of_week.
WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
        --WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NULL
        --  THEN ssrmeet_room_code
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'A' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                              AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code) -- Lookup day of week code
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. We do not need to extract sections times for past terms as section times are used for students to build their schedule.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM sectionTime
","Section Times"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.EnrollmentApplication","with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),
now_term as (
  select stvterm_code as a_term
    from stvterm
   where stvterm_end_date >= sysdate
     and rownum = 1
   order by stvterm_code asc
),
TERM_LIST AS (
  select stvterm_code,
         (select a_term from now_term) as now_term
    from stvterm
   where stvterm_code <= (select * from now_term)
     and rownum < 5
   order by stvterm_code desc
),
FUTR_TERM as (
  select stvterm_code
    from stvterm
   where stvterm_end_date >= sysdate
),
ACTV_TERM as (
  select stvterm_code,
         now_term,
         case
           -- summer
           when substr(now_term,-2,2) = '50' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- spring
           when substr(now_term,-2,2) = '10' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- fall
           when substr(now_term,-2,2) = '80' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              else 'F'
            end         
           -- other
           else 'F'
         end as is_active
    from term_list
),
pop as  (
  select distinct s2.spriden_pidm as pidm, s2.spriden_id as student_id
    from saradap s1 join spriden s2 on s1.saradap_pidm = s2.spriden_pidm
                                   and s2.spriden_change_ind is null
   where s1.saradap_term_code_entry in (select stvterm_code from ACTV_TERM where is_active='T'
                                        union
                                        select stvterm_code from FUTR_TERM)
),
email_list as (
  select goremal_pidm as pidm,
         coalesce(
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'PERS' and rownum = 1),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'BUS' and rownum = 1),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'OTH' and rownum = 1),
          ''
         ) as email
    from goremal g
   group by goremal_pidm
),
app_list as (
select p.student_id as nk,
       p.student_id as student,
       saradap_term_code_entry as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       trim(el.email) as personal_email,
       'T' as is_active
  from saradap join max_list ml on saradap_pidm = ml.pidm
                               and saradap_term_code_entry = ml.max_term
               left join pop p on saradap_pidm = p.pidm
               left join email_list el on saradap_pidm = el.pidm
 where saradap_term_code_entry in (select stvterm_code from ACTV_TERM where is_active='T'
                                   union
                                   select stvterm_code from FUTR_TERM)
   and p.student_id is not null
   and SARADAP_APST_CODE= 'D'
)
select nk, student, app_term, app_number, app_dt, personal_email, is_active
  from app_list
 where to_date(app_dt, 'YYYY-MM-DD') >= to_date('2016-06-01', 'YYYY-MM-DD')","EnrollmentApplication"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"core.student","WITH pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW') -- Need to confirm
      and sfrstcr_term_code in (
        select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= ( -- excluding non credit terms, we are looking at students active in the previous 5 terms relative to the current term
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE'                         -- Need to confirm
                      and stvterm_desc not like '%Continuing Education'       -- Need to confirm
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                       )
          And Rownum < 15
          order by 1 desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= (
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE' 
                      and stvterm_desc not like '%Continuing Education'
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                       )
          And Rownum < 15
          order by 1 desc))
)))

SELECT DISTINCT
  spriden_id nk,
  spriden_id username,
  replace (trim(coalesce((                                        -- Need to confirm this logic
                select goremal_email_address 
                from goremal
                where goremal_pidm = spriden_pidm 
                and goremal_emal_code = 'CAMP'
                and goremal_status_ind = 'A'
                and goremal_preferred_ind = 'Y'
                and rownum = 1),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              and goremal_emal_code = 'PERS'
              and goremal_preferred_ind = 'Y'
              ),
            (select goremal_email_address
              from goremal
              where goremal_pidm = spriden_pidm
              and goremal_status_ind = 'A'
              And Goremal_Emal_Code = 'CAMP'
              and goremal_preferred_ind = 'N'),
               lower(spriden_id) || '@missingemail.org')),' ','') email,
  spriden_first_name first_name,
  spriden_last_name last_name,
  NVL(to_char(spbpers_birth_date,'YYYY-MM-DD'),'2000-01-01') birthdate,
  CASE 
    WHEN EXISTS (
                  SELECT 1
                  FROM sgbstdn
WHERE sgbstdn_pidm = spriden_pidm
                  -- WHERE sgbstdn_program_1 IN ('AA_LAR_LART', 'APP_NUR_NURA', 'AS_BUS_BADM', 'AA_SOC_PSYC', 'AS_HSC_PRNU', 'AAS_NUR_NURS', 'AS_PRE_PPMD', 'AA_EDU_EDUC', 'AAS_BUS_BUSN', 'AS_SCI_BIOL', 'AS_EGR_ENMC', 'AA_SOC_CRJT', 'AS_BUS_ACCT', 'AS_EGR_ENGR', 'AS_PPH_PPHM', 'APP_RAD_RADA', 'APP_DHG_DHYA', 'AA_ART_ART', 'AS_BUS_MGMT', 'AA_MUS_MUSC', 'AAS_PTA_PTHA', 'APP_PTA_PTAA', 'AA_COM_ENGL', 'AS_HSV_HSSW', 'AA_SOC_HIST', 'AAS_CHD_CDED', 'AS_PRE_PPVM', 'AS_CHD_ECEO', 'AA_SOC_SOCI', 'AAS_IND_INTD', 'AS_PRE_PPDE', 'AA_SOC_POSC', 'APP_VET_VETA', 'AAS_AVS_AVPP', 'AS_EGR_ENEE', 'AS_SCI_CHEM', 'AAS_CIS_CSPR', 'AA_LAN_SPAN', 'AAS_BUS_BADC', 'AAS_HR_HRES', 'AAS_DGM_DMSP', 'APP_OTA_OTAA', 'CER_CHD_CDCM', 'AS_MTH_MATH', 'AS_BUS_MIS', 'AA_SOC_PLGL', 'AAS_ACC_ACAS', 'AS_CHD_ECEN', 'AAS_VET_VETT', 'AA_COM_INED')
               ) THEN 'T'   -- The above can be replaced to use the batch configuration 
                              -- parameter file instead of listing each program in the query
                              -- itself. Will need to find a list of programs that quality the students
                              -- as being active. Defaulting to the entire program list. Will be determined via the pilot cohort.
    ElSE 'F' 
  END is_active
FROM spriden RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm
              LEFT JOIN goremal ON spriden_pidm = goremal_pidm
              LEFT JOIN sgbstdn ON spriden_pidm = sgbstdn_pidm
Where Spriden_Change_Ind Is Null 
  --AND goremal_emal_code = 'CAMP'
  And Spriden_Entity_Ind = 'P' -- Indicates that the row is a person. 'C' indicates a non-person such as a location.
  --AND goremal_email_address LIKE '%@students.snead.edu'
  --AND sgbstdn_term_code_eff > '201015'
  And Spriden_Pidm In (Select * From Pop)","Students"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"core.StudentXStudentCategory","with this_term as (
  select distinct nk
    from eab_trm
   where to_date(term_start_dt, 'YYYY-MM-DD') <= sysdate
     and to_date(term_end_dt, 'YYYY-MM-DD') >= sysdate
),
cur_stu as (
select distinct id as stu_id
  from eab_stdnt_active
 where current_enroll_cc = 'Y'
)
select student||'$$'||substr(program,1,instr(program,'$')-1) as nk,
       student as student,
       substr(program,1,instr(program,'$')-1) as category,
       'T' as is_active
  from eab_student_term_exp
 where term = (select nk from this_term)
   and student in (select stu_id from cur_stu)
union
select student||'$$VETERAN' as nk,
       student as student,
       'VETERAN' as category,
       'T' as is_active
  from eab_student_term_exp
 where term = (select nk from this_term)
   and student in (select stu_id from cur_stu)
   and VETERAN_IND = 'Y'
union
select student||'EOPS' as nk,
       student as student,
       'EOPS' as category,
       'T' as is_active
  from eab_student_term_exp
 where term = (select nk from this_term)
   and student in (select stu_id from cur_stu)
   and EOPS_IND = 'Y'
union
select student||'$$DSPS' as nk,
       student as student,
       'DSPS' as category,
       'T' as is_active
  from eab_student_term_exp
 where term = (select nk from this_term)
   and student in (select stu_id from cur_stu)
   and DSPS_IND = 'Y'
union
select student||'$$FOSTER_YOUTH' as nk,
       student as student,
       'FOSTER_YOUTH' as category,
       'T' as is_active
  from eab_student_term_exp
 where term = (select nk from this_term)
   and student in (select stu_id from cur_stu)
   and FOSTER_YOUTH_IND = 'Y'
union
select student||'$$CALWORKS' as nk,
       student as student,
       'CALWORKS' as category,
       'T' as is_active
  from eab_student_term_exp
 where term = (select nk from this_term)
   and student in (select stu_id from cur_stu)
   and CALWORKS_IND = 'Y'
union
select student||'$$DUAL_ENRL_STUDENT' as nk,
       student as student,
       'DUAL_ENRL_STUDENT' as category,
       'T' as is_active
  from eab_student_term_exp
 where term = (select nk from this_term)
   and student in (select stu_id from cur_stu)
   and DUAL_ENRL_STUDENT_IND = 'Y'","StudentXStudentCategory"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"catcc.TestSubject","SELECT 
  UPPER(stvtesc_code) nk,
  stvtesc_desc \\\""name\\\"",
  CASE 
    WHEN INSTR(stvtesc_max_value, '.') = 0 THEN to_number(stvtesc_max_value) || '.00'
    ELSE stvtesc_max_value 
  END AS max_score,
  'T' is_active
FROM stvtesc
WHERE stvtesc_max_value <> 'T'","Test Subjects"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.term","SELECT 
  stvterm_code nk, 
  stvterm_desc name, 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt,
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt,
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active
  Case 
    When Stvterm_Desc Not Like '%Non-Credit' 
    and stvterm_desc not like 'Parson%' and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code IN ('RW', 'RE')
  AND sfrrsts_ptrm_code = '1'

UNION 

SELECT
  stvterm_code nk,
  stvterm_desc name,
  stvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt,
  '1900-01-02' registration_end_dt,
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  Case 
    When Stvterm_Desc Not Like '%Non-Credit' 
    and stvterm_desc not like 'Parson%' and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm
WHERE NOT EXISTS (SELECT 1
	                FROM sfrrsts
	               WHERE sfrrsts_term_code = stvterm_code
	                 AND sfrrsts_rsts_code IN ('RW', 'RE')
	                 AND sfrrsts_ptrm_code = '1')","Term"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"inst.Location","-- Fields: nk,campus,name,latitude,longitude,address,comments,is_active
-- Model Name: inst.Location
-- Name: Location
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version: pjf4g1
-- Author: James DeBolt
-- Query:

WITH 

defaultValues AS (
    SELECT 
        'TBA' nk, 
        'OC' campus, 
        'TBA' name,     
        '' latitude,
        '' longitude,
        '' address,
        '' comments,
        'T' is_active FROM DUAL
),

validLocations AS (
    SELECT 
        replace(ROOMS_ID, '*', ' ') nk,
        UPPER(BUILDINGS.BLDG_LOCATION) campus,
        ROOM_NAME name,
        '' latitude,
        '' longitude,
        '' address,
        '' comments,
        'T' is_active
    FROM COLL_PRODUCTION.BUILDINGS
    INNER JOIN COLL_PRODUCTION.ROOMS_VIEW
    ON BUILDINGS.BUILDINGS_ID = ROOMS_VIEW.ROOMS_BLDG_ID
),

finalDataSet AS (
  SELECT * FROM validLocations
  UNION 
  SELECT * FROM defaultValues
)

SELECT * FROM finalDataSet","Location"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.Department","WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept
),

-- Assign default values
defaultValues AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM department
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Department"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.Section","WITH 

termList AS (
   SELECT DISTINCT SEC_TERM
     FROM COLL_PRODUCTION.COURSE_SECTIONS
    JOIN COLL_PRODUCTION.TERMS
      ON SEC_TERM = TERMS_ID
      AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
    WHERE SEC_TERM IS NOT NULL
      AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
),

coursesTemp AS (
  SELECT distinct NVL(COURSES.CRS_NAME,'') nk 
  FROM COLL_PRODUCTION.COURSES
    Join COLL_PRODUCTION.APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
    Join COLL_PRODUCTION.COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
   CRS_ACAD_LEVEL = 'UG'
    AND CRS_DEPTS IN (
        SELECT DISTINCT DEPTS_ID
        FROM   COLL_PRODUCTION. DEPTS
        WHERE  DEPTS_ACTIVE_FLAG='A')
),

validSections AS (
  SELECT COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME nk,
      COURSE_SECTIONS.COURSE_SECTIONS_ID cd,
     COURSE_SECTIONS.SEC_NO display_cd,

      NVL (COURSES.CRS_NAME, '') course,
      COURSE_SECTIONS.SEC_TERM term,

  -- This will need to be modified per member
  CASE WHEN UPPER(SEC_LOCATION) IN ('BC', 'PC', 'MP', 'MC', 'OS', 'RO', 'DQ', 'SP', 'SS', 'WA', 'WN') THEN UPPER(SEC_LOCATION)
        ELSE 'DEFAULT' END  campus, 
      NVL(SEC_CAPACITY, 0)  seats_offered,
      'F' is_unlimited_seating, 
       CASE
        WHEN  LAST_NAME IS NULL THEN 
           'TBD' 
        ELSE
           LAST_NAME  || ', ' || NVL(FIRST_NAME,'') 
       END  instructor_name,
      COALESCE (REPLACE(TO_CHAR (SEC_START_DATE,        'YYYY-MM-DD') , '/' , '-') , '1900-01-01') class_start_dt,
      COALESCE (REPLACE(TO_CHAR (SEC_END_DATE,          'YYYY-MM-DD') , '/' , '-') , '1900-01-02') class_end_dt, 
      COALESCE (REPLACE(TO_CHAR (SEC_OVR_CENSUS_DATES , 'YYYY-MM-DD') , '/' , '-') , REPLACE(TO_CHAR (TERM_CENSUS_DATES, 'YYYY-MM-DD'), '/','-') ) drop_start_dt,
      COALESCE (
      REPLACE(
      TO_CHAR (SEC_OVR_CENSUS_DATES , 'YYYY-MM-DD') , '/' , '-') , 
      REPLACE(TO_CHAR (TERM_CENSUS_DATES, 'YYYY-MM-DD'), '/','-') ) drop_end_dt,
      CASE
       WHEN SEC_STATUS = 'AC' AND ( (COURSE_SECTIONS_LS.SEC_COREQ_SECS IS NULL) OR
                                    (COURSE_SECTIONS_LS.SEC_COREQ_SECS IS NOT NULL AND 
                                      COURSE_SECTIONS.SEC_COURSE_NO NOT LIKE '%L'))
          THEN 'T' 
        ELSE 'F' 
      END is_active
  FROM COLL_PRODUCTION.COURSE_SECTIONS 
  JOIN termList ON COURSE_SECTIONS.SEC_TERM = termList.SEC_TERM
  LEFT OUTER JOIN COLL_PRODUCTION.COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID 
     AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN COLL_PRODUCTION.TERMS_LS
      ON COURSE_SECTIONS.SEC_TERM = TERMS_ID
      and TERMS_LS.POS = '1'
  LEFT JOIN COLL_PRODUCTION.SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
      AND SEC_STATUSES.POS = '1'
  LEFT JOIN COLL_PRODUCTION.COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
  JOIN coursesTemp ON COURSES.CRS_NAME = coursesTemp.nk
  LEFT OUTER JOIN COLL_PRODUCTION.COURSE_SEC_FACULTY
    ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
  LEFT OUTER JOIN COLL_PRODUCTION.PERSON
    ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
)

  SELECT * FROM validSections
 WHERE DISPLAY_CD NOT LIKE 'X%' AND DISPLAY_CD NOT LIKE 'Y%'


/* 

OLD, INCLUDES LABS THAT ARE NOW EXCLUDED

WITH 

termList AS (
   SELECT DISTINCT SEC_TERM
     FROM COLL_PRODUCTION.COURSE_SECTIONS
    JOIN COLL_PRODUCTION.TERMS
      ON SEC_TERM = TERMS_ID
      AND (UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%')
    WHERE SEC_TERM IS NOT NULL
      AND EXTRACT(YEAR FROM TERM_START_DATE) > EXTRACT(YEAR FROM SYSTIMESTAMP)-2
),

coursesTemp AS (
  SELECT distinct NVL(COURSES.CRS_NAME,'') nk 
  FROM COLL_PRODUCTION.COURSES
    Join COLL_PRODUCTION.APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
    Join COLL_PRODUCTION.COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
   CRS_ACAD_LEVEL = 'UG'
    AND CRS_DEPTS IN (
        SELECT DISTINCT DEPTS_ID
        FROM   COLL_PRODUCTION. DEPTS
        WHERE  DEPTS_ACTIVE_FLAG='A')
),

validSections AS (
  SELECT COURSE_SECTIONS.SEC_TERM||'-'||SEC_NAME nk,
      COURSE_SECTIONS.COURSE_SECTIONS_ID cd,
     COURSE_SECTIONS.SEC_NO display_cd,

      NVL (COURSES.CRS_NAME, '') course,
      COURSE_SECTIONS.SEC_TERM term,

  -- This will need to be modified per member
  CASE WHEN UPPER(SEC_LOCATION) IN ('BC', 'PC', 'MP', 'MC', 'OS', 'RO', 'DQ', 'SP', 'SS', 'WA', 'WN') THEN UPPER(SEC_LOCATION)
        ELSE 'DEFAULT' END  campus, 
      NVL(SEC_CAPACITY, 0)  seats_offered,
      'F' is_unlimited_seating, 
       CASE
        WHEN  LAST_NAME IS NULL THEN 
           'TBD' 
        ELSE
           LAST_NAME  || ', ' || NVL(FIRST_NAME,'') 
       END  instructor_name,
      COALESCE (REPLACE(TO_CHAR (SEC_START_DATE,        'YYYY-MM-DD') , '/' , '-') , '1900-01-01') class_start_dt,
      COALESCE (REPLACE(TO_CHAR (SEC_END_DATE,          'YYYY-MM-DD') , '/' , '-') , '1900-01-02') class_end_dt, 
      COALESCE (REPLACE(TO_CHAR (SEC_OVR_CENSUS_DATES , 'YYYY-MM-DD') , '/' , '-') , REPLACE(TO_CHAR (TERM_CENSUS_DATES, 'YYYY-MM-DD'), '/','-') ) drop_start_dt,
      COALESCE (
      REPLACE(
      TO_CHAR (SEC_OVR_CENSUS_DATES , 'YYYY-MM-DD') , '/' , '-') , 
      REPLACE(TO_CHAR (TERM_CENSUS_DATES, 'YYYY-MM-DD'), '/','-') ) drop_end_dt,
      CASE
        WHEN SEC_STATUS = 'AC' THEN 'T' 
        ELSE 'F' 
      END is_active
  FROM COLL_PRODUCTION.COURSE_SECTIONS 
  JOIN termList ON COURSE_SECTIONS.SEC_TERM = termList.SEC_TERM
  LEFT OUTER JOIN COLL_PRODUCTION.COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID 
     AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN COLL_PRODUCTION.TERMS_LS
      ON COURSE_SECTIONS.SEC_TERM = TERMS_ID
      and TERMS_LS.POS = '1'
  LEFT JOIN COLL_PRODUCTION.SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
      AND SEC_STATUSES.POS = '1'
  LEFT JOIN COLL_PRODUCTION.COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
  JOIN coursesTemp ON COURSES.CRS_NAME = coursesTemp.nk
  LEFT OUTER JOIN COLL_PRODUCTION.COURSE_SEC_FACULTY
    ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
  LEFT OUTER JOIN COLL_PRODUCTION.PERSON
    ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
)

  SELECT * FROM validSections */","Section"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"inst.Location","SELECT DISTINCT replace(ROOMS_ID, '*', ' ')  nk,
       isnull(CASE WHEN (ROOMS_ID LIKE 'BARN%' OR  ROOMS_ID LIKE 'DVD%' OR  ROOMS_ID LIKE 'JL%'  OR ROOMS_ID LIKE 'NNR%'  OR  
                  ROOMS_ID LIKE 'NR%' OR  ROOMS_ID LIKE  'OAKL%' OR  ROOMS_ID LIKE  'SHAW%' OR   
                  ROOMS_ID LIKE 'FIEL%' OR  ROOMS_ID LIKE  'WWW%' OR               
                  ROOMS_ID LIKE  'HVNC%' OR ROOMS_ID LIKE  'PSS%' OR ROOMS_ID LIKE  'RE%') then 'MAIN' 
            WHEN (ROOMS_ID LIKE 'ETC%' OR  ROOMS_ID LIKE 'HCEI%' OR  ROOMS_ID LIKE 'IEC%') then 'LOGAN'   
            WHEN (ROOMS_ID LIKE 'PERR%' OR  ROOMS_ID LIKE 'LSNOW%') then 'PERRY'  
            WHEN (ROOMS_ID LIKE 'FISH*1%' OR  ROOMS_ID LIKE 'LSNOW%') then 'MAIN'      
       end, 'MAIN')  campus,
      replace(ROOMS_ID, '*', ' ')  name,
      '' latitude,
      '' longitude,
      '' address,
      '' comments,
      'T' is_active

 FROM   ROOMS","Location"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.StudentCourse","-- Fields  nk,student,term,course,section,grade_cd,grade_points,credits_attempted,credits_earned,status,is_active
-- ModelName cat.StudentCourse
-- Name    Course
-- Output  Student_Course_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:


-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 3
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
AND (REGEXP_LIKE (shrtckn_subj_code, '^[n-z|N-Z]') OR REGEXP_LIKE (shrtckn_subj_code, '^[^a-z|A-Z]')) -- Filter subject codes starting with characters between n and z or non-alphabetic characters
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
\\\""final\\\"" AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Student Courses_Part 1"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.SectionTime","with CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE AS TERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-3*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC
)

SELECT ssbsect_crn || '$$' || ssbsect_term_code || '$$' || decode(day_of_week, 'Sunday', 1, 'Monday', 2, 'Tuesday', 3, 'Wednesday', 4, 'Thursday', 5, 'Friday', 6, 'Saturday', 7, 8) || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') nk, 
       ssbsect_crn || '$$' || ssbsect_term_code section,
       decode(day_of_week, 'Sunday', 1, 'Monday', 2, 'Tuesday', 3, 'Wednesday', 4, 'Thursday', 5, 'Friday', 6, 'Saturday', 7, 8) as day_of_week,
       CASE 
         WHEN ssrmeet_begin_time IS NOT NULL THEN SUBSTR(ssrmeet_begin_time, 1, 2) || ':' || SUBSTR(ssrmeet_begin_time, 3, 2) || ':00'
         ELSE NULL
       END from_tm, 
       CASE 
         WHEN ssrmeet_end_time IS NOT NULL THEN SUBSTR(ssrmeet_end_time, 1, 2) || ':' || SUBSTR(ssrmeet_end_time, 3, 2) || ':00'
         ELSE NULL
      END to_tm,
      CASE 
        WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code || '$$' || ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code 
        ELSE 'INTRNT' 
      END location,
      CASE 
        WHEN ssbsect_ssts_code = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
FROM ssrmeet RIGHT JOIN ssbsect ON ssbsect_term_code = ssrmeet_term_code
                               AND ssbsect_crn = ssrmeet_crn
              LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                               AND ssbsect_crn = sirasgn_crn
              LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
     -- Careful about excluding nulls, we have seen there are sections that are online that do not have any day filled and will
     -- be excluded from the extracts if we exclude all nulls. 
     UNPIVOT EXCLUDE NULLS
     (
       VAL FOR ( day_of_week ) IN 
          (
             ssrmeet_sun_day AS 'Sunday', 
             ssrmeet_mon_day AS 'Monday', 
             ssrmeet_tue_day AS 'Tuesday',
             ssrmeet_wed_day AS 'Wednesday',
             ssrmeet_thu_day AS 'Thursday',
             ssrmeet_fri_day AS 'Friday', 
             ssrmeet_sat_day AS 'Saturday'
          )
     )
WHERE spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code IN (SELECT TERM_CODE FROM CUR_TERM)

UNION

-- Have to address for sections that are not scheduled on a day of the week
SELECT ssbsect_crn || '$$' || ssbsect_term_code || '$$' || 8 || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') nk, 
       ssbsect_crn || '$$' || ssbsect_term_code section,
       8 day_of_week,
       CASE 
         WHEN ssrmeet_begin_time IS NOT NULL THEN SUBSTR(ssrmeet_begin_time, 1, 2) || ':' || SUBSTR(ssrmeet_begin_time, 3, 2) || ':00'
         ELSE NULL
       END from_tm, 
       CASE 
         WHEN ssrmeet_end_time IS NOT NULL THEN SUBSTR(ssrmeet_end_time, 1, 2) || ':' || SUBSTR(ssrmeet_end_time, 3, 2) || ':00'
         ELSE NULL
      END to_tm,
      CASE 
        WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code || '$$' || ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code 
        ELSE 'INTRNT' 
      END location,
      CASE 
        WHEN ssbsect_ssts_code = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
FROM ssrmeet RIGHT JOIN ssbsect ON ssbsect_term_code = ssrmeet_term_code
                               AND ssbsect_crn = ssrmeet_crn
              LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                               AND ssbsect_crn = sirasgn_crn
              LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
WHERE spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code IN (SELECT TERM_CODE FROM CUR_TERM)
  AND ssrmeet_sun_day is null AND ssrmeet_mon_day is null AND ssrmeet_tue_day is null
  AND ssrmeet_wed_day is null AND ssrmeet_thu_day is null AND ssrmeet_fri_day is null
  AND ssrmeet_sat_day is null","SectionTime"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"student_time_status_lkp","select student_time_cd,
student_time_desc
 from atlantatech.osf_stl_student_time_lkp","SSF_student_time_status_lkp"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"reg.StudentTestScore","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','KV','KO')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","StudentTestScore"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.Term","SELECT DISTINCT nk, name, cat_yr, registration_start_dt, registration_end_dt, term_start_dt, term_end_dt, is_active
FROM EAB_TRM
WHERE college LIKE 'C%'
ORDER BY 1","Term"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"inst.location","SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address,
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
UNION
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address,
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
UNION
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'T' is_active
FROM dual","Locations"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"core.advisor","WITH advisorMaxTerm AS (
SELECT sibinst_pidm
FROM sibinst baseTable
WHERE sibinst_fcst_code = 'AC'
  AND sibinst_advr_ind = 'Y'
  AND sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                              FROM sibinst compTable
                              WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                              )
),
\\\""advisor\\\"" AS (
SELECT spriden_id AS nk
  , COALESCE((SELECT DISTINCT(REGEXP_SUBSTR(goremal_email_address,'[^@]+',1,1))
              FROM goremal
                WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'ACCD' AND goremal_status_ind = 'A' ) -- try to get campus email if active and preferred. Confirm email_code with BA/Member.
              , LOWER(spriden_id)) 
              username
  , COALESCE((SELECT DISTINCT(goremal_email_address)
              FROM goremal
                WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'ACCD' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' and goremal_email_address like '%@alamo%') -- try to get campus email if active and preferred. Confirm email_code with BA/Member.
              , (SELECT DISTINCT(goremal_email_address)
                FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'ACCD' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N' and goremal_email_address like '%@alamo%') -- try to get campus email if active and not preferred. Confirm email_code with BA/Member.
              , LOWER(spriden_id) || '@missingemail.org') AS email -- Set default email address if none above are available.
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , 'T' AS is_active
FROM spriden
JOIN advisorMaxTerm ON advisorMaxTerm.sibinst_pidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent advisor record is extracted
)



-- Wrapper query
SELECT * FROM \\\""advisor\\\""","Advisor"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"inst.Location","SELECT DISTINCT REPLACE(ROOMS_ID, '*', ' ')  nk, -- ROOM BLDG AND ROOM ID
  ISNULL(BLDG_LOCATION,'') campus,
      B.BLDG_DESC + ' - ' + replace(ROOM_NAME, '*', ' ') + REPLACE(ROOMS_ID, '*', ' ')   name,
      '' latitude,
      '' longitude,
      isnull(B.BLDG_CITY,'') + ', ' + isnull(B.BLDG_STATE,'') + ' ' + isnull(B.BLDG_ZIP,'') address,
      '' comments,
      'T' is_active

 FROM ROOMS_VIEW
 JOIN BUILDINGS B   -- select * from BUILDINGS B
 ON B.BUILDINGS_ID = ROOMS_BLDG_ID  
and  ISNULL(BLDG_LOCATION,'') in ( 'SLCTR', 'WCCTR','FDCTR', 'FLEX')
--ROOMS -- changed 20161114
-- SELECT * FROM ROOMS_VIEW
-- select * from BUILDINGS where BLDG_LATITUDE is not null
-- select * from ROOMS_VIEW
-- ","Location"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.Course","-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- Gavilan specific logic to extract course description
courseDesc AS (
SELECT a.scrtext_subj_code
  , a.scrtext_crse_numb
  , LISTAGG(a.scrtext_text, ' ')
      WITHIN GROUP (ORDER BY a.scrtext_subj_code, a.scrtext_crse_numb, a.scrtext_seqno) AS description
    FROM SCRTEXT a
      JOIN maxEffectiveTerm ON (maxEffectiveTerm.scbcrse_subj_code = a.scrtext_subj_code
                                  AND maxEffectiveTerm.scbcrse_crse_numb = a.scrtext_crse_numb)
    WHERE a.scrtext_text_code = 'A' 
        AND a.scrtext_text IS NOT NULL
        AND a.scrtext_eff_term = (SELECT MAX(b.scrtext_eff_term) FROM SCRTEXT b
                                    WHERE b.scrtext_subj_code = a.scrtext_subj_code 
                                      AND b.scrtext_crse_numb = a.scrtext_crse_numb 
                                      AND b.scrtext_eff_term <= maxEffectiveTerm.maxTerm)
    GROUP BY a.scrtext_subj_code, a.scrtext_crse_numb
),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk -- nk has been modified to remove $$ between concatenation since the nk is shown on Navigate UI
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\""
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(courseDesc.description, 3000) AS \\\""desc\\\"" -- New logic to pull course description as provided by Gavilan. Old logic above has been commented out.
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits
  , CASE WHEN scbcrse.scbcrse_csta_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN courseDesc ON (scbcrse.scbcrse_subj_code = scrtext_subj_code
                          AND scbcrse.scbcrse_crse_numb = scrtext_crse_numb)
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM course
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Course"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"inst.Location","-- Fields: nk,campus,name,latitude,longitude,address,comments,is_active
-- Model Name: inst.Location
-- Name: Location
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get building data from Banner
WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
  AND slbbldg_camp_code ='C'
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
  AND slbbldg_camp_code ='C'
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Locations"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.StudentTerm","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'P'
 order by nk desc),

cur_stu as (
select id as stu_id
  from eab_stdnt_active
 where current_enroll_pc = 'Y'
   and academic_period in (select nk from cur_terms)),

cur_prog as (
select distinct nk as prog_id
  from eab_program
 where substr(college,0,1) = 'P'
)
SELECT
  nk,
  student,
  term,
  program,
  CASE 
    WHEN is_active = 'Y' THEN 'T'
    ELSE 'F'
  END AS is_active
  FROM EAB_STUDENT_TERM
 WHERE term in (select nk from cur_terms)
   and student IN (SELECT stu_id from cur_stu)
   and program in (select prog_id from cur_prog)
","Student Term"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"inst.location","select stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc name,
       '' latitude,
       '' longitude,
       case when coalesce(slbbldg_street_line1,
                          slbbldg_street_line2,
                          slbbldg_city,
                          slbbldg_zip,
                          'NA') = 'NA' then 'Address Not Available'
       else slbbldg_street_line1 || ' ' ||
            slbbldg_street_line2 || ' ' ||
            slbbldg_city || ', ' ||
            slbbldg_zip
       end address,
       '' comments,
       'T' is_active
  from stvbldg, slbbldg
 where slbbldg_bldg_code = stvbldg_code
 and slbbldg_bldg_code in (
'GREGG',
'INTERN',
'NAUTO',
'NMAIN',
'NWELL',
'ONLINE')
UNION
 select 'EAB0' nk,
          'DEFAULT' campus,
          'EAB default code' name,
          '' latitude,
          '' longitude,
          'Address Not Available' address,
          '' comments,
          'T' is_active 
from dual
UNION
select distinct SSRMEET_BLDG_CODE||'$$'||SSRMEET_ROOM_CODE nk,
       slbbldg_camp_code campus,
       stvbldg_desc || ' Room# ' ||SSRMEET_ROOM_CODE name,
       '' latitude,
       '' longitude,
       case when coalesce(slbbldg_street_line1, 
                          slbbldg_street_line2,
                          slbbldg_city,
                          slbbldg_zip,
                          'NA') = 'NA' then 'Address Not Available'
       else slbbldg_street_line1 || ' ' ||
            slbbldg_street_line2 || ' ' ||
            slbbldg_city || ', ' ||
            slbbldg_zip
       end address,
       '' comments,
       'T' is_active
from stvbldg, slbbldg, ssrmeet
where slbbldg_bldg_code = stvbldg_code 
and  stvbldg_code = SSRMEET_BLDG_CODE 
and SSRMEET_ROOM_CODE is not null
and slbbldg_bldg_code in (
'GREGG',
'INTERN',
'NAUTO',
'NMAIN',
'NWELL',
'ONLINE')
ORDER BY 2, 1","Location"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"core.Advisor","-- compute max term advisor record
WITH advisorMaxTerm AS (
SELECT sibinst_pidm
FROM sibinst baseTable
WHERE sibinst_fcst_code = 'AC'
  AND sibinst_advr_ind = 'Y'
  AND sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                              FROM sibinst compTable
                              WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                              )
),

-- extract advisor data
\\\""advisor\\\"" AS (
SELECT spriden_id AS nk
  , spriden_id AS username
  , COALESCE((SELECT goremal_email_address
              FROM CCCD_EAB_EMAIL
                WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'CCCD' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND rownum < 2) -- try to get campus email if active and preferred. Confirm email_code with BA/Member.
              , (SELECT goremal_email_address
                FROM CCCD_EAB_EMAIL
                  WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'CCCD' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N' AND rownum < 2) -- try to get campus email if active and not preferred. Confirm email_code with BA/Member.
              , LOWER(spriden_id) || '@missingemail.org') AS email -- Set default email address if none above are available.
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , 'T' AS is_active
FROM CCCD_EAB_GENERAL_PERSON
JOIN advisorMaxTerm ON advisorMaxTerm.sibinst_pidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent advisor record is extracted
)

-- Wrapper query
SELECT * FROM \\\""advisor\\\""","Advisor"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.enrollmentApplication","with studentPopulation AS (
select  saradap_pidm AS pidm,
        saradap_term_code_entry AS term,
        saradap_appl_no AS appl_no
from saradap
where saradap_term_code_entry in 
      (        
      select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE >= (
                      
                      SELECT MAX(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date < sysdate
                                )
                      )
      )
),

studentMaxTerm AS (
SELECT pidm AS pidm
  , MAX(term) AS maxTerm
  , MAX (appl_no) AS maxApplNo
FROM studentPopulation
  GROUP BY pidm
),

email_list as (
  select goremal_pidm as pidm,
         coalesce(
          (select goremal_email_address from CCCD_EAB_EMAIL where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'HOME' and rownum = 1),
          (select goremal_email_address from CCCD_EAB_EMAIL where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'CCCD' and rownum = 1),
          ''
         ) as email
    from CCCD_EAB_EMAIL g
),

enrollmentApplication as (
select DISTINCT spriden_id as nk,
       spriden_id as student,
       studentMaxTerm.maxTerm as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       TRIM(email_list.email) as personal_email,
       case
        when saradap_term_code_entry is not null then 'T'
        else 'F'
       end as is_active
  from saradap
    join studentMaxTerm on saradap_pidm = studentMaxTerm.pidm
                              and saradap_term_code_entry = studentMaxTerm.maxTerm
                              and saradap_appl_no = studentMaxTerm.maxApplNo
    join CCCD_EAB_GENERAL_PERSON on saradap_pidm = spriden_pidm -- Custom view at Coastline replacing SPRIDEN
    left join email_list on saradap_pidm = email_list.pidm
  where spriden_change_ind is NULL
    and spriden_entity_ind = 'P'
)

select  *
  from enrollmentApplication","EnrollmentApplication"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.Course","SELECT
  trim(cd) nk,
  trim(cd) cd,
  1 AS \\\""level\\\"",
  subject,
  trim(department) dept,
  title,
  descr \\\""desc\\\"",
  course_type,
  credits,
  is_active
FROM EAB_CRSE
WHERE college LIKE 'C%'

","Course"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"inst.Campus","-- Fields: nk,name,is_online,is_active
-- Model Name: inst.Campus
-- Name: Campus
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get campus data from Banner 
WITH campus AS (
SELECT DISTINCT stvcamp_code nk
                , stvcamp_desc \\\""name\\\""
   /*, CASE WHEN stvcamp_code = 'O' -- Logic to identify online campuses. Confirm with BA.
                			THEN 'T'
                			ELSE 'F' END is_online*/
                , 'F' is_online		
                ,  CASE WHEN stvcamp_code = 'C'
                		THEN 'T'
                		ELSE 'F' END is_active
FROM stvcamp
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM campus
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Campus"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"inst.Location","-- Fields: nk,campus,name,latitude,longitude,address,comments,is_active
-- Model Name: inst.Location
-- Name: Location
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get building data from Banner
WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
  AND slbbldg_camp_code ='G'
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
  AND slbbldg_camp_code ='G'
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Locations"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.Term","-- Fields: nk,name,cat_yr,registration_start_dt,registration_end_dt,term_start_dt,term_end_dt,is_active
-- Model Name: cat.Term
-- Name: Term
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version: pjf4g1
-- Author: James DeBolt
-- Query:
-- If you update this, update the CTEs in StudentTerm, StudentCourse, Section, etc.
WITH 
  validTerms AS
  ( SELECT DISTINCT  TERMS_ID nk ,
    TERM_DESC NAME ,
    TO_CHAR(TERM_REPORTING_YEAR) cat_yr ,
    NVL(REPLACE(TO_CHAR(TO_DATE(TERM_REG_START_DATE), 'yyyy-mm-dd'), '/', '-'), '1900-01-01') registration_start_dt ,
    NVL(REPLACE(TO_CHAR(TO_DATE(TERM_REG_END_DATE), 'yyyy-mm-dd'), '/', '-'), '1900-01-01') registration_end_dt ,
    NVL(REPLACE(TO_CHAR(TO_DATE(TERM_START_DATE), 'yyyy-mm-dd'), '/', '-'), '1900-01-01') term_start_dt ,
    NVL(REPLACE(TO_CHAR(TO_DATE(TERM_END_DATE), 'yyyy-mm-dd'), '/', '-'), '1900-01-01') term_end_dt ,
    CASE
      WHEN ( UPPER(TERM_DESC) LIKE '%SPRING 1 %'
      OR UPPER(TERM_DESC) LIKE '%SPRING 2 %' 
      OR UPPER(TERM_DESC) LIKE '%FALL 1 %'
      OR UPPER(TERM_DESC) LIKE '%FALL 2 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 1 %'
      OR UPPER(TERM_DESC) LIKE '%SUMMER 2 %'
      OR UPPER(TERM_DESC) LIKE '%MAYMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SPRING%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%FALL%SEMESTER%'
      OR UPPER(TERM_DESC) LIKE '%SUMMER%FULL%')
      THEN 'T'
      ELSE 'F'
    END is_active
  FROM COLL_PRODUCTION.TERMS
  WHERE  TERM_REPORTING_YEAR > EXTRACT (YEAR FROM SYSDATE) - 10
  AND TERM_REPORTING_YEAR    <= EXTRACT (YEAR FROM SYSDATE) + 10 
  AND TERMS_ID               IS NOT NULL
  )
  SELECT * FROM validTerms
","Term"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"inst.location","select
distinct a.facility_id as nk
, b.CAMPUS as campus
, a.DESCR as name
, '' latitude
, '' longitude
, '' address
, facility_type as comments
,  'T' as is_active

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('MAIN')
and a.setid = 'DC279'
and a.effdt = (select max(c.effdt) from ps_facility_tbl c where a.facility_id = c.facility_id and a.setid = c.setid)","Location"
1161,"Berkshire Community College",10490,"",48297,"Navigate:Berkshire Community College",47972,"Navigate",20,"cat.SeatsAvail","SELECT 
JOB_ID
,JOB_TITLE
,MIN_SALARY
,MAX_SALARY
FROM JOBS
WHERE ROWNUM < 5","Query_POC_01"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.Subject","-- get subject data from Banner  
WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  'T' AS is_active
FROM stvsubj
),

-- Assign default values
\\\""default\\\"" AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM subject
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Subject"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.Program","
-- determine most recent term for each Program by finding the max term for each program in sobcurr

select * from (
WITH maxEffectiveTerm AS (
  SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
    FROM sobcurr
    
   GROUP BY sobcurr_program
),

programCredits as (
  select smbpgen.smbpgen_program,
         smbpgen.smbpgen_term_code_eff,
         smbpgen.smbpgen_active_ind,
         nvl(smbpgen.smbpgen_req_credits_overall, 0.0) as credits
    from smbpgen join (select sMBPGEN_PROGRAM, max(smbpgen_term_code_eff) max_term
                         from smbpgen
                        where smbpgen_active_ind = 'Y'
                        group by sMBPGEN_PROGRAM) s on smbpgen.smbpgen_program = s.smbpgen_program
                                                   and smbpgen.smbpgen_term_code_eff = s.max_term
    WHERE 1=1
  /*  AND smbpgen.smbpgen_PROGRAM LIKE 'FFM1'
    SELECT * FROM SMBPGEN WHERE smbpgen_PROGRAM LIKE 'FFM1'
        SELECT * FROM SOBCURR WHERE SOBCURR_PROGRAM LIKE 'FFM1'
           SELECT * FROM smrprle WHERE smrprle_PROGRAM LIKE 'FFM1'
             SELECT * FROM STVMAJR WHERE STVMAJR_CODE LIKE 'FFM1'
              SELECT * FROM SMRPCMT WHERE smrpcmt_program LIKE 'FFM1'
              */
                 



),

-- Collection of program descriptions
prog_desc as (
  select smrpcmt_program, listagg(smrpcmt_text, ' ') within group (order by smrpcmt_TEXT_SEQNO asc) as smrpcmt_text
  -- smrpcmt_TEXT_SEQNO ADDED TO ORDER BY CLAUSE INSTEAD OF smrpcmt_PRINT CODE -- YA 20170124 EAB 
    from smrpcmt s1 join (select s2.smrpcmt_program as prgm, max(s2.smrpcmt_term_code_eff) as term
                            from smrpcmt s2 group by s2.smrpcmt_program) mx on s1.smrpcmt_term_code_eff = Mx.term
                                                                           and s1.smrpcmt_program = Mx.Prgm
   where 1=1 
 --   AND smrpcmt_prnt_code is not null
     and smrpcmt_text is not null
   group by smrpcmt_program
   order by smrpcmt_program
   
  -- SELECT * FROM smrpcmt
),

-- extract program data from Banner
program AS (
  SELECT DISTINCT
      sobcurr_program || '$$' || stvterm_acyr_code AS nk,
      sobcurr_program AS cd,
      TO_NUMBER(stvterm_acyr_code) AS cat_yr,
      smrprle_program_desc
 /* ||' - '|| -- Commented out concatenation per NN 20170125
		CASE WHEN sobcurr_program LIKE '%1' THEN 'Certificate' 
		   	 WHEN (sobcurr_program LIKE '%2' or sobcurr_program LIKE '%4') then 'Diploma'
			 WHEN sobcurr_program LIKE '%3' THEN 'Degree' 
		 ELSE ''
		 END 		*/
								  	AS \\\""name\\\"",
      coalesce(smrpcmt_text, smrprle_program_desc, 'None') AS \\\""desc\\\"",
      NVL(credits, 0.0) AS CREDITS, 
-- confirm degree code to credits conversion with BAMember. This logic may differ for different colleges and will need to be adjusted accordingly.
      '' AS enrollment_notes,
      '' AS registration_notes,
     -- Logic may be member specific depending on how sobcurr_program is defined at the college.
-- For example, the data could contain dashes instead of underscores  Confirm with BA
      COALESCE (substr(sobcurr_program,1,CAST(INSTR(sobcurr_program, '_') AS NUMBER)-1),'NA') AS area_of_study,
      '' AS concentration,
      sobcurr_degc_code AS \\\""credential\\\"",
      DECODE (stvmajr_cipc_code,
              null,
              null,
              SUBSTR(stvmajr_cipc_code,1,2)||'.'||SUBSTR(stvmajr_cipc_code,3)) AS cip,
      CASE
        WHEN sobcurr_degc_code IN ('AA','AS') THEN 'T'
        ELSE 'F'
      END AS is_transfer, -- Confirm with BA
      CASE
        WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T'
        ELSE 'F'
      END AS is_active
    FROM sobcurr LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
                 LEFT JOIN smrprle ON smrprle_program = sobcurr_program
                 LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
                 LEFT JOIN stvmajr ON stvmajr_code = sobcurr_program  --(SUBSTR(sobcurr_program,1,CAST(INSTR(sobcurr_program,'_') AS NUMBER)-1))  
 -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes
-- instead of underscores  Confirm with B emeber. Should match with area_of_study in SELECT portion of query.
                 LEFT JOIN programCredits ON sobcurr_program = smbpgen_program
                 LEFT JOIN prog_desc on sobcurr_program = smrpcmt_program
   where smbpgen_term_code_eff >= '201212' -- per Bruce
     and smbpgen_active_ind = 'Y' -- per Bruce
)

-- Wrapper query
SELECT * FROM program
)x 
where 1=1
--- AND x.cd like 'FFM1'","Programs"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.SeatsAvail","-- Fields	nk,avail_seats,is_active
-- Model Name	cat.SeatsAvail
-- Name	SeatsAvail
-- Output	SeatsAvail_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:	

-- extract seats available from banner
WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk.
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
WHERE 1=1
  AND ssbsect_ssts_code = 'A' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. we do not need to extract seats available for past terms.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM seatsAvail
","Seats Available"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.Term","SELECT DISTINCT SUBSTRING(TERMS_ID,1,6) nk,
     TERM_DESC name,
     CAST ( TERM_REPORTING_YEAR AS CHAR(4)) cat_yr,
     REPLACE(CONVERT(CHAR(10), TERM_PREREG_START_DATE, 111) , '/','-') registration_start_dt,
       REPLACE(CONVERT(CHAR(10), TERM_REG_END_DATE, 111) , '/','-') registration_end_dt,
       REPLACE(CONVERT(CHAR(10), TERM_START_DATE, 111) , '/','-') term_start_dt,
       REPLACE(CONVERT(CHAR(10), TERM_END_DATE, 111) , '/','-') term_end_dt,
     'T' is_active
  FROM TERMS
    where (TERM_REPORTING_YEAR > YEAR(getdate())-10 and
         TERM_REPORTING_YEAR <= YEAR(GETDATE())+1) AND
          TERMS_ID is not NULL and
          TERM_REG_START_DATE is not null
    order by cat_yr, registration_start_dt","Term"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.studentterm","WITH PMT as (
select * from (
  select distinct sobcurr_program as pgrm,
         max(sobcurr_term_code_init) as prog_max_term,
         stvterm_acyr_code as acyr
  from sobcurr
  --left join sobcurr on sobcurr_program = smbpgen_program
  left join stvterm on stvterm_code = sobcurr_term_code_init
  where stvterm_code is not null
  --and smbpgen_program = 'AA_LAN_RUSS'
  group by sobcurr_program, stvterm_acyr_code
  ) b
  where prog_max_term = (select max(sobcurr_term_code_init) from sobcurr where sobcurr.sobcurr_program = b.pgrm)
  --and pgrm like '4%'
),

SGB as (
select * from (
 select sgbstdn_pidm,
      sgbstdn_program_1,
      sgbstdn_stst_code,
      sgbstdn_term_code_eff as max_eff_term,
    sgbstdn_term_code_ctlg_1,
    stvstst_reg_ind
  from sgbstdn
  left join stvstst on stvstst_code = sgbstdn_stst_code
  where sgbstdn_program_1 is not null
  and stvstst_code is not null) a
where max_eff_term = (select max(sgbstdn_term_code_eff)
                        from sgbstdn
                        right join stvterm on sgbstdn_term_code_eff = stvterm_code
                        where a.sgbstdn_pidm = sgbstdn_pidm 
                        and stvterm_end_date <= sysdate + 365 )
order by 1,4
),

pop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW') -- Need to confirm
      and sfrstcr_term_code in (
        select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= ( -- excluding non credit terms, we are looking at students active in the previous 5 terms relative to the current term
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE'                         -- Need to confirm
                      and stvterm_desc not like '%Continuing Education'       -- Need to confirm
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                       )
          And Rownum < 15
          order by 1 desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= (
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE' 
                      and stvterm_desc not like '%Continuing Education'
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                       )
          And Rownum < 15
          order by 1 desc))
))),                           

\\\""FINAL\\\"" AS(
select spriden_id || '$$' || SGB.max_eff_term nk,
       spriden_id student,
       SGB.max_eff_term term,
       SGB.sgbstdn_program_1 || '$$' || PMT.ACYR \\\""program\\\"",
       decode(stvstst_reg_ind,'Y','T','F') is_active
from spriden
right join SGB on spriden_pidm = SGB.sgbstdn_pidm
join PMT on SGB.sgbstdn_program_1 = PMT.pgrm 
--right join pop on spriden_pidm = pop.pidm 
where spriden_change_ind is null
and spriden_pidm in (select * from pop)
)

SELECT * FROM \\\""FINAL\\\""
WHERE 1=1","Student Term"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"inst.location","select stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc name,
       '' latitude,
       '' longitude,
       case when coalesce(slbbldg_street_line1,
                          slbbldg_street_line2,
                          slbbldg_city,
                          slbbldg_zip,
                          'NA') = 'NA' then 'Address Not Available'
       else slbbldg_street_line1 || ' ' ||
            slbbldg_street_line2 || ' ' ||
            slbbldg_city || ', ' ||
            slbbldg_zip
       end address,
       '' comments,
       'T' is_active
  from stvbldg, slbbldg
 where slbbldg_bldg_code = stvbldg_code
UNION
 select 'EAB0' nk,
          'DEFAULT' campus,
          'EAB default code' name,
          '' latitude,
          '' longitude,
          'Address Not Available' address,
          '' comments,
          'T' is_active 
from dual
UNION
select distinct SSRMEET_BLDG_CODE||'$$'||SSRMEET_ROOM_CODE nk,
       slbbldg_camp_code campus,
       stvbldg_desc || ' Room# ' ||SSRMEET_ROOM_CODE name,
       '' latitude,
       '' longitude,
       case when coalesce(slbbldg_street_line1, 
                          slbbldg_street_line2,
                          slbbldg_city,
                          slbbldg_zip,
                          'NA') = 'NA' then 'Address Not Available'
       else slbbldg_street_line1 || ' ' ||
            slbbldg_street_line2 || ' ' ||
            slbbldg_city || ', ' ||
            slbbldg_zip
       end address,
       '' comments,
       'T' is_active
from stvbldg, slbbldg, ssrmeet
where slbbldg_bldg_code = stvbldg_code 
and  stvbldg_code = SSRMEET_BLDG_CODE 
and SSRMEET_ROOM_CODE is not null
ORDER BY 2, 1","Location"
1218,"Atlanta Technical College",10508,"",48366,"Navigate:Atlanta Technical College",47972,"Navigate",20,"cat.Subject","-- Fields nk,name,is_active
-- Model Name cat.Subject
-- Name Subject
-- Script Version (Product.Major.Minor.Custom) Nav.1.0.0
-- schema spec version
-- Author Doug Menezes
-- Query

-- get subject data from Banner  

With real_deptsSUBJScamps as (
SELECT DISTINCT  --Distinct needed because we have to go to SSBSECT for Course Type Codes 
       a.SCBCRSE_COLL_CODE        
       , a.SCBCRSE_SUBJ_CODE     
       , a.SCBCRSE_CRSE_NUMB       
	    , a.SCBCRSE_DEPT_CODE     
		,a.SCBCRSE_EFF_TERM
	--	, a.scbcrse_camp_code
		    
FROM   SCBCRSE a 

--SECONDARY COURSE INFORMATION 
LEFT OUTER JOIN SSBSECT b 
             ON a.SCBCRSE_SUBJ_CODE = b.SSBSECT_SUBJ_CODE 
                AND a.SCBCRSE_CRSE_NUMB = b.SSBSECT_CRSE_NUMB 

				

WHERE  1 = 1 
   AND a.SCBCRSE_EFF_TERM = (--DEDUPING LOGIC 
                             SELECT MAX(SCBCRSE_EFF_TERM) 
                             FROM   SCBCRSE b 
                             WHERE  b.SCBCRSE_SUBJ_CODE = a.SCBCRSE_SUBJ_CODE 
                                AND b.SCBCRSE_CRSE_NUMB = a.SCBCRSE_CRSE_NUMB)                        
)

,subject AS (
SELECT DISTINCT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  'T' AS is_active 
FROM stvsubj join real_deptsSUBJScamps ON real_deptsSUBJScamps.SCBCRSE_SUBJ_CODE = stvsubj.stvsubj_CODE
              AND STVSUBJ_disp_web_ind ='Y'
),

-- Assign default values
defaultValues AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM subject
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet



-- Notes => DATA examples nk = 'ABE', 'AG'
-- 					name = 'Adulet Basic Education', 'Agriculture'

-- Change log
--				Developer
--				Change version
--				Description","Subject"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"core.facultytype","Select Stvfstp_Code As Nk,
  Stvfstp_Code As \\\""type\\\"",
  stvfstp_desc as description
  From Stvfstp
Union
Select Stvfctg_Code As Nk,
Stvfctg_Code As \\\""type\\\"",
Stvfctg_Desc As Description
from stvfctg
union 
select 'Staff' as Nk,
'Staff' as \\\""type\\\"",
'Staff' as Description
from dual
 Order By 1","FacultyType"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.seatsavail","with section_pop as ( --this is to make sure the sections we select are in line with sections in the Section file.

select section.crse_id || '$$' 
                            || section.strm || '$$' 
                            || section.CLASS_SECTION as nk
from PS_CLASS_TBL section
where 1=1
  and section.institution = 'TN293'
  and section.start_dt > sysdate-365 
),

location_pop as (
select
distinct a.facility_id as nk,
b.location

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('HT','MAIN')
and a.setid = 'TN293'
and a.effdt = (select max(c.effdt) 
                from ps_facility_tbl c 
                where a.facility_id = c.facility_id 
                and a.setid = c.setid) 
),

dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'TN293'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

),

course_pop as (

SELECT o.CRSE_ID
FROM PS_CRSE_OFFER o
inner join (select CRSE_ID, MAX(EFFDT) as max_eff, MAX(CRSE_OFFER_NBR) as max_crse_nbr from PS_CRSE_OFFER 
  where  INSTITUTION = 'TN293'
  and acad_career = 'CRED'
  and acad_org = 'SCREDIT'
  group by CRSE_ID) p
on o.crse_id = p.crse_id
WHERE o.EFFDT = p.max_eff
and o.crse_offer_nbr = p.max_crse_nbr

)


select distinct section.crse_id || '$$' || section.strm || '$$' || section.session_code || '$$'
                || dates.date_diff || '$$' || section.CLASS_SECTION as nk

, section.ENRL_CAP - section.ENRL_TOT as seats_avail
, 'T' as is_active
from PS_CLASS_TBL section
left join PS_CLASS_MTG_PAT meetings on section.strm = meetings.strm
                  and section.session_code = meetings.session_code
                  and section.class_section = meetings.class_section
                  and section.crse_offer_nbr = meetings.crse_offer_nbr
                  and section.crse_id = meetings.crse_id
left join dates on section.strm = dates.strm --added dates for nk link
          and section.session_code = dates.session_code
where 1=1 
and section.institution = 'TN293' --member specific
and section.start_dt > sysdate-365 --designed to limit the sections to only relevant ones in the present and future
and section.crse_id || '$$' || section.strm || '$$' || section.class_section in (select * from section_pop) --population
and meetings.facility_id in (select nk from location_pop)
and section.crse_id in (select * from course_pop)","SeatsAvail"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.SectionTime","SELECT ssbsect_crn || '$$' || ssbsect_term_code || '$$' || decode(day_of_week, 'Sunday', 1, 'Monday', 2, 'Tuesday', 3, 'Wednesday', 4, 'Thursday', 5, 'Friday', 6, 'Saturday', 7, 8) || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') nk, 
       ssbsect_crn || '$$' || ssbsect_term_code section,
       decode(day_of_week, 'Sunday', 1, 'Monday', 2, 'Tuesday', 3, 'Wednesday', 4, 'Thursday', 5, 'Friday', 6, 'Saturday', 7, 8) as day_of_week,
       CASE 
         WHEN ssrmeet_begin_time IS NOT NULL THEN SUBSTR(ssrmeet_begin_time, 1, 2) || ':' || SUBSTR(ssrmeet_begin_time, 3, 2) || ':00'
         ELSE NULL
       END from_tm, 
       CASE 
         WHEN ssrmeet_end_time IS NOT NULL THEN SUBSTR(ssrmeet_end_time, 1, 2) || ':' || SUBSTR(ssrmeet_end_time, 3, 2) || ':00'
         ELSE NULL
      END to_tm,
      CASE 
        WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code || '$$' || ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code 
        ELSE 'WEB' 
      END location,
      CASE 
        WHEN ssbsect_ssts_code = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
FROM ssrmeet JOIN ssbsect ON ssbsect_term_code = ssrmeet_term_code
                         AND ssbsect_crn = ssrmeet_crn
        LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                         AND ssbsect_crn = sirasgn_crn
        LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
     UNPIVOT EXCLUDE NULLS
     (
       VAL FOR ( day_of_week ) IN 
          (
             ssrmeet_sun_day AS 'Sunday', 
             ssrmeet_mon_day AS 'Monday', 
             ssrmeet_tue_day AS 'Tuesday',
             ssrmeet_wed_day AS 'Wednesday',
             ssrmeet_thu_day AS 'Thursday',
             ssrmeet_fri_day AS 'Friday', 
             ssrmeet_sat_day AS 'Saturday'
          )
     )
WHERE ssbsect_term_code >= '201015'
  AND spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  and substr(ssbsect_term_code, -1, 1) IN ('0','9')
ORDER BY ssbsect_crn, ssbsect_term_code, day_of_week
","SectionTime"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.Subject","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Subject File

Fields	nk,name,is_active
*/

SELECT DISTINCT NVL(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    SUBSTR(REPLACE(cr.crs_no, ' ', ''), 1, 5)
                    , '1', ''), '2', ''), '3', ''), '4', '')
                    , '5', ''), '6', ''), '7', ''), '8', '')
                    , '9', ''), '0', '')), '') AS nk
                , NVL(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    SUBSTR(REPLACE(cr.crs_no, ' ', ''), 1, 5)
                    , '1', ''), '2', ''), '3', ''), '4', '')
                    , '5', ''), '6', ''), '7', ''), '8', '')
                    , '9', ''), '0', '')), '') AS name
                , 'T' AS is_active 
FROM informix.crs_rec cr  
WHERE 1=1
   AND cr.crs_no <> ''
ORDER BY 1","Subjects"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"event.TaskStatusFeed","--Fields  nk,student,event,repeated_by_nk,status,status_changed_ts,is_active
--Model Name  event.TaskStatusFeed
--Name  TaskStatusFeed
--Output  TaskStatusFeed_{data#DateStamp}.csv
--Query :


-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- Extract E_ORIENTATION related events - no repeat
E_ORIENTATION AS (
SELECT
  spriden_id || '$$E_ORIENTATION$$' AS nk
  , spriden_id AS student
  , 'E_ORIENTATION' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP -- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVRORNT
    ON SVRORNT_PIDM = studentPopulation.studentPidm
WHERE SVRORNT_DICD_CODE = 832		-- Golden West students
	AND SVRORNT_OSST_CODE IN ('ORIENT','ONLINE','LEGACY','SOAR')
--  AND SVRORNT_ACTIVITY_DATE > SYSDATE - 150
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


-- Extract E_FIRST_ADVISOR_MEET related events - no repeat
E_FIRST_ADVISOR_MEET AS (
SELECT DISTINCT
  spriden_id || '$$E_FIRST_ADVISOR_MEET$$' AS nk
  , spriden_id AS student
  , 'E_FIRST_ADVISOR_MEET' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVREDPL
    ON SVREDPL_PIDM = studentPopulation.studentPidm
WHERE SVREDPL_DICD_CODE = 832		-- Golden West students
	AND SVREDPL_EPST_CODE IN ('ABBREV', 'COMPR')
--  AND SVREDPL_ACTIVITY_DATE > SYSDATE - 150
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


-- Extract E_MEET_COUNSELOR related events - repeats when each term starts
E_MEET_COUNSELOR AS (
SELECT DISTINCT
  spriden_id || '$$E_MEET_COUNSELOR$$' || STVTERM.STVTERM_CODE AS nk
  , spriden_id AS student
  , 'E_MEET_COUNSELOR' AS event
  ,  STVTERM.STVTERM_CODE AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVREDPL
    ON SVREDPL_PIDM = studentPopulation.studentPidm
  JOIN STVTERM
    ON STVTERM.STVTERM_CODE = SVREDPL.SVREDPL_TERM_CODE
WHERE SVREDPL_DICD_CODE = 832		-- Golden West students
	AND SVREDPL_EPST_CODE IN ('ABBREV', 'COMPR')
--  AND SVREDPL_ACTIVITY_DATE > SYSDATE - 150
	AND STVTERM.STVTERM_START_DATE <= sysdate		
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


-- Extract E_PLACEMENT related events - no repeat
E_PLACEMENT AS (
SELECT
  spriden_id || '$$E_PLACEMENT$$' AS nk
  , spriden_id AS student
  , 'E_PLACEMENT' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SORTEST
    ON SORTEST_PIDM = studentPopulation.studentPidm
WHERE SORTEST_TESC_CODE IN ('1PEN','1PES','1PRD','2PEN','2PES','2PLI','2PRD','3PEN','3PES','3PRD','6RLG','6RLL','6RLR','1PMA','2PMA','3PMA') 
  AND (SORTEST_TSRC_CODE = 'TAPE' OR SORTEST_TSRC_CODE IS NULL)
--  AND SORTEST_ACTIVITY_DATE > SYSDATE - 150
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),



-- Extract each student's FIRST_TERM
FIRST_TERM AS(
select
    spriden_id
    ,saradap_pidm as student_pidm
    ,min(saradap_term_code_entry) as first_term_code
  from studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  WHERE spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
 group by spriden_id, saradap_pidm
),



-- Extract each student's NEXT_TERM
NEXT_TERM AS(
select
  spriden_id
  ,saradap_pidm as student_pidm   
	,LEAD(STVTERM.STVTERM_CODE, 1) OVER(PARTITION BY spriden_id, SARADAP_PIDM ORDER BY STVTERM.STVTERM_CODE) AS NEXT_TERM_CODE
  from studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  JOIN STVTERM
    ON STVTERM.STVTERM_CODE = saradap.saradap_term_code_entry
  WHERE SYSDATE BETWEEN STVTERM.STVTERM_START_DATE AND STVTERM.STVTERM_END_DATE
    and spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
),





-- Get students who have registered
REGISTERED_STUDENTS AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm 
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
),


-- Extract E_REGISTER_FIRST_TERM related events - repeats on first term registration
E_REGISTER_FIRST_TERM AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_REGISTER_FIRST_TERM$$' || FIRST_TERM.FIRST_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_REGISTER_FIRST_TERM' AS event
  , FIRST_TERM.FIRST_TERM_CODE  AS repeated_by_nk	
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN FIRST_TERM
    ON FIRST_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


-- Extract E_REGISTER_NEXT_TERM related events - repeats each next term
E_REGISTER_NEXT_TERM AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_REGISTER_NEXT_TERM$$' || NEXT_TERM.NEXT_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_REGISTER_NEXT_TERM' AS event
  , NEXT_TERM.NEXT_TERM_CODE AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Golden West since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN NEXT_TERM
    ON NEXT_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE NEXT_TERM.NEXT_TERM_CODE IS NOT NULL
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),



finalDataSet AS (
SELECT * FROM E_ORIENTATION
UNION
SELECT * FROM E_FIRST_ADVISOR_MEET
UNION
SELECT * FROM E_MEET_COUNSELOR
UNION
SELECT * FROM E_PLACEMENT      
UNION
SELECT * FROM E_REGISTER_FIRST_TERM    
UNION
SELECT * FROM E_REGISTER_NEXT_TERM     
)

SELECT * from finalDataSet","TaskStatusFeed"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"noah_student","
WITH population AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 30
ORDER BY 1 desc)
)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
))))


SELECT spriden.SPRIDEN_ID                                                          AS STUDENT_ID
       , spriden.SPRIDEN_FIRST_NAME                                                AS FIRST_NAME
       , spriden.SPRIDEN_LAST_NAME                                                 AS LAST_NAME
       , TO_CHAR(demographic.SPBPERS_BIRTH_DATE, 'yyyymmdd')                          AS DATE_OF_BIRTH
       , NVL(demographic.SPBPERS_SEX, '')                                             AS GENDER
       , NVL(demographic.SPBPERS_ETHN_CODE, '')                                       AS ETHNICITY_CD
       , CASE 
           WHEN INTL.SPBPERS_PIDM IS NOT NULL THEN 'Y' 
           ELSE 'N' 
         END                                                                          AS INTERNATIONAL_IND
       , hs.STVSBGI_DESC                                                              AS HS_NAME
       , SOBSBGI.SOBSBGI_CITY                                                         AS HS_CITY
       , SOBSBGI.SOBSBGI_STAT_CODE                                                    AS HS_STATE
       , hs.SORHSCH_CLASS_SIZE                                                        AS HS_SIZE
       , hs.SORHSCH_PERCENTILE                                                        AS HS_PERCENTILE
       , hs.SORHSCH_CLASS_RANK                                                        AS HS_RANK
       , hs.SORHSCH_GPA                                                               AS HS_GPA
       , address.SPRADDR_ZIP                                                          AS MAIL_ZIP_CODE
       , demographic.SPBPERS_LGCY_CODE                                                AS STUDENT_LEGACY_CD
       , CASE 
           WHEN TRANSF.SGBSTDN_PIDM IS NOT NULL THEN 'Y' 
           ELSE 'N' 
         END                                                                          AS TRANSFER_STUDENT_IND 
       , CASE 
           WHEN demographic.SPBPERS_VERA_IND IS NOT NULL THEN 'Y'
           ELSE 'N'
         END                                                                          AS VETERAN_IND
       , CASE 
           WHEN readmit.SARADAP_PIDM IS NULL THEN 'N' 
           ELSE 'Y' 
         END                                                                          AS READMIT_IND
       , CASE 
           WHEN FINAID.RCRAPP3_FATHER_HI_GRADE NOT IN ( '3', '4' ) 
                AND FINAID.RCRAPP3_MOTHER_HI_GRADE NOT IN ( '3', '4' ) 
                AND ( FINAID.RCRAPP3_FATHER_HI_GRADE IN ( '1', '2' ) 
                       OR FINAID.RCRAPP3_MOTHER_HI_GRADE IN ( '1', '2' ) ) THEN 'Y' -- Y WHEN AT LEAST ONE OF THE PARENTS HAVE BEEN REPORTED TO HAVE NOT COMPLETED COLLEGE AND NONE HAVE BEEN REPORTED TO HAVE COMPLETED COLLEGE   
           WHEN ( FINAID.RCRAPP3_FATHER_HI_GRADE IN ( '3', '4' ) 
                   OR FINAID.RCRAPP3_MOTHER_HI_GRADE IN ( '3', '4' ) ) THEN 'N'--  -- N ONLY WHEN AT LEAST ONE OF THE PARENTS HAVE BEEN REPORTED TO HAVE COMPLETED COLLEGE OTHERWISE ''   
           ELSE '' 
         END                                                                          AS FIRST_GEN_IND 
       , SOBSBGI.SOBSBGI_ZIP                                                          AS HS_ZIP_CODE
       , ''                                                                           AS ADMISSION_ZIP_CODE


FROM --STUDENT POPULATION 
 population 
left join spriden on spriden.spriden_pidm = population.pidm

--DEMOGRAPHIC INFORMATION 
LEFT OUTER JOIN SPBPERS demographic 
             ON population.pidm = demographic.SPBPERS_PIDM 
             
-- INTL IND 
LEFT OUTER JOIN (SELECT DISTINCT SPBPERS_PIDM 
                 FROM   SPBPERS 
                 WHERE  SPBPERS_CITZ_CODE = 'A') intl 
             ON population.pidm = INTL.SPBPERS_PIDM 
             
--ADDRESS 
LEFT OUTER JOIN (SELECT SPRADDR.SPRADDR_PIDM 
                        , SPRADDR.SPRADDR_STREET_LINE1 
                        , SPRADDR.SPRADDR_STREET_LINE2 
                        , SPRADDR_CITY 
                        , SPRADDR_STAT_CODE 
                        , SPRADDR_ZIP 
                 FROM   SPRADDR 
                        JOIN (SELECT SPRADDR_PIDM 
                                     , Max(SPRADDR_SEQNO) AS max_seqno 
                              FROM   SPRADDR 
                              WHERE  SPRADDR_ATYP_CODE = 'MA' --MODIFY PER MEMBER 
                                 AND SPRADDR_STATUS_IND IS NULL 
                              GROUP  BY SPRADDR_PIDM) addr_max 
                          ON SPRADDR.SPRADDR_PIDM = addr_max.SPRADDR_PIDM 
                             AND SPRADDR.SPRADDR_SEQNO = addr_max.MAX_SEQNO 
                 WHERE  SPRADDR.SPRADDR_ATYP_CODE = 'MA' --MODIFY PER MEMBER 
                    AND SPRADDR.SPRADDR_STATUS_IND IS NULL 
                    AND SPRADDR_FROM_DATE <= SYSDATE 
                    AND ( SPRADDR_TO_DATE >= SYSDATE 
                           OR SPRADDR_TO_DATE IS NULL )) address 
             ON population.pidm = address.SPRADDR_PIDM 
             
--LEGACY 
LEFT OUTER JOIN STVLGCY leg 
             ON demographic.SPBPERS_LGCY_CODE = leg.STVLGCY_CODE 
             
--HIGH SCHOOL 
LEFT OUTER JOIN (SELECT SORHSCH.SORHSCH_PIDM 
                        , SORHSCH_GPA 
                        , SORHSCH_CLASS_RANK 
                        , SORHSCH_PERCENTILE 
                        , SORHSCH_CLASS_SIZE 
                        , STVSBGI.STVSBGI_DESC 
                        , SORHSCH_SBGI_CODE 
                 FROM   SORHSCH 
                        JOIN (SELECT SORHSCH_PIDM 
                                     , Max(SORHSCH_ACTIVITY_DATE) AS max_date 
                              FROM   SORHSCH 
                              GROUP  BY SORHSCH_PIDM) crit 
                          ON SORHSCH.SORHSCH_PIDM = crit.SORHSCH_PIDM 
                             AND SORHSCH.SORHSCH_ACTIVITY_DATE = crit.MAX_DATE 
                        JOIN STVSBGI 
                          ON SORHSCH.SORHSCH_SBGI_CODE = STVSBGI.STVSBGI_CODE) hs 
             ON population.pidm = hs.SORHSCH_PIDM 
             
--HIGH SCHOOL PT2 
LEFT OUTER JOIN SOBSBGI 
             ON hs.SORHSCH_SBGI_CODE = SOBSBGI.SOBSBGI_SBGI_CODE 
             
             
--TRANSFER STUDENT IND UPDATE APRIL 12 2015 
LEFT OUTER JOIN (SELECT DISTINCT SGBSTDN_PIDM 
                 FROM   SGBSTDN 
                 WHERE  SGBSTDN_STYP_CODE IN ( '2', 'T', 'L' ))TRANSF    --MODIFY PER MEMBER 
             ON TRANSF.SGBSTDN_PIDM = population.pidm 

--READMIT INDICATOR 
LEFT OUTER JOIN (SELECT DISTINCT SARADAP_PIDM 
                 FROM   SARADAP 
                 WHERE  SARADAP_ADMT_CODE = 'RE' 
                    --AND SARADAP_LEVL_CODE = 'U' --MODIFY PER MEMBER 
                ) readmit 
             ON readmit.SARADAP_PIDM = population.pidm 

LEFT JOIN (SELECT DISTINCT RCRAPP3.RCRAPP3_PIDM AS PIDM 
                           , RCRAPP3.RCRAPP3_FATHER_HI_GRADE 
                           , RCRAPP3.RCRAPP3_MOTHER_HI_GRADE 
                           , RCRAPP1.RCRAPP1_PAR_US_INC 
                           , RCRAPP1.RCRAPP1_PAR_MRTL_STATUS 
                           , RCRAPP3.RCRAPP3_AIDY_CODE 
           FROM   RCRAPP3 
                  JOIN RCRAPP1 
                    ON RCRAPP1.RCRAPP1_PIDM = RCRAPP3.RCRAPP3_PIDM 
                       AND RCRAPP1.RCRAPP1_AIDY_CODE = RCRAPP3.RCRAPP3_AIDY_CODE 
                       AND RCRAPP1.RCRAPP1_SEQ_NO = RCRAPP3.RCRAPP3_SEQ_NO 
                       AND RCRAPP1.RCRAPP1_INFC_CODE = RCRAPP3.RCRAPP3_INFC_CODE 
                       AND RCRAPP1.RCRAPP1_CURR_REC_IND = 'Y' 
           WHERE  RCRAPP1.RCRAPP1_AIDY_CODE = (SELECT Max(B.RCRAPP1_AIDY_CODE) 
                                               FROM   RCRAPP1 B 
                                               WHERE  B.RCRAPP1_PIDM = RCRAPP1.RCRAPP1_PIDM 
                                                  AND B.RCRAPP1_CURR_REC_IND = 'Y'))FINAID  
       ON FINAID.PIDM = population.pidm 
             	 
             
WHERE  1 = 1 

ORDER  BY 1 

","Student"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.SectionTime","with CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE as term_code
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE','AU','RW','RC','R1','R2','R3','R4',
                               'R5','R6','R9','RL','R9','R1','R2','R3', 
                               'R4','R5','R6','U1','U2','U3','U4','U5',
                               'U6','U9')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-1*365
     and stvterm_fa_proc_yr != '9999'
     ORDER BY STVTERM_CODE DESC
)

SELECT ssbsect_crn || '$$' || ssbsect_term_code || '$$' || decode(day_of_week, 'Sunday', 1, 'Monday', 2, 'Tuesday', 3, 'Wednesday', 4, 'Thursday', 5, 'Friday', 6, 'Saturday', 7, 8) || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') nk, 
       ssbsect_crn || '$$' || ssbsect_term_code section,
       decode(day_of_week, 'Sunday', 1, 'Monday', 2, 'Tuesday', 3, 'Wednesday', 4, 'Thursday', 5, 'Friday', 6, 'Saturday', 7, 8) as day_of_week,
       CASE 
         WHEN ssrmeet_begin_time IS NOT NULL THEN SUBSTR(ssrmeet_begin_time, 1, 2) || ':' || SUBSTR(ssrmeet_begin_time, 3, 2) || ':00'
         ELSE NULL
       END from_tm, 
       CASE 
         WHEN ssrmeet_end_time IS NOT NULL THEN SUBSTR(ssrmeet_end_time, 1, 2) || ':' || SUBSTR(ssrmeet_end_time, 3, 2) || ':00'
         ELSE NULL
      END to_tm,
      CASE 
        WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code || '$$' || ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code 
        ELSE 'INTRNT' 
      END location,
      CASE 
        WHEN ssbsect_ssts_code = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
FROM ssrmeet JOIN ssbsect ON ssbsect_term_code = ssrmeet_term_code
                               AND ssbsect_crn = ssrmeet_crn
              LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                               AND ssbsect_crn = sirasgn_crn
              LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
     -- Careful about excluding nulls, we have seen there are sections that are online that do not have any day filled and will
     -- be excluded from the extracts if we exclude all nulls. 
     UNPIVOT EXCLUDE NULLS
     (
       VAL FOR ( day_of_week ) IN 
          (
             ssrmeet_sun_day AS 'Sunday', 
             ssrmeet_mon_day AS 'Monday', 
             ssrmeet_tue_day AS 'Tuesday',
             ssrmeet_wed_day AS 'Wednesday',
             ssrmeet_thu_day AS 'Thursday',
             ssrmeet_fri_day AS 'Friday', 
             ssrmeet_sat_day AS 'Saturday'
          )
     )
WHERE spriden_change_ind IS NULL
  AND ssbsect_term_code in (select * from cur_term)
/* USE CUR_TERM HERE */
UNION

-- Have to address for sections that are not scheduled on a day of the week
SELECT ssbsect_crn || '$$' || ssbsect_term_code || '$$' || 8 || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') nk, 
       ssbsect_crn || '$$' || ssbsect_term_code section,
       8 day_of_week,
       CASE 
         WHEN ssrmeet_begin_time IS NOT NULL THEN SUBSTR(ssrmeet_begin_time, 1, 2) || ':' || SUBSTR(ssrmeet_begin_time, 3, 2) || ':00'
         ELSE NULL
       END from_tm, 
       CASE 
         WHEN ssrmeet_end_time IS NOT NULL THEN SUBSTR(ssrmeet_end_time, 1, 2) || ':' || SUBSTR(ssrmeet_end_time, 3, 2) || ':00'
         ELSE NULL
      END to_tm,
      CASE 
        WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code || '$$' || ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code 
        ELSE 'INTRNT' 
      END location,
      CASE 
        WHEN ssbsect_ssts_code = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
FROM ssrmeet RIGHT JOIN ssbsect ON ssbsect_term_code = ssrmeet_term_code
                               AND ssbsect_crn = ssrmeet_crn
              LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                               AND ssbsect_crn = sirasgn_crn
              LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
WHERE spriden_change_ind IS NULL 
  AND ssbsect_term_code in (select * from cur_term)
  /* USE CUR_TERM HERE */
  AND ssrmeet_sun_day is null AND ssrmeet_mon_day is null AND ssrmeet_tue_day is null
  AND ssrmeet_wed_day is null AND ssrmeet_thu_day is null AND ssrmeet_fri_day is null
  AND ssrmeet_sat_day is null","SectionTime"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"reg.StudentTestScore","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
  AND REGEXP_LIKE (sortest_test_score, '^\\\\d.\\\\d') -- Filter out non numerical values. GSU specific.
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","Student Test Scores"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"inst.Location","WITH ROOMS_LIST AS (SELECT DISTINCT replace(ROOMS_ID, '*', ' ') nk,
       case substring(ROOMS_ID, 0, CHARINDEX('*', ROOMS_ID)) 
     when 'NET' then 'NET'
      when 'EVA' then 'EVA'
    when 'ROC' then 'ROC'
    when 'GRC' then 'ROC'
    when 'RSC' then 'ROC'
    when 'RAW' then 'RAW' -- added by Jeff on 11/30
     else 'OTHER'
     end
     campus,
       ROOM_NAME name,
       '' latitude,
       '' longitude,
       '' [address],
       '' comments,
       'T' is_active
  FROM ROOMS ),

  LOCATIONS_LIST AS (SELECT LOCATIONS_ID nk,
       case LOCATIONS_ID 
     when 'NET' then 'NET'
      when 'EVA' then 'EVA'
    when 'ROC' then 'ROC'
    when 'GRC' then 'ROC'
    when 'RSC' then 'ROC'
    when 'RAW' then 'RAW' -- added by Jeff on 11/30
     else 'OTHER'
     end
     campus,
       LOC_DESC name,
       '' latitude,
       '' longitude,
       '' [address],
       '' comments,
       'T' is_active
  FROM LOCATIONS )

  SELECT * FROM ROOMS_LIST UNION SELECT * FROM LOCATIONS_LIST","Location"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.course","SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','')
 || REPLACE('-' || C.institution, '-TN293', '') as NK
, C.CRSE_ID as cd
, case when acad_group = 'DEV' then '0' else '1' end  as \\\""level\\\""
, REPLACE(c.SUBJECT, ' ','') as SUBJECT
, '1'                                                                               AS DEPARTMENT_CD 
, nvl(b.DESCRLONG,  b.DESCR)                                                        as \\\""desc\\\""
, b.SSR_COMPONENT COURSE_TYPE
, nvl(b.COURSE_TITLE_LONG, b.descr)                                                 AS TITLE
, b.UNITS_ACAD_PROG                                                                   AS CREDITS
, case when b.crse_repeatable = 'N' then 0
else crse_repeat_limit - 1 end                                                      AS REPEATABLE_COUNT
, CASE
    WHEN REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','') NOT LIKE '%T' 
         THEN case 
                 when b.EFF_STATUS = 'A' and C.INSTITUTION = 'TN293' then 'T' 
                 else 'F' 
               end                                                                           
    ELSE 'F'
  END                                                                               AS IS_ACTIVE 
FROM (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION 
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.INSTITUTION = 'TN293'
                    and o.acad_career = 'CRED'
                    and o.acad_org = 'SCREDIT'
                    --and o.crse_offer_nbr <> '1'
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from PS_CRSE_OFFER x where o.crse_id = x.crse_id
                                              and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))

                    ) C

LEFT JOIN (SELECT mainB.CRSE_ID 
               , UNITS_ACAD_PROG
               , COURSE_TITLE_LONG 
               , DESCR
               , DESCRLONG
               , EFF_STATUS
               , CRSE_REPEATABLE
               , CRSE_REPEAT_LIMIT
               , SSR_COMPONENT
        FROM   PS_CRSE_CATALOG mainB 
        WHERE  mainB.EFFDT = (SELECT Max(EFFDT) 
                              FROM   PS_CRSE_CATALOG c 
                              WHERE  c.crse_id = mainb.crse_id)) B
        on B.CRSE_ID = C.CRSE_ID
WHERE  1 = 1 

ORDER  BY 1, 2","Course"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"active_courses","select college_cd,
department_cd,
course_cd,
course_no,
credit_min,
credit_max,
variable_credit_connector,
course_hrs_min,
course_hrs_max,
course_type_cd,
repeat_ind,
no_of_repeats_allowed,
prog_classification_cd,
course_status_cd,
title_short_desc,
title_long_desc
 from atlantatech.osf_cs_courses","SSF_active_courses"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.firsttermfeed","-- Fields: nk,student,term,is_active
-- Model Name: cat.FirstTermFeed
-- Name: FirstTermFeed
-- Query:
-- get last five terms based on current term


WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),

-- Get RSTS codes of all types that keeps students counted in the class.
-- Alternates to STVRSTS_INCL_SECT_ENRL should include:
-- * STVRSTS_INCL_ASSESS
-- * STVRSTS_GRADABLE_IND
incl_rsts as (
  select stvrsts_code
    from stvrsts
   where stvrsts_incl_sect_enrl = 'Y'
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE', 'RS','RW', 'RA') -- Marin registration codes
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),


-- Get maximum SFRSTCA record for a student/crn/term combo
max_sfrstca as (
select sfrstca_term_code as term_code,
       sfrstca_pidm as pidm,
       sfrstca_crn as crn,
       max(sfrstca_seq_number) as seq_number
  from sfrstca
 group by sfrstca_term_code, sfrstca_pidm, sfrstca_crn
),

-- Get the student ID and the earliest term in SFRSTCA for which they have a section
-- where the registration code counts them as enrolled in the section.
FirstTermFeed as (
select spriden_id as student,
       min(s.sfrstca_term_code) as first_term
  from sfrstca s join max_sfrstca ms on s.sfrstca_term_code = ms.term_code
                                    and s.sfrstca_pidm = ms.pidm
                                    and s.sfrstca_crn = ms.crn
                                    and s.sfrstca_seq_number = ms.seq_number
            left join SPRIDEN  		
              on s.sfrstca_pidm = spriden_pidm
              and spriden_change_ind is null
 where s.sfrstca_rsts_code in (select stvrsts_code from incl_rsts)
   and s.sfrstca_pidm in (select studentPidm from studentPopulation)
 group by spriden_id
)

-- THE ACTUAL FEED
select student as nk,
       student as student,
       first_term as term,
       'T' as is_active
  from FirstTermFeed","FirstTermFeed"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"catcc.TestSubject","-- Fields: nk,name,max_score,is_active
-- Model Name: catcc.TestSubject
-- Name: Test Subjects
-- Output: Test_Subjects_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- extract test subjects and scores from Banner
WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
          THEN TO_NUMBER(stvtesc_max_value) || '.00'
          ELSE stvtesc_max_value
          END AS max_score -- test for decimal point and convert to decimal. This is done since navigate expects this data to be decimal and the data in banner may not be stored in decimal format.
  , 'T' AS is_active
FROM stvtesc
WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')  -- filter out any non digits. This is a decimal field in navigate and there have been instances where we have seen non-integer values in banner.
)

-- wrapper query
SELECT * FROM testSubjects

--	Notes: => DATA examples nk = 'M2', 'S01'
--	                      name = 'SatII-Mathematics Level II', 'SAT Verbal'

-- Change log:
--				Developer:
--				Change version:
--				Description","Test Subjects"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.SectionTime","-- Unpivot day of week from ssrmeet into a single column. ssrmeet stores data for each day of the week in separate columns. In naviagate, we store this data in a single column as day_of_week.
WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  , ssrmeet_vpdi_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
    LEFT JOIN slbbldg ON slbbldg_bldg_code = ssrmeet_bldg_code                                       
    LEFT JOIN STUGRCCCS.SZVCAMP ON slbbldg_camp_code = SZVCAMP_CODE 
  WHERE ssrmeet_vpdi_code = 'PCC'
        AND SZVCAMP_VPDI_CODE = 'PCC'
        AND SZVCAMP_EAB_ENABLE = 'Y'
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
         WHEN ssbsect_camp_code = 'UCN' THEN 'UPCC'  WHEN ssbsect_camp_code = 'UON' THEN 'UONLNE' 
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'O' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                               AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code -- Lookup day of week code
                               AND unpivotDayOfWeek.ssrmeet_vpdi_code = ssbsect_vpdi_code)
LEFT JOIN STUGRCCCS.SZVCAMP ON ssbsect_camp_code = SZVCAMP_CODE 
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. We do not need to extract sections times for past terms as section times are used for students to build their schedule.
  AND ssbsect_vpdi_code = 'PCC'
  AND SUBSTR(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND szvcamp_vpdi_code = 'PCC'
  AND szvcamp_eab_enable = 'Y'
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM sectionTime","Section Times"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"general_student","select student_id,
first_name,
middle_name,
last_name,
date_of_birth,
gender,
email_id,
ethnicity_cd,
deceased_ind,
marital_status_cd,
international_ind,
country_cd,
first_enr_academic_period,
hs_name,
hs_city,
hs_state,
hs_size,
hs_percentile,
hs_rank,
hs_gpa,
image_file_name,
home_phone,
work_phone,
mobile_phone,
address_1,
address_2,
city,
state,
zip_code,
secondary_email_1,
secondary_email_2,
student_legacy_cd,
student_admit_cd,
transfer_student_ind,
transfer_inst_cd,
veteran_ind,
readmit_ind,
first_gen_ind,
hs_zip_code,
admission_zip_code,
region_cd,
active_ind
 from atlantatech.osf_sg_student_general","SSF_general_student"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"catcc.TestSubject","SELECT 
  UPPER(stvtesc_code) nk, 
  stvtesc_desc name,
  CASE 
    WHEN INSTR(stvtesc_max_value, '.') = 0 THEN to_number(stvtesc_max_value) || '.00'
    ELSE stvtesc_max_value
  END AS max_score,
  'T' is_active
FROM stvtesc
WHERE stvtesc_data_type = 'N'","Test Subjects"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"core.Advisor","SELECT distinct FACULTY_ID nk, 
      		    PERSON_PIN_USER_ID username,
      			COALESCE(IC.PERSON_EMAIL_ADDRESSES,PEOPLE_EMAIL.PERSON_EMAIL_ADDRESSES,'') email,
				COALESCE(FIRST_NAME, '') first_name,
      			LAST_NAME last_name,
       			'T' is_active
  
  FROM FACULTY
  JOIN PERSON_PIN 
     ON FACULTY_ID = PERSON_PIN_ID
   JOIN PERSON
     ON FACULTY_ID = PERSON.ID
   LEFT OUTER JOIN PEOPLE_EMAIL 
      ON FACULTY_ID = PEOPLE_EMAIL.ID AND
         PERSON_EMAIL_TYPES = 'PRI'
   LEFT OUTER JOIN PEOPLE_EMAIL IC 
      ON FACULTY_ID = IC.ID AND IC.PERSON_EMAIL_ADDRESSES LIKE '%iowa%'
    JOIN PERSTAT
      ON PERSTAT_HRP_ID = FACULTY_ID AND
          PERSTAT_END_DATE IS NULL
	--JOIN OPERS 
	 --ON SYS_USER_ID = PERSON.ID
   
   WHERE FACULTY_ID IS NOT NULL
      AND PERSON_PIN_USER_ID IS NOT NULL
	  AND FAC_ADVISE_FLAG = 'Y'

--	select  * from PEOPLE_EMAIL  

--select * from FACULTY","Advisor"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"catcc.TestSubject","-- extract test subjects and scores from Banner
WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
          THEN TO_NUMBER(stvtesc_max_value) || '.00'
          ELSE stvtesc_max_value
          END AS max_score -- test for decimal point and convert to decimal. This is done since navigate expects this data to be decimal and the data in banner may not be stored in decimal format.
  , 'T' AS is_active
FROM 
(
    select * from stvtesc where stvtesc_code like '1P%'
    UNION
    select * from stvtesc where stvtesc_code like '2P%'
    UNION
    select * from stvtesc where stvtesc_code like '3P%'
)

WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')  -- filter out any non digits. This is a decimal field in navigate and there have been instances where we have seen non-integer values in banner.
)

-- wrapper query
SELECT * FROM testSubjects","Test Subjects"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.Department","SELECT 
  stvdept_code nk, 
  stvdept_desc name,
  'T' is_active
FROM stvdept
union
select distinct
    shrtckn_dept_code as nk,
    shrtckn_dept_code as name,
    'F' as is_active
  from shrtckn
 where shrtckn_dept_code is not null
   and shrtckn_dept_code not in (select stvdept_code from stvdept)
union
select
  'UNKNOWN' AS nk,
  'UNKNOWN' as name,
  'T' as is_active
from dual","Departments"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.studentterm","WITH PMT as (

select pgrm
, term_id
--, max(term_id) as max_term_id
, acyr
from (
  select sobcurr_program as pgrm
    , sobcurr_term_code_init as term_id
    , stvterm_acyr_code as acyr
  from sobcurr
  left join stvterm on stvterm_code = sobcurr_term_code_init
  where stvterm_code is not null
  union
  select smbpgen_program as program
    , smbpgen_term_code_eff as term_id
    , stvterm_acyr_code as acyr
  from smbpgen
  left join stvterm on stvterm_code = smbpgen_term_code_eff
  where stvterm_code is not null
  ) main
where pgrm like '4%'
--group by program, term_id, acyr
order by 1,3
),


SGB as (
select * from (
 select sgbstdn_pidm,
      sgbstdn_program_1,
      sgbstdn_stst_code,
      sgbstdn_term_code_eff as max_eff_term,
    sgbstdn_term_code_ctlg_1,
    stvstst_reg_ind
  from sgbstdn
  left join stvstst on stvstst_code = sgbstdn_stst_code
  where sgbstdn_program_1 is not null
  and stvstst_code is not null) a
where max_eff_term = (select max(sgbstdn_term_code_eff)
                        from sgbstdn
                        right join stvterm on sgbstdn_term_code_eff = stvterm_code
                        where a.sgbstdn_pidm = sgbstdn_pidm 
                        and stvterm_end_date <= sysdate + 365 )
order by 1,4
),

getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                        and (stvterm_code like '%10' 
                              or stvterm_code like '%20' 
                              --or stvterm_code like '%30'
                            )
                      )
AND ROWNUM < 5
and (stvterm_code like '%10' 
      or stvterm_code like '%20' 
      or stvterm_code like '%30'
                            )
ORDER BY 1 DESC
),


POP AS (
select distinct studentPidm from (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
  FROM sfrstcr  
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code

  WHERE 1=1
    AND sfrstcr_rsts_code IN ('RE','RW')
/*    
  UNION

  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
  FROM saradap
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
  WHERE 1=1
*/
) current_and_applicants

inner join (

  select distinct sorlcur_pidm pidm
  from sorlcur tbl
  where 1=1
  and sorlcur_lmod_code in ('LEARNER','ADMISSIONS')
  and sorlcur_cact_code = 'ACTIVE'
  and sorlcur_term_code_end is null
  and sorlcur_camp_code = 'NCC'
  and sorlcur_priority_no = (select min(sorlcur_priority_no)
                             from sorlcur
                             where sorlcur_camp_code = tbl.sorlcur_camp_code
                             and sorlcur_lmod_code = tbl.sorlcur_lmod_code
                             and sorlcur_cact_code = tbl.sorlcur_cact_code
                             and sorlcur_term_code_end is null
                             and sorlcur_pidm = tbl.sorlcur_pidm
                             and sorlcur_term_code in (select stvterm_code from getLastXTerms)

                            )
  and sorlcur_term_code = (select max(sorlcur_term_code)
                            from sorlcur
                             where sorlcur_camp_code = tbl.sorlcur_camp_code
                             and sorlcur_lmod_code = tbl.sorlcur_lmod_code
                             and sorlcur_cact_code = tbl.sorlcur_cact_code
                             and sorlcur_term_code_end is null
                             and sorlcur_pidm = tbl.sorlcur_pidm
                             and sorlcur_term_code in (select stvterm_code from getLastXTerms)
                             )
) on pidm = studentpidm
)

select spriden_id || '$$' || SGB.max_eff_term nk,
       spriden_id student,
       SGB.max_eff_term term,
       SGB.sgbstdn_program_1 || '$$' || PMT.term_id \\\""program\\\"",
       decode(stvstst_reg_ind,'Y','T','F') is_active
from spriden
right join SGB on spriden_pidm = SGB.sgbstdn_pidm
left join PMT on SGB.sgbstdn_program_1 = PMT.pgrm 
--right join pop on spriden_pidm = pop.pidm 
where spriden_change_ind is null
and PMT.term_id = (select max(abc.term_id) 
                  from PMT abc 
                  where abc.pgrm = SGB.sgbstdn_program_1 
                  and abc.term_id < SGB.sgbstdn_term_code_ctlg_1) --make this <= when we are ready with the updates
and spriden_pidm in (select * from pop)","Student Term"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.Program","with t as (
SELECT PGRM,
      LISTAGG(txt2, ' ')
         WITHIN GROUP (ORDER BY pgrm, txt1) txt
FROM (select SMRPCMT_PROGRAM pgrm, 
            smrpcmt_text_seqno txt1, 
            smrpcmt_text txt2
        from SMRPCMT c
        where smrpcmt_prnt_code = 'NAV'
        and smrpcmt_term_code_eff = (select max(smrpcmt_term_code_eff) 
                              from smrpcmt b 
                              where b.SMRPCMT_PROGRAM = c.SMRPCMT_PROGRAM 
                              and b.SMRPCMT_text_seqno = c.SMRPCMT_text_seqno)
        order by 1,2)
group by PGRM)

select -- sobcurr_program || '$$' || sobcurr_term_code_init nk,
       smbpgen_program || '$$' ||  stvterm_acyr_code nk,
       smbpgen_program cd,
       -- sobcurr_term_code_init version_s,
       stvterm_acyr_code version_s,
       smrprle_program_desc name_s,
       nvl(t.txt,' ') desc_s,
       nvl(smbpgen_req_credits_overall, 0) credits,
       '' enrollment_notes,
       -- Showing both MET and NOTMET comments and with HTML tags
       ( select listagg(smrpcmt_text, ' ') within group (order by smrpcmt_prnt_code, smrpcmt_text_seqno)
           from smrpcmt
          where smrpcmt_program = smrprle_program
            and smrpcmt_term_code_eff = ( select max(smrpcmt_term_code_eff)
                                            from smrpcmt
                                           where smrpcmt_program = smbpgen_program
                                             and smrpcmt_term_code_eff <= smbpgen_term_code_eff )) registration_notes,
       nvl(( select sorcmjr_majr_code from sorcmjr
          where sorcmjr_curr_rule = sobcurr_curr_rule
            and rownum = 1
            and sorcmjr_term_code_eff = (select max(sorcmjr_term_code_eff) 
                                           from sorcmjr
                                          where sorcmjr_curr_rule = sobcurr_curr_rule
                                            and sorcmjr_term_code_eff <= sobcurr_term_code_init ) ), ' ')  area_of_study, -- select major
       '' concentration,
       sobcurr_degc_code credential,
-- MCC 20140711 cipc_code from Tulsa does not match cipc codes at EAB
       ( select decode(stvmajr_cipc_code,null,null,substr(stvmajr_cipc_code,1,2) || '.' || substr(stvmajr_cipc_code,3)) from sorcmjr, stvmajr 
          where sorcmjr_curr_rule = sobcurr_curr_rule
            and rownum = 1
            and sorcmjr_majr_code = stvmajr_code
            and sorcmjr_term_code_eff = (select max(sorcmjr_term_code_eff) 
                                           from sorcmjr
                                          where sorcmjr_curr_rule = sobcurr_curr_rule
                                            and sorcmjr_term_code_eff <= sobcurr_term_code_init ) )  cip,
       case when sobcurr_degc_code in ('AA','AS') then 'Y' else 'N' end as is_transfer,
       -- CONT_ED$$000000 has two majors                                     
       /*
       ( select count(*) from sorcmjr 
          where sorcmjr_curr_rule = sobcurr_curr_rule
            and sorcmjr_term_code_eff = (select max(sorcmjr_term_code_eff) 
                                           from sorcmjr
                                          where sorcmjr_curr_rule = sobcurr_curr_rule
                                            and sorcmjr_term_code_eff <= sobcurr_term_code_init ) )  ccc,
       */
      case when smbpgen_term_code_eff = max_eff                                           
      then 'T'
      else 'F' end is_active
  from sobcurr, smrprle, stvterm, smbpgen
  JOIN (
    select 
      distinct smbpgen_program pgrm,
      max(smbpgen_term_code_eff) max_eff 
      from smbpgen 
      GROUP BY SMBPGEN_PROGRAM) A 
  ON a.pgrm = smbpgen_program
 left join t on t.pgrm = smbpgen_program
 where sobcurr_program = smrprle_program



   -- and stvterm_code = sobcurr_term_code_init
   and stvterm_code = smbpgen_term_code_eff
-- MCC 20140711 This programs have wrong CIP according to EAB
--   and sobcurr_program not in ('AAS_BIO_BIOA','CER_BIO_BIOC','AS_BIO_BIOT')
   and sobcurr_program = smbpgen_program
   and sobcurr_term_code_init = (select max(sobcurr_term_code_init)
                                   from sobcurr
                                  where sobcurr_program = smbpgen_program
                                    and sobcurr_term_code_init <= smbpgen_term_code_eff )
  union
  select 
    'UNDECLARED$$0000' as NK
    ,'UNDECLARED' as CD
    ,'0000' as VERSION_S
    ,'UNDECLARED' as NAME_S
    ,'You are currently undeclared, please apply for a program to graduate with a valid degree.' as DESC_S
    ,3 as CREDITS
    ,'' as ENROLLMENT_NOTES
    ,'' as REGISTRATION_NOTES
    ,'UNDC' as AREA_OF_STUDY
    ,'' as CONCENTRATION
    ,'000000' as CREDENTIAL
    ,'' as CIP
    ,'N' as IS_TRANSFER
    ,'T' as IS_ACTIVE
  from dual
  order by 1,3,13","Program"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.Department","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Departments File

Fields: nk,name,is_active
*/

SELECT NVL(dt.dept, '')  AS nk
       , NVL(dt.txt, '') AS name
       , CASE
           WHEN dt.inactive_date IS NULL THEN 'T'
           ELSE 'F'
         END             AS is_active
FROM informix.dept_table dt
WHERE 1=1
   --AND dt.dept <> ''  --Might be useful to not include this filter for student data
ORDER BY 1","Departments"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.course","With Coreq_Data_Bank As (

select scbcrse_subj_code || scbcrse_crse_numb as course
, case when ssbsect_schd_code = 'B' then scbcrse_subj_code || scbcrse_crse_numb || ssbsect_schd_code
  Else Null End As Coreq
, ssbsect_schd_code
, ssbsect_subj_code
, ssbsect_crse_numb
, scbcrse_dept_code


from (
  SELECT a.SCBCRSE_EFF_TERM
      ,a.scbcrse_coll_code
      , a.scbcrse_dept_code
      , a.scbcrse_subj_code
      , a.scbcrse_crse_numb
  FROM scbcrse a
  WHERE 1=1
  and a.SCBCRSE_CSTA_CODE = 'A'
  and a.SCBCRSE_EFF_TERM = (  --DEDUPING LOGIC
    SELECT max(SCBCRSE_EFF_TERM)
    FROM scbcrse b 
    WHERE b.scbcrse_subj_code = a.scbcrse_subj_code
      And B.Scbcrse_Crse_Numb = A.Scbcrse_Crse_Numb
      )) Course
Left Join (Select Ssbsect_Subj_Code
            , ssbsect_crse_numb
            , Ssbsect_Schd_Code
            --, Count(Ssbsect_Schd_Code)
            , Stvschd_Desc 
            from ssbsect
            Left Join Stvschd On Ssbsect_Schd_Code = Stvschd_Code
            Where 1=1
            And Ssbsect_Term_Code = (Select Max(Ssbsect_Term_Code)
                                    From Ssbsect B
                                    Where B.Ssbsect_Crse_Numb = Ssbsect.Ssbsect_Crse_Numb
                                    And B.Ssbsect_Subj_Code = Ssbsect.Ssbsect_Subj_Code
                                    And B.Ssbsect_Schd_Code = Ssbsect.Ssbsect_Schd_Code
                                    )
            ) Section
  On Course.Scbcrse_Subj_Code = Section.Ssbsect_Subj_Code
  And Course.Scbcrse_Crse_Numb = Section.Ssbsect_Crse_Numb
left join scrlevl 
  on course.scbcrse_subj_code = scrlevl_subj_code
  and course.scbcrse_crse_numb = scrlevl_crse_numb
where 1=1
and SCRLEVL_LEVL_CODE = 'NC'

),

NCC_Course_tbl as ( 

select distinct  
  a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS NK
  , a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS CD
  , decode(SCRATTR_ATTR_CODE, 'ZZZ','0','1') AS \\\""LEVEL\\\""
  , a.SCBCRSE_SUBJ_CODE AS SUBJECT
  , nvl(scbcrse_dept_code, '0000') AS DEPT --placeholder added to DEPT script
  , SUBSTR(SCBCRSE_TITLE,1,100) AS title
  , dbms_lob.substr(text_table.SCBDESC_TEXT_NARRATIVE,3000) AS \\\""desc\\\""  
  , '' as course_type
  , CASE 
      WHEN a.scbcrse_credit_hr_ind IS NULL THEN a.scbcrse_credit_hr_low 
      WHEN a.scbcrse_credit_hr_ind <> null then  a.scbcrse_credit_hr_high
    else 0 end AS CREDITS
  , CASE WHEN a.SCBCRSE_CSTA_CODE = 'A' 
    and SCRLEVL_LEVL_CODE = 'NC'
  --and a.scbcrse_eff_term >= 201010 
  	THEN 'T' ELSE 'F' END AS IS_ACTIVE
  , case when scbcrse_reps_code is not null then nvl(scbcrse_repeat_limit,0)
    else 0 end as repeatable_count
FROM (
  SELECT a.SCBCRSE_EFF_TERM,a.scbcrse_coll_code, a.scbcrse_dept_code, a.scbcrse_subj_code, a.scbcrse_crse_numb, a.scbcrse_credit_hr_low, a.scbcrse_credit_hr_ind
    , a.scbcrse_credit_hr_high, a.SCBCRSE_CIPC_CODE, a.scbcrse_csta_code, a.SCBCRSE_TITLE, a.scbcrse_divs_code,a.scbcrse_data_origin,a.scbcrse_repeat_limit,a.scbcrse_reps_code
  FROM scbcrse a
  WHERE a.SCBCRSE_EFF_TERM = (  --DEDUPING LOGIC
    SELECT max(SCBCRSE_EFF_TERM)
    FROM scbcrse b 
    WHERE b.scbcrse_subj_code = a.scbcrse_subj_code
      AND b.scbcrse_crse_numb = a.scbcrse_crse_numb
     -- AND B.scbcrse_eff_term >= 201110
      )
--      and a.scbcrse_subj_code = 'NURS'
    ) a
               left join(select scbdesc_subj_code, scbdesc_crse_numb, scbdesc_term_code_eff, SCBDESC_TEXT_NARRATIVE
                      from scbdesc text
                     where scbdesc_term_code_eff = (select max(scbdesc_term_code_eff) 
                      from scbdesc 
                      where scbdesc_subj_code = text.scbdesc_subj_code
                      and scbdesc_crse_numb = text.scbdesc_crse_numb)
                      order by 3 desc) text_table
             
             on SCBDESC_SUBJ_CODE = scbcrse_subj_code 
                and scbdesc_crse_numb = scbcrse_crse_numb
   
    LEFT JOIN  SCRATTR c ON a.SCBCRSE_EFF_TERM = c.SCRATTR_EFF_TERM 
  AND a.SCBCRSE_SUBJ_CODE = c.SCRATTR_SUBJ_CODE AND a.SCBCRSE_CRSE_NUMB = c.SCRATTR_CRSE_NUMB

  	LEFT JOIN SCRLEVL on scbcrse_subj_code = scrlevl_subj_code
			and scbcrse_crse_numb = scrlevl_crse_numb
			--and scbcrse_eff_term = scrlevl_eff_term

WHERE 1=1
--and scrlevl_levl_code = 'NC'


UNION
Select 'UNKNOWN' as NK
, 'UNKNOWN' as CD
, '1' as \\\""LEVEL\\\""
, 'DEFAULT' as subject
, '0000' as dept
, 'UNKNOWN' as title
, '' as \\\""desc\\\""
, '' as course_type
, 0 as credits
, 'T' as is_active
, 0 repeatable_count
from dual
--ORDER BY 1, 3, 4
),

coreq_course_tbl as (

select coreq as NK
, coreq as CD
, '1' as \\\""LEVEL\\\""
, ssbsect_subj_code as subject
, nvl(scbcrse_dept_code, '0000') AS DEPT
, coreq || ' LAB Component Course' as title
, 'Accompanying lab course for ' || course as \\\""desc\\\""
, ssbsect_schd_code as course_type
, 0 as credits
, case when scrlevl_levl_code = 'NC' then 'T'
else 'F' end as is_active
, 0 repeatable_count
from Coreq_Data_Bank
    LEFT JOIN SCRLEVL on ssbsect_subj_code = scrlevl_subj_code
      and ssbsect_crse_numb = scrlevl_crse_numb
where coreq is not null
),

transfer_course_tbl as (
 

select distinct shrtckn_subj_code || shrtckn_crse_numb as NK
, shrtckn_subj_code || shrtckn_crse_numb as CD
, '1' as \\\""LEVEL\\\""
, 'DEFAULT' as subject
, '0000' as dept
, 'TRANSFER' as title
, 'TRANSFER COURSE' as \\\""desc\\\""
, '' as course_type
, 0 as credits
, 'F' as is_active
, 0 repeatable_count
from shrtckn
where shrtckn_subj_code || shrtckn_crse_numb not in (select nk from NCC_Course_tbl)
ORDER BY 1, 3, 4
)

select * 
from NCC_Course_tbl
union 
select * 
from coreq_course_tbl
union
select * 
from transfer_course_tbl
","Course"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.Term","WITH term AS (SELECT 
  stvterm_code nk, 
  stvterm_desc \\\""name\\\"", 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt,
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt,
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  Case -- Figure out how to indicate if the course is active
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code IN ('RW') -- Confirm with BA
  AND sfrrsts_ptrm_code = '1' -- Confirm with BA
),

-- get terms with no registration dates from Banner
termWithNoRegDates AS (
SELECT
  stvterm_code nk,
  stvterm_desc \\\""name\\\"",
  stvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  Case -- Figure out how to indicate if the course is active
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = stvterm_code
                   AND sfrrsts_rsts_code IN ('RW') -- Confirm with BA
                   AND sfrrsts_ptrm_code = '1') -- Confirm with BA
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM \\\""final\\\"" ","Terms"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"core.Student","-- get last five terms based on current term
WITH getLastFiveTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastFiveTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastFiveTerms ON getLastFiveTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastFiveTerms ON getLastFiveTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , spriden_id AS username
  , TRIM(COALESCE(
                (SELECT goremal_email_address FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'GC' AND rownum = 1
                )
                , (SELECT goremal_email_address FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'PE' AND rownum = 1
                  )
                , (SELECT goremal_email_address FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N' AND goremal_emal_code = 'GC'
                             AND rownum = 1
                  )
                , LOWER(spriden_id) || '@missingemail.org'
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
--  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , '2000-01-01' AS birthdate -- default value since no access to spbpers at Gavilan
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
--  RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm -- Excluded at Gavilan since no access
WHERE 1=1
  AND spriden_change_ind IS NULL  -- Ensure no changes were made to student records
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

select * from student","Student"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.course","with inst_courses as (
select distinct  
   a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS NK
  , a.SCBCRSE_SUBJ_CODE || a.SCBCRSE_CRSE_NUMB  AS CD
  , CASE WHEN c.SCRATTR_ATTR_CODE ='DVST' THEN 0 ELSE 1 END AS \\\""LEVEL\\\""
  , a.SCBCRSE_SUBJ_CODE AS SUBJECT
  , NVL(a.SCBCRSE_DEPT_CODE, '0000') AS DEPT --placeholder added to DEPT script
  , replace(a.SCBCRSE_TITLE,'\\\""','') AS title
  , dbms_lob.substr(text_table.scbdesc_text_narrative, 3000) AS \\\""desc\\\""  
  --, b.ssbsect_SCHD_CODE as course_type --this is untested logic 
  , CASE WHEN REGEXP_LIKE(scbcrse_crse_numb,'\\\\d+') then (substr(a.SCBCRSE_CRSE_NUMB, 4,1)) else '0' end AS CREDITS
  , CASE WHEN a.SCBCRSE_CSTA_CODE = 'A' and a.scbcrse_eff_term >= 201010 THEN 'T' ELSE 'F' END AS IS_ACTIVE
  , case when scbcrse_reps_code is not null then nvl(scbcrse_repeat_limit,0)
    else 0 end as repeatable_count
FROM (
  SELECT a.SCBCRSE_EFF_TERM,a.scbcrse_coll_code, a.scbcrse_dept_code, a.scbcrse_subj_code, a.scbcrse_crse_numb,              a.scbcrse_credit_hr_low, scbcrse_credit_hr_ind
    , a.scbcrse_credit_hr_high, a.SCBCRSE_CIPC_CODE, a.scbcrse_csta_code, a.SCBCRSE_TITLE, a.scbcrse_divs_code,a.scbcrse_data_origin,a.scbcrse_repeat_limit,a.scbcrse_reps_code
  FROM  scbcrse a
  WHERE  scbcrse_coll_code <> 'CE'
	AND a.SCBCRSE_EFF_TERM = (  --DEDUPING LOGIC
								SELECT max(SCBCRSE_EFF_TERM)
								FROM scbcrse b 
								WHERE b.scbcrse_subj_code = a.scbcrse_subj_code
								AND b.scbcrse_crse_numb = a.scbcrse_crse_numb
								AND scbcrse_coll_code <> 'CE'
								 AND B.scbcrse_eff_term <= (  SELECT MIN(STVTERM_CODE)
														      FROM STVTERM Z 
															  WHERE Z.STVTERM_END_DATE >= SYSDATE
															)
								)
--      and a.scbcrse_subj_code = 'NURS'
    ) a
               left join(select scbdesc_subj_code, scbdesc_crse_numb, scbdesc_term_code_eff, SCBDESC_TEXT_NARRATIVE
                      from scbdesc text
                      where scbdesc_term_code_eff = (select max(scbdesc_term_code_eff) 
                      from scbdesc 
                      where scbdesc_subj_code = text.scbdesc_subj_code
                      and scbdesc_crse_numb = text.scbdesc_crse_numb)
                      order by 3 desc) text_table
             
             on scbdesc_subj_code = scbcrse_subj_code 
                and scbdesc_crse_numb = scbcrse_crse_numb
 
    LEFT JOIN  SCRATTR c ON a.SCBCRSE_EFF_TERM = c.SCRATTR_EFF_TERM 
  AND a.SCBCRSE_SUBJ_CODE = c.SCRATTR_SUBJ_CODE AND a.SCBCRSE_CRSE_NUMB = c.SCRATTR_CRSE_NUMB
WHERE 1=1
 --and b.ssbsect_term_code is NOT NULL
 --and a.scbcrse_subj_code = 'NURS'
 and scbcrse_crse_numb not like '%----%'  --removing bad course codes
 and scbcrse_crse_numb not like '%XXX%'
 --and scbcrse_data_origin <> 'CONVERSION'  --removing conversion codes OPTIONAL

UNION
Select 'UNKNOWN' as NK
, 'UNKNOWN' as CD
, 1 as \\\""LEVEL\\\""
, 'DEFAULT' as subject
, '0000' as dept
, 'UNKNOWN' as title
, '' as \\\""desc\\\""
--, '' as course_type
, '0' as credits
, 'T' as is_active
, 0 repeatable_count
from dual
ORDER BY 1, 3, 4

),

transfer_courses as (

select distinct shrtrce_subj_code || shrtrce_crse_numb as NK
, shrtrce_subj_code || shrtrce_crse_numb as CD
, 1 as \\\""LEVEL\\\""
, 'DEFAULT' as subject
, '0000' as dept
, 'TRANSFER' as title
, 'TRANSFER COURSE' as \\\""desc\\\""
--, '' as course_type
, '0' as credits
, 'F' as is_active
, 0 repeatable_count
from shrtrce
ORDER BY 1, 3, 4
)

select * from inst_courses
UNION
select * from transfer_courses
where nk not in (select nk from inst_courses)","Course"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"reg.CourseGroup","select COURSE_BLOCKS_ID as nk
, 'T' as is_active
from COURSE_BLOCKS","CourseGroup"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.SectionTime","-- Fields	nk,section,day_of_week,from_tm,to_tm,Location,is_active
-- Model Name	cat.SectionTime
-- Name	SectionTime
-- Output	SectionTime_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- Unpivot day of week from ssrmeet into a single column. ssrmeet stores data for each day of the week in separate columns. In naviagate, we store this data in a single column as day_of_week.
WITH unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
        --WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NULL
        --  THEN ssrmeet_room_code
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = 'A' 
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                              AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code) -- Lookup day of week code
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. We do not need to extract sections times for past terms as section times are used for students to build their schedule.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM sectionTime
","Section Times"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.department","SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept

UNION

SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'T' is_active
FROM dual
","Department"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"catcc.TestSubject","SELECT DISTINCT 
      NON_COURSES_ID nk ,
      NCRS_SHORT_TITLE name,
      ISNULL(CAST(CAST(NCRS_MAX_SCORE AS DECIMAL(5,0)) AS VARCHAR),'100') max_score,
      'T' is_active

  FROM NON_COURSES
    Where NON_COURSES_ID IS NOT NULL  --AND 
       --   NCRS_MAX_SCORE > 0 --and
      --    NON_COURSES.NCRS_CATEGORY in ('P','T') ","Test Subject"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.StudentCourse","WITH

defaultValues AS (
   SELECT
   'default' nk, 
   'default' student, 
   '2012SP' term, 
   'ACC-1101' course, 
    null section, 
    null grade_cd,
    null grade_points, 
    '0' credits_attempted, 
    '0' credits_earned, 
	'COMPLETED' status, 
      'F' is_active
),

temp AS (

SELECT DISTINCT 
      STC_PERSON_ID + '$$' + ISNULL(STC_TERM, '000001') + '$$' + ISNULL(STC_COURSE_NAME, '') nk, 
      STC_PERSON_ID student, 
      ISNULL(STC_TERM, '000001') term, 
      ISNULL(STC_COURSE_NAME, '') course, 
      ISNULL(COURSE_SECTIONS_ID, '') section, 
      ISNULL(GRD_GRADE, '') grade_cd,
      cast(ISNULL(cast(GRD_VALUE as numeric(7,2)), '0') AS VARCHAR)   grade_points, 
      CASE
         WHEN STC_CMPL_CRED = 0 THEN cast(ISNULL(cast(STC_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE  cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)),0)  AS VARCHAR)
       END  credits_attempted, 
      
      CASE
         WHEN STC_VERIFIED_GRADE IS NOT NULL THEN cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       ELSE cast(ISNULL(cast(STC_CMPL_CRED as numeric(7,2)), '0') AS VARCHAR)
       END  credits_earned, 

      case 
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'A' THEN 'REGISTERED'
         WHEN STC_VERIFIED_GRADE IS NULL AND STC_STATUS = 'N' THEN 'REGISTERED'
         WHEN GRD_GRADE = 'I' THEN 'IN_PROGRESS'    
         WHEN GRD_GRADE = 'S' THEN 'COMPLETED'  
         WHEN GRD_GRADE = 'T' THEN 'COMPLETED'
       ELSE 'COMPLETED'
       END    status, 
      'T' is_active

  FROM STUDENT_ACAD_CRED
    JOIN STC_STATUSES
      ON STC_STATUSES.STUDENT_ACAD_CRED_ID = STUDENT_ACAD_CRED.STUDENT_ACAD_CRED_ID AND
         POS = '1'
    LEFT OUTER JOIN COURSE_SECTIONS
      ON SEC_TERM = STC_TERM AND
         (SEC_NO < '600' OR SEC_NO > '799') AND
         SEC_SUBJECT = STC_SUBJECT AND  
         SEC_NO = STC_SECTION_NO AND
         SEC_COURSE_NO = PARSENAME(REPLACE(STC_COURSE_NAME,'-', '.'),1)     
         
    LEFT OUTER JOIN GRADES
      ON GRD_GRADE_SCHEME = STUDENT_ACAD_CRED.STC_GRADE_SCHEME AND
         GRADES_ID = ISNULL(STUDENT_ACAD_CRED.STC_VERIFIED_GRADE,'0') 
  WHERE STUDENT_ACAD_CRED.STC_PERSON_ID IS NOT NULL AND
        STC_STATUS NOT IN ('C','D','W','DG','X','NC') AND
        STC_REPL_CODE IS NULL AND
        (ISNULL(STC_SECTION_NO, '') < '600' OR ISNULL(STC_SECTION_NO, '') > '799')
        AND ISNULL(GRD_GRADE,'') NOT IN ('AU','U','W','F','DP','NC','EX','NR','PR','WD','WO','CT','CS','CW','AD','NC','WP','WF','CT')

         AND EXISTS (SELECT 1 FROM STUDENT_ACAD_CRED X
                       JOIN STC_STATUSES Y
                            ON X.STUDENT_ACAD_CRED_ID = Y.STUDENT_ACAD_CRED_ID
                     WHERE X.STC_TERM = '2015SP' AND
                           (X.STC_SECTION_NO < '600' OR X.STC_SECTION_NO > '799') AND
                           Y.POS= 1    AND 
                           (Y.STC_STATUS='N' OR
                            Y.STC_STATUS='A') AND
                           STUDENT_ACAD_CRED.STC_PERSON_ID = X.STC_PERSON_ID) )


   SELECT temp.* FROM temp
   JOIN PERSON p on temp.student = p.ID
   WHERE p.PERSON_CHANGE_DATE > GETDATE() - 1
   UNION
   SELECT * FROM defaultValues
","Student Course"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"catcc.TestSubject","-- extract test subjects and scores from Banner
WITH testSubjects AS (
SELECT UPPER(stvtesc_code) AS nk
  , stvtesc_desc AS \\\""name\\\""
  , CASE WHEN INSTR(stvtesc_max_value, '.') = 0
          THEN TO_NUMBER(stvtesc_max_value) || '.00'
          ELSE stvtesc_max_value
          END AS max_score -- test for decimal point and convert to decimal. This is done since navigate expects this data to be decimal and the data in banner may not be stored in decimal format.
  , 'T' AS is_active
FROM 
(
    select * from stvtesc where stvtesc_code like '1P%'
    UNION
    select * from stvtesc where stvtesc_code like '2P%'
    UNION
    select * from stvtesc where stvtesc_code like '3P%'
)

WHERE 1=1
  AND REGEXP_LIKE(stvtesc_max_value, '\\\\d')  -- filter out any non digits. This is a decimal field in navigate and there have been instances where we have seen non-integer values in banner.
)

-- wrapper query
SELECT * FROM testSubjects","Test Subjects"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.CourseType","WITH courseType AS (
SELECT 
  stvschd_code nk,
  stvschd_desc \\\""name\\\"",
  'T' is_active
FROM stvschd
),

-- Assign default values
defaultValues AS (
Select 
'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM courseType
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","CourseType"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.Section","-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN CCCD_EAB_GENERAL_PERSON ON sirasgn_pidm = spriden_pidm -- Custom view for Coastline since no access to SPRIDEN
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , CASE
      WHEN ssbsect_insm_code = '72' THEN 'ONLINE'
      ELSE NVL(stvcamp_code, 'DEFAULT')
    END AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , CASE WHEN ssbsect_ssts_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- Identify if section is active by comparing the value in ssbsect_ssts_code. The default is 'A'. Confirm with BA/Member if this is different at their college.
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
WHERE ssbsect_camp_code = 'C' -- Coastline
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Sections"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.Course","-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
where length(trim(scbcrse_subj_code)) = 4
  and length(trim(scbcrse_crse_numb)) = 4
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk -- This nk does not use the standard $$ concatenation since the platform currently shows the nk field in the UI. This affects the following dependent scripts that need to be in sync - section, studentCourse
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE WHEN scbcrse.scbcrse_csta_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active. This may be member specific. Confirm code with BA/Member.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
),

-- Assign default values
defaultValues AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM course
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Course"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.Subject","SELECT 
  stvsubj_code nk,
  stvsubj_desc name,
  'T' is_active
FROM stvsubj","Subjects"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.Term","-- Fields: nk,name,cat_yr,registration_start_dt,registration_end_dt,term_start_dt,term_end_dt,is_active
-- Model Name: cat.Term
-- Name: Terms
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query: 

-- get Terms from Banner
WITH term AS (SELECT 
  stvterm_code nk, 
  stvterm_desc \\\""name\\\"", 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case 
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm 
  JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member
  AND sfrrsts_ptrm_code = '1' -- Confirm ptrm code to include with BA/Member
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in stvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
SELECT
  stvterm_code nk,
  stvterm_desc \\\""name\\\"",
  stvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = stvterm_code
                   AND sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_ptrm_code = '1') -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM \\\""final\\\""    

-- NOTES: => DATA examples nk = '196570', '999999','000000'
--                         name = 'Fall 1965',

-- Change log:
--        Developer:
--        Change version:
--        Description","Terms"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.course","with course_bank as (

select course_cd,
SUBJ,
sum(institution_count) as inst
from (
      SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','') as course_cd,
      trim(C.SUBJECT) as SUBJ,
      case when c.institution = 'NV280' then '1' else '0' end as institution_count
      from (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.acad_org <> 'LCREDIT'
and o.crse_offer_nbr <> 1
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
                    ) C
        )
group by course_cd, SUBJ

)

SELECT course_cd    as NK
, course_cd         as cd
, '1'               as \\\""LEVEL\\\""
, SUBJ              as SUBJECT
, '1'               AS DEPARTMENT_CD 
, 'DUMMY'           as \\\""desc\\\""
, ''                as COURSE_TYPE
, 'DUMMY'           AS TITLE
, 0                 AS CREDITS
, 0                 AS REPEATABLE_COUNT
, 'F'               AS IS_ACTIVE 
from course_bank
where inst = 0","Inactive Courses"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.Course","-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
where length(trim(scbcrse_subj_code)) = 4
  and length(trim(scbcrse_crse_numb)) = 4
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk -- This nk does not use the standard $$ concatenation since the platform currently shows the nk field in the UI. This affects the following dependent scripts that need to be in sync - section, studentCourse
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE WHEN scbcrse.scbcrse_csta_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active. This may be member specific. Confirm code with BA/Member.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
),

-- Assign default values
defaultValues AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM course
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Course"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.CourseType","SELECT 
  stvschd_code nk,
  stvschd_desc \\\""name\\\"",
  'T' is_active
FROM stvschd

UNION

SELECT
 'TRFR' AS nk
 , 'Transfer' AS \\\""name\\\""
 , 'T' AS is_active
FROM dual
","Course Type"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"inst.Location","SELECT nk, 
       campus, 
       name, 
       latitude, 
       longitude, 
       address, 
       comments, 
       is_active
FROM EAB_LOC
WHERE campus LIKE 'P%'","Location"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.Department","SELECT DISTINCT DEPTS_ID  nk, 
       DEPTS_DESC  name,
        'T' is_active
 FROM    DEPTS

 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A'","Department"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"core.Advisor","-- compute max term advisor record
WITH advisorMaxTerm AS (
SELECT sibinst_pidm
FROM sibinst baseTable
WHERE sibinst_fcst_code = 'AC'
  AND sibinst_advr_ind = 'Y'
  AND sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                              FROM sibinst compTable
                              WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                              )
),

-- extract advisor data
\\\""advisor\\\"" AS (
SELECT spriden_id AS nk
  , spriden_id AS username
  , COALESCE((SELECT goremal_email_address
              FROM goremal
                WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'GC' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y') -- get campus email if active and preferred. Confirm email_code with BA.
              , (SELECT goremal_email_address
                FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'GC' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N') -- get campus email if active and not preferred. Confirm email_code with BA.
              , LOWER(spriden_id) || '@missingemail.org') AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , 'T' AS is_active
FROM spriden
JOIN advisorMaxTerm ON advisorMaxTerm.sibinst_pidm = spriden_pidm
WHERE spriden_change_ind IS NULL
)

-- Wrapper query
SELECT * FROM \\\""advisor\\\""","Advisor"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.Course","with scbcrse_list as (
  select distinct scbcrse_subj_code||scbcrse_crse_numb
    from scbcrse
),
shrtckn_list as (
  select SHRTCKN_SUBJ_CODE as subj_code,
         SHRTCKN_CRSE_NUMB as crse_numb,
         MAX(SHRTCKN_TERM_CODE) as max_term
    from shrtckn
   where SHRTCKN_SUBJ_CODE||SHRTCKN_CRSE_NUMB not in (select * from scbcrse_list)
   group by SHRTCKN_SUBJ_CODE, SHRTCKN_CRSE_NUMB
),
crse_list as (
  select distinct
      ssbsect_subj_code,
      ssbsect_crse_numb,
      ssbsect_schd_code
    from ssbsect
),
link_lab_list as (
  select ssbsect_subj_code as subj_code,
         ssbsect_crse_numb as crse_numb,
         count(*) as link_lab
    from crse_list
   group by ssbsect_subj_code, ssbsect_crse_numb
),
max_eff_term as (
  select max(scbcrse_eff_term) as max_term,
         scbcrse_subj_code as subj_code,
         scbcrse_crse_numb as crse_numb
    from scbcrse
   group by scbcrse_subj_code, scbcrse_crse_numb
),
-- SSBSECT_SCHD_TYPE <> 'LAB'
crse_not_lab as (
  SELECT /*csv*/ distinct
    s.scbcrse_subj_code || s.scbcrse_crse_numb as nk,
    s.scbcrse_subj_code || s.scbcrse_crse_numb as cd,
    CASE 
      WHEN REGEXP_INSTR(s.scbcrse_crse_numb, '\\\\d+') != 0 THEN SUBSTR(s.scbcrse_crse_numb, REGEXP_INSTR(s.scbcrse_crse_numb, '\\\\d+'), 1)
      ELSE '0'
    END AS \\\""level\\\"",
    s.scbcrse_subj_code as subject,
    NVL(scbcrse_dept_code, '0000') as dept,
    scbcrse_title as title,
    to_char(REPLACE(scbdesc_text_narrative, CHR(10), ' ')) AS \\\""desc\\\"",
    ssbsect_schd_code as course_type,
    COALESCE(ssbsect_credit_hrs, scbcrse_credit_hr_low, scbcrse_credit_hr_high, 0) as credits,
    CASE 
      WHEN scbcrse_csta_code = 'A' THEN 'T'
      ELSE 'F'
    END as is_active
   FROM scbcrse s JOIN stvsubj ON scbcrse_subj_code = stvsubj_code
                  JOIN max_eff_term on s.scbcrse_eff_term = max_term
                                   and s.scbcrse_subj_code = subj_code
                                   and s.scbcrse_crse_numb = crse_numb
                  JOIN ssbsect ON s.scbcrse_crse_numb = ssbsect_crse_numb 
                              AND s.scbcrse_subj_code = ssbsect_subj_code
                 -- Get course descriptions
             LEFT JOIN scbdesc ON s.scbcrse_crse_numb = scbdesc_crse_numb
                              AND s.scbcrse_subj_code = scbdesc_subj_code
                              and scbdesc_term_code_end is null
  where upper(ssbsect_schd_code) <> 'LAB'
),
-- SSBSECT_SCHD_CODE = 'LAB' AND link_lab = 1
crse_only_lab as (
  SELECT /*csv*/ distinct
    s.scbcrse_subj_code || s.scbcrse_crse_numb as nk,
    s.scbcrse_subj_code || s.scbcrse_crse_numb as cd,
    CASE 
      WHEN REGEXP_INSTR(s.scbcrse_crse_numb, '\\\\d+') != 0 THEN SUBSTR(s.scbcrse_crse_numb, REGEXP_INSTR(s.scbcrse_crse_numb, '\\\\d+'), 1)
      ELSE '0'
    END AS \\\""level\\\"",
    s.scbcrse_subj_code as subject,
    NVL(scbcrse_dept_code, '0000') as dept,
    scbcrse_title as title,
    to_char(REPLACE(scbdesc_text_narrative, CHR(10), ' ')) AS \\\""desc\\\"",
    ssbsect_schd_code as course_type,
    COALESCE(ssbsect_credit_hrs, scbcrse_credit_hr_low, scbcrse_credit_hr_high, 0) as credits,
    CASE 
      WHEN scbcrse_csta_code = 'A' THEN 'T'
      ELSE 'F'
    END as is_active
   FROM scbcrse s JOIN stvsubj ON scbcrse_subj_code = stvsubj_code
                  JOIN max_eff_term on s.scbcrse_eff_term = max_term
                                   and s.scbcrse_subj_code = subj_code
                                   and s.scbcrse_crse_numb = crse_numb
                  JOIN ssbsect ON s.scbcrse_crse_numb = ssbsect_crse_numb 
                              AND s.scbcrse_subj_code = ssbsect_subj_code
             left join link_lab_list lll on ssbsect_subj_code = lll.subj_code
                                        and ssbsect_crse_numb = lll.crse_numb
                 -- Get course descriptions
             LEFT JOIN scbdesc ON s.scbcrse_crse_numb = scbdesc_crse_numb
                              AND s.scbcrse_subj_code = scbdesc_subj_code
                              and scbdesc_term_code_end is null
  where upper(trim(ssbsect_schd_code)) = 'LAB'
    and (lll.link_lab = 1 or lll.link_lab is null)
),
-- SSBSECT_SCHD_CODE = 'LAB' AND link_lab > 1
crse_lec_lab as (
  select  /*csv*/ distinct
    ssbsect_subj_code || ssbsect_crse_numb || 'L' as nk,
    ssbsect_subj_code || ssbsect_crse_numb || 'L' as cd,
    '0' as \\\""level\\\"",
    ssbsect_subj_code as subject,
    'NDEP' as dept,
    ssbsect_subj_code || ssbsect_crse_numb || ' Lab' as title,
    ssbsect_subj_code || ssbsect_crse_numb || ' Lab' as \\\""desc\\\"",
    '' as course_type,
    nvl(ssbsect_credit_hrs, 0) as credits,
    'T' as is_active
  from ssbsect left join link_lab_list on ssbsect_subj_code = subj_code
                                      and ssbsect_crse_numb = crse_numb
 where ssbsect_schd_code = 'LAB'
   and link_lab > 1
),
-- SHRTCKN courses
old_crse_lab as (
  select distinct
    SHRTCKN_SUBJ_CODE||SHRTCKN_CRSE_NUMB as nk,
    SHRTCKN_SUBJ_CODE||SHRTCKN_CRSE_NUMB as cd,
    '0' as \\\""level\\\"",
    SHRTCKN_SUBJ_CODE as subject,
    coalesce(SHRTCKN_DEPT_CODE,'UNKNOWN') as dept,
    coalesce(SHRTCKN_CRSE_TITLE,'None') as title,
    coalesce(SHRTCKN_CRSE_TITLE,'None') as \\\""desc\\\"",
    '' as course_type,
    0 as credits,
    'F' as is_active
    from shrtckn join shrtckn_list on SHRTCKN_SUBJ_CODE = subj_code
                                  and SHRTCKN_CRSE_NUMB = crse_numb
                                  and SHRTCKN_TERM_CODE = max_term
   where SHRTCKN_SUBJ_CODE is not null
)
select /*csv*/ * from crse_not_lab
union
select * from crse_only_lab
union
select * from crse_lec_lab
union
select * from old_crse_lab
order by 1","Course"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"student_academic_summary","select 
student_id,
academic_period,
college_cd,
campus_cd,
department_cd,
student_time_status_cd,
residency_cd,
student_classification_cd,
fin_aid_applicant_ind,
housing_ind,
inst_aid_recipient_ind,
registered_ind,
admit_ind,
transfer_student_ind,
deans_list_ind,
applied_for_graduation_ind,
graduated_ind,
total_registered_credits,
transfer_credits,
attempted_credits,
earned_credits,
passed_credits,
cumulative_gpa,
gpa_type,
official_gpa_ind,
major_cd_1,
major_cd_2,
major_cd_3,
major_cd_4,
concentration_cd_1,
concentration_cd_2,
concentration_cd_3,
concentration_cd_4,
intended_year_of_graduation,
transferred_out_of_inst_ind,
withdrawal_ind,
withdrawal_reason,
registration_start_date,
registration_end_date,
exploratory_major_cd,
degree_cd_1,
degree_cd_2,
degree_cd_3,
degree_cd_4,
major_gpa,
lifetime_transfer_credits,
lifetime_earned_credits,
lifetime_credits_at_inst,
lifetime_attempted_credits,
academic_standing,
college_cd_2,
college_cd_3,
college_cd_4,
chksum
 from atlantatech.osf_st_student_term","SSF_student_academic_summary"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"reg.AccountHold","WITH studentPop AS ( --this is your population of students to include
select distinct pidm from (
      Select Sfrstcr_Pidm pidm, 
             Sfrstcr_Term_Code term
      From Sfrstcr
      Where sfrstcr_rsts_code in ('RE','RW') -- Need to confirm
      and sfrstcr_term_code in (
        select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= ( -- excluding non credit terms, we are looking at students active in the previous 5 terms relative to the current term
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE'                         -- Need to confirm
                      and stvterm_desc not like '%Continuing Education'       -- Need to confirm
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                      )
          And Rownum < 15
          order by 1 desc))
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (        
      select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE <= (
                      
                      Select MAX(Stvterm_Code) From Stvterm 
                      Where Stvterm_Start_Date > Sysdate
                      And Stvterm_Desc Not Like '%CE' 
                      and stvterm_desc not like '%Continuing Education'
                      and stvterm_code not in (
                        Select Stvterm_Code From Stvterm 
                        Where Sysdate >= Stvterm_End_Date
                        And Stvterm_Desc Not Like '%CE' And Stvterm_Desc Not Like '%Continuing Education')
                      and rownum < 4
                      )
          And Rownum < 15
          order by 1 desc))
))),

holds AS (
SELECT DISTINCT
  spriden_id || '$$' || sprhold_hldd_code AS nk
  , spriden_id AS student
  , sprhold_hldd_code AS \\\""identifier\\\""
  , stvhldd_desc AS message
  , 'T' AS is_active
FROM sprhold
  join stvhldd on stvhldd_code = sprhold_hldd_code
  JOIN studentPop ON studentPop.pidm = sprhold_pidm
  JOIN spriden ON studentPop.pidm = spriden_pidm
WHERE sprhold_from_date < sysdate 
  AND sprhold_to_date > sysdate
  AND spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
  AND sprhold_hldd_code IN ('PI', 'BB', 'RC', 'HS', 'AU', 'RR', 'CO', 'AT', 'SI', 'AG', 'AP', 'AL', 'LB', 'TE', 'AS', 'VP', 'AR', 'RH', 'OR', 'FA', 'SB', 'HI', 'BA', 'LH', 'BR', 'AE', 'BC', 'AO', 'AH')
)

SELECT * FROM holds","Account Holds"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.StudentCourse","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND (sfrstcr_rsts_code LIKE ('R%') OR sfrstcr_rsts_code LIKE ('K%'))
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE','KV','KO') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE','KV','KO') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE','KV','KO') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE','KV','KO') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","StudentCourse"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.Program","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Programs File

Fields: nk,cd,cat_yr,name,desc,credits,enrollment_notes,registration_notes,area_of_study,concentration,credential,cip,is_transfer,is_active
*/

SELECT NVL(TRIM(mmt.major), '') || '$$' || NVL(TRIM(mmt.deg), '') || '$$' || NVL('20' || SUBSTR(mmt.fa_yr, 1, 2), '') AS nk
       , NVL(TRIM(mmt.major), '') || '_' || NVL(TRIM(mmt.deg), '')                                        AS cd
       , NVL('20' || SUBSTR(mmt.fa_yr, 1, 2), '')                                                         AS cat_yr
       , NVL(mt.txt, '')                                                                                  AS name
       , TRIM(NVL(NVL(NVL(mdt.txt, mt.ltr_txt), mt.txt), ''))                                             AS desc
       --, NVL(NVL(mt.ltr_txt, mt.txt), '')                                                                 AS desc_old --replaced by the major desc table txt field per MHCC request
       , mmt.credits_for_deg                                                                              AS credits
       , ''                                                                                               AS enrollment_notes
       , ''                                                                                               AS registration_notes
       , NVL(mt.txt, '')                                                                                  AS area_of_study
       , ''                                                                                               AS concentration
       --, NVL(dt.txt, '')                                                                                  AS credential_old  --left in for troubleshooting if needed
       , CASE
            WHEN LOWER(dt.txt) LIKE '%no deg%' THEN 'No degree listed'
            WHEN INSTR(dt.txt, ':') = 0 THEN NVL(dt.txt, '')
            ELSE NVL(SUBSTR(dt.txt, 1, INSTR(dt.txt, ':')-1), '')
         END                                                                                              AS credential
       , NVL(TRIM(mt.cip_no), '')                                                                         AS cip
       , CASE
            WHEN LOWER(mt.ltr_txt) LIKE '%transfer%' THEN 'T'
            WHEN LOWER(dt.txt) LIKE '%transfer%' THEN 'T'
            ELSE 'F'
         END                                                                                              AS is_transfer
       , CASE
            WHEN mmt.inactive_date IS NULL THEN CASE
                                                  WHEN latest.fa_yr = mmt.fa_yr THEN 'T'
                                                  ELSE 'F'
                                                END
            ELSE 'F'
         END                                                                                              AS is_active
       --, latest.RN troubleshooting only
FROM informix.mhfamajor_table mmt 
JOIN informix.major_table mt
  ON mmt.major = mt.major
LEFT JOIN informix.deg_table dt
       ON mmt.deg = dt.deg
LEFT JOIN informix.mhmajordesc_table mdt
       ON mmt.major = mdt.major        
LEFT JOIN (SELECT mmt.major, mmt.deg, mmt.fa_yr
                  , ROW_NUMBER() OVER(PARTITION BY mmt.major, mmt.deg
                                      ORDER BY mmt.fa_yr DESC) AS RN
           FROM informix.mhfamajor_table mmt
           WHERE 1=1
              --AND mmt.deg <> ''
          ) latest
       ON latest.major = mmt.major
          AND latest.deg = mmt.deg
          AND latest.RN = 1
WHERE 1=1
   AND mmt.deg <> ''        
UNION   
--No degree records
SELECT NVL(TRIM(mmt.major), '') || '$$' || NVL('20' || SUBSTR(mmt.fa_yr, 1, 2), '')                       AS nk
       , NVL(TRIM(mmt.major), '')                                                                         AS cd
       , NVL('20' || SUBSTR(mmt.fa_yr, 1, 2), '')                                                         AS cat_yr
       , NVL(mt.txt, '')                                                                                  AS name
       , TRIM(NVL(NVL(NVL(mdt.txt, mt.ltr_txt), mt.txt), ''))                                             AS desc
       --, NVL(NVL(mt.ltr_txt, mt.txt), '')                                                                 AS desc
       , mmt.credits_for_deg                                                                              AS credits
       , ''                                                                                               AS enrollment_notes
       , ''                                                                                               AS registration_notes
       , NVL(mt.txt, '')                                                                                  AS area_of_study
       , ''                                                                                               AS concentration
       --, ''                                                                                               AS credential_old  --left in for troubleshooting if needed
       , 'No degree listed'                                                                               AS credential
       , NVL(TRIM(mt.cip_no), '')                                                                         AS cip
       , CASE
            WHEN LOWER(mt.ltr_txt) LIKE '%transfer%' THEN 'T'
            ELSE 'F'
         END                                                                                              AS is_transfer
       , CASE
            WHEN mmt.inactive_date IS NULL THEN CASE
                                                  WHEN latest.fa_yr = mmt.fa_yr THEN 'T'
                                                  ELSE 'F'
                                                END
            ELSE 'F'
         END                                                                                              AS is_active
FROM informix.mhfamajor_table mmt 
JOIN informix.major_table mt
  ON mmt.major = mt.major
LEFT JOIN informix.mhmajordesc_table mdt
       ON mmt.major = mdt.major      
LEFT JOIN (SELECT mmt.major, mmt.fa_yr
                  , ROW_NUMBER() OVER(PARTITION BY mmt.major
                                      ORDER BY mmt.fa_yr DESC) AS RN
           FROM informix.mhfamajor_table mmt
           WHERE 1=1
              --AND mmt.deg = ''
          ) latest
       ON latest.major = mmt.major
          AND latest.RN = 1
WHERE 1=1       
   AND mmt.deg = ''
UNION
--Yearless records
SELECT NVL(TRIM(mmt.major), '') || '$$' || NVL(TRIM(mmt.deg), '')                                         AS nk
       , NVL(TRIM(mmt.major), '')                                                                         AS cd
       , '0000'                                                                                           AS cat_yr
       , NVL(mt.txt, '')                                                                                  AS name
       , TRIM(NVL(NVL(NVL(mdt.txt, mt.ltr_txt), mt.txt), ''))                                             AS desc
       --, NVL(NVL(mt.ltr_txt, mt.txt), '')                                                                 AS desc
       , mmt.credits_for_deg                                                                              AS credits
       , ''                                                                                               AS enrollment_notes
       , ''                                                                                               AS registration_notes
       , NVL(mt.txt, '')                                                                                  AS area_of_study
       , ''                                                                                               AS concentration
       --, NVL(dt.txt, '')                                                                                  AS credential_old  --left in for troubleshooting if needed
       , CASE
            WHEN LOWER(dt.txt) LIKE '%no deg%' THEN 'No degree listed'
            WHEN INSTR(dt.txt, ':') = 0 THEN NVL(dt.txt, '')
            ELSE NVL(SUBSTR(dt.txt, 1, INSTR(dt.txt, ':')-1), '')
         END                                                                                              AS credential
       , NVL(TRIM(mt.cip_no), '')                                                                         AS cip
       , CASE
            WHEN LOWER(mt.ltr_txt) LIKE '%transfer%' THEN 'T'
            WHEN LOWER(dt.txt) LIKE '%transfer%' THEN 'T'
            ELSE 'F'
         END                                                                                              AS is_transfer
       , 'F'                                                                                              AS is_active
FROM informix.mhfamajor_table mmt 
JOIN informix.major_table mt
  ON mmt.major = mt.major   
LEFT JOIN informix.deg_table dt
       ON mmt.deg = dt.deg
LEFT JOIN informix.mhmajordesc_table mdt
       ON mmt.major = mdt.major           
WHERE 1=1
   AND LOWER(dt.txt) LIKE '%no deg%'
   AND mmt.fa_yr = (SELECT MAX(mmt1.fa_yr)
                    FROM informix.mhfamajor_table mmt1
                    WHERE mmt.major = mmt1.major
                       AND mmt1.deg <> '')  ","Programs"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.Course","with term_list as (
  select stvterm_code
    from stvterm
   where stvterm_start_date >= sysdate-365
     and stvterm_end_date <= sysdate+365
),
crse_list as (
  select distinct
      ssbsect_subj_code,
      ssbsect_crse_numb,
      ssbsect_schd_code
    from ssbsect
   where ssbsect_term_code in (select * from term_list)
   --order by ssbsect_subj_code, ssbsect_crse_numb, ssbsect_schd_code
),
link_lab_list as (
  select ssbsect_subj_code as subj_code,
         ssbsect_crse_numb as crse_numb,
         count(*) as link_lab
    from crse_list
   group by ssbsect_subj_code, ssbsect_crse_numb
),
max_eff_term as (
  select max(scbcrse_eff_term) as max_term,
         scbcrse_subj_code as subj_code,
         scbcrse_crse_numb as crse_numb
    from scbcrse
   group by scbcrse_subj_code, scbcrse_crse_numb
),
-- SSBSECT_SCHD_TYPE <> 'LAB'
crse_not_lab as (
  SELECT /*csv*/ distinct
    s.scbcrse_subj_code || s.scbcrse_crse_numb as nk,
    s.scbcrse_subj_code || s.scbcrse_crse_numb as cd,
    CASE 
      WHEN REGEXP_INSTR(s.scbcrse_crse_numb, '\\\\d+') != 0 THEN SUBSTR(s.scbcrse_crse_numb, REGEXP_INSTR(s.scbcrse_crse_numb, '\\\\d+'), 1)
      ELSE '0'
    END AS \\\""level\\\"",
    s.scbcrse_subj_code as subject,
    NVL(scbcrse_dept_code, '0000') as dept,
    scbcrse_title as title,
    to_char(REPLACE(scbdesc_text_narrative, CHR(10), ' ')) AS \\\""desc\\\"",
    ssbsect_schd_code as course_type,
    COALESCE(ssbsect_credit_hrs, scbcrse_credit_hr_low, scbcrse_credit_hr_high, 0) as credits,
    CASE 
      WHEN scbcrse_csta_code = 'A' THEN 'T'
      ELSE 'F'
    END as is_active
   FROM scbcrse s JOIN stvsubj ON scbcrse_subj_code = stvsubj_code
                  JOIN max_eff_term on s.scbcrse_eff_term = max_term
                                   and s.scbcrse_subj_code = subj_code
                                   and s.scbcrse_crse_numb = crse_numb
                  JOIN ssbsect ON s.scbcrse_crse_numb = ssbsect_crse_numb 
                              AND s.scbcrse_subj_code = ssbsect_subj_code
                 -- Get course descriptions
             LEFT JOIN scbdesc ON s.scbcrse_crse_numb = scbdesc_crse_numb
                              AND s.scbcrse_subj_code = scbdesc_subj_code
                              and scbdesc_term_code_end is null
  where upper(ssbsect_schd_code) <> 'LAB'
),
-- SSBSECT_SCHD_CODE = 'LAB' AND link_lab = 1
crse_only_lab as (
  SELECT /*csv*/ distinct
    s.scbcrse_subj_code || s.scbcrse_crse_numb as nk,
    s.scbcrse_subj_code || s.scbcrse_crse_numb as cd,
    CASE 
      WHEN REGEXP_INSTR(s.scbcrse_crse_numb, '\\\\d+') != 0 THEN SUBSTR(s.scbcrse_crse_numb, REGEXP_INSTR(s.scbcrse_crse_numb, '\\\\d+'), 1)
      ELSE '0'
    END AS \\\""level\\\"",
    s.scbcrse_subj_code as subject,
    NVL(scbcrse_dept_code, '0000') as dept,
    scbcrse_title as title,
    to_char(REPLACE(scbdesc_text_narrative, CHR(10), ' ')) AS \\\""desc\\\"",
    ssbsect_schd_code as course_type,
    COALESCE(ssbsect_credit_hrs, scbcrse_credit_hr_low, scbcrse_credit_hr_high, 0) as credits,
    CASE 
      WHEN scbcrse_csta_code = 'A' THEN 'T'
      ELSE 'F'
    END as is_active
   FROM scbcrse s JOIN stvsubj ON scbcrse_subj_code = stvsubj_code
                  JOIN max_eff_term on s.scbcrse_eff_term = max_term
                                   and s.scbcrse_subj_code = subj_code
                                   and s.scbcrse_crse_numb = crse_numb
                  JOIN ssbsect ON s.scbcrse_crse_numb = ssbsect_crse_numb 
                              AND s.scbcrse_subj_code = ssbsect_subj_code
             left join link_lab_list lll on ssbsect_subj_code = lll.subj_code
                                        and ssbsect_crse_numb = lll.crse_numb
                 -- Get course descriptions
             LEFT JOIN scbdesc ON s.scbcrse_crse_numb = scbdesc_crse_numb
                              AND s.scbcrse_subj_code = scbdesc_subj_code
                              and scbdesc_term_code_end is null
  where upper(trim(ssbsect_schd_code)) = 'LAB'
    and (lll.link_lab = 1 or lll.link_lab is null)
),
-- SSBSECT_SCHD_CODE = 'LAB' AND link_lab > 1
crse_lec_lab as (
  select  /*csv*/ distinct
    ssbsect_subj_code || ssbsect_crse_numb || 'L' as nk,
    ssbsect_subj_code || ssbsect_crse_numb || 'L' as cd,
    '0' as \\\""level\\\"",
    ssbsect_subj_code as subject,
    'NDEP' as dept,
    ssbsect_subj_code || ssbsect_crse_numb || ' Lab' as title,
    ssbsect_subj_code || ssbsect_crse_numb || ' Lab' as \\\""dept\\\"",
    '' as course_type,
    nvl(ssbsect_credit_hrs, 0) as credits,
    'T' as is_active
  from ssbsect left join link_lab_list on ssbsect_subj_code = subj_code
                                      and ssbsect_crse_numb = crse_numb
 where ssbsect_schd_code = 'LAB'
   and link_lab > 1
)
select /*csv*/ * from crse_not_lab
union
select * from crse_only_lab
union
select * from crse_lec_lab
order by 1","Course"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.Term","-- get Terms from Banner
WITH term AS (
  SELECT stvterm_code nk, 
          stvterm_desc \\\""name\\\"", 
          stvterm_acyr_code cat_yr,
          coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
          coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
          to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
          to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
          -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
          -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
    Case 
      When (Stvterm_Desc Like 'Fall%' or Stvterm_Desc Like 'Winter%' or Stvterm_Desc Like 'Spring%' or Stvterm_Desc Like 'Summer%')
           AND STVTERM_CODE >= '201212' and stvterm_code not in ('999999','000000') THEN 'T' 
      ELSE 'F'
    END is_active
    FROM stvterm JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
   WHERE sfrrsts_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE') -- Confirm registration codes to include with BA/Member
     AND sfrrsts_ptrm_code = '1' -- Confirm ptrm code to include with BA/Member
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in stvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
  SELECT stvterm_code nk,
         stvterm_desc \\\""name\\\"",
         stvterm_acyr_code cat_yr,
         '1900-01-01' registration_start_dt, -- Use default values
         '1900-01-02' registration_end_dt, -- Use default values
         to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
         to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
         -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
         -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
         Case
           When (Stvterm_Desc Like 'Fall%' or Stvterm_Desc Like 'Winter%' or Stvterm_Desc Like 'Spring%' or Stvterm_Desc Like 'Summer%') 
                AND STVTERM_CODE >= '201212' and stvterm_code not in ('999999','000000') THEN 'T' 
           ELSE 'F'
         END is_active
   FROM stvterm
  WHERE NOT EXISTS (SELECT 1
                    FROM sfrrsts
                   WHERE sfrrsts_term_code = stvterm_code
                     AND sfrrsts_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE') -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                     AND sfrrsts_ptrm_code = '1') -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
),

-- Combine Banner data and default values
finalDataSet AS (
  SELECT * FROM term
  UNION
  SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM finalDataSet order by nk","Term"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Program","SELECT
  NK,
  CD,
  CAT_YR,
  \\\""NAME\\\"",
 \\\""DESC\\\"",
  CREDITS,
  ENROLLMENT_NOTES,
  AREA_OF_STUDY,
  CONCENTRATION,
  \\\""CREDENTIAL\\\"",
  CIP,
  IS_TRANSFER,
  IS_ACTIVE
FROM
  ZST_EAB_PROGRAM_EXTRACT
where MULTI_SOURCE = 'PCC'","Programs"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.ProgramCredential","SELECT DISTINCT 
	sobcurr_degc_code AS nk
	, sobcurr_degc_code AS short_credential
	, 'T' AS is_active
FROM sobcurr","Program Credentials"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"reg.StudentTestScore","-- Fields	nk,student,test_subject,score,is_active
-- Model Name	reg.StudentTestScore
-- Name	Student Test Score
-- Output	Student_Test Score_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore
","Student Test Scores"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.SeatsAvail","with CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE AS TERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-3*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC
)

SELECT
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_seats_avail avail_seats, 
  'T' is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
             LEFT JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                              AND ssbsect_term_code = ssrmeet_term_code 
WHERE ssbsect_ssts_code = 'A'
  AND spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code IN (select TERM_CODE from CUR_TERM)","SeatsAvail"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Term","-- get Terms from Banner
WITH term AS (SELECT 
  stvterm_code nk, 
  stvterm_desc \\\""name\\\"", 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case 
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm 
  JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member
  AND sfrrsts_ptrm_code = '1' -- Confirm ptrm code to include with BA/Member
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in stvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
SELECT
  stvterm_code nk,
  stvterm_desc \\\""name\\\"",
  stvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = stvterm_code
                   AND sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_ptrm_code = '1') -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM finalDataSet","Term"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.CourseType","WITH courseType AS (
SELECT 
  stvschd_code nk,
  stvschd_desc \\\""name\\\"",
  'T' is_active
FROM stvschd
),

-- Assign default values
\\\""default\\\"" AS (
Select 
'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'T' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM courseType
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Course type"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.Subject","WITH subject AS (
	SELECT stvsubj_code AS nk,
           stvsubj_desc AS \\\""name\\\"",
           'T' AS is_active
      FROM stvsubj
 where length(stvsubj_code) = 4
),

-- Assign default values
defaultValues AS (
	Select 'DEFAULT' as NK
	       , 'DEFAULT' as \\\""Name\\\""
	       , 'F' as IS_ACTIVE
	  from dual
),

-- Combine Banner data and default values
finalDataSet AS(
	SELECT * FROM subject
	UNION
	SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Subject"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.FirstTermFeed","with all_terms as (
  select distinct nk
    from eab_trm
   where to_date(term_start_dt,'YYYY-MM-DD') >= sysdate-3*365
     and college = 'PC'
),
-- Terms where a student is considered active
cur_terms as (
  select distinct nk
    from eab_trm
   where to_date(TERM_END_DT, 'YYYY-MM-DD') >= SYSDATE
     and college = 'PC'
),
-- Grab currently enrolled students
cur_enr_list as (
  select id as stu_id
    from eab_stdnt_active
   where current_enroll_pc = 'Y'
     and academic_period in (select nk from cur_terms)
),
-- Get students who have applied for current and future terms
cur_app_list as (
  select esa.id as stu_id
    from saradap s join eab_stdnt_active esa on s.saradap_pidm = esa.person_uid
                                            and esa.current_enroll_pc = 'Y'
   where s.saradap_term_code_entry in (select * from cur_terms)
),
-- Get current students
cur_stu as (
  select stu_id from cur_enr_list
  union
  select stu_id from cur_app_list
),
firsttermfeed as (
  select student as nk,
         student as student,
         min(term) as term,
         'T' as is_active
    from eab_student_term join cur_stu on eab_student_term.student = cur_stu.stu_id
   --where student in (select * from stu_list)
   group by student
   order by nk, term
)
select * from firsttermfeed","FirstTermFeed"
1021,"Houston Baptist University",10391,"",47987,"APS:Houston Baptist University",47975,"APS",24,"hr","with year_table as (
    select 
        column_value as year_value 
    from 
        table(sys.dbms_debug_vc2coll('2015','2014','2013','2012','2011','2010','2009'))
)
, orgn_with_pred_title as (
    select 
         a.FTVORGN_COAS_CODE, a.FTVORGN_ORGN_CODE, a.FTVORGN_TITLE, a.FTVORGN_EFF_DATE, b.ftvorgn_orgn_code pred_code, b.FTVORGN_TITLE pred_title
    from FTVORGN a
    left outer join FTVORGN b 
        on a.ftvorgn_coas_code= b.ftvorgn_coas_code
        and a.ftvorgn_orgn_code_pred = b.ftvorgn_orgn_code
    where
        a.FTVORGN_COAS_CODE = 'C' 
        and b.ftvorgn_eff_date = 
                (select max(ftvorgn_eff_date) from ftvorgn c
                 where 
                      c.ftvorgn_orgn_code = b.ftvorgn_orgn_code
                      and c.ftvorgn_coas_code = b.ftvorgn_coas_code
                      and c.ftvorgn_eff_date < a.ftvorgn_eff_date)
)
, org_final as
    (select * from orgn_with_pred_title f1
     where 
        FTVORGN_EFF_DATE = 
            (select max(FTVORGN_EFF_DATE) from orgn_with_pred_title f2
                        where 
                              f1.FTVORGN_ORGN_CODE = f2.FTVORGN_ORGN_CODE
            )                              
    )
, jobs_final as 
    (select * from NBRJOBS n1
     where n1.NBRJOBS_EFFECTIVE_DATE = 
            (select 
                max(NBRJOBS_EFFECTIVE_DATE) from NBRJOBS n2
             where 
                n1.NBRJOBS_PIDM = n2.NBRJOBS_PIDM
                and n1.NBRJOBS_POSN = n2.NBRJOBS_POSN
                and n1.NBRJOBS_SUFF = n2.NBRJOBS_SUFF
            )
        )
select 
    PEBEMPL_PIDM as employee_id
    , b.year_value as fiscal_year
    , PEBEMPL_FIRST_HIRE_DATE as hire_date
    , nr.NBRJOBS_ECLS_CODE as employee_class
    , PEBEMPL_ORGN_CODE_HOME as home_dept_code
    , PEBEMPL_TERM_DATE as termination_date
    , '' as tenure_date
    , '' as rank_begin_date
    , '' as tenure_code
    , '' as peafact_rank_code
    , '' as peafact_rank_desc
    , '' as ipeds_rank_code
    , '' as ipeds_rank_desc
    , '' as EDUCATION_LEVEL          
    , '' as DEGREE_HELD
    , f.FTVORGN_ORGN_CODE as DEPARTMENT_OF_RANK   
from 
    PEBEMPL p
    CROSS JOIN year_table b
    left outer join org_final f
         on p.PEBEMPL_ORGN_CODE_HOME = f.FTVORGN_ORGN_CODE
    left outer join jobs_final nr 
          on p.PEBEMPL_PIDM = nr.NBRJOBS_PIDM;","hr_employee"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.studentcourse","WITH pop AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)))),

audit_bank as (
select a.pidm,a.term,a.audit_record,b.course_record from (
select 
        distinct sfrstca_pidm as pidm,
         sfrstca_crn as crn,
       sfrstca_term_code term,
       ssbsect_subj_code || ssbsect_crse_numb as audit_record

from sfrstca
left join ssbsect  --maybe an inner join, in case the CRN no longer exists in SSBSECT?
on ssbsect_crn = sfrstca_crn 
  and ssbsect_term_code = sfrstca_term_code
 ) a 
left join (
select distinct sfrstcr_pidm pidm, 
      sfrstcr_crn crn,
      sfrstcr_term_code term, 
      ssbsect_subj_code || ssbsect_crse_numb as course_record
from sfrstcr
left join ssbsect
on ssbsect_crn = sfrstcr_crn
) b
on a.pidm = b.pidm
and a.audit_record = b.course_record
and a.term = b.term
where b.course_record is null
order by 1,2,3

)

select spriden_id || '$$' || audit_bank.term || '$$' || audit_bank.audit_record as NK,
       spriden_id Student,
       audit_bank.term term,
       audit_bank.audit_record course,
       '' as section,
       '' as grade_cd,
       0 as Credits_Attemtped,
       0 as Credits_Earned,
       'UNKNOWN' as status,
       0.0 as grade_points,
       'T' as is_active
from audit_bank
left join spriden on spriden_pidm = audit_bank.pidm
--left join ssbsect on ssbsect_crn = audit_bank.crn
where audit_bank.pidm in (select * from pop)
--audit_bank.pidm in (select * from pilot_pop)
--and spriden_id = 'T20130710'
and audit_bank.term >= 201610

 
UNION --transfer course work

Select Spriden_Id || '$$' || SHRTRCE_TERM_CODE_EFF || '$$' || SHRTRCE_SUBJ_CODE || SHRTRCE_CRSE_NUMB As Nk,
       Spriden_id Student,
       SHRTRCE_TERM_CODE_EFF Term,
       SHRTRCE_SUBJ_CODE || SHRTRCE_CRSE_NUMB as course,
       '' As Section,
       SHRTRCE_GRDE_CODE As Grade_Cd,
       Shrtrce_Credit_Hours As Credits_Attemtped,
       SHRTRCE_CREDIT_HOURS As Credits_Earned,
       'COMPLETED' As Status,
       0.0 As Grade_Points,
       'T' As Is_Active
From Shrtrce
left join spriden on spriden_pidm = shrtrce_pidm
Where Shrtrce_Pidm In (Select * From Pop)

And Spriden_Change_Ind Is Null

order by 2,3,4","AUDIT Student Course"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.term","WITH TERM AS (SELECT 
  stvterm_code nk, 
  stvterm_desc \\\""name\\\"", 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '2100-01-01') registration_start_dt,
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '2100-01-01') registration_end_dt,
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active
  Case 
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and Stvterm_Desc Not Like '%CE' 
    and stvterm_desc not like '%Continuing Education' and stvterm_code not in ('999999','000000') 
    and TRUNC(stvterm_start_date, 'YYYY') > TRUNC(sysdate, 'YYYY')-365*5 THEN 'T'
    ELSE 'F'
  END is_active
FROM stvterm JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code IN ('RW') -- Confirm with BA
  AND sfrrsts_ptrm_code = '1' -- Confirm with BA

UNION 

SELECT
  stvterm_code nk,
  stvterm_desc \\\""name\\\"",
  stvterm_acyr_code cat_yr,
  '2100-01-01' registration_start_dt,
  '2100-01-02' registration_end_dt,
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  Case 
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and Stvterm_Desc Not Like '%CE' 
    and stvterm_desc not like '%Continuing Education' 
    and stvterm_code not in ('999999','000000') 
    and TRUNC(stvterm_start_date, 'YYYY') > TRUNC(sysdate, 'YYYY')-365*5 THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = stvterm_code
                   AND sfrrsts_rsts_code IN ('RW') -- Need to confirm registration codes
                   AND sfrrsts_ptrm_code = '1')
)

SELECT * FROM TERM order by is_active ","Terms"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"core.Student","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1  
  AND (sfrstcr_rsts_code LIKE ('R%') OR sfrstcr_rsts_code LIKE ('K%'))
  
---- UNION
--
--SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
--FROM saradap
--  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
--WHERE 1=1 
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , spriden_id AS username 
  , COALESCE(goremal_email_address,lower(spriden_first_name)||lower(spriden_last_name)||'@missingemail.org') AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm AND spriden_change_ind IS NULL
  LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm AND spriden_change_ind IS NULL
  LEFT JOIN GOREMAL ON goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code IN ('STUE')
-- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student
","Student"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"catcc.WaitlistPosition","with CUR_TERM AS (
  select stvterm_code
    from stvterm
   where stvterm_code <= (SELECT min(stvterm_code)
                            FROM stvterm
                           WHERE UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
                             AND STVTERM_CODE not in ('000000', '900000', '999999')
                             and STVTERM_END_DATE >= sysdate)
     and rownum <= 3
     and UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     and STVTERM_CODE not in ('000000', '900000', '999999')
   ORDER BY 1 desc
),
STU_WL AS (
  select spriden_id||'$$'||sfrstcr_crn||'$$'||sfrstcr_term_code as nk,
         spriden_id as student,
         sfrstcr_crn||'$$'||sfrstcr_term_code as section,
         sfrstcr_wl_priority as position,
         'Y' as is_active
    from sfrstcr left join spriden on sfrstcr_pidm = spriden_pidm
                                  and spriden_change_ind is null
   where sfrstcr_rsts_code = 'WL'
     and sfrstcr_term_code in (select * from cur_term)  
)
select * from STU_WL order by section, position","Waitlist"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.SeatsAvail","-- extract seats available from banner
WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk.
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
join scrlevl on ssbsect_subj_code = scrlevl.SCRLEVL_subj_code
                                  and ssbsect_crse_numb = scrlevl.SCRLEVL_CRSE_NUMB 
WHERE 1=1
  AND ssbsect_ssts_code = 'A' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. we do not need to extract seats available for past terms.
  and SCRLEVL_LEVL_CODE in ('50','54')
)

-- wrapper query
SELECT * FROM seatsAvail","SeatsAvailable"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.SectionAttribute","SELECT
  ssbsect_crn || '$$' || ssbsect_term_code || '$$' || ssrattr_attr_code nk, 
  ssbsect_crn || '$$' || ssbsect_term_code section,
  ssrattr_attr_code AS \\\""ATTRIBUTE\\\"",
  'T' is_active
FROM ssbsect JOIN ssrattr ON ssbsect_term_code = ssrattr_term_code 
                         AND ssbsect_crn = ssrattr_crn
        LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                         AND ssbsect_crn = sirasgn_crn
        LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
             JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                         AND ssbsect_term_code = ssrmeet_term_code
WHERE spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code >= '201015'
  -- AND ssbsect_crn NOT LIKE '6000%'","Section Attribute"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"core.StudentCategory","with this_term as (
  select distinct nk
    from eab_trm
   where to_date(term_start_dt, 'YYYY-MM-DD') <= sysdate
     and to_date(term_end_dt, 'YYYY-MM-DD') >= sysdate
),
prog_list as (
  select program,
         max(term) max_term
    from eab_student_term_exp
   group by program
)
select substr(program,1,instr(program,'$')-1) as nk,
       substr(program,1,instr(program,'$')-1) as name,
       case
        when term = (select nk from this_term) then 'T'
        else 'F'
       end as is_active
  from eab_student_term_exp
union
select 'VETERAN' as nk,
       'VETERAN' as name,
       'T' as is_active
  from dual
union
select 'EOPS' as nk,
       'EOPS' as name,
       'T' as is_active
  from dual
union
select 'DSPS' as nk,
       'DSPS' as name,
       'T' as is_active
  from dual
union
select 'FOSTER_YOUTH' as nk,
       'FOSTER_YOUTH' as name,
       'T' as is_active
  from dual
union
select 'CALWORKS' as nk,
       'CALWORKS' as name,
       'T' as is_active
  from dual
union
select 'DUAL_ENRL_STUDENT' as nk,
       'DUAL_ENRL_STUDENT' as name,
       'T' as is_active
  from dual
order by nk","StudentCategory"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"core.Student","SELECT DISTINCT SUBSTR(PERSON.ID, 1, 7) nk ,
  PP.PERSON_PIN_USER_ID username ,
  NVL(PE_C.PERSON_EMAIL_ADDRESSES, 'student@tridenttech.edu') email ,
  REPLACE(PERSON.FIRST_NAME, '`', '``') FIRST_NAME ,
  PERSON.LAST_NAME last_name ,
  NVL(REPLACE(TO_CHAR(TO_DATE(PERSON.BIRTH_DATE), 'yyyy-mm-dd'), '/', '-'), '1900-01-01') birthdate ,
  't' is_active
FROM COLL_PRODUCTION.PERSON
JOIN COLL_PRODUCTION.PERSON_PIN PP
ON PERSON.ID = PP.PERSON_PIN_ID
JOIN COLL_PRODUCTION.PEOPLE_EMAIL PE_C
ON PERSON.ID                     = PE_C.ID
AND PE_C.PERSON_EMAIL_TYPES = 'TTC'
JOIN COLL_PRODUCTION.APPLICATIONS A
ON PERSON.ID                      = A.APPL_APPLICANT
AND A.APPL_ACAD_PROGRAM NOT IN ( 'POSTSEC','DUALENR','NOND' ) 
WHERE
PE_C.PERSON_EMAIL_ADDRESSES NOT IN ('Yolanda.Bland@tridenttech.edu',
'Karen.Wrighten@tridenttech.edu',
'Brandon.Branham@tridenttech.edu',
'Sharon.Manigault@tridenttech.edu',
'Jamella.Jaglal@tridenttech.edu',
'Kimberly.Fowler@tridenttech.edu',
'Donna.Grant@tridenttech.edu',
'Gerald.Gadsden@tridenttech.edu',
'Jewell.Dingle@tridenttech.edu',
'Chanity.Wilson@tridenttech.edu',
'Sidney.Alston@tridenttech.edu',
'Laurie.Fladd@tridenttech.edu',
'Brian.Almquist@tridenttech.edu',
'Deborah.Thompson@tridenttech.edu',
'Marshall.Connor@tridenttech.edu',
'mikepatterson@my.tridenttech.edu',
'D''jaris.Whipper-lewis@tridenttech.edu',
'Kathy.Simmons@tridenttech.edu',
'annikajessen@my.tridenttech.edu')","Applicant - Student"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"reg.studenttestscore","with pop as (
  
select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,b.max_term as max_term_2
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select student_id, max_term
            from (
                  select b.emplid as student_id
                  , min(b.strm) as term
                  , max(b.strm) as max_term
                  --, b.strm as strm
                  from ps_stdnt_car_term b
                  where 1=1
                  and institution = 'TN293'
                  and ACAD_CAREER = 'CRED'
                  group by b.emplid
                  ) car_term
            where 1=1
            and term = (
                   select distinct strm
                   from (select strm, ACAD_CAREER, institution 
                          from PS_TERM_TBL 
                          where strm <= (SELECT MIN(SUBSTR(STRM, 1, 2) || SUBSTR(STRM, 3, 1)+1 || SUBSTR(STRM, 4, 1)) AS strm
                                         FROM PS_TERM_TBL
                                         WHERE STRM = (select MIN(strm) AS strm 
                                                       from PS_TERM_TBL 
                                                       where acad_career = 'CRED'
                                                          AND term_end_dt > sysdate))
                   order by strm desc) a
                    where 
                    rownum < 8
                    --and term_begin_dt < '31-JUL-15'
                    and institution = 'TN293' 
                    and acad_career = 'CRED'
                    and a.strm = term
                    )
           ) b
           on b.student_id = a.emplid
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid       
WHERE  1=1
        --and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
)                            
       
select distinct emplid || '$$' || a.test_id || '_' || a.test_component as nk
, a.emplid as student
, a.test_id || '_' || a.test_component as test_subject
, a.score as score
, 'T' as is_active

from ps_stdnt_test_comp a
--left join PS_SA_TEST_TBL b on a.test_id = b.test_id
where a.emplid in (select student_id from pop)","StudentTestScore"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"inst.Campus","SELECT NVL(TRIM(ct.campus), '') AS nk
       , NVL(TRIM(ct.txt), '')  AS name
       , CASE 
           WHEN ct.campus = 'DL' THEN 'T'
           ELSE 'F' 
         END                    AS is_online  --'DL' is distance learning and would be considered online
       , 'T'                    AS is_active
FROM informix.campus_table ct    
WHERE 1=1
UNION
SELECT DISTINCT 'NA'                    --Default value for when no campus is listed in other files.
                , 'No Campus Listed'
                , 'F'
                , 'T'
FROM informix.campus_table ct       
ORDER BY 1   ","Campus"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.enrollmentApplication","with studentPopulation AS (
select  saradap_pidm AS pidm,
        saradap_term_code_entry AS term,
        saradap_appl_no AS appl_no
from saradap
where saradap_term_code_entry in 
      (        
      select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE >= (
                      
                      SELECT MAX(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date < sysdate
                                )
                      )
      )
),

studentMaxTerm AS (
SELECT pidm AS pidm
  , MAX(term) AS maxTerm
  , MAX (appl_no) AS maxApplNo
FROM studentPopulation
  GROUP BY pidm
),

email_list as (
  select goremal_pidm as pidm,
         coalesce(
          (select goremal_email_address from CCCD_EAB_EMAIL where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'HOME' and rownum = 1),
          (select goremal_email_address from CCCD_EAB_EMAIL where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'CCCD' and rownum = 1),
          ''
         ) as email
    from CCCD_EAB_EMAIL g
),

enrollmentApplication as (
select DISTINCT spriden_id as nk,
       spriden_id as student,
       studentMaxTerm.maxTerm as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       TRIM(email_list.email) as personal_email,
       case
        when saradap_term_code_entry is not null then 'T'
        else 'F'
       end as is_active
  from saradap
    join studentMaxTerm on saradap_pidm = studentMaxTerm.pidm
                              and saradap_term_code_entry = studentMaxTerm.maxTerm
                              and saradap_appl_no = studentMaxTerm.maxApplNo
    join CCCD_EAB_GENERAL_PERSON on saradap_pidm = spriden_pidm -- Custom view at Coastline replacing SPRIDEN
    left join email_list on saradap_pidm = email_list.pidm
  where spriden_change_ind is NULL
    and spriden_entity_ind = 'P'
)

select  *
  from enrollmentApplication","EnrollmentApplication"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"core.Advisor","-- compute max term advisor record
WITH advisorMaxTerm AS (
SELECT sibinst_pidm
FROM sibinst baseTable
WHERE sibinst_fcst_code = 'AC'
  AND sibinst_advr_ind = 'Y'
  AND sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                              FROM sibinst compTable
                              WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                              )
),

-- extract advisor data
\\\""advisor\\\"" AS (
SELECT spriden_id AS nk
  , spriden_id AS username
  , COALESCE((SELECT goremal_email_address
              FROM CCCD_EAB_EMAIL
                WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'CCCD' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND rownum < 2) -- try to get campus email if active and preferred. Confirm email_code with BA/Member.
              , (SELECT goremal_email_address
                FROM CCCD_EAB_EMAIL
                  WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'CCCD' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N' AND rownum < 2) -- try to get campus email if active and not preferred. Confirm email_code with BA/Member.
              , LOWER(spriden_id) || '@missingemail.org') AS email -- Set default email address if none above are available.
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , 'T' AS is_active
FROM CCCD_EAB_GENERAL_PERSON
JOIN advisorMaxTerm ON advisorMaxTerm.sibinst_pidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent advisor record is extracted
)

-- Wrapper query
SELECT * FROM \\\""advisor\\\""","Advisor"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.studentcourse","WITH pop AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)))),

audit_bank as (
select a.pidm,a.term,a.audit_record,b.course_record from (
select 
        distinct sfrstca_pidm as pidm,
         sfrstca_crn as crn,
       sfrstca_term_code term,
       ssbsect_subj_code || ssbsect_crse_numb as audit_record

from sfrstca
left join ssbsect 
on ssbsect_crn = sfrstca_crn 
  and ssbsect_term_code = sfrstca_term_code
 ) a 
left join (
select distinct sfrstcr_pidm pidm, 
      sfrstcr_crn crn,
      sfrstcr_term_code term, 
      ssbsect_subj_code || ssbsect_crse_numb as course_record
from sfrstcr
left join ssbsect
on ssbsect_crn = sfrstcr_crn
) b
on a.pidm = b.pidm
and a.audit_record = b.course_record
and a.term = b.term
where b.course_record is null
order by 1,2,3

)

select  
       spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || ssbsect_crse_numb as NK
       , spriden_id Student
       ,stvterm_code term
       , ssbsect_subj_code || ssbsect_crse_numb course
       , nvl(
            (
              select SSBSECT_CRN  || '$$' || SSBSECT_TERM_CODE
              from ssbsect
              where ssbsect_crn = sfrstcr_crn and ssbsect_term_code = sfrstcr_term_code
            ),
            'UNKNOWN'
          ) as Section
       , sfrstcr_grde_code grade_cd
       , nvl(sfrstcr_credit_hr, 0) as Credits_Attemtped
       , 0 as Credits_Earned 
       , case 
          when sfrstcr_rsts_code in ('RE', 'RW', 'RT') and stvterm_start_date > sysdate then 'REGISTERED'
          when sfrstcr_rsts_code in ('RE', 'RW', 'RT') and stvterm_start_date <= sysdate and stvterm_end_date > sysdate then 'IN_PROGRESS'
          when sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code in ('A','B','C','D*','S','PA','CR') then 'COMPLETED'
          else 'UNKNOWN' end
          STATUS, 
          
          -- Add a grade variable column that maps letter grades to points...
          CASE 
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'A' THEN 4.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'B' THEN 3.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'C' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'D*' THEN 1.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'S' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'PA' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'CR' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code IS NULL THEN 0.0
          ELSE 0.0
          END as grade_points,
          'T' as is_active

  -- Why are we using the cartesian product here? Should try to use an explicit 
  -- inner join here instead of the implicit cross join. 
  from ( select null p_term, '' p_id, 'N' p_history, 'N' p_current from dual ),     
     spriden, 
     sfrstcr,
     stvterm, 
     stvrsts, 
     ssbsect, 
     scbcrse,
     sobptrm
where --spriden_id = p_id  and
   spriden_change_ind is null 
  and stvterm_code = sfrstcr_term_code --join
  and sfrstcr_pidm = spriden_pidm --join
  and sfrstcr_term_code = nvl(p_term, sfrstcr_term_code) --this seems surperfluous - is it here just to account for bad data?
  and ssbsect_crn = sfrstcr_crn --join
  and scbcrse_subj_code = ssbsect_subj_code --join
  and ssbsect_term_code = sfrstcr_term_code --join
  and scbcrse_crse_numb = ssbsect_crse_numb --join
  and scbcrse_eff_term = ( select max(scbcrse_eff_term) 
                             from scbcrse 
                            where scbcrse_crse_numb = ssbsect_crse_numb 
                              and scbcrse_subj_code = ssbsect_subj_code 
                              and scbcrse_eff_term <= ssbsect_term_code ) 
  and sfrstcr_rsts_code = stvrsts_code --join
  and ( stvrsts_wait_ind = 'Y' or ( stvrsts_incl_sect_enrl = 'Y' and stvrsts_withdraw_ind = 'N' ) )
  and sobptrm_ptrm_code = ssbsect_ptrm_code --join, parts of term
  and sobptrm_term_code = ssbsect_term_code --join, entire term
  and ( p_current = 'N' or stvterm_start_date <= sysdate )  --p_current is always set to 'N'

-- If course is graded, do not include sfrstcr
  and not exists ( select 'Y' from shrtckn 
                    where shrtckn_crn = sfrstcr_crn 
                      and shrtckn_term_code = sfrstcr_term_code 
                     and shrtckn_pidm = sfrstcr_pidm) 
 
-- population cohort

 and spriden_pidm in (select * from pop)
and sfrstcr_activity_date > sysdate-8 -- Incremental extract for changes within the last week
 --and spriden_pidm in (select * from pilot_pop)
 --and spriden_id = 'T20130710'

UNION

select
      spriden_id|| '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code|| shrtckn_crse_numb as NK,
      spriden_id as Student,
      stvterm_code as term,
      shrtckn_subj_code|| shrtckn_crse_numb as course_cd,
      nvl((select SSBSECT_CRN || '$$' || SSBSECT_TERM_CODE
        from ssbsect
        where ssbsect_crn = shrtckn_crn and ssbsect_term_code = shrtckn_term_code),'UNKNOWN') as Section, --check to see if section exists
      shrtckg_grde_code_final as grade_cd,
      --'' as grade_points,
      nvl(SHRTCKG_HOURS_ATTEMPTED, 0) as CreditsAttemtped,
      nvl(shrtckg_credit_hours,0) as CreditsEarned,
      --shrtckn_crn,
       --checking against proper grades for a completed course
       --[INST_CONFIG] change per institution
       case
       when shrtckg_grde_code_final in ('A','B','C','D*','S','PA','CR') then 'COMPLETED' 
          else 'UNKNOWN' end Status,
       CASE 
         WHEN shrtckg_grde_code_final = 'A' THEN 4.0 
         WHEN shrtckg_grde_code_final = 'B' THEN 3.0
         WHEN shrtckg_grde_code_final = 'C' THEN 2.0
         WHEN shrtckg_grde_code_final = 'D*' THEN 1.0
         WHEN shrtckg_grde_code_final = 'S' THEN 2.0
         WHEN shrtckg_grde_code_final = 'PA' THEN 2.0
         WHEN shrtckg_grde_code_final = 'CR' THEN 2.0
         WHEN shrtckg_grde_code_final IS NULL THEN 0.0
        ELSE 0.0
       END as grade_points,
       'T' as is_active
from spriden
join shrtckn on spriden_pidm = shrtckn_pidm
join stvterm on stvterm_code = shrtckn_term_code
join shrtckg on spriden_pidm = shrtckg_pidm and shrtckn_pidm = shrtckg_pidm and shrtckg_tckn_seq_no = shrtckn_seq_no and shrtckg_term_code = shrtckn_term_code 
--join ssbsect on 
where  shrtckg_seq_no = ( select max(shrtckg_seq_no) from shrtckg 
                          where shrtckg_pidm = spriden_pidm 
                          --and shrtckg_term_code = ssbsect_term_code     --not necessary to go to ssbsect table
                          and shrtckg_tckn_seq_no = shrtckn_seq_no ) 
  and spriden_change_ind is null
  and spriden_pidm in (select * from pop)
and shrtckn_activity_date > sysdate-8 -- Incremental extract for changes within the last week
 /* 
UNION --transfer course work

Select Spriden_Id || '$$' || SHRTRCE_TERM_CODE_EFF || '$$' || SHRTRCE_SUBJ_CODE || SHRTRCE_CRSE_NUMB As Nk,
       Spriden_id Student,
       SHRTRCE_TERM_CODE_EFF Term,
       SHRTRCE_SUBJ_CODE || SHRTRCE_CRSE_NUMB as course,
       '' As Section,
       SHRTRCE_GRDE_CODE As Grade_Cd,
       Shrtrce_Credit_Hours As Credits_Attemtped,
       SHRTRCE_CREDIT_HOURS As Credits_Earned,
       'COMPLETED' As Status,
       0.0 As Grade_Points,
       'T' As Is_Active
From Shrtrce
left join spriden on spriden_pidm = shrtrce_pidm
Where Shrtrce_Pidm In (Select * From Pop)

And Spriden_Change_Ind Is Null
*/
order by 2,3,4","INST Student Course"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"reg.StudentTestScore","with cur_terms as (
select distinct nk, trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY')
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'C'
 order by nk desc),

cur_stu as (
select id as stu_id
  from eab_stdnt_active
 where current_enroll_cc = 'Y'
   and academic_period in (select nk from cur_terms))

 SELECT
   nk,
   student,
   test_subject,
   score,
   CASE
     WHEN is_active = 'Y' THEN 'T'
     ELSE 'F'
   END AS is_active
FROM EAB_STUDENT_TEST_SCORE
WHERE student IN (SELECT stu_id from cur_stu)","Test Scores"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.SeatsAvail","-- Fields	nk,avail_seats,is_active
-- Model Name	cat.SeatsAvail
-- Name	SeatsAvail
-- Output	SeatsAvail_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:	

-- extract seats available from banner
WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk.
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
WHERE 1=1
  AND ssbsect_ssts_code = 'A' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. we do not need to extract seats available for past terms.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM seatsAvail
","Seats Available"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"core.student","
WITH getLastXTerms AS (
  SELECT *
  from (select stvterm_code from stvterm where stvterm_code <= 
                    (select min(stvterm_code) as stvterm_code
                    from stvterm
                   where stvterm_start_date > sysdate) 
                   order by stvterm_code desc) 
                    where 
                    rownum < 7
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

student AS (
SELECT DISTINCT 
  spriden_id AS nk
--, spriden_id AS username
 , TRIM(COALESCE(
                (SELECT REGEXP_SUBSTR(TRIM(goremal_email_address),'[^@]+',1,1) FROM goremal
                  WHERE 1=1
                  and goremal_pidm = spriden_pidm 
                  AND goremal_status_ind = 'A' 
                  --AND goremal_preferred_ind = 'Y' 
                  AND goremal_emal_code = 'LIVE' -- try to get campus email
                  and goremal_email_address not like '%test%'
                  and goremal_email_address like '%alamo%'
                )
                , LOWER(spriden_id) -- set default email if none above available
                  )
        ) AS username
  , TRIM(COALESCE(
                (SELECT goremal_email_address FROM goremal
                  WHERE 1=1
                  and goremal_pidm = spriden_pidm 
                  AND goremal_status_ind = 'A' 
                  --AND goremal_preferred_ind = 'Y' 
                  AND goremal_emal_code = 'LIVE' -- try to get campus email
                  and goremal_email_address not like '%test%'
                  and goremal_email_address like '%alamo%'
                  )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  --RIGHT JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. C indicates a non-person such as a location.
  and spriden_pidm in (select * from studentpopulation)
)


-- wrapper query
select * from student
","Student"
852,"My Training University",999999,"",873,"Community College",47972,"Navigate",20,"inst.Campus","select app_param_key from app_parameter","Query"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"concentration_lkp","select 
concentration_cd,
concentration_desc
 from atlantatech.osf_cnl_concentration_lkp","SSF_concentration_lkp"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.enrollmentapplication","WITH CURRENT_STUDENTS AS (SELECT DISTINCT
   substring(P.ID,1,7) nk
FROM
   coll18_prod.dbo.PERSON P
      JOIN coll18_prod.dbo.PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN coll18_prod.dbo.PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
           AND  
        PE.PERSON_EMAIL_TYPES = 'P'
      JOIN coll18_prod.dbo.STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN coll18_prod.dbo.STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN coll18_prod.dbo.ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
          --  AND
        -- AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN coll18_prod.dbo.ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'),

		 ALL_STUDENTS AS (

SELECT nk from CURRENT_STUDENTS

UNION 

SELECT DISTINCT
   substring(P.ID,1,7) nk 
FROM
   coll18_prod.dbo.PERSON P
      JOIN coll18_prod.dbo.PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN coll18_prod.dbo.PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
           AND  
         PE.PERSON_EMAIL_TYPES = 'P'
      JOIN coll18_prod.dbo.APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         substring(A.APPL_APPLICANT,1,7) NOT IN 
         (
            SELECT
               nk
            FROM
               CURRENT_STUDENTS
         )
         --   AND
       --  A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN coll18_prod.dbo.APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
        --    AND
      --   APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN coll18_prod.dbo.TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID
),

ENROLLMENT_APPLICATIONS AS (
SELECT DISTINCT
   substring(P.ID,1,7) nk,
   substring(P.ID,1,7) student,
   SUBSTRING(T.TERMS_ID,1,6) app_term,  --   SELECT * FROM APPLICATIONS
   A.APPLICATIONS_ID app_number,
   REPLACE(CONVERT(CHAR(10), A.APPL_DATE, 111) , '/','-') app_dt,
   PE.PERSON_EMAIL_ADDRESSES personal_email,
   'T' is_active
FROM
   coll18_prod.dbo.PERSON P
      JOIN coll18_prod.dbo.PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      JOIN coll18_prod.dbo.APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
         --   AND
       --  A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
	--	    AND A.APPL_ADMIT_STATUS IN ('NEWAP','RADM1','RADM2')
      JOIN coll18_prod.dbo.APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
     --       AND
   --      APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN coll18_prod.dbo.TERMS T ON
         A.APPL_START_TERM = T.TERMS_ID
		  AND 
		  T.TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          T.TERMS_ID is not NULL and
          T.TERM_REG_START_DATE is not null
	  LEFT JOIN coll18_prod.dbo.PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
      --      AND  
       --  PE.PERSON_EMAIL_TYPES = 'STO'
	WHERE substring(P.ID,1,7) IN (SELECT * FROM ALL_STUDENTS))

	SELECT * FROM ENROLLMENT_APPLICATIONS EA1 
	
	where app_dt in 
	(
		SELECT max(app_dt) from ENROLLMENT_APPLICATIONS EA2 WHERE EA2.nk = EA1.nk
	)","EnrollmentApplication "
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.program","WITH PMT as (

select pgrm
, term_id
, acyr
from (
  select sobcurr_program as pgrm
    , sobcurr_term_code_init as term_id
    , stvterm_acyr_code as acyr
  from sobcurr
  left join stvterm on stvterm_code = sobcurr_term_code_init
  where stvterm_code is not null
  union
  select smbpgen_program as program
    , smbpgen_term_code_eff as term_id
    , stvterm_acyr_code as acyr
  from smbpgen
  left join stvterm on stvterm_code = smbpgen_term_code_eff
  where stvterm_code is not null
  ) main
where pgrm like '4%'

order by 1,3
),

smbpgen_table as (
select smbpgen_term_code_eff max_eff_2, smbpgen_program, smbpgen_req_credits_overall 
from smbpgen a
where smbpgen_term_code_eff = ( 
select max(smbpgen_term_code_eff) 
from SMBPGEN b
where b.smbpgen_program = a.smbpgen_program
group by smbpgen_program)

),

t as (
SELECT PGRM,
      LISTAGG(txt2, ' ')
         WITHIN GROUP (ORDER BY pgrm, txt1) txt
FROM (select SMRPCMT_PROGRAM pgrm, 
            smrpcmt_text_seqno txt1, 
            smrpcmt_text txt2
        from SMRPCMT c
        where smrpcmt_prnt_code = 'NAV'
        and smrpcmt_term_code_eff = (select max(smrpcmt_term_code_eff) 
                              from smrpcmt b 
                              where b.SMRPCMT_PROGRAM = c.SMRPCMT_PROGRAM 
                              and b.SMRPCMT_text_seqno = c.SMRPCMT_text_seqno)
        order by 1,2)
group by PGRM)


select 
       pgrm || '$$' ||  term_id nk,
       pgrm cd,
       acyr cat_yr,
       smrprle_program_desc \\\""name\\\"",
       t.txt \\\""desc\\\"",
       COALESCE(SMBPGEN_REQ_CREDITS_OVERALL,DECODE(sobcurr_degc_code, 'AS', 60,
                            'AAS', 67,
                            'STC', 9,
                            'CERT', 50,
                            99),0) credits,
       '' enrollment_notes,
       -- Showing both MET and NOTMET comments and with HTML tags
       '' registration_notes,
       nvl(( select sorcmjr_majr_code from sorcmjr
          where sorcmjr_curr_rule = sobcurr_curr_rule
            and rownum = 1
            and sorcmjr_term_code_eff = (select max(sorcmjr_term_code_eff) 
                                           from sorcmjr
                                          where sorcmjr_curr_rule = sobcurr_curr_rule
                                            and sorcmjr_term_code_eff <= sobcurr_term_code_init ) ), ' ')  area_of_study, -- select major
       '' concentration,
       sobcurr_degc_code \\\""credential\\\"",
       ( select replace(decode(stvmajr_cipc_code,null,null,substr(stvmajr_cipc_code,1,2) || '.' || substr(stvmajr_cipc_code,3)),'00.0000','24.0000') from sorcmjr, stvmajr 
          where sorcmjr_curr_rule = sobcurr_curr_rule
            and rownum = 1
            and sorcmjr_majr_code = stvmajr_code
            and sorcmjr_term_code_eff = (select max(sorcmjr_term_code_eff) 
                                           from sorcmjr
                                          where sorcmjr_curr_rule = sobcurr_curr_rule
                                            and sorcmjr_term_code_eff <= sobcurr_term_code_init ) )  cip,
       case when sobcurr_degc_code in ('AA','AS') then 'Y' else 'N' end as is_transfer,
      case when PMT.term_id = (select max(abc.term_id) from PMT abc where abc.pgrm = PMT.pgrm)                                        
      then 'T'
      else 'F' end is_active

  from PMT

  left join smrprle on smrprle_program = pgrm
  left join sobcurr on sobcurr_program = pgrm
  left join t on t.pgrm = pgrm
  left join smbpgen_table on smbpgen_program = pgrm
 where 1=1

                              
  union
  select 
    'UNDECLARED$$0000' as NK
    ,'UNDECLARED' as CD
    ,'0000' as cat_yr
    ,'UNDECLARED' as \\\""name\\\""
    ,'You are currently undeclared, please apply for a program to graduate with a valid degree.' as \\\""desc\\\""
    ,3 as CREDITS
    ,'' as ENROLLMENT_NOTES
    ,'' as REGISTRATION_NOTES
    ,'UNDC' as AREA_OF_STUDY
    ,'' as CONCENTRATION
    ,'000000' as \\\""CREDENTIAL\\\""
    ,'' as CIP
    ,'N' as IS_TRANSFER
    ,'T' as IS_ACTIVE
  from dual
  order by 1,3,13","Program"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"core.Student","WITH CURRENT_STUDENTS AS (SELECT DISTINCT
   substring(P.ID,1,7) nk,
   PP.PERSON_PIN_USER_ID username,
   isnull(PE.PERSON_EMAIL_ADDRESSES,'') email,
   REPLACE(P.FIRST_NAME, '`', '``') FIRST_NAME,
   P.LAST_NAME last_name,
   REPLACE(CONVERT(CHAR(10), P.BIRTH_DATE, 111) , '/','-') birthdate
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1')

SELECT nk,username,email,FIRST_NAME,last_name,birthdate, 't' is_active from CURRENT_STUDENTS

UNION 

SELECT DISTINCT
   substring(P.ID,1,7) nk,
   PP.PERSON_PIN_USER_ID username,
   isnull(PE.PERSON_EMAIL_ADDRESSES,'') email,
   REPLACE(P.FIRST_NAME, '`', '``') FIRST_NAME,
   P.LAST_NAME last_name,
   REPLACE(CONVERT(CHAR(10), P.BIRTH_DATE, 111) , '/','-') birthdate,
   't' is_active
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         substring(A.APPL_APPLICANT,1,7) NOT IN 
         (
            SELECT
               nk
            FROM
               CURRENT_STUDENTS
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID","Student"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.Course","-- Course
with crse as (
  SELECT scbcrse_subj_code as subj_code,
         scbcrse_crse_numb as crse_numb,
         MAX(scbcrse_eff_term) AS max_term
    FROM scbcrse 
   GROUP BY scbcrse_subj_code, scbcrse_crse_numb
)

select distinct
    scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb nk,
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb cd,
  CASE    
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = '0' THEN 0   
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = '1' THEN 1
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = '2' THEN 2
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = '3' THEN 3
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = '4' THEN 4
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = '5' THEN 5
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = '6' THEN 6
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = '7' THEN 7
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = '8' THEN 8
    ELSE 0
  END AS \\\""level\\\"",
  scbcrse.scbcrse_subj_code subject,
  NVL(scbcrse.scbcrse_divs_code, '0000') dept, 
  scbcrse.scbcrse_title title,
  dbms_lob.substr(scbdesc.scbdesc_text_narrative, 3000) AS \\\""desc\\\"",
  '' course_type, 
  CASE 
    WHEN scbcrse.scbcrse_credit_hr_ind IS NULL THEN scbcrse_credit_hr_low 
    ELSE NULL
  END credits,
  CASE scbcrse.scbcrse_csta_code
    WHEN 'A' THEN 'T'
    ELSE 'F' 
  END is_active
  from crse left join scbdesc on subj_code = scbdesc_subj_code
                             and crse_numb = scbdesc_crse_numb
                             and max_term = scbdesc_term_code_eff
            left join scbcrse on subj_code = scbcrse_subj_code
                             and crse_numb = scbcrse_crse_numb
                             and max_term = scbcrse_eff_term
            left join ssbsect on subj_code = ssbsect_subj_code
                             and crse_numb = ssbsect.SSBSECT_CRSE_NUMB
                             and max_term = ssbsect_term_code
union
select 'UNKNOWN' AS nk,
       'UNKNOWN' as cd,
       0 as \\\""level\\\"",
       'UNKNOWN' AS subject,
       '0000' as dept,
       'UNKNOWN' as title,
       'UNKNOWN' as \\\""desc\\\"",
       '' as course_type,
       NULL as credits,
       'F' AS is_active
  from dual
 ORDER BY 1","Course"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"catcc.WaitlistPosition","SELECT

WAIT_STUDENT + '$$' + SEC_TERM+'-'+SEC_NAME nk,
WAIT_STUDENT   student,
SEC_TERM+'-'+SEC_NAME section,
RANK() OVER (PARTITION BY WAIT_COURSE_SECTION ORDER BY WAIT_LIST_ADDDATE, WAIT_TIME)  position,
'T' is_active

FROM

WAIT_LIST

JOIN TERMS
ON TERMS.TERMS_ID = WAIT_TERM

JOIN COURSE_SECTIONS cs
on cs.COURSE_SECTIONS_ID = WAIT_COURSE_SECTION

WHERE (TERM_REPORTING_YEAR > YEAR(getdate())-2)

AND WAIT_STATUS IN ('A','P')","WaitlistPosition"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.StudentCourse","select * from (

(-- Student history data
select 
spriden_id || '$$' || stvterm_code || '$$' || shrtckn_subj_code || shrtckn_crse_numb as nk
, spriden_id                                      student
, stvterm_code                                    term
, shrtckn_subj_code || shrtckn_crse_numb          course
, shrtckn_crn  || '$$' || shrtckn_term_code       section
, shrtckg_grde_code_final                         grade_cd
, nvl(shrtckg_hours_attempted, 0)                 creditsattemtped
, nvl(shrtckg_credit_hours,0)                     creditsearned
, case when shrtckg_grde_code_final is not null then 'COMPLETED'
        else 'UNKNOWN'
  end                                             status
, to_char((i.shrtckg_credit_hours * shrgrde_quality_points * decode(shrgrde_gpa_ind,'Y',1,0) * decode(shrtckn_repeat_course_ind,'E',0,1)) / case when shrtckg_credit_hours = 0 then 1 else shrtckg_credit_hours end, '0.00')  grade_points
, 'T'                                             is_active  
from  spriden
-- term grades
inner join shrtckn
  on shrtckn_pidm = spriden_pidm
  and spriden_change_ind is null
  and substr(spriden_id, 1,3) != 'DEL'  
inner join shrtckg i
  on shrtckg_pidm = shrtckn_pidm
  and shrtckg_term_code = shrtckn_term_code
  and shrtckn_seq_no = i.shrtckg_tckn_seq_no
  and shrtckg_seq_no = (select max(shrtckg_seq_no)
                          from shrtckg
                          where shrtckg_pidm = i.shrtckg_pidm
                          and shrtckg_term_code = i.shrtckg_term_code
                          and shrtckg_tckn_seq_no = i.shrtckg_tckn_seq_no
                          )
-- Institutional Course Maintenance Level Applied Repeating Table
inner join shrtckl
  on shrtckl_pidm = spriden_pidm
  and shrtckn_term_code = shrtckl_term_code
  and shrtckn_seq_no = shrtckl_tckn_seq_no
  and shrtckl_primary_levl_ind = 'Y'
-- Institutional Course Maintenance Term Header Repeating Table
inner join shrttrm
  on shrttrm_pidm = spriden_pidm 
  and shrttrm_term_code = shrtckn_term_code
-- Term GPA Table
inner join shrtgpa
  on shrtgpa_pidm = spriden_pidm 
  and shrtgpa_term_code = shrtckn_term_code
  and shrtgpa_levl_code = shrtckl_levl_code
-- Level GPA Table
inner join shrlgpa
  on shrlgpa_pidm = spriden_pidm
  and shrlgpa_gpa_type_ind = 'I'
  and shrlgpa_levl_code = 'CR'  --Credit level
--Grading Code Maintenance Table
inner join shrgrde
  on shrgrde_code = i.shrtckg_grde_code_final
  and shrgrde_levl_code = shrtckl_levl_code
inner join stvterm l
  on stvterm_code = shrtckn_term_code
  and substr(stvterm_code,6,1) <> '5'
inner join stvcast
  on stvcast_code = shrttrm_cast_code
where 1=1

)
union 
(-- Current registration data
select  
spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || ssbsect_crse_numb as nk
, spriden_id                                            student
, stvterm_code                                          term
, ssbsect_subj_code || ssbsect_crse_numb                course
, ssbsect_crn  || '$$' || ssbsect_term_code             section
, null                                                  grade_cd
, nvl(sfrstcr_credit_hr, 0)                             credits_attemtped
, 0                                                     credits_earned
, case when stvterm_start_date > sysdate then 'REGISTERED'
       when stvterm_start_date <= sysdate and stvterm_end_date > sysdate then 'IN_PROGRESS'
       else 'UNKNOWN'
  end status
, '0.00'                                                    grade_points
, 'T'                                                   is_active  
from  spriden
inner join sfrstcr
  on sfrstcr_pidm = spriden_pidm
  and spriden_change_ind is null
  and substr(spriden_id, 1,3) != 'DEL'
  and sfrstcr_rsts_code IN ('RE','RW', 'RA')
inner join STVRSTS
  on STVRSTS_CODE = sfrstcr_rsts_code
  and stvrsts_incl_sect_enrl = 'Y'
  and nvl(sfrstcr_error_flag,'N') <> 'F'
inner join ssbsect
  on ssbsect_term_code = sfrstcr_term_code
  and ssbsect_crn = sfrstcr_crn  
inner join scbcrse c
  on scbcrse_subj_code = ssbsect_subj_code 
  and scbcrse_crse_numb = ssbsect_crse_numb
  and scbcrse_eff_term = (select max(scbcrse_eff_term)
                          from scbcrse
                            where scbcrse_eff_term <= ssbsect_term_code
                            and scbcrse_subj_code = ssbsect_subj_code
                            and scbcrse_crse_numb = ssbsect_crse_numb
                          )  
inner join stvterm l
  on stvterm_code = sfrstcr_term_code
  and substr(stvterm_code,6,1) <> '5'                          
where 1=1
and not exists (select 'Y' 
                from shrtckn
                where sfrstcr_term_code = shrtckn_term_code
                and sfrstcr_pidm = shrtckn_pidm
                and sfrstcr_crn  = shrtckn_crn
                )
)
)
where 1=1
order by 2","Student Course"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.SectionTime","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Section Time File

Fields	nk,section,day_of_week,from_tm,to_tm,Location,is_active
*/

--Sunday Meetings
SELECT NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '') || '$$1'        AS nk
       , NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')                 AS section
       , 1                                                                           AS day_of_week
       , NVL(SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 3, 2) || ':00', '') AS from_tm
       , NVL(SUBSTR(RIGHT('0000' || mr.end_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.end_tm, 4), 3, 2) || ':00', '') AS to_tm
       --, mr.bldg
       --, mr.room
       , CASE
           WHEN mr.room = '' THEN NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg), '')
           ELSE NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg) || '$$' || TRIM(mr.room), '')
         END                                                                         AS location
       , 'T'                                                                         AS is_active
FROM informix.sec_rec sr
--Section meetings
LEFT JOIN informix.secmtg_rec smr
       ON smr.crs_no = sr.crs_no
          AND smr.yr = sr.yr
          AND smr.sess = sr.sess
          AND smr.sec_no = sr.sec_no  
--Meeting details          
LEFT JOIN informix.mtg_rec mr
       ON mr.mtg_no = smr.mtg_no  
----location details
--LEFT JOIN bldg_table bt
--       ON bt.bldg = mr.bldg
WHERE 1=1
   AND mr.days LIKE 'U%'

UNION ALL

--Monday Meetings
SELECT NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '') || '$$2'        AS nk
       , NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')                 AS section
       , 2                                                                           AS day_of_week
       , NVL(SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 3, 2) || ':00', '') AS from_tm
       , NVL(SUBSTR(RIGHT('0000' || mr.end_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.end_tm, 4), 3, 2) || ':00', '') AS to_tm
       --, mr.bldg
       --, mr.room
       , CASE
           WHEN mr.room = '' THEN NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg), '')
           ELSE NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg) || '$$' || TRIM(mr.room), '')
         END                                                                         AS location
       , 'T'                                                                         AS is_active
FROM informix.sec_rec sr
--Section meetings
LEFT JOIN informix.secmtg_rec smr
       ON smr.crs_no = sr.crs_no
          AND smr.yr = sr.yr
          AND smr.sess = sr.sess
          AND smr.sec_no = sr.sec_no  
--Meeting details          
LEFT JOIN informix.mtg_rec mr
       ON mr.mtg_no = smr.mtg_no  
----location details
--LEFT JOIN bldg_table bt
--       ON bt.bldg = mr.bldg
WHERE 1=1
   AND mr.days LIKE '%M%'

UNION ALL

--Tuesday Meetings
SELECT NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '') || '$$3'        AS nk
       , NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')                 AS section
       , 3                                                                           AS day_of_week
       , NVL(SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 3, 2) || ':00', '') AS from_tm
       , NVL(SUBSTR(RIGHT('0000' || mr.end_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.end_tm, 4), 3, 2) || ':00', '') AS to_tm
       --, mr.bldg
       --, mr.room
       , CASE
           WHEN mr.room = '' THEN NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg), '')
           ELSE NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg) || '$$' || TRIM(mr.room), '')
         END                                                                         AS location
       , 'T'                                                                         AS is_active
FROM informix.sec_rec sr
--Section meetings
LEFT JOIN informix.secmtg_rec smr
       ON smr.crs_no = sr.crs_no
          AND smr.yr = sr.yr
          AND smr.sess = sr.sess
          AND smr.sec_no = sr.sec_no  
--Meeting details          
LEFT JOIN informix.mtg_rec mr
       ON mr.mtg_no = smr.mtg_no  
----location details
--LEFT JOIN bldg_table bt
--       ON bt.bldg = mr.bldg
WHERE 1=1
   AND mr.days LIKE '%T%'

UNION ALL

--Wednesday Meetings
SELECT NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '') || '$$4'        AS nk
       , NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')                 AS section
       , 4                                                                           AS day_of_week
       , NVL(SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 3, 2) || ':00', '') AS from_tm
       , NVL(SUBSTR(RIGHT('0000' || mr.end_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.end_tm, 4), 3, 2) || ':00', '') AS to_tm
       --, mr.bldg
       --, mr.room
       , CASE
           WHEN mr.room = '' THEN NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg), '')
           ELSE NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg) || '$$' || TRIM(mr.room), '')
         END                                                                         AS location
       , 'T'                                                                         AS is_active
FROM informix.sec_rec sr
--Section meetings
LEFT JOIN informix.secmtg_rec smr
       ON smr.crs_no = sr.crs_no
          AND smr.yr = sr.yr
          AND smr.sess = sr.sess
          AND smr.sec_no = sr.sec_no  
--Meeting details          
LEFT JOIN informix.mtg_rec mr
       ON mr.mtg_no = smr.mtg_no  
----location details
--LEFT JOIN bldg_table bt
--       ON bt.bldg = mr.bldg
WHERE 1=1
   AND mr.days LIKE '%W%'

UNION ALL

--Thursday Meetings
SELECT NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '') || '$$5'        AS nk
       , NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')                 AS section
       , 5                                                                           AS day_of_week
       , NVL(SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 3, 2) || ':00', '') AS from_tm
       , NVL(SUBSTR(RIGHT('0000' || mr.end_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.end_tm, 4), 3, 2) || ':00', '') AS to_tm
       --, mr.bldg
       --, mr.room
       , CASE
           WHEN mr.room = '' THEN NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg), '')
           ELSE NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg) || '$$' || TRIM(mr.room), '')
         END                                                                         AS location
       , 'T'                                                                         AS is_active
FROM informix.sec_rec sr
--Section meetings
LEFT JOIN informix.secmtg_rec smr
       ON smr.crs_no = sr.crs_no
          AND smr.yr = sr.yr
          AND smr.sess = sr.sess
          AND smr.sec_no = sr.sec_no  
--Meeting details          
LEFT JOIN informix.mtg_rec mr
       ON mr.mtg_no = smr.mtg_no  
----location details
--LEFT JOIN bldg_table bt
--       ON bt.bldg = mr.bldg
WHERE 1=1
   AND mr.days LIKE '%R%'   

UNION ALL

--Friday Meetings
SELECT NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '') || '$$6'        AS nk
       , NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')                 AS section
       , 6                                                                           AS day_of_week
       , NVL(SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 3, 2) || ':00', '') AS from_tm
       , NVL(SUBSTR(RIGHT('0000' || mr.end_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.end_tm, 4), 3, 2) || ':00', '') AS to_tm
       --, mr.bldg
       --, mr.room
       , CASE
           WHEN mr.room = '' THEN NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg), '')
           ELSE NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg) || '$$' || TRIM(mr.room), '')
         END                                                                         AS location
       , 'T'                                                                         AS is_active
FROM informix.sec_rec sr
--Section meetings
LEFT JOIN informix.secmtg_rec smr
       ON smr.crs_no = sr.crs_no
          AND smr.yr = sr.yr
          AND smr.sess = sr.sess
          AND smr.sec_no = sr.sec_no  
--Meeting details          
LEFT JOIN informix.mtg_rec mr
       ON mr.mtg_no = smr.mtg_no  
----location details
--LEFT JOIN bldg_table bt
--       ON bt.bldg = mr.bldg
WHERE 1=1
   AND mr.days LIKE '%F%'

UNION ALL

--Saturday Meetings
SELECT NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '') || '$$7'        AS nk
       , NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')                 AS section
       , 7                                                                           AS day_of_week
       , NVL(SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 3, 2) || ':00', '') AS from_tm
       , NVL(SUBSTR(RIGHT('0000' || mr.end_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.end_tm, 4), 3, 2) || ':00', '') AS to_tm
       --, mr.bldg
       --, mr.room
       , CASE
           WHEN mr.room = '' THEN NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg), '')
           ELSE NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg) || '$$' || TRIM(mr.room), '')
         END                                                                         AS location
       , 'T'                                                                         AS is_active
FROM informix.sec_rec sr
--Section meetings
LEFT JOIN informix.secmtg_rec smr
       ON smr.crs_no = sr.crs_no
          AND smr.yr = sr.yr
          AND smr.sess = sr.sess
          AND smr.sec_no = sr.sec_no  
--Meeting details          
LEFT JOIN informix.mtg_rec mr
       ON mr.mtg_no = smr.mtg_no  
----location details
--LEFT JOIN bldg_table bt
--       ON bt.bldg = mr.bldg
WHERE 1=1
   AND mr.days LIKE '%S'


UNION ALL

--No Meeting Days
SELECT NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '') || '$$8'        AS nk
       , NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
         || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')                 AS section
       , 8                                                                           AS day_of_week
       , NVL(SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.beg_tm, 4), 3, 2) || ':00', '') AS from_tm
       , NVL(SUBSTR(RIGHT('0000' || mr.end_tm, 4), 1, 2) || ':' || SUBSTR(RIGHT('0000' || mr.end_tm, 4), 3, 2) || ':00', '') AS to_tm
       --, mr.bldg
       --, mr.room
       , CASE
           WHEN mr.room = '' THEN NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg), '')
           ELSE NVL(TRIM(mr.campus) || '$$' || TRIM(mr.bldg) || '$$' || TRIM(mr.room), '')
         END                                                                         AS location
       , 'T'                                                                         AS is_active
FROM informix.sec_rec sr
--Section meetings
LEFT JOIN informix.secmtg_rec smr
       ON smr.crs_no = sr.crs_no
          AND smr.yr = sr.yr
          AND smr.sess = sr.sess
          AND smr.sec_no = sr.sec_no  
--Meeting details          
LEFT JOIN informix.mtg_rec mr
       ON mr.mtg_no = smr.mtg_no  
----location details
--LEFT JOIN bldg_table bt
--       ON bt.bldg = mr.bldg
WHERE 1=1
   AND mr.days = '-------'   
         
ORDER BY 1","SectionTime"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.SeatsAvail","SELECT
  nk,
  avail_seats, 
  CASE 
    WHEN is_active = 'Y' THEN 'T' 
    ELSE 'F'
  END AS is_active
  FROM EAB_SECT_SEATS_AVAIL
 WHERE campus LIKE 'P%'
   and academic_period = (
   	select min(nk) nk
  	  from eab_term
     where TO_DATE(TERM_END_DT, 'YYYY-MM-DD') >= sysdate)
","Seats Available"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"inst.campus","SELECT distinct CAMPUS  AS NK
       , DESCR      AS NAME
       , 'F'		AS IS_ONLINE
       , 'T'    AS IS_ACTIVE
FROM PS_CAMPUS_TBL
where INSTITUTION = 'NV280'
and eff_status = 'A'
and campus in ('A','L','M','N','W','H')
union
select 'DEFAULT' nk,
          'EAB Default Code' name,
          'F' is_online,
          'F' is_active
from dual
union
select 'ONL' nk,
          'Online' name,
          'T' is_online,
          'T' is_active
from dual
union
select 'ONL-P' nk,
          'Online-Hybrid' name,
          'T' is_online,
          'F' is_active
from dual","Campus"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.Section","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
)

SELECT distinct SEC_TERM+'_'+SEC_NAME nk,
      COURSE_SECTIONS.COURSE_SECTIONS_ID cd,
     SEC_NO display_cd,
      SEC_SUBJECT + '_' + SEC_COURSE_NO course,
      SEC_TERM term,
      
	  case SEC_LOCATION 
	   when 'NET' then 'NET'
	    when 'EVA' then 'EVA'
		when 'ROC' then 'ROC'
		when 'GRC' then 'ROC'
		when 'RSC' then 'ROC'
	    when 'RAW' then 'RAW' 
	   else 'OTHER'
	   end
	   campus,
      cast(ISNULL(SEC_CAPACITY, 0) as Varchar) seats_offered,
      'F' is_unlimited_seating, 
	  CASE
        WHEN  LAST_NAME IS NULL THEN 
           'TBD' 
        ELSE
           LAST_NAME  + ', ' + 
           REPLACE(ISNULL(FIRST_NAME,''), '`', '``') 
       END
       instructor_name ,
      REPLACE(CONVERT(CHAR(10), SEC_START_DATE, 111) , '/','-') class_start_dt,
      REPLACE(CONVERT(CHAR(10), SEC_END_DATE, 111) , '/','-') class_end_dt, 
      COALESCE(REPLACE(CONVERT(CHAR(10), TERMS.TERM_DROP_START_DATE, 111), '/','-'), REPLACE(CONVERT(CHAR(10), SEC_OVR_CENSUS_DATES , 111) , '/','-'),REPLACE(CONVERT(CHAR(10), TERM_CENSUS_DATES, 111), '/','-'))
	  drop_start_dt,
      COALESCE(REPLACE(CONVERT(CHAR(10), TERMS.TERM_DROP_END_DATE, 111), '/','-'), REPLACE(CONVERT(CHAR(10), SEC_OVR_CENSUS_DATES , 111) , '/','-'),REPLACE(CONVERT(CHAR(10), TERM_CENSUS_DATES, 111), '/','-'))
       drop_end_dt,
      '' withdraw_end_dt,
      CASE
        WHEN  SEC_STATUS = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active,
      REPLACE(cast(SEC_PRINTED_COMMENTS as varchar(max)), char(253) , ' ' )   note
  FROM COURSE_SECTIONS LEFT OUTER JOIN COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND COURSE_SECTIONS_LS.POS = '1'
	 LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
	 LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
  JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID
  JOIN TERMS ON
	  TERMS_LS.TERMS_ID = TERMS.TERMS_ID
  JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1'
  WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST)","Section"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.SeatsAvail","SELECT
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_seats_avail avail_seats, 
  'T' is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
             LEFT JOIN SCRLEVL ON ssbsect_subj_code = SCRLEVL_SUBJ_CODE
                              and ssbsect_crse_numb = SCRLEVL_CRSE_NUMB
WHERE spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code >= '201015'
  and substr(ssbsect_term_code, -1, 1) != '5'
  AND ssbsect_ssts_code = 'A'
  and SCRLEVL_LEVL_CODE in ('CR' , 'NC')
  order by ssbsect_term_code, ssbsect_crn
","Seats Available"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"catcc.StudentXPriorityRegSlot","with NOW_TERM AS (
  SELECT DISTINCT STVTERM_CODE as term_code
    FROM STVTERM
   WHERE STVTERM_END_DATE >= sysdate
)
SELECT spriden_id||'$$'||sprapin_term_code||'$$'||sprapin_pin as nk,
       spriden_id as student,
       sprapin_term_code||'$$'||sprapin_pin as priority_reg_slot,
       'T' as is_active
  from sprapin left join spriden on sprapin_pidm = spriden_pidm
                                and spriden_change_ind is null
 where sprapin_term_code in (select * from now_term)","StudentXPriorityRegSlot"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.studentcourse","WITH pop AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)
UNION (
select  saradap_pidm pidm,
        saradap_term_code_entry term
from saradap
where saradap_term_code_entry in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 5
ORDER BY 1 desc)
)))),

audit_bank as (
select a.pidm,a.term,a.audit_record,b.course_record from (
select 
        distinct sfrstca_pidm as pidm,
         sfrstca_crn as crn,
       sfrstca_term_code term,
       ssbsect_subj_code || ssbsect_crse_numb as audit_record

from sfrstca
left join ssbsect 
on ssbsect_crn = sfrstca_crn 
  and ssbsect_term_code = sfrstca_term_code
 ) a 
left join (
select distinct sfrstcr_pidm pidm, 
      sfrstcr_crn crn,
      sfrstcr_term_code term, 
      ssbsect_subj_code || ssbsect_crse_numb as course_record
from sfrstcr
left join ssbsect
on ssbsect_crn = sfrstcr_crn
) b
on a.pidm = b.pidm
and a.audit_record = b.course_record
and a.term = b.term
where b.course_record is null
order by 1,2,3

)

select  
       spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || ssbsect_crse_numb as NK
       , spriden_id Student
       ,stvterm_code term
       , ssbsect_subj_code || ssbsect_crse_numb course
       , nvl(
            (
              select SSBSECT_CRN  || '$$' || SSBSECT_TERM_CODE
              from ssbsect
              where ssbsect_crn = sfrstcr_crn and ssbsect_term_code = sfrstcr_term_code
            ),
            'UNKNOWN'
          ) as Section
       , sfrstcr_grde_code grade_cd
       , nvl(sfrstcr_credit_hr, 0) as Credits_Attemtped
       , 0 as Credits_Earned 
       , case 
          when sfrstcr_rsts_code in ('RE', 'RW', 'RT') and stvterm_start_date > sysdate then 'REGISTERED'
          when sfrstcr_rsts_code in ('RE', 'RW', 'RT') and stvterm_start_date <= sysdate and stvterm_end_date > sysdate then 'IN_PROGRESS'
          when sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code in ('A','B','C','D*','S','PA','CR') then 'COMPLETED'
          else 'UNKNOWN' end
          STATUS, 
          
          -- Add a grade variable column that maps letter grades to points...
          CASE 
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'A' THEN 4.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'B' THEN 3.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'C' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'D*' THEN 1.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'S' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'PA' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code = 'CR' THEN 2.0
            WHEN sfrstcr_rsts_code in ('RE', 'RW', 'RT') and sfrstcr_grde_code IS NULL THEN 0.0
          ELSE 0.0
          END as grade_points,
          'T' as is_active

  -- Why are we using the cartesian product here? Should try to use an explicit 
  -- inner join here instead of the implicit cross join. 
  from ( select null p_term, '' p_id, 'N' p_history, 'N' p_current from dual ),     
     spriden, 
     sfrstcr,
     stvterm, 
     stvrsts, 
     ssbsect, 
     scbcrse,
     sobptrm
where --spriden_id = p_id  and
   spriden_change_ind is null 
  and stvterm_code = sfrstcr_term_code --join
  and sfrstcr_pidm = spriden_pidm --join
  and sfrstcr_term_code = nvl(p_term, sfrstcr_term_code) --this seems surperfluous - is it here just to account for bad data?
  and ssbsect_crn = sfrstcr_crn --join
  and scbcrse_subj_code = ssbsect_subj_code --join
  and ssbsect_term_code = sfrstcr_term_code --join
  and scbcrse_crse_numb = ssbsect_crse_numb --join
  and scbcrse_eff_term = ( select max(scbcrse_eff_term) 
                             from scbcrse 
                            where scbcrse_crse_numb = ssbsect_crse_numb 
                              and scbcrse_subj_code = ssbsect_subj_code 
                              and scbcrse_eff_term <= ssbsect_term_code ) 
  and sfrstcr_rsts_code = stvrsts_code --join
  and ( stvrsts_wait_ind = 'Y' or ( stvrsts_incl_sect_enrl = 'Y' and stvrsts_withdraw_ind = 'N' ) )
  and sobptrm_ptrm_code = ssbsect_ptrm_code --join, parts of term
  and sobptrm_term_code = ssbsect_term_code --join, entire term
  and ( p_current = 'N' or stvterm_start_date <= sysdate )  --p_current is always set to 'N'

-- If course is graded, do not include sfrstcr
  and not exists ( select 'Y' from shrtckn 
                    where shrtckn_crn = sfrstcr_crn 
                      and shrtckn_term_code = sfrstcr_term_code 
                     and shrtckn_pidm = sfrstcr_pidm) 
 
-- population cohort

 and spriden_pidm in (select * from pop)
 --and spriden_pidm in (select * from pilot_pop)
 --and spriden_id = 'T20130710'

UNION

select
      spriden_id|| '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code|| shrtckn_crse_numb as NK,
      spriden_id as Student,
      stvterm_code as term,
      shrtckn_subj_code|| shrtckn_crse_numb as course_cd,
      nvl((select SSBSECT_CRN || '$$' || SSBSECT_TERM_CODE
        from ssbsect
        where ssbsect_crn = shrtckn_crn and ssbsect_term_code = shrtckn_term_code),'UNKNOWN') as Section, --check to see if section exists
      shrtckg_grde_code_final as grade_cd,
      --'' as grade_points,
      nvl(SHRTCKG_HOURS_ATTEMPTED, 0) as CreditsAttemtped,
      nvl(shrtckg_credit_hours,0) as CreditsEarned,
      --shrtckn_crn,
       --checking against proper grades for a completed course
       --[INST_CONFIG] change per institution
       case
       when shrtckg_grde_code_final in ('A','B','C','D*','S','PA','CR') then 'COMPLETED' 
          else 'UNKNOWN' end Status,
       CASE 
         WHEN shrtckg_grde_code_final = 'A' THEN 4.0 
         WHEN shrtckg_grde_code_final = 'B' THEN 3.0
         WHEN shrtckg_grde_code_final = 'C' THEN 2.0
         WHEN shrtckg_grde_code_final = 'D*' THEN 1.0
         WHEN shrtckg_grde_code_final = 'S' THEN 2.0
         WHEN shrtckg_grde_code_final = 'PA' THEN 2.0
         WHEN shrtckg_grde_code_final = 'CR' THEN 2.0
         WHEN shrtckg_grde_code_final IS NULL THEN 0.0
        ELSE 0.0
       END as grade_points,
       'T' as is_active
from spriden
join shrtckn on spriden_pidm = shrtckn_pidm
join stvterm on stvterm_code = shrtckn_term_code
join shrtckg on spriden_pidm = shrtckg_pidm and shrtckn_pidm = shrtckg_pidm and shrtckg_tckn_seq_no = shrtckn_seq_no and shrtckg_term_code = shrtckn_term_code 
--join ssbsect on 
where  shrtckg_seq_no = ( select max(shrtckg_seq_no) from shrtckg 
                          where shrtckg_pidm = spriden_pidm 
                          --and shrtckg_term_code = ssbsect_term_code     --not necessary to go to ssbsect table
                          and shrtckg_tckn_seq_no = shrtckn_seq_no ) 
  and spriden_change_ind is null
  and spriden_pidm in (select * from pop)
 /* 
UNION --transfer course work

Select Spriden_Id || '$$' || SHRTRCE_TERM_CODE_EFF || '$$' || SHRTRCE_SUBJ_CODE || SHRTRCE_CRSE_NUMB As Nk,
       Spriden_id Student,
       SHRTRCE_TERM_CODE_EFF Term,
       SHRTRCE_SUBJ_CODE || SHRTRCE_CRSE_NUMB as course,
       '' As Section,
       SHRTRCE_GRDE_CODE As Grade_Cd,
       Shrtrce_Credit_Hours As Credits_Attemtped,
       SHRTRCE_CREDIT_HOURS As Credits_Earned,
       'COMPLETED' As Status,
       0.0 As Grade_Points,
       'T' As Is_Active
From Shrtrce
left join spriden on spriden_pidm = shrtrce_pidm
Where Shrtrce_Pidm In (Select * From Pop)

And Spriden_Change_Ind Is Null
*/
order by 2,3,4","INST Student Course"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"noah_studentterm","WITH population AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 30
ORDER BY 1 desc)
)

))
, credits as 
(

select a.shrtgpa_pidm
, a.shrtgpa_term_code as term_id
, a.shrtgpa_gpa_type_ind as term_type
, a.shrtgpa_hours_earned as inst_credits
, a.shrtgpa_gpa as inst_gpa
, (select sum(shrtgpa_hours_attempted) 
  from shrtgpa b
  where a.shrtgpa_pidm = b.shrtgpa_pidm
  and b.shrtgpa_term_code <= a.shrtgpa_term_code
  and b.shrtgpa_gpa_type_ind = 'I') as lifetime_credits_attempted
, (select sum(shrtgpa_hours_earned) 
  from shrtgpa c
  where a.shrtgpa_pidm = c.shrtgpa_pidm
  and c.shrtgpa_term_code <= a.shrtgpa_term_code
  and c.shrtgpa_gpa_type_ind = 'I') as lifetime_credits_earned
, (select sum(shrtgpa_hours_earned) 
  from shrtgpa c
  where a.shrtgpa_pidm = c.shrtgpa_pidm
  and c.shrtgpa_term_code <= a.shrtgpa_term_code
  and c.shrtgpa_gpa_type_ind = 'T') as lifetime_trans_credits_earned
  
from shrtgpa a
where 1=1
--and shrtgpa_pidm = '35474'

order by 2 desc


),

reg_terms as (

select sfrstcr_pidm
, sfrstcr_term_code
, sum(sfrstcr_credit_hr) as reg_credits

from sfrstcr

where 1=1
--and sfrstcr_pidm = '35474'
group by sfrstcr_pidm, sfrstcr_term_code
)


select 
  spriden_id as student_id
  , coalesce(credits.term_id, reg_terms.sfrstcr_term_code,sgbstdn.sgbstdn_term_code_eff) as term_id
  , case when credits.term_type = 'T' then 'Y'
      else 'N'
    END as transfer_ind
  , CASE WHEN COALESCE(credits.inst_credits, reg_terms.reg_credits, 0) > 0 THEN 'Y'
      ELSE 'N' 
    END as registered_ind
  , credits.inst_gpa as cumulative_gpa
  , sgbstdn_majr_code_1 as major_cd_1
  , CASE 
           WHEN sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL THEN sgbstdn.sgbstdn_majr_code_1_2 
           ELSE sgbstdn.sgbstdn_majr_code_2 
  END as major_cd_2
  , CASE 
           WHEN sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL THEN sgbstdn.sgbstdn_majr_code_1_2 
           ELSE sgbstdn.sgbstdn_majr_code_2 
  END as major_cd_3
  , sgbstdn_degc_code_1 as degree_cd_1
  , CASE 
           WHEN sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL THEN sgbstdn.sgbstdn_degc_code_1 
           ELSE sgbstdn.sgbstdn_degc_code_2 
  END  as degree_cd_2
  , CASE 
           WHEN sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL THEN sgbstdn.sgbstdn_degc_code_1 
           ELSE sgbstdn.sgbstdn_degc_code_2 
  END   as degree_cd_3
  , sgbstdn_coll_code_1 as college_cd_1
  , CASE 
           WHEN sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL THEN sgbstdn.sgbstdn_degc_code_1 
           ELSE sgbstdn.sgbstdn_degc_code_2 
  END   as college_cd_2
  , CASE 
           WHEN sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL THEN sgbstdn.sgbstdn_coll_code_2 
           ELSE NULL 
  END   as college_cd_3
  , CASE 
           WHEN sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL THEN sgbstdn.sgbstdn_coll_code_2 
           ELSE NULL 
  END   as concentration_cd_1
  , CASE 
           WHEN sgbstdn.sgbstdn_pidm IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_conc_121 IS NOT NULL THEN sgbstdn.sgbstdn_majr_code_conc_121
           WHEN sgbstdn.sgbstdn_pidm IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_conc_121 IS NULL THEN 'NA' 
           WHEN sgbstdn.sgbstdn_pidm IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_2 IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_conc_2 IS NOT NULL THEN sgbstdn.sgbstdn_majr_code_conc_2
           WHEN sgbstdn.sgbstdn_pidm IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_2 IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_conc_2 IS NULL THEN 'NA' 
           ELSE NULL 
  END as concentration_cd_2
  , CASE 
           WHEN sgbstdn.sgbstdn_pidm IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_conc_121 IS NOT NULL THEN sgbstdn.sgbstdn_majr_code_conc_121
           WHEN sgbstdn.sgbstdn_pidm IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_1_2 IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_conc_121 IS NULL THEN 'NA' 
           WHEN sgbstdn.sgbstdn_pidm IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_2 IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_conc_2 IS NOT NULL THEN sgbstdn.sgbstdn_majr_code_conc_2
           WHEN sgbstdn.sgbstdn_pidm IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_2 IS NOT NULL 
                AND sgbstdn.sgbstdn_majr_code_conc_2 IS NULL THEN 'NA' 
           ELSE NULL 
  END as concentration_cd_3
  , credits.lifetime_trans_credits_earned as lifetime_transfer_credits
  , credits.lifetime_credits_earned as lifetime_institutional_credits
  , credits.lifetime_credits_attempted as lifetime_attempted_credits

from population
left join spriden on spriden_pidm = population.pidm
left join credits on shrtgpa_pidm = population.pidm 

left outer join sgbstdn on sgbstdn_pidm = population.pidm 
  and sgbstdn_term_code_eff = credits.term_id
left outer join reg_terms on population.pidm = reg_terms.sfrstcr_pidm
 and reg_terms.sfrstcr_term_code = COALESCE(credits.term_id, sgbstdn.sgbstdn_term_code_eff)","Student Term"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"core.Advisor","WITH FAC AS (
  SELECT DISTINCT USERNAME, EMAIL
    FROM EAB_FACULTY
   WHERE HOME_COLLEGE LIKE 'P%'),
   
ADV AS (
  SELECT *
    FROM EAB_ADVISOR
   WHERE HOME_COLLEGE LIKE 'P%')

SELECT ADV.NK AS NK,
       ADV.USERNAME AS USERNAME,
       FAC.EMAIL AS EMAIL,
       FIRST_NAME,
       LAST_NAME,
       IS_ACTIVE
  FROM ADV LEFT JOIN FAC ON ADV.USERNAME = FAC.USERNAME
 WHERE ADV.ACADEMIC_PERIOD = (SELECT MAX(ACADEMIC_PERIOD)
                                FROM EAB_ADVISOR B
                               WHERE ADV.USERNAME = B.USERNAME)
 ORDER BY LAST_NAME, FIRST_NAME","Advisor"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.StudentTerm","SELECT DISTINCT
  spriden_id || '$$' || stvterm_code nk, 
  spriden_id student,
  stvterm_code term,
  smbpgen_program || '$$' || stvterm_acyr_code program,
  DECODE(sgbstdn_stst_code, 'AS', 'T', 
                                  'F') is_active
FROM sgbstdn JOIN smbpgen ON sgbstdn_program_1 = smbpgen_program
             JOIN stvterm ON smbpgen_term_code_eff = stvterm_code
        LEFT JOIN spriden ON sgbstdn_pidm = spriden_pidm
        LEFT JOIN general.goremal ON sgbstdn_pidm = goremal_pidm
             JOIN (
                  SELECT sgbstdn_pidm pidm, sgbstdn_program_1 p, MAX(sgbstdn_term_code_eff) max_eff
                    FROM sgbstdn
                   WHERE sgbstdn_stst_code = 'AS'
                     AND sgbstdn_program_1 IS NOT NULL
                GROUP BY sgbstdn_pidm, sgbstdn_program_1 
             ) t ON sgbstdn_pidm = pidm
                AND smbpgen_program = P
                AND sgbstdn_term_code_eff = max_eff
WHERE spriden_change_ind IS NULL
  AND sgbstdn_program_1 IS NOT NULL
  AND spriden_entity_ind = 'P'
  AND goremal_emal_code IN ('HACC', 'HAWK')
  AND (goremal_email_address LIKE '%@%hacc.edu')
  AND stvterm_code >= '201230'
ORDER BY 2,4","Student Term"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"inst.Campus","SELECT DISTINCT
  DECODE(ssrmeet_bldg_code, 'ARAB', 'Arab',
                            'WEB', 'Web',
                            'Main') nk,
  DECODE(ssrmeet_bldg_code, 'ARAB', 'Arab Instructional Site',
                            'WEB', 'Online',
                            'Boaz Campus') name,
  DECODE(ssrmeet_bldg_code, 'WEB', 'T',
                            'F') is_online,
  'T' is_active  
FROM ssrmeet","Campus"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.SeatsAvail","-- extract seats available from banner
WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk.
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
WHERE szvcamp_vpdi_code = 'PPCC'
  AND szvcamp_eab_enable = 'Y'
  AND ssbsect_ssts_code = 'O' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. we do not need to extract seats available for past terms.
  AND ssbsect_vpdi_code = 'PPCC'
  AND SUBSTR(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM seatsAvail","Seats Available"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.subject","with NOVA_subjects as (
  
select distinct a.subject as NK
, a.descr as \\\""name\\\""
, case when eff_status = 'A' and acad_org = 'SCREDIT' then 'T' else 'F' end as is_active
from PS_SUBJECT_TBL a
where INSTITUTION = 'TN293'
--and eff_status = 'A'
and effdt = (select max(effdt) from PS_SUBJECT_TBL b where a.subject = b.subject and a.institution = b.institution)
),


OTHER_SUBJECTS as (
select subject as NK
, descr as \\\""name\\\""
, 'F' as is_active
from PS_SUBJECT_TBL a
where INSTITUTION <> 'TN293'
--and eff_status = 'A'
and effdt = (select max(effdt) from PS_SUBJECT_TBL b where a.subject = b.subject and a.institution = b.institution)

)
select * from NOVA_subjects

union 

select * from OTHER_SUBJECTS
where NK not in (select NK from NOVA_SUBJECTS)","Subject"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"cat.section","WITH Campuses as (
select stvcamp_code
from stvcamp
where stvcamp_code in ('NLC','NVC','PAC','SAC','SPC','O')
),

-- get drop dates from sfrrsts for specific registration drop codes
 sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('W1') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , CASE
      WHEN ssrattr_attr_code = 'ONC1' THEN 'NLC'
      ELSE NVL(stvcamp_code, 'DEFAULT')
    END AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt 
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt 
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt 
  , CASE WHEN ssbsect_ssts_code = '1' and ssbsect_camp_code in (select * from campuses) and ssbsect_max_enrl <> 0
          THEN 'T'
          ELSE 'F'
          END AS is_active 
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
  LEFT JOIN ssrattr ON ssrattr_crn = ssbsect_crn
                       AND ssrattr_term_code = ssbsect_term_code 
WHERE stvterm_code not like '8%'
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201620' AS term -- Member specific, change to a valid default term
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet
limit 100","Section"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.Section","/*WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-5
),

COURSES_TEMP AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk 
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
 --       APPROVAL_STATUS.CRS_STATUS = 'A'
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
        COURSES.CRS_MIN_CRED > 0 
		AND CRS_ACAD_LEVEL = 'UG'
       AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
			 AND CRS_DEPTS IN (SELECT DISTINCT DEPTS_ID
									 FROM    DEPTS
									 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A')
)

SELECT distinct SEC_TERM+'-'+SEC_NAME nk,
      COURSE_SECTIONS.COURSE_SECTIONS_ID cd,
     COURSE_SECTIONS.SEC_NO display_cd,
      ISNULL (COURSES.CRS_NAME, '') course,
      SEC_TERM term,

case when UPPER(SEC_LOCATION) IN ('LBC', 'UBC', 'MC', 'CWW') then UPPER(SEC_LOCATION)
        else 'OC' end
 campus, 
      cast(ISNULL(SEC_CAPACITY, 0) as Varchar) seats_offered,
	  CASE WHEN SEC_ALLOW_WAITLIST_FLAG = 'N' THEN '0'
			ELSE SEC_WAITLIST_MAX
			END  waitlist_capacity,  
      'F' is_unlimited_seating, 
       CASE
        WHEN  LAST_NAME IS NULL THEN 
           'TBD' 
        ELSE
           LAST_NAME  + ', ' + 
           REPLACE(ISNULL(FIRST_NAME,''), '`', '``') 
       END
       instructor_name,
      REPLACE(CONVERT(CHAR(10), SEC_START_DATE, 111) , '/','-') class_start_dt,
      COALESCE (REPLACE(CONVERT(CHAR(10), SEC_END_DATE, 111) , '/','-'), '2000-01-01') class_end_dt, -- Added COALESCE to handle null class_end_dt's
      case
        when SEC_OVR_CENSUS_DATES IS NULL then REPLACE(CONVERT(CHAR(10), TERM_CENSUS_DATES, 111), '/','-')
        else REPLACE(CONVERT(CHAR(10), SEC_OVR_CENSUS_DATES , 111) , '/','-')       
      end drop_start_dt,
      case
        when SEC_OVR_CENSUS_DATES  IS NULL then REPLACE(CONVERT(CHAR(10), TERM_CENSUS_DATES, 111), '/','-') 
        else REPLACE(CONVERT(CHAR(10), SEC_OVR_CENSUS_DATES , 111) , '/','-')  
      end drop_end_dt,
      CASE
        WHEN  SEC_STATUS = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
  FROM COURSE_SECTIONS LEFT OUTER JOIN COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1'
  LEFT JOIN COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
	 LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
  WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST) AND COURSES.CRS_NAME IN (SELECT * FROM COURSES_TEMP)*/

WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-5
),

COURSES_TEMP AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk 
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
 --       APPROVAL_STATUS.CRS_STATUS = 'A'
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
        COURSES.CRS_MIN_CRED > 0 
		AND CRS_ACAD_LEVEL = 'UG'
       AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
	--		 AND CRS_DEPTS IN (SELECT DISTINCT DEPTS_ID
	--								 FROM    DEPTS
	--								 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A')
),

SECTION_TEMP AS(SELECT distinct SEC_TERM+'-'+SEC_NAME nk,
      COURSE_SECTIONS.COURSE_SECTIONS_ID cd,
     COURSE_SECTIONS.SEC_NO display_cd,
      ISNULL (COURSES.CRS_NAME, '') course,
      SEC_TERM term,

case when UPPER(SEC_LOCATION) IN ('LBC', 'UBC', 'MC', 'CWW') then UPPER(SEC_LOCATION)
        else 'OC' end
 campus, 
      cast(ISNULL(SEC_CAPACITY, 0) as Varchar) seats_offered,
	  CASE WHEN SEC_ALLOW_WAITLIST_FLAG = 'N' THEN '0'
			ELSE isnull(SEC_WAITLIST_MAX,'75')
			END  waitlist_capacity,  
      'F' is_unlimited_seating, 
       CASE
        WHEN  LAST_NAME IS NULL THEN 
           'TBD' 
        ELSE
           LAST_NAME  + ', ' + 
           REPLACE(ISNULL(FIRST_NAME,''), '`', '``') 
       END
       instructor_name,
      REPLACE(CONVERT(CHAR(10), SEC_START_DATE, 111) , '/','-') class_start_dt,
      COALESCE (REPLACE(CONVERT(CHAR(10), SEC_END_DATE, 111) , '/','-'), '2000-01-01') class_end_dt, -- Added COALESCE to handle null class_end_dt's
      null drop_start_dt,
      REPLACE(CONVERT(CHAR(10), SEC_START_DATE-1, 111) , '/','-')
       drop_end_dt,
      CASE
        WHEN  SEC_STATUS = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
  FROM COURSE_SECTIONS LEFT OUTER JOIN COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN TERMS_LS
      ON SEC_TERM = TERMS_LS.TERMS_ID
  LEFT JOIN TERMS
      ON SEC_TERM = TERMS.TERMS_ID
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1'
  LEFT JOIN COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
	 LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
  WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST) AND COURSES.CRS_NAME IN (SELECT * FROM COURSES_TEMP))

  SELECT SECTION_TEMP.*, RTRIM(REPLACE(ISNULL(CSDV.CS_PRINTED_COMMENTS,''), char(253) , ' ' )) note FROM SECTION_TEMP
	LEFT JOIN COURSE_SECTIONS_DETAILS_VIEW CSDV
     ON SECTION_TEMP.cd = CSDV.COURSE_SECTIONS_ID
	","Section"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.section","with instructor as (
select a.crse_id, a.class_section, a.strm, a.session_code, a.emplid, a.instr_role,a.crse_offer_nbr,b.name 
from PS_CLASS_INSTR a
left join PS_PERSONAL_DATA b
on a.emplid = b.emplid
where 1=1
and INSTR_ROLE = 'PI'
--and a.class_section = '001M'
--and a.crse_id = '245006'
--and a.strm = '2154'
),

location_pop as (
select
distinct a.facility_id as nk

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('MAIN')
and a.setid = 'DC279'
and a.effdt = (select max(c.effdt) 
                from ps_facility_tbl c 
                where a.facility_id = c.facility_id 
                and a.setid = c.setid) 
),
dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'DC279'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

),

course_bank as (

select course_cd,
sum(institution_count) as inst
from (
      SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','') as course_cd,
      case when c.institution = 'DC279' then '1' else '0' end as institution_count
      from (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.acad_career = 'CRED'
                    --and o.crse_offer_nbr <> 1
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
                    ) C
        )
group by course_cd

)

select distinct section.crse_id || '$$' 
                || section.strm || '$$' 
                || section.session_code || '$$'
                || dates.date_diff || '$$'
                || section.CLASS_SECTION as nk
, section.CLASS_NBR || ' - ' || section.CLASS_SECTION || ' - ' || weeks_of_instruct || 'W' as cd
, REPLACE(section.SUBJECT, ' ','') || REPLACE(section.CATALOG_NBR, ' ','') as COURSE
, section.strm as TERM
--, case when section.session_code = '1' then section.strm
--  else section.strm || '-' || section.session_code end as TERM
, case when section.instruction_mode = 'HY' 
        then 'ONL-P'
        when section.instruction_mode = 'WW'
        then 'ONL'
        else section.CAMPUS 
  end as CAMPUS
, section.enrl_cap as seats_offered
, case when section.enrl_cap in ('0') then 'Y'
else 'N' end as is_unlimited_seating
, nvl(instructor.name, 'TBD') as instructor_name
, to_char(section.start_dt,'YYYY-MM-DD') as class_start_date
, to_char(section.end_dt,'YYYY-MM-DD') as class_end_date
, to_char(dates.FIRST_ENRL_DT,'YYYY-MM-DD') as drop_start_date
, to_char(dates.sixty_PCT_DT,'YYYY-MM-DD') as drop_end_date
, to_char(dates.last_wait_dt,'YYYY-MM-DD') as withdraw_end_dt
, CASE WHEN CLASS_STAT = 'A' then 'T'
else 'F' end as is_active
from PS_CLASS_TBL section
left join PS_CLASS_MTG_PAT meetings on section.strm = meetings.strm
                  and section.session_code = meetings.session_code
                  and section.class_section = meetings.class_section
                  and section.crse_offer_nbr = meetings.crse_offer_nbr
                  and section.crse_id = meetings.crse_id
left join instructor on section.crse_id = instructor.crse_id 
          and section.strm = instructor.strm 
          and section.session_code = instructor.session_code
          and section.class_section = instructor.class_section
          and section.crse_offer_nbr = instructor.crse_offer_nbr
left join dates on section.strm = dates.strm
and section.session_code = dates.session_code


inner join (
        SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION 
                FROM PS_CRSE_OFFER o
                WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.INSTITUTION = 'DC279'
                    --and o.acad_career = 'CRED'
                --and o.acad_org <> 'LCREDIT'
                --and o.crse_offer_nbr <> '1'
                and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
) course on section.crse_id = course.crse_id


where 1=1
and section.institution = 'DC279' --member specific
and section.start_dt > sysdate-365 --designed to limit the sections to only relevant ones in the present and future
and meetings.facility_id in (select * from location_pop)","Section"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.StudentTerm","
-- get last five terms based on current term
WITH getLastXTerms AS (
  SELECT stvterm_code
    FROM stvterm
   WHERE stvterm_code <= (SELECT MIN(stvterm_code)
                            FROM stvterm
                           WHERE stvterm_start_date > sysdate)
     AND ROWNUM < 6
   ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
    FROM sfrstcr JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
   WHERE 1=1
     AND sfrstcr_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE')
     and sfrstcr_levl_code in ('50', '54')
     and sfrstcr_term_code >= '201212'  
  UNION
  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
    FROM saradap JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
   WHERE 1=1
),

-- get the max term for each program that has a corresponding term assigned.
getProgramMaxTerm AS (
  SELECT DISTINCT
      sobcurr_program AS prog
      , stvterm_acyr_code AS acyr
      , MAX(sobcurr_term_code_init) AS programMaxTerm
    FROM sobcurr LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
   WHERE stvterm_code IS NOT NULL
   GROUP BY sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
  SELECT sgbstdn_pidm
         , sgbstdn_program_1
         , sgbstdn_stst_code
         , sgbstdn_term_code_eff AS maxEffTerm
         , sgbstdn_term_code_ctlg_1
         , stvstst_reg_ind
    FROM sgbstdn a LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
   WHERE sgbstdn_program_1 IS NOT NULL
     AND stvstst_code IS NOT NULL
     AND sgbstdn_term_code_eff = (SELECT MAX(sgbstdn_term_code_eff)
                                    FROM sgbstdn RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                                   WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                     AND stvterm_end_date <= sysdate + 365)
),

-- final query to extract student term data
studentTerm AS (
  SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
         , spriden_id AS student
         , studentDetails.maxEffTerm AS term
         , studentDetails.sgbstdn_program_1 || '$$' || getProgramMaxTerm.acyr AS \\\""program\\\""
         , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active -- set the record active if the corresponding stvstst_reg_ind is set to 'Y'
    FROM spriden RIGHT JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
                       JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
                       JOIN studentPopulation ON studentPidm = spriden_pidm
   WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
)

-- wrapper query
select * from studentTerm","Student Term"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"event.TaskStatusFeed","-- Fields  nk,student,event,repeated_by_nk,status,status_changed_ts,is_active
-- Model Name  event.TaskStatusFeed
-- Name  TaskStatusFeed
-- Output  TaskStatusFeed_{data#DateStamp}.csv
-- Goal: To mark students that satisfy the following events: orientation, meeting their advisor, placement, and applying for financial aid
-- Query:


-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
  (SELECT stvterm_code
  FROM stvterm
  WHERE stvterm_code <=
                        (SELECT MIN(stvterm_code)
                        FROM stvterm
                        WHERE stvterm_start_date > sysdate)
  ORDER BY 1 DESC)
WHERE ROWNUM < 6), -- LH change needed: only want current and next term


-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
  FROM sfrstcr  
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
  WHERE 1=1
    AND sfrstcr_rsts_code IN ('RE','RW', 'RA') -- Marin registration codes
    
  UNION

  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
  FROM saradap
    JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
  WHERE 1=1),


-- Extract E_ORIENTATION related events - no repeat
E_ORIENTATION AS (
  SELECT spriden_id || '$$E_ORIENTATION$$' AS nk
  , spriden_id AS student
  , 'E_ORIENTATION' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status           
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN SPRIDEN 
    ON SPRIDEN.spriden_pidm = studentPopulation.studentPidm
  JOIN SVRORNT
    ON SVRORNT_PIDM = studentPopulation.studentPidm
  JOIN (Select COM_UTILITY.f_get_orientation(SPRIDEN.spriden_pidm) OS, SPRIDEN_PIDM from SPRIDEN) EO  -- The function for Yes or No Orientation
    ON SPRIDEN.spriden_pidm = EO.SPRIDEN_PIDM
  WHERE EO.OS = 'Y'),


-- Extract E_FIRST_ADVISOR_MEET related events - no repeat
E_FIRST_ADVISOR_MEET AS (
SELECT DISTINCT
  spriden_id || '$$E_FIRST_ADVISOR_MEET$$' AS nk
  , spriden_id AS student
  , 'E_FIRST_ADVISOR_MEET' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN SPRIDEN
    ON SPRIDEN.spriden_pidm = studentPopulation.studentPidm
  JOIN SVREDPL
    ON SVREDPL_PIDM = studentPopulation.studentPidm
  JOIN (Select COM_UTILITY.f_get_ed_plans(SVREDPL_pidm, SVREDPL_term_code) AM, SVREDPL_PIDM from SVREDPL where svredpl_term_code in (select stvterm_code from getLastXTerms)) AD -- The function needed to have term_id added and limited to reduce run time
    ON SPRIDEN.spriden_pidm = AD.SVREDPL_PIDM
WHERE AD.AM = 'Y'),


-- Extract E_PLACEMENT related events - no repeat
E_PLACEMENT AS (
SELECT
  spriden_id || '$$E_PLACEMENT$$' AS nk
  , spriden_id AS student
  , 'E_PLACEMENT' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN SPRIDEN 		
    ON SPRIDEN.spriden_pidm = studentPopulation.studentPidm
  JOIN SORTEST
    ON SORTEST_PIDM = studentPopulation.studentPidm
  JOIN (Select COM_UTILITY.f_get_assessment(spriden_pidm) EP, SPRIDEN_PIDM from spriden) PL
    ON studentPopulation.studentPidm = PL.SPRIDEN_PIDM
WHERE PL.EP = 'Y'), 


-- Extract Financial Aid runs in prod
E_FINANCIAL2_AID_REMINDER AS (
  SELECT
  spriden_id || '$$E_FINANCIAL2_AID_REMINDER$$' AS nk
  , spriden_id AS student
  , 'E_FINANCIAL2_AID_REMINDER' AS event
  , STVTERM_CODE AS repeated_by_nk          -- LH Change: Make a reminder on the current date for that term. Add repeater for each term since this is a reminder. so it would read as the term like 2015FALL
  , 'COMPLETED' AS status           
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM (        -- This is the query provided in the JIRA ticket
    SELECT spriden_id                           Spriden_ID
  , spriden_last_name                           LastName
  , spriden_first_name                          FirstName
  , STVTERM.STVTERM_CODE
  , RCRAPP1_INFC_CODE
  FROM RCRAPP1
  INNER JOIN SPRIDEN
    ON SPRIDEN_PIDM = RCRAPP1_PIDM
    AND SPRIDEN_CHANGE_IND IS NULL
  JOIN SVREDPL     -- table with SID and term in it LH 011817
    ON SVREDPL_PIDM = SPRIDEN_PIDM
  JOIN STVTERM    -- LH join for term 011817
    ON STVTERM.STVTERM_CODE = SVREDPL.SVREDPL_TERM_CODE
  where 1=1
  and rcrapp1_aidy_code = '1617' 
  and RCRAPP1_INFC_CODE like 'EDE' 
  and RCRAPP1_CURR_REC_IND = 'Y'
  order by 2,3)),
  
/* LH 011817 NEW Below */

-- Extract each student's FIRST_TERM
FIRST_TERM AS(
select
    spriden_id
    ,saradap_pidm as student_pidm
    ,min(saradap_term_code_entry) as first_term_code
  from studentPopulation
  JOIN SPRIDEN
    ON SPRIDEN.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  WHERE spriden_change_ind IS NULL
   -- AND spriden_entity_ind = 'P'
 group by spriden_id, saradap_pidm
),

-- Extract each student's NEXT_TERM
NEXT_TERM AS(
select
  spriden_id
  ,saradap_pidm as student_pidm   
	,LEAD(STVTERM.STVTERM_CODE, 1) OVER(PARTITION BY spriden_id, SARADAP_PIDM ORDER BY STVTERM.STVTERM_CODE) AS NEXT_TERM_CODE
  from studentPopulation
  JOIN SPRIDEN
    ON SPRIDEN.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  JOIN STVTERM
    ON STVTERM.STVTERM_CODE = saradap.saradap_term_code_entry
  WHERE SYSDATE BETWEEN STVTERM.STVTERM_START_DATE AND STVTERM.STVTERM_END_DATE
    and spriden_change_ind IS NULL
    --AND spriden_entity_ind = 'P'
),

-- Get students who have registered
REGISTERED_STUDENTS AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm 
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE', 'RS','RW', 'RA') -- Marin registration codes
),

-- Extract E_REGISTER_FIRST_TERM related events - repeats on first term registration
E_REGISTER_FIRST_TERM AS (
SELECT DISTINCT
  SPRIDEN.spriden_id || '$$E_REGISTER_FIRST_TERM$$' || FIRST_TERM.FIRST_TERM_CODE AS nk
  , SPRIDEN.spriden_id AS student
  , 'E_REGISTER_FIRST_TERM' AS event
  , FIRST_TERM.FIRST_TERM_CODE  AS repeated_by_nk	
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN SPRIDEN
    ON SPRIDEN.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN FIRST_TERM
    ON FIRST_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE spriden_change_ind IS NULL
	--AND spriden_entity_ind = 'P'
),

-- Extract E_REGISTER_NEXT_TERM related events - repeats each next term
E_REGISTER_NEXT_TERM AS (
SELECT DISTINCT
  SPRIDEN.spriden_id || '$$E_REGISTER_NEXT_TERM$$' || NEXT_TERM.NEXT_TERM_CODE AS nk
  , SPRIDEN.spriden_id AS student
  , 'E_REGISTER_NEXT_TERM' AS event
  , NEXT_TERM.NEXT_TERM_CODE AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN SPRIDEN
    ON SPRIDEN.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN NEXT_TERM
    ON NEXT_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE NEXT_TERM.NEXT_TERM_CODE IS NOT NULL
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


finalDataSet AS (         -- Union all table results together
  SELECT * FROM E_ORIENTATION
  UNION
  SELECT * FROM E_FIRST_ADVISOR_MEET
  UNION
  SELECT * FROM E_PLACEMENT    
  UNION
  SELECT * FROM E_FINANCIAL2_AID_REMINDER
  UNION
  SELECT * FROM E_REGISTER_FIRST_TERM
  UNION
  SELECT * FROM E_REGISTER_NEXT_TERM
  )

SELECT * from finalDataSet  -- Display final result","TaskStatusFeed"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.EnrollmentApplication","SELECT DISTINCT A.EMPLID as nk,
                A.EMPLID as student,
                (select min(strm)
                   from (SELECT STRM, Min(term_begin_DT) AS term_begin_DT
                          FROM PS_TERM_TBL 
                         WHERE ACAD_CAREER IN ('CRED') 
                           and INSTITUTION = 'DC279'
                           and term_begin_DT > A.ADM_APPL_DT
                         GROUP BY STRM)) as app_term,
                A.ADM_APPL_NBR as app_number,
                TO_CHAR(A.ADM_APPL_DT,'YYYY-MM-DD') as app_dt,
                COALESCE(C.EMAIL_ADDR,F.EMAIL_ADDR,A.EMPLID||'@missing.tulsacc.edu') as personal_email,
                'Y' AS is_active
  FROM 	PS_ADM_APPL_DATA A
  		, PS_EMAIL_ADDRESSES F
 		  , PS_NAMES_VW E
  		, PS_INSTITUTION_TBL B
  		, PS_EMAIL_ADDRESSES C 
   WHERE ( A.INSTITUTION = 'DC279'
     AND A.ACAD_CAREER = 'CRED'
     AND A.ADM_APPL_DT >= TO_DATE('2016-06-01','YYYY-MM-DD')
     AND F.E_ADDR_TYPE = 'VCCS' 
     AND A.EMPLID = F.EMPLID 
     AND A.EMPLID = E.EMPLID 
     AND E.NAME_TYPE = 'PRI' 
     AND B.INSTITUTION = A.INSTITUTION 
     AND B.EFFDT = 
        (SELECT MAX(B_ED.EFFDT) 
           FROM PS_INSTITUTION_TBL B_ED 
          WHERE B.INSTITUTION = B_ED.INSTITUTION 
            AND B_ED.EFFDT <= SYSDATE)
     AND A.EMPLID =  C.EMPLID(+) 
     AND C.E_ADDR_TYPE(+) = 'OTHR' ) 
  ORDER BY 4, 3","EnrollmentApplication"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"core.Student","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'P'
 order by nk desc),

cur_stu as (
select distinct id as stu_id
  from eab_stdnt_active
 where current_enroll_pc = 'Y'
   and academic_period in (select nk from cur_terms)),

stu_list as (
  select distinct
    nk,
    username,
    email,
    replace(first_name, unistr('\\\\0027'), chr(39)) first_name,
    replace(last_name, unistr('\\\\0027'), chr(39)) last_name,
    birthdate,
    is_active
  FROM EAB_STDNT
  WHERE nk in (select stu_id from cur_stu)
  and upper(last_name) not like '**%**'
),

student_exp as (
  select eab_student_term_exp.student,
         eab_student_term_exp.term,
         eab_student_term_exp.veteran_ind,
         eab_student_term_exp.eops_ind,
         eab_student_term_exp.dsps_ind,
         eab_student_term_exp.calworks_ind,
         eab_student_term_exp.dual_enrl_student_ind,
         eab_student_term_exp.program
    from eab_student_term_exp left join (select student,
                                                max(term) as max_term
                                           from eab_student_term_exp
                                          where is_active = 'Y'
                                          group by student) stmx on 
                              eab_student_term_exp.student = stmx.student
   where eab_student_term_exp.term = stmx.max_term
)

SELECT DISTINCT  nk,
   coalesce(username, first_name||substr(last_name,0,4)||'@noemail.com') username,
   coalesce(email, first_name||substr(last_name,0,4)||'@noemail.com') email,
   first_name,
   last_name,
   birthdate,
   case
    when student_exp.veteran_ind = 'Y' then 'T' else 'F'
   end as veteran_ind,
   '' enrollment_status,
   CASE
     WHEN is_active = 'Y' THEN 'T' 
     ELSE 'F'
   END AS is_active
  from stu_list left join student_exp on stu_list.nk = student_exp.student","Student"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"core.Student","
-- get last five terms based on current term
WITH getLastXTerms AS (
  SELECT stvterm_code
    FROM stvterm
   WHERE stvterm_code <= (SELECT MIN(stvterm_code)
                            FROM stvterm
                           WHERE stvterm_start_date > sysdate)
     AND ROWNUM < 6
   ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
  SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
    FROM sfrstcr JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
   WHERE 1=1
     AND sfrstcr_rsts_code IN ('KV', 'RW', 'KP', 'KM', 'KO', 'KW', 'RE')
     and sfrstcr_levl_code in ('50', '54')
     and sfrstcr_term_code >= '201212'
  UNION
  SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
    FROM saradap JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
   WHERE 1=1
 UNION
SELECT DISTINCT SGBSTDN_PIDM AS studentPidm
FROM SGBSTDN JOIN getLastXTerms ON getLastXTerms.stvterm_code = sgbstdn_term_code_eff
WHERE SGBSTDN_RESD_CODE  = 'Z'
),

-- get student details
student AS (
  SELECT DISTINCT 
    spriden_id AS nk
    , spriden_id AS username
    , TRIM(COALESCE((SELECT goremal_email_address
                       FROM goremal
                      WHERE goremal_pidm = spriden_pidm
                        AND goremal_status_ind = 'A'
                        AND goremal_preferred_ind = 'Y'
                        AND goremal_emal_code = 'STUE'),
                     LOWER(spriden_id) || '@missingemail.org')) AS email
    , spriden_first_name AS first_name
    , spriden_last_name AS last_name
    , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
    , 'T' AS is_active
   FROM SPRIDEN JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
           LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm
  WHERE 1=1
    AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
    AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student","Student"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"catcc.TestSubject","SELECT
  nk,
  name, 
  CASE 
    WHEN INSTR(max_score, '.') = 0 THEN to_number(max_score) || '.00'
    ELSE max_score
  END AS max_score, 
  CASE 
    WHEN is_active = 'Y' THEN 'T'
    ELSE 'F'
  END AS is_active
FROM EAB_TST
where not regexp_like(max_score, '\\\\D')","Test Subject"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"cat.seatsavail","WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk.
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
WHERE 1=1
  AND ssbsect_ssts_code = '1' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate-365, 'YYYY') || '01' -- limit query to current and future year terms. we do not need to extract seats available for past terms.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
and ssbsect_term_code not like '8%'
and ssbsect_max_enrl <> 0 
)

-- wrapper query
SELECT * FROM seatsAvail","Seats Avail"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Course","-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
WHERE substr(scbcrse_eff_term, 1, 1) NOT IN ('6', '7', '8')
      AND LENGTH(scbcrse_subj_code) = 3
      AND LENGTH(scbcrse_crse_numb) = 3
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk -- This nk does not use the standard $$ concatenation since the platform currently shows the nk field in the UI. This affects the following dependent scripts that need to be in sync - section, studentCourse
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  ,CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE  WHEN SSBSECT_CRN IS NULL THEN 'F'
          WHEN scbcrse.scbcrse_csta_code IN ('A', 'P') THEN 'T' ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active. This may be member specific. Confirm code with BA/Member.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                      AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN SSBSECT ON (scbcrse.scbcrse_subj_code = ssbsect.ssbsect_subj_code 
                 AND scbcrse.scbcrse_crse_numb = ssbsect.ssbsect_crse_numb
                 AND ssbsect.ssbsect_vpdi_code = 'ACC')                                  
WHERE 
      (
       (scbdesc.scbdesc_term_code_eff = (SELECT MAX(scbdesc2.scbdesc_term_code_eff)
                                          FROM scbdesc scbdesc2
                                          WHERE scbdesc2.scbdesc_subj_code = scbdesc.scbdesc_subj_code AND 
                                                scbdesc2.scbdesc_crse_numb = scbdesc.scbdesc_crse_numb
                                                AND scbdesc2.scbdesc_term_code_eff <= maxEffectiveTerm.maxTerm)
                                      )
        OR
        scbdesc.scbdesc_term_code_eff IS NULL)
),

-- Assign default values
defaultValues AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM course
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Courses"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"catcc.waitlistposition","WITH getLastXTerms AS (
  SELECT stvterm_code
    FROM stvterm
   WHERE stvterm_code <= (select stvterm_code
                            from stvterm
                           where stvterm_start_date < sysdate
                             and stvterm_end_date > sysdate
                             and substr(stvterm_code, -1, 1) IN ('0','9')
                             and rownum = 1)
     AND ROWNUM < 6
   ORDER BY 1 DESC
),

finalDataSet AS (SELECT
  spriden_id || '$$' || sfrstcr_crn || '$$' || sfrstcr_term_code AS nk
  , spriden_id AS student
  , sfrstcr_crn || '$$' || sfrstcr_term_code AS section
  , sfrstcr_wl_priority AS position
  , 'T' AS is_active
FROM sfrstcr
	LEFT JOIN spriden ON spriden.spriden_pidm = sfrstcr.sfrstcr_pidm
where sfrstcr_rsts_code = 'WL'
  and sfrstcr_term_code in (select * from getLastXTerms)
)

-- Wrapper query
SELECT *
  FROM finalDataSet
 where position is not null","WaitlistPosition"
1189,"Ozarks Technical Community College",10499,"",48331,"Navigate:Ozarks Technical Community College",47972,"Navigate",20,"reg.ProgramSlot","SELECT
REPLACE(a.CURRICULUM_TRACKS_ID, '*', '$$') + '$$' + CAST(b.POS AS VARCHAR(5)) as nk
, REPLACE(a.CURRICULUM_TRACKS_ID, '*', '$$') as program
, b.POS as slot
, CTK_COURSE_BLOCKS as course_group
, c.CBL_DESC as \\\""desc\\\""
, 'T' as is_active
from CURRICULUM_TRACKS a
left join CURRICULUM_TRACKS_LS b
on a.CURRICULUM_TRACKS_ID = b.CURRICULUM_TRACKS_ID  
left join COURSE_BLOCKS as c on b.CTK_COURSE_BLOCKS=c.COURSE_BLOCKS_ID","ProgramSlot"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.StudentCourse","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE', 'RW', 'RF') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","StudentCourse"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"core.Faculty","select DISTINCT nk,
       first_name,
       last_name,
       username,
       email,
       prefix,
       suffix,
       faculty_type,
       is_active
  from eab_faculty
 where home_college like 'P%'
 order by nk","Faculty"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.Term","-- Fields: nk,name,cat_yr,registration_start_dt,registration_end_dt,term_start_dt,term_end_dt,is_active
-- Model Name: cat.Term
-- Name: Terms
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query: 

-- get Terms from Banner
WITH term AS (SELECT 
  stvterm_code nk, 
  stvterm_desc \\\""name\\\"", 
  stvterm_acyr_code cat_yr,
  coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt, -- Find term start date from sfrrsts and stvterm. If not available, assign default date
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case 
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm 
  JOIN sfrrsts ON stvterm_code = sfrrsts_term_code
WHERE sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member
  AND sfrrsts_ptrm_code = '1' -- Confirm ptrm code to include with BA/Member
),

-- get terms with no registration dates from Banner. This query extracts all terms that may exist in stvterm that do not have corresponding records in sfrrsts. Default values are used for registration dates in this case.
termWithNoRegDates AS (
SELECT
  stvterm_code nk,
  stvterm_desc \\\""name\\\"",
  stvterm_acyr_code cat_yr,
  '1900-01-01' registration_start_dt, -- Use default values
  '1900-01-02' registration_end_dt, -- Use default values
  to_char(stvterm_start_date, 'YYYY-MM-DD') term_start_dt,
  to_char(stvterm_end_date, 'YYYY-MM-DD') term_end_dt,
  -- Figure out how to indicate if the course is active. The standard logic has been to check if the term descriptions begin with the words 'Fall', 'Winter', 'Spring', 'Summer' and the term code isn't one of '999999' or '000000'.
  -- This logic may not hold true at some colleges and will need to be tweaked to work correctly. Confirm with BA.
  Case
    When (Stvterm_Desc Like 'Fall%'
    or Stvterm_Desc Like 'Winter%'
    or Stvterm_Desc Like 'Spring%'
    or Stvterm_Desc Like 'Summer%') 
    and stvterm_code not in ('999999','000000') THEN 'T' 
    ELSE 'F'
  END is_active
FROM stvterm
WHERE NOT EXISTS (SELECT 1
                  FROM sfrrsts
                 WHERE sfrrsts_term_code = stvterm_code
                   AND sfrrsts_rsts_code IN ('RW') -- Confirm registration codes to include with BA/Member. This should match with filters applied in above WITH clause.
                   AND sfrrsts_ptrm_code = '1') -- Confirm ptrm code to include with BA/Member. This should match with filters applied in above WITH clause.
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM term
UNION
SELECT * FROM termWithNoRegDates
)

-- Wrapper query
SELECT * FROM \\\""final\\\""    
","Terms"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.StudentTerm","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Student Term File

Fields  nk,student,term,program,is_active
*/

SELECT NVL(per.id, '') || '$$' || NVL(REPLACE(sar_max.yr, ' ', ''), '') || '$$' || NVL(REPLACE(sar_max.sess, ' ', ''), '') AS nk
       , NVL(population.id, '')                                                                                            AS student
       , NVL(REPLACE(sar_max.yr, ' ', ''), '') || '$$' || NVL(REPLACE(sar_max.sess, ' ', ''), '')                          AS term
       , CASE
           WHEN mmt.major IS NOT NULL AND mmt.deg IS NOT NULL THEN NVL(TRIM(mmt.major), '') || '$$' || NVL(TRIM(mmt.deg), '') || '$$' || NVL('20' || SUBSTR(mmt.fa_yr, 1, 2), '') --When the acr.acyr equals mmt.fa_yr then use mmt major, year, and deg
           WHEN mmt.major IS NOT NULL AND mmt.deg IS NULL THEN NVL(TRIM(mmt.major), '') || '$$' || NVL('20' || SUBSTR(mmt.fa_yr, 1, 2), '') --When acr.acyr equals mmt.fa_yr but the deg value is null, use deg-less record
           ELSE NVL(TRIM(mmt_max.major), '') || '$$' || NVL(TRIM(mmt_max.deg), '')   --Otherwise, use yearless record with default deg
         END                                                                                                               AS program
       , 'T'                                                                                                               AS is_active
FROM (--Students with registration in the last 5 terms
    SELECT DISTINCT cwr_pop.id
    FROM informix.cw_rec cwr_pop
    WHERE 1=1
       --AND cwr_pop.id IN ('22224', '22361', '22568', '23496', '23685')  --sample series of students
       --AND cwr_pop.id = '22224'   --Sample student record
       AND cwr_pop.stat IN ('R', 'L', 'C', 'E', 'T') 
       AND cwr_pop.yr || CASE
                           WHEN cwr_pop.sess = 'WI' THEN 1
                           WHEN cwr_pop.sess = 'SP' THEN 2
                           WHEN cwr_pop.sess = 'SU' THEN 3
                           ELSE 4
                         END >= (SELECT MIN(acr1_pop.yr || CASE
                                                             WHEN acr1_pop.sess = 'WI' THEN 1 
                                                             WHEN acr1_pop.sess = 'SP' THEN 2
                                                             WHEN acr1_pop.sess = 'SU' THEN 3
                                                             ELSE 4
                                                           END)
                                 FROM informix.acad_cal_rec acr1_pop
                                 WHERE acr1_pop.end_date >= TODAY - 547)   --A year and a half roughly equates to 5 terms                   
   ) population  
JOIN informix.prog_enr_rec per         --Has the student's latest major/degree information
  ON per.id = population.id  
LEFT JOIN informix.stu_acad_rec sar_min    --join on id, prog, and major code in order to find the min term that the student changed into that major
       ON sar_min.id = per.id
          AND sar_min.prog = per.prog  
          AND sar_min.major1 = per.major1    
LEFT JOIN informix.stu_acad_rec sar_max        --join on id to just find the max yr and sess record for each student
       ON sar_max.id = per.id    
          AND sar_max.major1 = per.major1     
LEFT JOIN informix.acad_cal_rec acr    --Used to grab the academic year for the program information 
       ON sar_min.yr = acr.yr
          AND sar_min.sess = acr.sess
          AND acr.subsess = ''
          AND sar_min.prog = acr.prog  
LEFT JOIN (SELECT mmt.major, mmt.fa_yr, mmt.deg  --if the student's first term in the major matches a valid program lookup term
           FROM informix.mhfamajor_table mmt) mmt
       ON mmt.major = sar_min.major1    
          AND mmt.fa_yr = acr.acyr                  
/*LEFT JOIN (SELECT mmt.major, mmt.fa_yr, mmt.deg  --default min program lookup year
                  , ROW_NUMBER() OVER(PARTITION BY mmt.major
                                      ORDER BY mmt.fa_yr ASC) AS rn
           FROM informix.mhfamajor_table mmt) mmt_min
       ON mmt_min.major = sar_min.major1    
          AND mmt_min.rn = 1 */
LEFT JOIN (SELECT mmt.major, mmt.fa_yr, mmt.deg  --default deg tied to max program lookup
                  , ROW_NUMBER() OVER(PARTITION BY mmt.major
                                      ORDER BY mmt.fa_yr DESC) AS rn
           FROM informix.mhfamajor_table mmt) mmt_max
       ON mmt_max.major = sar_min.major1    
          AND mmt_max.rn = 1          
WHERE 1=1
   AND sar_min.yr = (SELECT MIN(sar1.yr)   --filters to only pull back the sar record tied to the students min term that they moved to their current major (in per)
                     FROM informix.stu_acad_rec sar1
                     WHERE sar_min.id = sar1.id
                        AND sar_min.prog = sar1.prog
                        AND sar_min.major1 = sar1.major1)
   AND (CASE
          WHEN sar_min.sess = 'WI' THEN 1
          WHEN sar_min.sess = 'SP' THEN 2
          WHEN sar_min.sess = 'SU' THEN 3
          ELSE 4
        END) = (SELECT MIN(CASE
                              WHEN sar2.sess = 'WI' THEN 1
                              WHEN sar2.sess = 'SP' THEN 2
                              WHEN sar2.sess = 'SU' THEN 3
                              ELSE 4
                           END) 
                FROM informix.stu_acad_rec sar2
                WHERE sar_min.id = sar2.id
                   AND sar_min.prog = sar2.prog
                   AND sar_min.major1 = sar2.major1
                   AND sar_min.yr = sar2.yr)
   AND sar_max.yr = (SELECT MAX(sar1.yr)      --filters to only pull back the sar record tied to the students max term record to only pull in the single latest term for the student
                     FROM informix.stu_acad_rec sar1
                     WHERE sar_max.id = sar1.id
                        AND sar_max.prog = sar1.prog
                        AND sar_max.major1 = sar1.major1)
   AND (CASE
          WHEN sar_max.sess = 'WI' THEN 1
          WHEN sar_max.sess = 'SP' THEN 2
          WHEN sar_max.sess = 'SU' THEN 3
          ELSE 4
        END) = (SELECT MAX(CASE
                              WHEN sar2.sess = 'WI' THEN 1
                              WHEN sar2.sess = 'SP' THEN 2
                              WHEN sar2.sess = 'SU' THEN 3
                              ELSE 4
                           END) 
                FROM informix.stu_acad_rec sar2
                WHERE sar_max.id = sar2.id
                   AND sar_max.prog = sar2.prog
                   AND sar_max.major1 = sar2.major1
                   AND sar_max.yr = sar2.yr)                   
ORDER BY 1
","StudentTerm"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"core.studentcategory","select 'SA' as nk
, 'Special Admission' as \\\""name\\\""
, 'T' as is_active
from dual","Student Category"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.Department","SELECT nk, name, is_active
FROM EAB_DEPARTMENT","Department"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"reg.accounthold","--Fields  nk,student,identifier,message,is_active
--Model Name  reg.AccountHold
--Name  AccountHold
--Output  AccountHold_{data#DateStamp}.csv
--Query :

-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
ORDER BY 1 DESC
)
WHERE ROWNUM < 7
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

holds AS (
SELECT DISTINCT
  spriden_id || '$$' || sprhold_hldd_code AS nk
  , spriden_id AS student
  , sprhold_hldd_code AS \\\""identifier\\\""
  , stvhldd_desc AS message
  , 'T' AS is_active
FROM sprhold
  join stvhldd on stvhldd_code = sprhold_hldd_code
  JOIN studentPopulation ON studentPopulation.studentpidm = sprhold_pidm
  JOIN spriden ON studentPopulation.studentpidm = spriden_pidm
WHERE sprhold_from_date < sysdate 
  AND sprhold_to_date > sysdate
  AND spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P'
  AND sprhold_hldd_code IN ('PI', 'BB', 'RC', 'HS', 'AU', 'RR', 'CO', 'AT', 'SI', 'AG', 'AP', 'AL', 'LB', 'TE', 'AS', 'VP', 'AR', 'RH', 'OR', 'FA', 'SB', 'HI', 'BA', 'LH', 'BR', 'AE', 'BC', 'AO', 'AH') -- Confirm Hold coldes with BAs
)

SELECT * FROM holds
","AccountHold"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"reg.StudentTestScore","WITH

/* TMP_1 AS (
SELECT DISTINCT
   P.ID student
FROM
   PERSON P
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'
),

TMP_2 AS (
SELECT DISTINCT
   P.ID  
FROM
   PERSON P
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         A.APPL_APPLICANT NOT IN 
         (
            SELECT
               student
            FROM
               TMP_1
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID
),

TMP_3 AS (SELECT * FROM TMP_1 UNION SELECT * FROM TMP_2), */

STUDENTS AS (
SELECT 
   substring(P.ID,1,7)  nk
FROM PERSON AS P
INNER JOIN PEOPLE_EMAIL PE
ON P.ID = PE.ID AND PE.PERSON_EMAIL_TYPES IN ('BCS')
INNER JOIN PERSON_PIN PP 
ON P.ID = PP.PERSON_PIN_ID
GROUP BY	P.ID,
			P.FIRST_NAME,
			P.LAST_NAME,
			P.GENDER,
			P.BIRTH_DATE,
			PE.PERSON_EMAIL_ADDRESSES,
			PP.PERSON_PIN_USER_ID),

TEST_SUBJ_TEMP AS (
SELECT DISTINCT 
      NON_COURSES_ID nk 
  FROM NON_COURSES
    Where NON_COURSES_ID IS NOT NULL  AND 
          NON_COURSES.NCRS_CATEGORY_IDX != 'OTHER'  AND
		  NCRS_MAX_SCORE IS NOT NULL
)


SELECT
   S.nk+'$$'+SNC.STNC_NON_COURSE as nk,
   S.nk,
   SNC.STNC_NON_COURSE AS test_subject,
   CAST(COALESCE(SNC.STNC_SCORE,0) AS NUMERIC(7,2)) AS score,
   'T' AS is_active
FROM
   STUDENTS S 
   INNER JOIN STUDENT_NON_COURSES SNC ON S.nk = SNC.STNC_PERSON_ID
   INNER JOIN TEST_SUBJ_TEMP TST      ON SNC.STNC_NON_COURSE = TST.nk
WHERE
   SNC.STNC_STATUS = 'A'


/*
SELECT
   TS.student+'$$'+SNC.STNC_NON_COURSE as nk,
   TS.student,
   SNC.STNC_NON_COURSE AS test_subject,
   CAST(COALESCE(SNC.STNC_SCORE,0) AS NUMERIC(7,2)) AS score,
   'T' AS is_active
FROM
   TMP_3 TS,
   STUDENT_NON_COURSES SNC
WHERE
   TS.student = SNC.STNC_PERSON_ID
      AND   
  TS.student IN (SELECT nk from STUDENTS)
      AND
  SNC.STNC_NON_COURSE IN (SELECT nk FROM TEST_SUBJ_TEMP)
AND
   SNC.STNC_STATUS = 'A'

   */","StudentTestScore"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"core.student","WITH pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select emplid, max(strm)
              from ps_stdnt_car_term b
              where institution = 'NV280'
              and ACAD_CAREER = 'CRED'
             -- and WITHDRAWN_CODE <> 'NWD'
              group by emplid) b
              on a.emplid = b.emplid         
 WHERE  1=1
        and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
        and a.acad_plan in ('2120','2124','2130','3400')

)                  

Select distinct a.EMPLID as NK
, a.emplid username
, Nvl(email.EMAIL_ADDR, a.emplid || '@missing.nova.edu') as email
, a.FIRST_NAME as FIRST_NAME
, a.LAST_NAME as LAST_NAME
, to_char(a.BIRTHDATE,'YYYY-MM-DD') as birthday
, 'T' as is_active

FROM   PS_STDNT_CAR_TERM b
       
       --MOST STUDENT GENERAL DATA  
       INNER JOIN PS_PERSONAL_DATA a 
               ON b.EMPLID = a.EMPLID 
               
       --E-MAIL  
       LEFT JOIN PS_EMAIL_ADDRESSES email 
              ON email.EMPLID = a.EMPLID 
                 AND email.E_ADDR_TYPE IN ( 'VCCS' )         --Update, member-specific; looking for campus email
         --AND PREF_EMAIL_FLAG = 'Y'  


WHERE  1 = 1 
and b.emplid in (select student_id from pop)
ORDER  BY 1 ","Student"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"inst.Location","-- get building data from Banner
WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, 
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, 
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
WHERE slbbldg_camp_code IS NOT NULL
),

-- Assign default values
defaultValues AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Locations"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"inst.Location","select slbbldg_bldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc name,
       '' latitude,
       '' longitude,
       nvl(trim(SLBBLDG_STREET_LINE1||' '||SLBBLDG_STREET_LINE2||' '||SLBBLDG_STREET_LINE3),' ')||' '||slbbldg_city||' '||slbbldg_stat_code||' '||slbbldg_zip address,
       slbbldg_phone_area||slbbldg_phone_number comments,
       'T' is_active
  from slbbldg join stvbldg on slbbldg_bldg_code = stvbldg_code
union
select distinct
       case
         when ssrmeet_room_code is null then ssrmeet_bldg_code
         else ssrmeet_bldg_code || '$$' || ssrmeet_room_code
       end as nk,
       slbbldg_camp_code campus,
       case
         when ssrmeet_room_code is null then stvbldg_desc
         else stvbldg_desc || ' Room# ' || ssrmeet_room_code
       end as name,
       '' latitude,
       '' longitude,
       nvl(trim(SLBBLDG_STREET_LINE1||' '||SLBBLDG_STREET_LINE2||' '||SLBBLDG_STREET_LINE3),' ')||' '||slbbldg_city||' '||slbbldg_stat_code||' '||slbbldg_zip address,
       slbbldg_phone_area||slbbldg_phone_number comments,
       'T' is_active
  from stvbldg join slbbldg on stvbldg.STVBLDG_CODE = slbbldg_bldg_code
               join ssrmeet on stvbldg.STVBLDG_CODE = ssrmeet_bldg_code
","Location"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.coursetype","select distinct SSR_COMPONENT as NK,
SSR_COMPONENT as \\\""name\\\"",
'T' as is_active
from PS_CRSE_CATALOG","Course Type"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.sectiontime","SELECT a.ssbsect_term_code || '$$' || a.ssbsect_crn || '$$'
       || COALESCE(b.Day_of_Week, '') || '$$'    
       || COALESCE(b.ssrmeet_begin_time, '') || '$$'
       || COALESCE(b.ssrmeet_end_time, '') || '$$'         AS NK 
       , a.ssbsect_crn || '$$' || a.ssbsect_term_code     AS Section 
       , CASE b.Day_of_Week 
            WHEN 'U' THEN 1 
            WHEN 'M' THEN 2 
            WHEN 'T' THEN 3 
            WHEN 'W' THEN 4 
            WHEN 'R' THEN 5 
            WHEN 'F' THEN 6 
            WHEN 'S' THEN 7 
           ELSE 8 
          END                                    AS Day_of_Week 
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_begin_time,1,2) || ':' || SUBSTR(b.ssrmeet_begin_time,3,2) || ':00'  
            ELSE ''
          END                                    AS From_Tm
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_end_time,1,2)   || ':' || SUBSTR(b.ssrmeet_end_time,3,2) || ':00' 
            ELSE ''
          END                                    AS To_Tm
        , CASE WHEN a.SSBSECT_SSTS_CODE = 'A' THEN 'T' ELSE 'F' END AS IS_ACTIVE   
        , CASE WHEN b.SSRMEET_ROOM_CODE is not null and b.SSRMEET_BLDG_CODE is not null then b.SSRMEET_BLDG_CODE||'$$'||b.SSRMEET_ROOM_CODE
          when b.ssrmeet_room_code is null and b.ssrmeet_bldg_code is null then
            (select CASE WHEN c.SSRMEET_BLDG_CODE || c.SSRMEET_ROOM_CODE is null 
                    then 'EAB0'
                    when c.SSRMEET_ROOM_CODE is null and c.SSRMEET_BLDG_CODE is not null
                    then c.SSRMEET_BLDG_CODE
                    else c.SSRMEET_BLDG_CODE || '$$' || c.SSRMEET_ROOM_CODE
                    end
             from ssrmeet c 
              where c.ssrmeet_crn = ssbsect_crn and c.ssrmeet_term_code = ssbsect_term_code and rownum = 1)
          when b.SSRMEET_ROOM_CODE is null and b.SSRMEET_BLDG_CODE is not null then b.SSRMEET_BLDG_CODE 
          else 'EAB0' end as \\\""Location\\\""
FROM ssbsect a 
LEFT OUTER JOIN ( SELECT ssrmeet_crn
                          , ssrmeet_term_code
                          , Day_of_Week
                          , ssrmeet_begin_time
                          , ssrmeet_end_time
                          , ssrmeet_bldg_code
                          , ssrmeet_room_code
                   FROM   ( SELECT ssrmeet_crn
                                   , ssrmeet_term_code
                                   , ssrmeet_begin_time
                                   , ssrmeet_end_time
                                   , ssrmeet_bldg_code
                                   , ssrmeet_room_code
                                   , ssrmeet_Sun_day
                                   , ssrmeet_Mon_day
                                   , ssrmeet_Tue_day
                                   , ssrmeet_Wed_day
                                   , ssrmeet_Thu_day
                                   , ssrmeet_Fri_day
                                   , ssrmeet_Sat_day 
                             FROM   ssrmeet) 
                  UNPIVOT(Day_of_week FOR sk IN (ssrmeet_sun_day
                                                 , ssrmeet_Mon_day
                                                 , ssrmeet_Tue_day
                                                 , ssrmeet_Wed_day
                                                 , ssrmeet_Thu_day
                                                 , ssrmeet_Fri_day
                                                 , ssrmeet_Sat_day))
                  WHERE  1=1 
                     --AND ssrmeet_term_code = '201402' 
                     --AND ssrmeet_crn = '24016' 
                ) b ON b.ssrmeet_crn = a.ssbsect_crn 
                       AND b.ssrmeet_term_code = a.ssbsect_term_code 
WHERE 1=1
--and SSBSECT_VOICE_AVAIL = 'Y'
   AND ssbsect_term_code > '201510'  -- Hard coded term that will need to be removed.
   AND ssbsect_gmod_code <> 'C'

   
ORDER BY 1 desc, 3, 4","SectionTime"
1184,"Southern Crescent Technical College",10497,"",48325,"Navigate:Southern Crescent Technical College",47972,"Navigate",20,"cat.SeatsAvail","WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
WHERE 1=1
  AND ssbsect_ssts_code = 'A'
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01'
--  AND ssbsect_camp_code = 'M'
)

-- wrapper query
SELECT * FROM seatsAvail","SeatsAvail"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"reg.StudentTestScore","WITH TMP_1 AS (
SELECT DISTINCT
   P.ID student
FROM
   PERSON P
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'
),

TMP_2 AS (
SELECT DISTINCT
   P.ID  
FROM
   PERSON P
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         A.APPL_APPLICANT NOT IN 
         (
            SELECT
               student
            FROM
               TMP_1
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID
),

TMP_3 AS (SELECT * FROM TMP_1 UNION SELECT * FROM TMP_2)

SELECT
   TS.student+'$$'+SNC.STNC_NON_COURSE as nk,
   TS.student,
   SNC.STNC_NON_COURSE AS test_subject,
   CAST(COALESCE(SNC.STNC_SCORE,0) AS NUMERIC(7,2)) AS score,
   'T' AS is_active
FROM
   TMP_3 TS,
   STUDENT_NON_COURSES SNC
WHERE
   TS.student = SNC.STNC_PERSON_ID
      AND
   SNC.STNC_STATUS = 'A'","StudentTestScore"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.Course","-- Fields	nk,cd,level,subject,dept,title,desc,course_type,credits,is_active
-- ModelName	cat.Course
-- Name		Course
-- Output	Course_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE WHEN scbcrse.scbcrse_csta_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- determine is courses are active by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active. This may be member specific. Confirm code with BA/Member.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
WHERE 1=1
   AND scbcrse.scbcrse_crse_numb LIKE '%.'    --Added per instructions from Cassandra Coleman.  The '.' added to differentiate shared course codes between the 2 year and 4 year spaces
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM course
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Courses"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"core.facultytype","Select Stvfstp_Code As Nk,
  Stvfstp_Code As \\\""type\\\"",
  stvfstp_desc as description
  From Stvfstp
Union
Select Stvfctg_Code As Nk,
Stvfctg_Code As \\\""type\\\"",
Stvfctg_Desc As Description
from stvfctg
union 
select 'Staff' as Nk,
'Staff' as \\\""type\\\"",
'Staff' as Description
from dual
 Order By 1","Faculty Type"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.CourseType","-- Any Cred Type in this list is active since it has courses which are active
WITH 

defaultValues AS (
	SELECT 
		'default' nk,
		'default' name,
		'F'       is_active
	FROM dual
),

courseTypeList AS (
	SELECT DISTINCT 
		CRS_CRED_TYPE
	FROM COLL_PRODUCTION.COURSES
	WHERE CRS_MIN_CRED > 0
	GROUP BY CRS_CRED_TYPE
),

validCourseTypes AS (
	SELECT 
		CRED_TYPES_ID nk,
        CRTP_DESC name,
	    CASE
        	WHEN courseTypeList.CRS_CRED_TYPE IS NOT NULL 
        		THEN 'T'
			ELSE 'F'
	   	END is_active
  	FROM COLL_PRODUCTION.CRED_TYPES 
  	LEFT JOIN courseTypeList ON CRED_TYPES_ID = CRS_CRED_TYPE
),

finalDataSet AS (
	SELECT * FROM validCourseTypes
	UNION 
	SELECT * FROM defaultValues
)

SELECT * FROM finalDataSet","CourseType"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.Department","WITH 

defaultValues AS (
  SELECT
    'default' nk,
    'default' \\\""name\\\"",
    'F'       is_active
  FROM dual
),

validDepartments AS (
  SELECT DISTINCT 
    DEPTS_ID  nk, 
        DEPTS_DESC  \\\""name\\\"",
        'T' is_active
  FROM COLL_PRODUCTION.DEPTS
),

finalDataSet AS (
  SELECT * FROM validDepartments
  UNION 
  SELECT * FROM defaultValues
)

SELECT * FROM finalDataSet","Department"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"core.Advisor","-- Member has requested we use this query to extract Advisor in lieu of our current query. 
With Advr_Pidm As (
select distinct s1.sgradvr_advr_pidm
from sgradvr s1
join pebempl
on pebempl_pidm=sgradvr_advr_pidm
and pebempl_empl_status='A'
where s1.sgradvr_term_code_eff = (
select max(s2.sgradvr_term_code_eff) 
from sgradvr s2
where s2.sgradvr_pidm=s1.sgradvr_pidm
and s2.sgradvr_term_code_eff <= (select min(stvterm_code)
								from stvterm
								where stvterm_end_date >= sysdate)
								)
					)
Select Spriden_Id Nk,
Spriden_Id Username,
coalesce((
select goremal_email_address
from goremal
where goremal_pidm = spriden_pidm
and goremal_emal_code = 'E'
and goremal_status_ind = 'A'
and goremal_preferred_ind = 'Y'
and rownum = 1),
(select goremal_email_address
from goremal
where goremal_pidm = spriden_pidm
and goremal_status_ind = 'A'
and goremal_emal_code = 'E'
and goremal_preferred_ind = 'N'
),
lower(spriden_id) || '@missingemail.org') email,
Spriden_First_Name First_Name,
Spriden_Last_Name last_name,
'T' Is_Active
From Spriden
Where Spriden_Pidm In (Select * From Advr_Pidm) and spriden_change_ind is null","Advisor"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.SeatsAvail","SELECT
  ssbsect_crn || '$$' || ssbsect_term_code nk,
  ssbsect_seats_avail avail_seats, 
  'T' is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
             LEFT JOIN SCRLEVL ON ssbsect_subj_code = SCRLEVL_SUBJ_CODE
                              and ssbsect_crse_numb = SCRLEVL_CRSE_NUMB
WHERE spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code >= '201015'
  and substr(ssbsect_term_code, -1, 1) != '5'
  AND ssbsect_ssts_code = 'A'
  and SCRLEVL_LEVL_CODE in ('CR' , 'NC')
  order by ssbsect_term_code, ssbsect_crn","SeatsAvail"
947,"Hocking College",10321,"",47989,"Navigate:Hocking College",47972,"Navigate",20,"cat.SectionTime","WITH SECTIONS_0 AS
(
SELECT 
         CSM_COURSE_SECTION + '$$'+ CAST('8' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         8 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'TBD') location,
         'T' is_active

      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
                  AND
               (
                  SEC_STATUS = 'A'                   OR 
                  SEC_STATUS = 'C'                   OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )   AND 
         (SEC_NO < '600' OR SEC_NO > '799')        AND 
         COURSE_SEC_MEETING.CSM_MONDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_TUESDAY IS NULL        AND 
         COURSE_SEC_MEETING.CSM_WEDNESDAY IS NULL      AND 
         COURSE_SEC_MEETING.CSM_THURSDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_FRIDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_SATURDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_SUNDAY IS NULL
),

SECTIONS_1 AS
(
SELECT * FROM SECTIONS_0 UNION 

SELECT
         CSM_COURSE_SECTION+'$$'+CAST('1' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         1 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'TBD')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )     AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_SUNDAY = 'Y'),

SECTIONS_2 AS
(
SELECT * FROM SECTIONS_1 UNION 

SELECT
         CSM_COURSE_SECTION+'$$'+CAST('2' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         2 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'TBD')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
        (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )   AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_MONDAY = 'Y'),

SECTIONS_3 AS
(
SELECT * FROM SECTIONS_2 UNION 

SELECT
         CSM_COURSE_SECTION+'$$'+CAST('3' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         3 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'TBD')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
        (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )   AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_TUESDAY = 'Y'),

SECTIONS_4 AS
(
SELECT * FROM SECTIONS_3 UNION 

SELECT
         CSM_COURSE_SECTION+'$$'+CAST('4' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         4 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'TBD')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )    AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_WEDNESDAY = 'Y'),

SECTIONS_5 AS
(
SELECT * FROM SECTIONS_4 UNION 

SELECT
         CSM_COURSE_SECTION+'$$'+CAST('5' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         5 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'TBD')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )   AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_THURSDAY = 'Y'),

SECTIONS_6 AS
(
SELECT * FROM SECTIONS_5 UNION 

SELECT
         CSM_COURSE_SECTION+'$$'+CAST('6' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         6 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'TBD')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )     AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_FRIDAY = 'Y'),

SECTIONS_7 AS
(
SELECT * FROM SECTIONS_6 UNION 

SELECT
         CSM_COURSE_SECTION+'$$'+CAST('7' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         7 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'TBD')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (CAST(LEFT(SEC_TERM,4) AS INT) > YEAR(GETDATE()) - 2 )   AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_SATURDAY = 'Y'),

VALID_NKS AS (
SELECT  
		 min(nk+'$$'+REPLACE(CONVERT(VARCHAR,from_tm,108)+'$$'+CONVERT(VARCHAR,to_tm,108),':','')) as nk

 FROM SECTIONS_7 

 group by section,day_of_week,from_tm,to_tm)

SELECT  DISTINCT
		 SECTIONS_7.nk+'$$'+REPLACE(CONVERT(VARCHAR,from_tm,108)+'$$'+CONVERT(VARCHAR,to_tm,108),':','') as nk,
         section, 
         day_of_week,
         CASE	
			WHEN isnull(location,'TBD') = 'WWW WWW' THEN ''
			ELSE from_tm
			END,
         CASE
			WHEN isnull(location,'TBD') = 'WWW WWW' THEN ''
			ELSE to_tm
			END,
         isnull(location,'TBD'),
         is_active   

 FROM SECTIONS_7 
 JOIN VALID_NKS on SECTIONS_7.nk+'$$'+REPLACE(CONVERT(VARCHAR,from_tm,108)+'$$'+CONVERT(VARCHAR,to_tm,108),':','') = VALID_NKS.nk","SectionTime"
1021,"Houston Baptist University",10391,"",47987,"APS:Houston Baptist University",47975,"APS",24,"finance","with pi_code_filter as 
	(select frrgrpi_id_ind as column_value from frrgrpi)
, v as(
    select 
        ftvsdat_sdat_code_opt_1 code, ftvsdat_title title 
    from 
        ftvsdat
        join (
            select 
                ftvsdat_sdat_code_opt_1 code, max(ftvsdat_eff_date) maxdate 
            from 
                ftvsdat 
            where 
                ftvsdat_sdat_code_entity = 'FRRGRPI' 
                and ftvsdat_sdat_code_attr = 'ID_INDICATOR' 
                and ftvsdat_sdat_code_opt_1 in (select column_value from pi_code_filter)
            group by ftvsdat_sdat_code_opt_1
        ) f on f.code = ftvsdat.ftvsdat_sdat_code_opt_1 and ftvsdat.ftvsdat_eff_date = f.maxdate
  where 
      ftvsdat_sdat_code_entity = 'FRRGRPI' 
      and ftvsdat_sdat_code_attr = 'ID_INDICATOR' 
      and ftvsdat_sdat_code_opt_1 in (select column_value from pi_code_filter) 
)
select
    frrgrpi_grnt_code       grant_code
    , frrgrpi_id_ind        pi_type_code
    , frrgrpi_id_pidm       pi_pidm
    , v.title               pi_type_title
    , frrgrpi_orgn_code     pi_organization_code
    , frrgrpi_fte           fte
    , frrgrpi_employee_ind  pi_employee_ind
from 
    frrgrpi p
    left outer join v on p.frrgrpi_id_ind = v.code
where 
    frrgrpi_id_ind in (select column_value from pi_code_filter) 
order by 
    grant_code, pi_type_code;","grant_pi"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.Course","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Course File

Fields	nk,cd,level,subject,dept,title,desc,course_type,credits,is_active
*/

SELECT DISTINCT 
       NVL(REPLACE(cr.crs_no, ' ', ''), '') || NVL(TRIM(mr.im), '')   AS nk
       , NVL(REPLACE(cr.crs_no, ' ', ''), '')                         AS cd
       , NVL(TRIM(cr.lvl), '')                                        AS level
       , NVL(TRIM(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
             REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
             SUBSTR(REPLACE(cr.crs_no, ' ', ''), 1, 5)
                    , '1', ''), '2', ''), '3', ''), '4', '')
                    , '5', ''), '6', ''), '7', ''), '8', '')
                    , '9', ''), '0', '')), '')                        AS subject      --Removes spaces, substrings to only 5 characters, then removes numbers to only get the subject code
       , NVL(TRIM(cr.dept), '')                                       AS dept
       , NVL(TRIM(cr.title1), '')                                     AS title
       --, NVL(cr.title1, '')                                           AS desc_old   --Mt Hood to research the better fields here.
       , NVL(TRIM(REPLACE(car.abstr, '|', '-')), '')                  AS desc        
       , NVL(TRIM(mr.im), '')                                         AS course_type
       , NVL(cr.max_hrs, '')                                          AS credits
       , 'T'                                                          AS is_active
       --, cr.cat  --Troubleshooting field only
FROM informix.crs_rec cr
JOIN informix.sec_rec sr
  ON sr.crs_no = cr.crs_no
     AND sr.cat = cr.cat
JOIN informix.secmtg_rec smr
  ON smr.crs_no = sr.crs_no
     AND smr.yr = sr.yr
     AND smr.sess = sr.sess
     AND smr.sec_no = sr.sec_no  
JOIN informix.mtg_rec mr
  ON mr.mtg_no = smr.mtg_no     
LEFT JOIN informix.mhcrsabstrchar_rec car
       ON car.crs_no = cr.crs_no
          AND car.cat = cr.cat
WHERE 1=1
   AND cr.crs_no <> ''
   AND cr.cat = (SELECT MAX(cr1.cat)  --getting info from the latest catalog per course and course type
                 FROM informix.crs_rec cr1
                 JOIN informix.sec_rec sr1
                   ON sr1.crs_no = cr1.crs_no
                      AND sr1.cat = cr1.cat
                 JOIN informix.secmtg_rec smr1
                   ON smr1.crs_no = sr1.crs_no
                      AND smr1.yr = sr1.yr
                      AND smr1.sess = sr1.sess
                      AND smr1.sec_no = sr1.sec_no  
                 JOIN informix.mtg_rec mr1
                   ON mr1.mtg_no = smr1.mtg_no 
                 WHERE cr.crs_no = cr1.crs_no
                    AND mr.im = mr1.im)
   --AND NVL(REPLACE(cr.crs_no, ' ', ''), '')  LIKE '%CIS120L%'  --troubleshooting filter only
--ORDER BY 1   ","Courses"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.SeatsAvail","WITH TERMLIST AS (
  SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
    FROM COURSE_SECTIONS
    LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
   WHERE SEC_TERM IS NOT NULL
     AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-2
)

SELECT CS_TERM+'_'+CS_NAME AS nk,
       CASE
         -- Not sure now Navigate liked negtive available seats.
         WHEN CS_CAPACITY - CS_COUNT_STUDENTS >= 0 THEN CS_CAPACITY - CS_COUNT_STUDENTS
         ELSE 0
       END AS avail_seats,
       CASE
         WHEN CS_STATUS = 'A' THEN 'Y'
         ELSE 'N'
       END AS is_active
  FROM COURSE_SECTIONS_DETAILS_VIEW
 WHERE CS_TERM IN (SELECT SEC_TERM FROM TERMLIST)","Seats Available"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"core.Student","-- Fields: nk,username,email,first_name,last_name,birthdate,is_active
-- Model Name: core.Student
-- Name: Student
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version: pjf4g1
-- Author: James DeBolt
-- Query:

	SELECT 
	   PERSON.ID nk,
	   PERSON_PIN.PERSON_PIN_USER_ID username,
	   NVL(PEOPLE_EMAIL.PERSON_EMAIL_ADDRESSES,' ') email,
	   PERSON.FIRST_NAME first_name,
	   PERSON.LAST_NAME last_name,
	   NVL(REPLACE(TO_CHAR(TO_DATE(PERSON.BIRTH_DATE), 'yyyy-mm-dd'), '/', '-'), '1900-01-01') 
      birthdate,
	   'T' is_active
	FROM COLL_TEST.PERSON
	INNER JOIN COLL_TEST.PEOPLE_EMAIL
	ON PERSON.ID = PEOPLE_EMAIL.ID AND PEOPLE_EMAIL.PERSON_EMAIL_TYPES IN ('TTC')
	INNER JOIN COLL_TEST.PERSON_PIN
	ON PERSON.ID = PERSON_PIN.PERSON_PIN_ID","Student"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"event.TaskStatusFeed","
with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'P'
 order by nk desc),

cur_stu as (
select distinct id as stu_id
  from eab_stdnt_active
 where current_enroll_pc = 'Y'
   and academic_period in (select nk from cur_terms)),
   
this_term as (
  select MIN(NK)
    from eab_trm
   where to_date(term_end_dt,'YYYY-MM-DD') > sysdate
     and college = 'CC'
)
select  id ||'$$EAB_STUDENT_ORIENTATION$$' as nk,
        id as student,
       'EAB_STUDENT_ORIENTATION' as event,
       '' as repeated_by_nk,
       'COMPLETED' as status,
       '1900-01-01' as status_changed_ts,
       'Y' as is_active
  from (select distinct id from eab_stdnt_active WHERE home_college = 'CC')
    WHERE ID in (select * from cur_stu)
 order by ID","TaskStatusFeed"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.FirstTermFeed","-- Fields: nk,student,term,is_active
-- Model Name: cat.FirstTermFeed
-- Name: FirstTermFeed
-- Query:
-- get last five terms based on current term


WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),

-- Get RSTS codes of all types that keeps students counted in the class.
-- Alternates to STVRSTS_INCL_SECT_ENRL should include:
-- * STVRSTS_INCL_ASSESS
-- * STVRSTS_GRADABLE_IND
incl_rsts as (
  select stvrsts_code
    from stvrsts
   where stvrsts_incl_sect_enrl = 'Y'
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE', 'RW', 'RA') -- Marin registration codes
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),


-- Get maximum SFRSTCA record for a student/crn/term combo
max_sfrstca as (
select sfrstca_term_code as term_code,
       sfrstca_pidm as pidm,
       sfrstca_crn as crn,
       max(sfrstca_seq_number) as seq_number
  from sfrstca
 group by sfrstca_term_code, sfrstca_pidm, sfrstca_crn
),

-- Get the student ID and the earliest term in SFRSTCA for which they have a section
-- where the registration code counts them as enrolled in the section.
FirstTermFeed as (
select spriden_id as student,
       min(s.sfrstca_term_code) as first_term
  from sfrstca s join max_sfrstca ms on s.sfrstca_term_code = ms.term_code
                                    and s.sfrstca_pidm = ms.pidm
                                    and s.sfrstca_crn = ms.crn
                                    and s.sfrstca_seq_number = ms.seq_number
            left join SPRIDEN  		
              on s.sfrstca_pidm = spriden_pidm
              and spriden_change_ind is null
 where s.sfrstca_rsts_code in (select stvrsts_code from incl_rsts)
   and s.sfrstca_pidm in (select studentPidm from studentPopulation)
   and (s.sfrstca_term_code like '%10' -- Added by LH 012517 to eliminate terms outside configuration
   or s.sfrstca_term_code like '%80' -- Added by LH 012517 to eliminate terms outside configuration
   or s.sfrstca_term_code like '%60') -- Added by LH 012517 to eliminate terms outside configuration
 group by spriden_id
)

-- THE ACTUAL FEED
select distinct student as nk,
       student as student,
       first_term as term,
       'T' as is_active
  from FirstTermFeed","FirstTermFeed"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.Course","
--select * FROM COURSES
--select * FROM APPROVAL_STATUS 
WITH

validDepartments AS (
SELECT DISTINCT DEPTS_ID  nk
 FROM    DEPTS
 WHERE  DEPTS_ACTIVE_FLAG='A'
 -- AND DEPTS_TYPE='A'
),

validSubjects AS (
  SELECT DISTINCT SUBJECTS_ID nk
  FROM SUBJECTS 
/*  where SUBJ_DESC NOT IN ('Ability to Benefit', 'Basic Math Equivalency', 'Basic Skills Development', 
                   'Communications I Equivalency', 'Communications II Equivalency', 'Course Waiver') AND
        SUBJ_DESC NOT LIKE 'DO NOT USE%' AND
        SUBJECTS_ID not in ('COMM1', 'COMM2', 'COMMFND', 'MATHALG', 'MATHPRE', 'RDGCOMM', 'RDGFUND', 'RDGNONE', 'XKAP')
		*/
)

SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk,  
      ISNULL(COURSES.CRS_NAME,'') cd, 
       '1'  level,
      ISNULL(CRS_SUBJECT,'') subject, 
      ISNULL(CRS_DEPTS,'')    dept,  
      CASE
        WHEN CRS_TITLE IS NULL
          THEN 
          RTRIM(REPLACE(ISNULL(CRS_SHORT_TITLE,''), char(253) , ' ' )) 
      ELSE
          RTRIM(REPLACE(ISNULL(CRS_TITLE,''), char(253) , ' ' ))     
      END title,
      rtrim(ISNULL(REPLACE(REPLACE(REPLACE(CAST(ISNULL(COURSES.CRS_DESC,'') AS VARCHAR(1200)), char(253) , ' ' ), char(10), ''), char(13), ''),' ')) \\\""desc\\\"",
      '' course_type,
      LEFT(RIGHT(ISNULL(CRS_MIN_CRED,'0'), 8), 4) credits,
      CASE
        when APPROVAL_STATUS.CRS_STATUS = 'A' THEN 'T'
      ELSE 'F'
      END is_active
      
 FROM COURSES
   left Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID 
    AND APPROVAL_STATUS.POS = '1' 
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID 
	  -- AND   COURSE_DEPTS.POS = '1'
    Join validSubjects on validSubjects.nk = CRS_SUBJECT
    Join validDepartments on validDepartments.nk = CRS_DEPTS
 JOIN (SELECT distinct SEC_COURSE_NO,SEC_COURSE 
			FROM COURSE_SECTIONS cs 
				JOIN SEC_STATUSES
						ON cs.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID
							 AND SEC_STATUSES.POS = '1' 
								 and SEC_STATUSES.SEC_STATUS = 'A'
			WHERE SEC_TERM NOT LIKE 'P%'
			AND SEC_TERM NOT LIKE '%CE'
			AND SEC_TERM NOT LIKE '%CL'
			AND SEC_LOCATION  IN ('WCCTR','SLCTR','FDCTR','FLEX')
			)cslimited
			--	on cslimited.SEC_COURSE_NO = COURSES.COURSES_ID
                          on cslimited.SEC_COURSE = COURSES.COURSES_ID

  Where 
        COURSES.CRS_MIN_CRED > 0 
        --AND CRS_NO <> '999' AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
        --    CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  

order by 1,2
-- select * from COURSES ORDER BY 1 asc
--select * from SEC_STATUSES
-- SELECT * FROM COURSE_SECTIONS order by SEC_COURSE_NO","Course"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"inst.location","select
distinct a.facility_id as nk
, b.CAMPUS as campus
, a.DESCR as name
, '' latitude
, '' longitude
, '' address
, facility_type as comments
,  case when a.eff_status = 'A' then 'T'
else 'F' end as is_active

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('HT','MAIN')
and a.setid = 'TN293'
and a.effdt = (select max(c.effdt) from ps_facility_tbl c where a.facility_id = c.facility_id and a.setid = c.setid) ","Location"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"core.student","WITH pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,b.max_term as max_term_2
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select student_id, max_term
            from (
                  select b.emplid as student_id
                  , min(b.strm) as term
                  , max(b.strm) as max_term
                  --, b.strm as strm
                  from ps_stdnt_car_term b
                  where 1=1
                  and institution = 'DC279'
                  and ACAD_CAREER = 'CRED'
                  group by b.emplid
                  ) car_term
            where 1=1
            and max_term > 2154
           ) b
           on b.student_id = a.emplid
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid and institution = 'DC279')
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid and effdt = a.effdt and institution = 'DC279')
            and PROG_STATUS = 'AC'
and institution = 'DC279') c
            on a.emplid = c.emplid       
WHERE  1=1
        --and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
union --applicant pop
SELECT DISTINCT A.EMPLID student_id
, B.req_term as max_term
, B.REQ_TERM as max_term_2
, B.ACAD_PLAN
, A.ADM_APPL_DT as declare_dt
  FROM PS_ADM_APPL_DATA A, PS_ADM_APPL_PLAN B 

  WHERE ( A.INSTITUTION = 'DC279' 
     AND A.EMPLID = B.EMPLID 
     AND A.ACAD_CAREER = B.ACAD_CAREER 
     AND A.STDNT_CAR_NBR = B.STDNT_CAR_NBR 
     AND A.ADM_APPL_NBR = B.ADM_APPL_NBR 
     AND B.EFFDT = 
        (SELECT MAX(B_ED.EFFDT) FROM PS_ADM_APPL_PLAN B_ED 
        WHERE B.EMPLID = B_ED.EMPLID 
          AND B.ACAD_CAREER = B_ED.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ED.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ED.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ED.APPL_PROG_NBR 
          AND B_ED.EFFDT <= SYSDATE) 
    AND B.EFFSEQ = 
        (SELECT MAX(B_ES.EFFSEQ) FROM PS_ADM_APPL_PLAN B_ES 
        WHERE B.EMPLID = B_ES.EMPLID 
          AND B.ACAD_CAREER = B_ES.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ES.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ES.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ES.APPL_PROG_NBR 
          AND B.EFFDT = B_ES.EFFDT) 
     AND B.REQ_TERM > '2154' 
     AND NOT EXISTS (SELECT 'X' 
  FROM PS_STDNT_ENRL C 
  WHERE A.INSTITUTION = C.INSTITUTION 
     AND C.STDNT_ENRL_STATUS = 'E' 
     AND A.EMPLID = C.EMPLID) )
     AND B.ACAD_CAREER = 'CRED'
     and a.emplid not in (select distinct emplid from ps_acad_plan)

)      

Select distinct a.EMPLID as NK
, NVL(lower(replace(EMAIL.EMAIL_ADDR,'@email.vccs.edu','')), a.emplid) username
, Nvl(email.EMAIL_ADDR, a.emplid || '@missing.nova.edu') as email
, a.FIRST_NAME as FIRST_NAME
, a.LAST_NAME as LAST_NAME
, to_char(a.BIRTHDATE,'YYYY-MM-DD') as birthday
, null as veteran_ind
, case when pop.acad_plan in ('041','042','043') then 'DE'
else null end as enrollment_status
, 'T' as is_active

FROM   PS_STDNT_CAR_TERM b
       
       --MOST STUDENT GENERAL DATA  
       INNER JOIN PS_PERSONAL_DATA a 
               ON b.EMPLID = a.EMPLID 
               
       --E-MAIL  
       LEFT JOIN PS_EMAIL_ADDRESSES email 
              ON email.EMPLID = a.EMPLID 
                 AND email.E_ADDR_TYPE IN ( 'VCCS' )         
         --AND PREF_EMAIL_FLAG = 'Y'  
left join pop on a.emplid = pop.student_id

WHERE  1 = 1 
and b.emplid in (select student_id from pop)
ORDER  BY 1 ","Student"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.Subject","SELECT 
  stvsubj_code nk,
  stvsubj_desc \\\""name\\\"",
  'T' is_active
FROM stvsubj
UNION
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'T' as IS_ACTIVE
from dual","Subject"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.term","SELECT 
  a.STRM NK,
  a.DESCR \\\""NAME\\\"",
  a.ACAD_YEAR CAT_YR,
  To_char(regStart.FIRST_ENRL_DT, 'YYYY-MM-DD')  AS REGISTRATION_START_DT, 
  To_char(regEnd.LST_WD_WO_PEN_DT, 'YYYY-MM-DD') AS REGISTRATION_END_DT ,
  to_char(a.term_begin_dt, 'YYYY-MM-DD') TERM_START_DT,
  to_char(a.term_end_dt, 'YYYY-MM-DD') TERM_END_DT,
  'T' IS_ACTIVE
FROM PS_TERM_TBL a
       --REGISTRATION END 
       LEFT JOIN (SELECT STRM 
                         , Min(LST_WD_WO_PEN_DT) AS LST_WD_WO_PEN_DT 
                  FROM   PS_ACAD_CALTRM_TBL 
                  WHERE  ACAD_CAREER IN ( 'CRED' )  and INSTITUTION = 'DC279'          --Update, member-specific 
                  GROUP  BY STRM
                ) regEnd ON regEnd.STRM = a.STRM 
              
       --REGISTRATION START 
       LEFT JOIN (SELECT STRM 
                         , Min(FIRST_ENRL_DT) AS FIRST_ENRL_DT 
                  FROM   PS_SESSION_TBL 
                  WHERE  ACAD_CAREER IN ( 'CRED' )   and INSTITUTION = 'DC279'        --Update, member-specific 
                  GROUP  BY STRM
               ) regStart ON regStart.STRM = a.STRM 
WHERE INSTITUTION = 'DC279'
and acad_career = 'CRED'
ORDER BY 1 desc","Term"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.Section","WITH TERMLIST AS (
   SELECT DISTINCT SEC_TERM, TERM_START_DATE, TERM_END_DATE
     FROM COURSE_SECTIONS
     LEFT JOIN TERMS ON SEC_TERM = TERMS_ID
    WHERE SEC_TERM IS NOT NULL
      AND YEAR(TERM_START_DATE) > YEAR(GETDATE())-5
),

COURSES_TEMP AS (
SELECT distinct ISNULL(COURSES.CRS_NAME,'') nk 
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
 --       APPROVAL_STATUS.CRS_STATUS = 'A'
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
        COURSES.CRS_MIN_CRED > 0 
		AND CRS_ACAD_LEVEL = 'UG'
       AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
			-- AND CRS_DEPTS IN (SELECT DISTINCT DEPTS_ID
			--						 FROM    DEPTS
			--						 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A')
)

SELECT distinct SEC_TERM+'-'+SEC_NAME nk,
      COURSE_SECTIONS.COURSE_SECTIONS_ID cd,
     COURSE_SECTIONS.SEC_NO display_cd,
      ISNULL (COURSES.CRS_NAME, '') course,
      SEC_TERM term,

case when UPPER(SEC_LOCATION) IN ('LBC', 'UBC', 'MC', 'CWW') then UPPER(SEC_LOCATION)
        else 'OC' end
 campus, 
      cast(ISNULL(SEC_CAPACITY, 0) as Varchar) seats_offered,
	  CASE WHEN SEC_ALLOW_WAITLIST_FLAG = 'N' THEN '0'
			ELSE isnull(SEC_WAITLIST_MAX,'75')
			END  waitlist_capacity,  
      'F' is_unlimited_seating, 
       CASE
        WHEN  LAST_NAME IS NULL THEN 
           'TBD' 
        ELSE
           LAST_NAME  + ', ' + 
           REPLACE(ISNULL(FIRST_NAME,''), '`', '``') 
       END
       instructor_name,
      REPLACE(CONVERT(CHAR(10), SEC_START_DATE, 111) , '/','-') class_start_dt,
      COALESCE (REPLACE(CONVERT(CHAR(10), SEC_END_DATE, 111) , '/','-'), '2000-01-01') class_end_dt, -- Added COALESCE to handle null class_end_dt's
      null drop_start_dt,
      REPLACE(CONVERT(CHAR(10), SEC_START_DATE-1, 111) , '/','-')
       drop_end_dt,
      CASE
        WHEN  SEC_STATUS = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
  FROM COURSE_SECTIONS LEFT OUTER JOIN COURSE_SECTIONS_LS
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND COURSE_SECTIONS_LS.POS = '1'
  LEFT JOIN TERMS_LS
      ON SEC_TERM = TERMS_LS.TERMS_ID
  LEFT JOIN TERMS
      ON SEC_TERM = TERMS.TERMS_ID
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1'
  LEFT JOIN COURSES
    ON COURSES_ID = COURSE_SECTIONS.SEC_COURSE 
	 LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
  WHERE SEC_TERM IN (SELECT SEC_TERM FROM TERMLIST) AND COURSES.CRS_NAME IN (SELECT * FROM COURSES_TEMP)","Section"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.term","WITH REG_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('RW')
and sfrrsts_ptrm_code = '16'
)

select stvterm_code nk,
          stvterm_desc name,
          stvterm_acyr_code cat_yr,

          coalesce(to_char(sfrrsts_start_date, 'YYYY-MM-DD'),to_char(stvterm_start_date, 'YYYY-MM-DD'), '1900-01-01') registration_start_dt,
          coalesce(to_char(sfrrsts_end_date, 'YYYY-MM-DD'),to_char(stvterm_end_date, 'YYYY-MM-DD'), '1900-01-01') registration_end_dt,
          to_char(stvterm_start_date,'YYYY-MM-DD') term_start_dt,
          to_char(stvterm_end_date,'YYYY-MM-DD') term_end_dt,
          nvl((select 'F' from dual where substr(stvterm_code,5,2) in ('70','80','90')) ,'T') is_active
  from stvterm
  left join REG_DATES on stvterm_code = sfrrsts_term_code","Term"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.CourseType","-- Fields: nk,name,is_active
-- Model Name: cat.CourseType
-- Name: Course Type
-- Output: Course_Type_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get courseType data from Banner  
WITH courseType AS (
SELECT 
  stvschd_code nk,
  stvschd_desc \\\""name\\\"",
  'T' is_active
FROM stvschd
),

-- Assign default values
\\\""default\\\"" AS (
Select 
'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM courseType
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Course Type"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.Program","WITH maxEffectiveTerm AS (
SELECT MAX( SUBSTRING(ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) + 1, 4))  cat_yr,
      ACAD_PROGRAMS.ACAD_PROGRAMS_ID area_of_study
  FROM ACAD_PROGRAM_REQMTS
    LEFT OUTER JOIN ACAD_PROGRAMS
      ON SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
    LEFT OUTER JOIN PROGRAM_STATUS
      ON PROGRAM_STATUS.ACAD_PROGRAMS_ID = ACAD_PROGRAMS.ACAD_PROGRAMS_ID
        WHERE 
          POS = 1 AND 
          SUBSTRING(ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) + 1, 4) >  (YEAR(GETDATE()) - 5) and
          SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) <> 'NOND' and
          SUBSTRING(ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', ACAD_PROGRAM_REQMTS_ID) - 1) <> 'UNDEC'
		  GROUP BY ACAD_PROGRAMS.ACAD_PROGRAMS_ID
)
    
SELECT DISTINCT REPLACE(APR.ACAD_PROGRAM_REQMTS_ID , '*','$$') nk, 
       SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*', APR.ACAD_PROGRAM_REQMTS_ID) - 1)  cd,
       SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*', APR.ACAD_PROGRAM_REQMTS_ID) + 1, 4)  cat_yr,
       left(AP.ACPG_TITLE,50) name,
      ISNULL(REPLACE(CAST(AP.ACPG_DESC AS VARCHAR(2500)),  char(253)  , ' ' ), AP.ACPG_TITLE) as \\\""desc\\\"",
       CAST(CAST(APR.ACPR_CRED AS DECIMAL(7,2)) AS VARCHAR)  credits,
       '' enrollment_notes,
       '' registration_notes,
      isnull(AP.ACAD_PROGRAMS_ID,'NA') area_of_study,
       '' concentration,
      ACPG_DEGREE credential,
      LEFT(ACPG_CIP,5) as cip, 
      CASE 
	  WHEN ACPG_DEGREE IN
	  ('AA','AAB','AAS','AIS','ATS','AS','BRDG','DIP','APS','AGS') 
	  THEN 'T' ELSE 'F' END is_transfer,
        CASE 
          WHEN ACPG_STATUS not in ('A') THEN 'F' -- updated 12/19/16
          ELSE (CASE WHEN SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*', APR.ACAD_PROGRAM_REQMTS_ID) + 1, 4) = maxEffectiveTerm.cat_yr THEN 'T' ELSE 'F' END)
        END AS is_active
 FROM ACAD_PROGRAM_REQMTS APR
    LEFT OUTER JOIN ACAD_PROGRAMS AP
      ON SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*',APR.ACAD_PROGRAM_REQMTS_ID) - 1) = AP.ACAD_PROGRAMS_ID
    LEFT OUTER JOIN PROGRAM_STATUS PS
      ON PS.ACAD_PROGRAMS_ID = AP.ACAD_PROGRAMS_ID
	LEFT OUTER JOIN maxEffectiveTerm on 
        AP.ACAD_PROGRAMS_ID = maxEffectiveTerm.area_of_study
      WHERE  POS = 1 AND 
 --        (ACPG_STATUS = 'A' OR ACPG_STATUS = 'P') and
          SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, CHARINDEX('*',APR.ACAD_PROGRAM_REQMTS_ID) + 1, 4) >  (YEAR(GETDATE()) - 5) and
          SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*',APR.ACAD_PROGRAM_REQMTS_ID) - 1) <> 'NOND' and
          SUBSTRING(APR.ACAD_PROGRAM_REQMTS_ID, 1, CHARINDEX('*',APR.ACAD_PROGRAM_REQMTS_ID) - 1) <> 'UNDEC'

/*
		  SELECT ACAD_PROGRAM_REQMTS_ID,ACPR_CRED,APR.*  FROM ACAD_PROGRAM_REQMTS APR
		  SELECT ACPG_DEGREE,ACPG_DESC,ACPG_TITLE, AP.*  FROM ACAD_PROGRAMS AP
		  SELECT *  FROM PROGRAM_STATUS PS
		  SELECT * 
		  */","Program"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.Course","SELECT ISNULL(COURSES.CRS_NAME,'') nk,  
      ISNULL(COURSES.COURSES_ID,'') cd, 
       '1'  level,
      ISNULL(CRS_SUBJECT,'') subject, 
      ISNULL(CRS_DEPTS,'')    department,  
      CASE
        WHEN CRS_TITLE IS NULL
          THEN 
          RTRIM(REPLACE(ISNULL(CRS_SHORT_TITLE,''), char(253) , ' ' )) 
      ELSE
          RTRIM(REPLACE(ISNULL(CRS_TITLE,''), char(253) , ' ' ))     
      END title,
      
      rtrim(ISNULL(REPLACE(REPLACE(REPLACE(CAST(ISNULL(COURSES.CRS_DESC,'') AS VARCHAR(1200)), char(253) , ' ' ), char(10), ''), char(13), ''),' ')),
      
 --     ISNULL(COURSES_LS.CRS_COURSE_TYPES ,'')  
       CRS_CRED_TYPE as course_type,
      LEFT(RIGHT(ISNULL(CRS_MIN_CRED,'0'), 8), 4) credits,
      CASE
        when APPROVAL_STATUS.CRS_STATUS = 'A' THEN 'T'
      ELSE 'F'
      END is_active
      
  FROM COURSES
    Join APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
 --       APPROVAL_STATUS.CRS_STATUS = 'A'
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'
  Where 
        COURSES.CRS_MIN_CRED > 0 
		AND CRS_ACAD_LEVEL = 'UG'
       AND CRS_NO <> 'AAT' AND CRS_NO <> 'ABT' AND CRS_NO <> 'ACT' AND CRS_NO <> 'ASSET' AND CRS_NO <> 'COMM' AND 
            CRS_NO <> 'COMPAS' AND CRS_NO <> 'ELEC' AND CRS_NO <> 'MATH' AND CRS_NO <> 'PACE' AND CRS_NO <> 'RDG'  
	--		 AND CRS_DEPTS IN (SELECT DISTINCT DEPTS_ID
	--								 FROM    DEPTS
	--								 WHERE  DEPTS_ACTIVE_FLAG='A' AND DEPTS_TYPE='A')
	AND COURSES.CRS_NAME NOT IN (SELECT CRS_NAME FROM COURSES b  Join APPROVAL_STATUS c
      on b.COURSES_ID = c.COURSES_ID AND
        c.POS = '1' WHERE COURSES.COURSES_ID != b.COURSES_ID AND c.CRS_STATUS='A') 
","Course"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.EnrollmentApplication","with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),

CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-3*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC
),

STU_POP AS (
  SELECT SFRSTCR_PIDM AS PIDM
    FROM SFRSTCR
   WHERE SFRSTCR_TERM_CODE IN (SELECT * from cur_term)
  UNION
  SELECT SARADAP_PIDM AS PIDM
    FROM SARADAP
   WHERE SARADAP_TERM_CODE_ENTRY IN (SELECT * from cur_term)
),

email_list as (
  select goremal_pidm, goremal_email_address, goremal_version
    from goremal g join (select goremal_pidm pidm,
                                max(goremal_version) max_ver 
                         from goremal
                        where goremal_status_ind = 'A'
                          and goremal_emal_code = 'IND'
                        group by goremal_pidm) me on g.goremal_pidm = me.pidm
                                                 and g.goremal_version = me.max_ver
   where goremal_status_ind = 'A'
     and goremal_emal_code = 'IND'
     --and upper(goremal_email_address) not like '%HACC%'
),
app_list as (
  select p.spriden_id as nk,
         p.spriden_id as student,
         saradap_term_code_entry as app_term,
         saradap_appl_no as app_number,
         to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
         trim(goremal_email_address) as personal_email,
         'T' as is_active
    from saradap join max_list ml on saradap_pidm = ml.pidm
                                 and saradap_term_code_entry = ml.max_term
            left join email_list el on saradap_pidm = el.goremal_pidm
            left join spriden p on saradap_pidm = spriden_pidm
                               and spriden_change_ind is null
   where saradap_pidm in (select * from stu_pop)
     and SARADAP_APST_CODE= 'D'
)
select nk, student, app_term, app_number, app_dt, personal_email, is_active
  from app_list
 where to_date(app_dt, 'YYYY-MM-DD') >= to_date('2016-06-01', 'YYYY-MM-DD')","EnrollmentApplication"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.studentcourse","WITH pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,b.max_term as max_term_2
        ,a.acad_plan
        , TO_CHAR(a.declare_dt,'YYYY-MM-DD') as declare_dt
from ps_acad_plan a
inner join (select student_id, max_term
            from (
                  select b.emplid as student_id
                  , min(b.strm) as term
                  , max(b.strm) as max_term
                  --, b.strm as strm
                  from ps_stdnt_car_term b
                  where 1=1
                  and institution = 'DC279'
                  and ACAD_CAREER = 'CRED'
                  group by b.emplid
                  ) car_term
            where 1=1
            and max_term > 2154
           ) b
           on b.student_id = a.emplid
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid and institution = 'DC279')
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid and effdt = a.effdt and institution = 'DC279')
            and PROG_STATUS = 'AC'
and institution = 'DC279') c
            on a.emplid = c.emplid       
WHERE  1=1
        --and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'DC279') tbl 
                      on b.acad_plan = tbl.acad_plan 
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)
union --applicant pop
SELECT DISTINCT A.EMPLID student_id
, B.req_term as max_term
, B.REQ_TERM as max_term_2
, B.ACAD_PLAN
, TO_CHAR(A.ADM_APPL_DT,'YYYY-MM-DD') as declare_dt
  FROM PS_ADM_APPL_DATA A, PS_ADM_APPL_PLAN B 

  WHERE ( A.INSTITUTION = 'DC279' 
     AND A.EMPLID = B.EMPLID 
     AND A.ACAD_CAREER = B.ACAD_CAREER 
     AND A.STDNT_CAR_NBR = B.STDNT_CAR_NBR 
     AND A.ADM_APPL_NBR = B.ADM_APPL_NBR 
     AND B.EFFDT = 
        (SELECT MAX(B_ED.EFFDT) FROM PS_ADM_APPL_PLAN B_ED 
        WHERE B.EMPLID = B_ED.EMPLID 
          AND B.ACAD_CAREER = B_ED.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ED.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ED.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ED.APPL_PROG_NBR 
          AND B_ED.EFFDT <= SYSDATE) 
    AND B.EFFSEQ = 
        (SELECT MAX(B_ES.EFFSEQ) FROM PS_ADM_APPL_PLAN B_ES 
        WHERE B.EMPLID = B_ES.EMPLID 
          AND B.ACAD_CAREER = B_ES.ACAD_CAREER 
          AND B.STDNT_CAR_NBR = B_ES.STDNT_CAR_NBR 
          AND B.ADM_APPL_NBR = B_ES.ADM_APPL_NBR 
          AND B.APPL_PROG_NBR = B_ES.APPL_PROG_NBR 
          AND B.EFFDT = B_ES.EFFDT) 
     AND B.REQ_TERM > '2154' 
     AND NOT EXISTS (SELECT 'X' 
  FROM PS_STDNT_ENRL C 
  WHERE A.INSTITUTION = C.INSTITUTION 
     AND C.STDNT_ENRL_STATUS = 'E' 
     AND A.EMPLID = C.EMPLID) )
     AND B.ACAD_CAREER = 'CRED'
     and a.emplid not in (select distinct emplid from ps_acad_plan)

) ,
dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'NV280'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

)     

SELECT a.EMPLID || '$$' || a.ARTICULATION_TERM || '$$' || REPLACE(transConvert.SUBJECT, ' ', '') || REPLACE(transConvert.CATALOG_NBR, ' ', '') as NK 
, a.EMPLID                                                                          AS STUDENT
, a.ARTICULATION_TERM                                                             AS TERM
, COALESCE(REPLACE(COALESCE(transConvert.SUBJECT, a.COMP_SUBJECT_AREA),' ',''), 'ELEC')              
           || CASE 
                 WHEN (transConvert.CATALOG_NBR LIKE '9%' OR transConvert.CATALOG_NBR IS NULL) THEN '9100' 
                 ELSE REPLACE(transConvert.CATALOG_NBR, ' ','') 
               END                                                                AS COURSE  
, ''                                                                              AS SECTION
, NVL(a.CRSE_GRADE_INPUT, ' ')                                                    AS GRADE_CD
, 0                                                                               AS GRADE_POINTS  
, a.UNT_TAKEN                                                                     AS ATTEMPTED_CREDITS
, CASE 
            WHEN ( a.EARN_CREDIT = 'Y' AND ( a.REPEAT_CODE IN ( 'INCL' ) OR a.REPEAT_CODE = ' ' ) )            --Update, member-specific
              THEN a.UNT_TRNSFR 
            ELSE 0 
END                                                                               AS EARNED_CREDITS
, 'COMPLETED'                                                                     AS STATUS
, 'T'                                                                             AS is_active

FROM  PS_TRNS_CRSE_DTL a 
                  
        --DEEPER COURSE INFORMATION - INST SPECIFIC 
        LEFT JOIN (SELECT ACAD_GROUP 
                          , ACAD_CAREER 
                          , SUBJECT 
                          , CATALOG_NBR 
                          , CRSE_ID 
                          , INSTITUTION 
                          , CRSE_OFFER_NBR 
                   FROM   PS_CRSE_OFFER a 
                   WHERE  EFFDT = (SELECT Max(EFFDT) 
                                   FROM   PS_CRSE_OFFER 
                                   WHERE  CRSE_ID = a.CRSE_ID 
                                      AND EFFDT <= SYSDATE)) transConvert 
               ON transConvert.ACAD_CAREER = a.ACAD_CAREER 
                  AND transConvert.INSTITUTION = a.INSTITUTION 
                  AND transConvert.CRSE_ID = a.CRSE_ID 
                  AND transConvert.CRSE_OFFER_NBR = a.CRSE_OFFER_NBR 
                  
WHERE  1 = 1
 and a.EMPLID in (select student_id from pop)
 and a.institution = 'DC279'
  and a.ACAD_CAREER = 'CRED'","Student Course Transfer"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"cat.section","WITH Campuses as (
select stvcamp_code
from stvcamp
where stvcamp_code in ('NLC','NVC','PAC','SAC','SPC','O')
),

-- get drop dates from sfrrsts for specific registration drop codes
 sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('W1') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , CASE
      WHEN ssrattr_attr_code = 'ONC1' THEN 'NLC'
      ELSE NVL(stvcamp_code, 'DEFAULT')
    END AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt 
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt 
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt 
  , CASE WHEN ssbsect_ssts_code = '1' and ssbsect_camp_code in (select * from campuses) and ssbsect_max_enrl <> 0
          THEN 'T'
          ELSE 'F'
          END AS is_active 
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
  LEFT JOIN ssrattr ON ssrattr_crn = ssbsect_crn
                       AND ssrattr_term_code = ssbsect_term_code 
WHERE stvterm_code not like '8%'
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201620' AS term -- Member specific, change to a valid default term
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Section"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"core.Student","with now_term as (
  select stvterm_code as a_term
    from stvterm
   where stvterm_end_date >= sysdate
     and rownum = 1
   order by stvterm_code asc
),
TERM_LIST AS (
  select stvterm_code,
         (select a_term from now_term) as now_term
    from stvterm
   where stvterm_code <= (select * from now_term)
     and rownum < 5
   order by stvterm_code desc
),
FUTR_TERM as (
  select stvterm_code
    from stvterm
   where stvterm_end_date >= sysdate
),
ACTV_TERM as (
  select stvterm_code,
         now_term,
         case
           -- summer
           when substr(now_term,-2,2) = '50' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- spring
           when substr(now_term,-2,2) = '10' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '80' and substr(stvterm_code,1,4) < substr(now_term,1,4) then 'T'
              else 'F'
            end
           -- fall
           when substr(now_term,-2,2) = '80' then
            case
              when now_term = stvterm_code then 'T'
              when substr(stvterm_code,-2,2) = '10' and substr(stvterm_code,1,4) = substr(now_term,1,4) then 'T'
              else 'F'
            end         
           -- other
           else 'F'
         end as is_active
    from term_list
),
STU_LIST AS (
  select sfrstcr_pidm as pidm
    from sfrstcr
   where sfrstcr_term_code in (select stvterm_code from ACTV_TERM where is_active='T')
     and sfrstcr_rsts_code IN ('RE','AU','RW','RC','R1','R2','R3','R4',
                               'R5','R6','R9','RL','U1','U2','U3','U4',
                               'U5','U6','U9')
  union
  select saradap_pidm as pidm
    from saradap
   where saradap_term_code_entry in (select stvterm_code from FUTR_TERM)
),
CUR_STU AS (
  SELECT DISTINCT
    pidm,
    trim(coalesce((select goremal_email_address
            from goremal
           where goremal_emal_code IN ('BUS', 'CAMP')
             and goremal_pidm = pidm
             and goremal_email_address LIKE '%@%jscc.edu'
             and rownum = 1),
        (select goremal_email_address
            from goremal
           where goremal_emal_code IN ('BUS', 'CAMP')
           and goremal_pidm = pidm
             and goremal_email_address NOT LIKE '%@%jscc.edu'
             and rownum = 1),
          lower(spriden_id) || '@missing.students.jscc.edu')) email
    FROM STU_LIST join spriden on pidm = spriden_pidm
                              and spriden_change_ind is null
)
SELECT DISTINCT
  spriden_id nk,
  case
    when GOBTPAC_EXTERNAL_USER is not null then GOBTPAC_EXTERNAL_USER
    when instr(email, '@') > 0 THEN substr(email, 0, instr(email, '@')-1)
    else spriden_id||'@missing.jscc.edu'
  end username,
  cur_stu.email email,
  spriden_first_name first_name,
  spriden_last_name last_name,
  NVL(to_char(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') birthdate,
  'T' is_active
 FROM spriden LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm
              left join cur_stu on spriden_pidm = pidm
              left join gobtpac on spriden_pidm = gobtpac_pidm
WHERE spriden_change_ind IS NULL
  AND spriden_entity_ind = 'P' 
  and spriden_pidm in (select pidm from cur_stu)","Student"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"core.Faculty","SELECT DISTINCT spriden.spriden_id AS nk
	,spriden.spriden_first_name AS first_name
	,spriden.spriden_last_name AS last_name
	,spriden.spriden_id as username
	,goremal.goremal_email_address AS email
	,'' prefix
	,'' suffix
	,COALESCE(sibinstTot.sibinst_fstp_code, sibinstTot.sibinst_fctg_code, 'Staff') AS faculty_type --LAST RESORT PERBFAC_ACADEMIC_TITLE
	,CASE 
		WHEN FCSTstatus.STVFCST_ACTIVE_IND = 'A'   
			THEN 'Y'
		ELSE 'N'
		End As is_active                      -- MODIFY PER MEMBER
--	,SIRDPCL.SIRDPCL_DEPT_CODE AS STAFF_DEPT
	
--	,SIRDPCL.SIRDPCL_COLL_CODE AS STAFF_COLL
FROM (
	SELECT *
	FROM spriden
	WHERE spriden.spriden_change_ind IS NULL
	) spriden
	
	INNER JOIN ( --Instructor detail table
		SELECT *
		FROM sibinst a
		WHERE sibinst_term_code_eff = (
				SELECT MAX(sibinst_term_code_eff)
				FROM sibinst
				WHERE sibinst_pidm = a.sibinst_pidm
				)
		) sibinstTot
		ON spriden.spriden_pidm = sibinstTot.sibinst_pidm
		
	LEFT JOIN (
		SELECT  STVFCST_CODE       --Active Ind. Whether a faculty member is in a group that is considered active. 
			   ,STVFCST_DESC
			   ,STVFCST_ACTIVE_IND
		FROM STVFCST
		WHERE 1=1
		)FCSTstatus
		ON sibinstTot.SIBINST_FCST_CODE = FCSTstatus.stvfcst_code
		
	LEFT JOIN ( --email table
		SELECT *
		FROM goremal
		WHERE goremal_emal_code = 'E' -- MODIFY PER MEMBER
			AND goremal_status_ind = 'A'
			AND goremal_preferred_ind = 'Y'
		) goremal
		On Spriden.Spriden_Pidm = Goremal.Goremal_Pidm
	/*	--this is a secondary source of SSO ID - we can use the spriden ID for this
	LEFT JOIN gobtpac
		ON spriden.spriden_pidm = gobtpac.gobtpac_pidm
	*/ 	
	LEFT JOIN (
		SELECT * FROM SIRDPCL a
		WHERE SIRDPCL_ACTIVITY_DATE = (
		  SELECT MAX(SIRDPCL_ACTIVITY_DATE) FROM SIRDPCL WHERE a.SIRDPCL_PIDM = SIRDPCL_PIDM)
		) SIRDPCL
		  ON SIRDPCL.SIRDPCL_PIDM = spriden_pidm
		  
--WHERE 1 = 1 and goremal.goremal_email_address is not null 			-- wallace has no emails for any staff
ORDER BY 3","Faculty"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"cat.EnrollmentApplication","WITH CURRENT_STUDENTS AS (SELECT DISTINCT
   substring(P.ID,1,7) nk
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN STUDENT_PROGRAMS SP ON -- DON'T NECESSARILY NEED THIS FOR THIS SCRIPT BUT LEAVING IT
         P.ID = SUBSTRING(SP.STUDENT_PROGRAMS_ID,1,7)
      JOIN STPR_STATUSES SS ON         
         SP.STUDENT_PROGRAMS_ID = SS.STUDENT_PROGRAMS_ID
            AND         
         SS.POS = '1' 
            AND 
         SS.STPR_STATUS = 'A' 
      JOIN ACAD_PROGRAMS AP ON 
         SUBSTRING(SS.STUDENT_PROGRAMS_ID, 9, 20) = AP.ACAD_PROGRAMS_ID
            AND
         AP.ACAD_PROGRAMS_ID NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN ACAD_PROGRAMS_LS APL ON 
         AP.ACAD_PROGRAMS_ID = APL.ACAD_PROGRAMS_ID 
            AND 
         APL.POS = '1'),

		 ALL_STUDENTS AS (

SELECT nk from CURRENT_STUDENTS

UNION 

SELECT DISTINCT
   substring(P.ID,1,7) nk 
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STU'
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         substring(A.APPL_APPLICANT,1,7) NOT IN 
         (
            SELECT
               nk
            FROM
               CURRENT_STUDENTS
         )
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         T.TERM_START_DATE >= GETDATE()
            AND
         A.APPL_START_TERM = T.TERMS_ID
),

ENROLLMENT_APPLICATIONS AS (
SELECT DISTINCT
   substring(P.ID,1,7) nk,
   substring(P.ID,1,7) student,
   SUBSTRING(T.TERMS_ID,1,6) app_term,  --   SELECT * FROM APPLICATIONS
   A.APPLICATIONS_ID app_number,
   REPLACE(CONVERT(CHAR(10), A.APPL_DATE, 111) , '/','-') app_dt,
   PE.PERSON_EMAIL_ADDRESSES personal_email,
   'T' is_active
FROM
   PERSON P
      JOIN PERSON_PIN PP ON      
         P.ID = PP.PERSON_PIN_ID
      JOIN APPLICATIONS A ON
         P.ID = A.APPL_APPLICANT
            AND
         A.APPL_ACAD_PROGRAM NOT IN ('POSTSEC', 'DUALENR', 'NOND')
	--	    AND A.APPL_ADMIT_STATUS IN ('NEWAP','RADM1','RADM2')
      JOIN APPL_STATUSES AS APPS ON
         A.APPLICATIONS_ID = APPS.APPLICATIONS_ID
            AND
         APPS.POS = 1
            AND
         APPS.APPL_STATUS IN ('ACC', 'MOVE')
      JOIN TERMS T ON
         A.APPL_START_TERM = T.TERMS_ID
		  AND 
		  T.TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          T.TERMS_ID is not NULL and
          T.TERM_REG_START_DATE is not null
	  LEFT JOIN PEOPLE_EMAIL PE ON    
         P.ID = PE.ID
            AND  
         PE.PERSON_EMAIL_TYPES = 'STO'
	WHERE substring(P.ID,1,7) IN (SELECT * FROM ALL_STUDENTS))

	SELECT * FROM ENROLLMENT_APPLICATIONS EA1 
	
	where app_dt in 
	(
		SELECT max(app_dt) from ENROLLMENT_APPLICATIONS EA2 WHERE EA2.nk = EA1.nk
	)","EnrollmentApplication"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.StudentTerm","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get the max term for each program that has a corresponding term assigned.
getProgramMaxTerm AS (
SELECT DISTINCT sobcurr_program AS prog
  , stvterm_acyr_code AS acyr
  , MAX(sobcurr_term_code_init) AS programMaxTerm
FROM sobcurr
  LEFT JOIN stvterm ON stvterm_code = sobcurr_term_code_init
WHERE stvterm_code IS NOT NULL
  AND sobcurr_levl_code = 'UA' -- Filter Perimeter programs
  GROUP BY  sobcurr_program, stvterm_acyr_code
),

-- get student details and compute max term for a student
studentDetails AS (
SELECT sgbstdn_pidm
  , sgbstdn_program_1
  , sgbstdn_stst_code
  , sgbstdn_term_code_eff AS maxEffTerm
  , sgbstdn_term_code_ctlg_1
  , stvstst_reg_ind
FROM sgbstdn a
  LEFT JOIN stvstst ON stvstst_code = sgbstdn_stst_code
WHERE sgbstdn_program_1 IS NOT NULL
  AND stvstst_code IS NOT NULL
  AND sgbstdn_term_code_eff = (
                               SELECT MAX(sgbstdn_term_code_eff)
                               FROM sgbstdn
                                RIGHT JOIN stvterm ON stvterm_code = sgbstdn_term_code_eff
                               WHERE a.sgbstdn_pidm = sgbstdn_pidm
                                AND stvterm_end_date <= sysdate + 365
                              )
),

-- final query to extract student term data
studentTerm AS (
SELECT spriden_id || '$$' || studentDetails.maxEffTerm AS nk
  , spriden_id AS student
  , studentDetails.maxEffTerm AS term
  , studentDetails.sgbstdn_program_1 || '$$' || getProgramMaxTerm.acyr AS \\\""program\\\""
  , DECODE(studentDetails.stvstst_reg_ind, 'Y', 'T', 'F') AS is_active -- set the record active if the corresponding stvstst_reg_ind is set to 'Y'
FROM spriden
  RIGHT JOIN studentDetails ON spriden_pidm = studentDetails.sgbstdn_pidm
  JOIN getProgramMaxTerm ON getProgramMaxTerm.prog = studentDetails.sgbstdn_program_1
  JOIN studentPopulation ON studentPidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
)

-- wrapper query
select * from studentTerm","Student Terms"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.Section","with cur_term as (
  SELECT stvterm_code
    FROM stvterm
   WHERE UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     AND STVTERM_CODE not in ('000000', '900000', '999999')
   ORDER BY 1
),
sect_desc as (
  select SSRTEXT_TERM_CODE,
         ssrtext_crn,
         listagg(ssrtext_text, ' ') within group (order by SSRTEXT_SEQNO asc) as text
    from ssrtext
   where SSRTEXT_VERSION <> 0
   group by SSRTEXT_TERM_CODE, ssrtext_crn
),
sect_extract as (
  SELECT 
    ssbsect_crn || '$$' || ssbsect_term_code nk,
    ssbsect_crn cd, 
    ssbsect_subj_code || ssbsect_crse_numb course,
    ssbsect_term_code term,
    ssbsect_camp_code campus,
    ssbsect_max_enrl seats_offered,
    SSBSECT_WAIT_CAPACITY waitlist_capacity,
    CASE 
      WHEN ssbsect_max_enrl IS NOT NULL THEN 'N'
      ELSE 'Y'
    END is_unlimited_seating,
    CASE
      WHEN spriden_last_name IS NULL THEN 'TBD'
      ELSE spriden_last_name || ', ' || spriden_first_name
    END AS instructor_name,
    NVL(to_char(ssrmeet_start_date, 'YYYY-MM-DD'), '2000-01-01') class_start_dt,
    NVL(to_char(ssrmeet_end_date, 'YYYY-MM-DD'), '2000-01-02') class_end_dt,
    to_char(ssrmeet_start_date, 'YYYY-MM-DD') drop_start_dt,
    -- There is a bug that when this value is null it defaults to today's date.
    COALESCE(to_char(ssbsect_drop_cut_off_date, 'YYYY-MM-DD'), to_char(ssbacrl_drop_cut_off_date, 'YYYY-MM-DD'), to_char(ssrmeet_start_date + 30, 'YYYY-MM-DD')) drop_end_dt, 
    trim(sect_desc.text) as note,
    CASE
      WHEN ssbsect_ssts_code = 'A' AND ssrmeet_start_date > (sysdate - 184) THEN 'T'
      ELSE 'F'
    END is_active
  FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                                AND ssbsect_crn = sirasgn_crn
               LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
               LEFT JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                                AND ssbsect_term_code = ssrmeet_term_code 
               LEFT JOIN ssbacrl ON ssbsect_term_code = ssbacrl_term_code
               left join sect_desc on ssbsect_term_code = sect_desc.ssrtext_term_code
                                  and ssbsect_crn = sect_desc.ssrtext_crn
  WHERE spriden_change_ind IS NULL 
    AND sirasgn_primary_ind = 'Y'
    AND ssbsect_term_code in (select * from cur_term)
)
select * from sect_extract","Section"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"core.Advisor","-- Fields  nk,username,email,first_name,last_name,is_active
-- Model Name  core.Advisor
-- Name  Advisor
-- Output  Advisor_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- compute max term advisor record
WITH advisorMaxTerm AS (
SELECT sibinst_pidm
FROM sibinst baseTable
WHERE sibinst_fcst_code IN ('AD', 'FU')
  AND sibinst_advr_ind = 'Y'
  AND sibinst_term_code_eff = (SELECT MAX(sibinst_term_code_eff)
                              FROM sibinst compTable
                              WHERE compTable.sibinst_pidm = baseTable.sibinst_pidm
                              )
),

-- extract advisor data
\\\""advisor\\\"" AS (
SELECT spriden_id AS nk
  , spriden_id AS username
  , COALESCE((SELECT goremal_email_address
              FROM goremal
                WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'GC' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y') -- try to get campus email if active and preferred. Confirm email_code with BA/Member.
              , (SELECT goremal_email_address
                FROM goremal
                  WHERE goremal_pidm = spriden_pidm AND goremal_emal_code = 'GC' AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N') -- try to get campus email if active and not preferred. Confirm email_code with BA/Member.
              , LOWER(spriden_id) || '@missingemail.org') AS email -- Set default email address if none above are available.
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , 'T' AS is_active
FROM spriden
JOIN advisorMaxTerm ON advisorMaxTerm.sibinst_pidm = spriden_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent advisor record is extracted
)

-- Wrapper query
SELECT * FROM \\\""advisor\\\""
","Advisor"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.Term","SELECT DISTINCT SUBSTRING(TERMS_ID,1,6) nk,
      TERM_DESC name,
      CAST ( TERM_REPORTING_YEAR AS CHAR(4)) cat_yr,
      REPLACE(CONVERT(CHAR(10), TERM_REG_START_DATE, 111) , '/','-') registration_start_dt,
      REPLACE(CONVERT(CHAR(10), TERM_REG_END_DATE, 111) , '/','-') registration_end_dt,
      REPLACE(CONVERT(CHAR(10), TERM_START_DATE, 111) , '/','-') term_start_dt,
      REPLACE(CONVERT(CHAR(10), TERM_END_DATE, 111) , '/','-') term_end_dt, 
     case when 
	
	(SUBSTRING(TERMS_ID,1,6) like '%CE%' OR SUBSTRING(TERMS_ID,1,6) like 'P%')
		THEN 'F' ELSE 'T' END AS is_active 
--per NAVBA-339
  --as line
  FROM TERMS
    where TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          TERMS_ID is not NULL and
          TERM_REG_START_DATE is not null

","Term"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.Section","-- Fields: nk,cd,course,term,campus,seats_offered,is_unlimited_seating,instructor_name,class_start_dt,class_end_dt,drop_start_dt,drop_end_dt,withdraw_end_dt,is_active
-- Model Name: cat.Section
-- Name: Section
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query: 

-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , NVL(stvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , CASE WHEN ssbsect_ssts_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- Identify if section is active by comparing the value in ssbsect_ssts_code. The default is 'A'. Confirm with BA/Member if this is different at their college.
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
-- WHERE ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Comented out by default. Confirm with BA/Member.
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM section
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Sections"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.SeatsAvail","WITH seatsAvail AS (
SELECT ssbsect_crn || '$$' || ssbsect_term_code AS nk -- This is also the foreign key to Section. Ensure nk matches Section nk.
  , ssbsect_seats_avail AS avail_seats
  , 'T' AS is_active
FROM ssbsect
WHERE 1=1
  AND ssbsect_ssts_code = 'A' -- Filter active sections
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms. we do not need to extract seats available for past terms.
--  AND ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default. Confirm with BA/Member.
)

-- wrapper query
SELECT * FROM seatsAvail","SeatsAvail"
1119,"Albany Technical College",10465,"",48173,"Navigate:Albany Technical College",47972,"Navigate",20,"cat.CourseType","WITH courseType AS (
	SELECT stvschd_code nk,
	       stvschd_desc \\\""name\\\"",
	       'T' is_active
	  FROM stvschd
),

-- Assign default values
defaultValues AS (
	Select 'DEFAULT' as NK
	       , 'DEFAULT' as \\\""Name\\\""
	       , 'F' as IS_ACTIVE
	  from dual
),

-- Combine Banner data and default values
finalDataSet AS(
	SELECT * FROM courseType
	UNION
	SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Course Type"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"catcc.TestSubject","-- Fields: nk,name,max_score,is_active
-- Model Name: catcc.TestSubject
-- Name: TestSubject_CC
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version: pjf4g1
-- Author: James DeBolt
-- Query:

WITH 

defaultValues AS (
  SELECT
    'default' nk,
    'default' \\\""name\\\"",
    '0000.00' max_score,
    'F'       is_active
    FROM dual
),

validTestSubjects AS (

SELECT DISTINCT 
    NON_COURSES_ID nk ,
    NCRS_SHORT_TITLE \\\""name\\\"",
    TO_CHAR(CAST(NCRS_MAX_SCORE AS NUMBER(5,0))) max_score,
    'T' is_active

  FROM COLL_PRODUCTION.NON_COURSES
    Where NON_COURSES_ID IS NOT NULL  AND 
          NON_COURSES.NCRS_CATEGORY_IDX != 'OTHER'  AND
		  NCRS_MAX_SCORE IS NOT NULL
),

finalDataSet AS (
  SELECT * FROM validTestSubjects
--  UNION 
 -- SELECT * FROM defaultValues
)

SELECT * FROM finalDataSet","TestSubject"
1004,"Western Wyoming Community College",10385,"",47973,"Navigate:Western Wyoming Community College",47972,"Navigate",20,"cat.Course","SELECT distinct RTRIM(ISNULL(COURSES.CRS_NAME,'')) as nk, 
      ISNULL(COURSES.CRS_NAME,'') as cd, 
       '1' as level,
      ISNULL(CRS_SUBJECT,'') as subject, 
      ISNULL(CRS_DEPTS,'') as dept, 
      CASE
        WHEN CRS_TITLE IS NULL THEN RTRIM(REPLACE(ISNULL(CRS_SHORT_TITLE,''), NCHAR(238) , ' ' )) 
        ELSE RTRIM(REPLACE(ISNULL(CRS_TITLE,''), NCHAR(238) , ' ' ))     
      END as title, 
      rtrim(ISNULL(REPLACE(REPLACE(REPLACE(REPLACE(CAST(ISNULL(COURSES.CRS_DESC,'') AS VARCHAR(1200)), NCHAR(238) , ' ' ), char(10), ''), char(13), ''), char(253), ' '),' ')) as [desc],
      CRS_CRED_TYPE as course_type,
      LEFT(RIGHT(ISNULL(CRS_MIN_CRED,'0'), 8), 4) as credits,
      CASE
        when APPROVAL_STATUS.CRS_STATUS = 'A' THEN 'T'
        ELSE 'F'
      END as is_active
  FROM COURSES JOIN APPROVAL_STATUS 
      on COURSES.COURSES_ID = APPROVAL_STATUS.COURSES_ID AND
        APPROVAL_STATUS.POS = '1' 
    Join COURSE_DEPTS
      ON COURSES.COURSES_ID = COURSE_DEPTS.COURSES_ID AND
         COURSE_DEPTS.POS = '1'","Course"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"core.Student","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE SUBSTR(stvterm_code, 1, 5) <= (SELECT MIN(SUBSTR(stvterm_code, 1, 5))
                                     FROM stvterm
                                     WHERE stvterm_start_date > sysdate)
ORDER BY 1 DESC
)
WHERE ROWNUM < 25
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , NVL(CCCD_EAB_THIRD_PARTY_ID.USERID, spriden_id) as username
  --, spriden_id as username
  , TRIM(COALESCE(
                (SELECT goremal_email_address FROM CCCD_EAB_EMAIL
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'CCCD' AND rownum < 2 -- try to get campus email. Confirm goremal_emal_code with BA/Member.
                )
                , (SELECT goremal_email_address FROM CCCD_EAB_EMAIL
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'Y' AND goremal_emal_code = 'HOME' AND rownum < 2 -- try to get Personal email. Confirm goremal_emal_code with BA/Member.
                  )
                , (SELECT goremal_email_address FROM CCCD_EAB_EMAIL
                  WHERE goremal_pidm = spriden_pidm AND goremal_status_ind = 'A' AND goremal_preferred_ind = 'N' AND goremal_emal_code = 'CCCD' AND rownum < 2 -- try to get campus email even if goremal_preferred_ind set to 'N'. Confirm goremal_emal_code with BA/Member.
                  )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM CCCD_EAB_GENERAL_PERSON -- Custom view at Coastline since no access to SPRIDEN
  LEFT JOIN CCCD_EAB_THIRD_PARTY_ID on spriden_pidm = person_uid -- Custom view to get usernames at Coastline. Not all spriden_pidm's may exist in this view
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  -- LEFT JOIN spbpers ON spriden_pidm = spbpers_pidm -- Not needed at Coastline as SPBPERS columns already included in above view
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student","Students"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.term","SELECT 
  a.STRM NK,
  a.DESCR \\\""NAME\\\"",
  a.ACAD_YEAR CAT_YR,
  To_char(regStart.FIRST_ENRL_DT, 'YYYY-MM-DD')  AS REGISTRATION_START_DT, 
  nvl(To_char(regEnd.LST_WD_WO_PEN_DT, 'YYYY-MM-DD'),To_char(regStart.FIRST_ENRL_DT+1, 'YYYY-MM-DD')) AS REGISTRATION_END_DT ,
  to_char(a.term_begin_dt, 'YYYY-MM-DD') TERM_START_DT,
  to_char(a.term_end_dt, 'YYYY-MM-DD') TERM_END_DT,
  'T' IS_ACTIVE
FROM PS_TERM_TBL a
       --REGISTRATION END 
       LEFT JOIN (SELECT STRM 
                         , Min(LST_WD_WO_PEN_DT) AS LST_WD_WO_PEN_DT 
                  FROM   PS_ACAD_CALTRM_TBL 
                  WHERE  ACAD_CAREER IN ( 'CRED' )  and INSTITUTION = 'TN293'          --Update, member-specific 
                  GROUP  BY STRM
                ) regEnd ON regEnd.STRM = a.STRM 
              
       --REGISTRATION START 
       LEFT JOIN (SELECT STRM 
                         , Min(FIRST_ENRL_DT) AS FIRST_ENRL_DT 
                  FROM   PS_SESSION_TBL 
                  WHERE  ACAD_CAREER IN ( 'CRED' )   and INSTITUTION = 'TN293'        --Update, member-specific 
                  GROUP  BY STRM
               ) regStart ON regStart.STRM = a.STRM 
WHERE INSTITUTION = 'TN293'
and acad_career = 'CRED'
ORDER BY 1 desc","Term"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.SeatsAvail","SELECT
  nk,
  avail_seats, 
  CASE 
    WHEN is_active = 'Y' THEN 'T' 
    ELSE 'F'
  END AS is_active
  FROM EAB_SECT_SEATS_AVAIL
 WHERE campus LIKE 'C%'
   and academic_period = (
   	select min(nk) nk
  	  from eab_term
     where TO_DATE(TERM_END_DT, 'YYYY-MM-DD') >= sysdate)","Seats Available"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Program","-- determine most recent term for each Program by finding the max term for each program in sobcurr
WITH maxEffectiveTerm AS (
  SELECT MAX(sobcurr_term_code_init) maxTerm, sobcurr_program pgrm
    FROM sobcurr
   GROUP BY sobcurr_program
),

programCredits as (
  select smbpgen.smbpgen_program,
         smbpgen.smbpgen_term_code_eff,
         smbpgen.smbpgen_active_ind,
         nvl(smbpgen.smbpgen_req_credits_overall, 0.0) as credits
    from smbpgen join (select sMBPGEN_PROGRAM, max(smbpgen_term_code_eff) max_term
                         from smbpgen
                        where smbpgen_active_ind = 'Y'
                        group by sMBPGEN_PROGRAM) s on smbpgen.smbpgen_program = s.smbpgen_program
                                                   and smbpgen.smbpgen_term_code_eff = s.max_term
),

-- Collection of program descriptions
prog_desc as (
  select smrpcmt_program, listagg(smrpcmt_text, ' ') within group (order by smrpcmt_text_seqno asc) smrpcmt_text -- within group (order by smrpcmt_prnt_code asc) as smrpcmt_text
    from smrpcmt s1 join (select s2.smrpcmt_program as prgm, max(s2.smrpcmt_term_code_eff) as term
                            from smrpcmt s2 group by s2.smrpcmt_program) mx on s1.smrpcmt_term_code_eff = Mx.term
                                                                           and s1.smrpcmt_program = Mx.Prgm
   where --smrpcmt_prnt_code is not null
      smrpcmt_text is not null
   group by smrpcmt_program
   order by smrpcmt_program
),

-- extract program data from Banner
program AS (
  SELECT DISTINCT
      sobcurr_program || '$$' || stvterm_acyr_code AS nk,
      sobcurr_program AS cd,
      TO_NUMBER(stvterm_acyr_code) AS cat_yr,
       smrprle_program_desc     	AS \\\""name\\\"",
      replace(replace(coalesce(smrpcmt_text, smrprle_program_desc, 'None'),chr(10)),chr(13)) AS \\\""desc\\\"",
      NVL(credits, 0.0) AS CREDITS, -- confirm degree code to credits conversion with BA/Member. This logic may differ for different colleges and will need to be adjusted accordingly.
      '' AS enrollment_notes,
      '' AS registration_notes,
       -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' --- instead of underscores '_' Confirm with BA/Memeber.
      sobcurr_program AS area_of_study,
      '' AS concentration,
      sobcurr_degc_code AS \\\""credential\\\"",
      DECODE (stvmajr_cipc_code,
              null,
              null,
              SUBSTR(stvmajr_cipc_code,1,2)||'.'||SUBSTR(stvmajr_cipc_code,3)) AS cip,
      CASE
        WHEN sobcurr_degc_code IN ('AA','AS') THEN 'T'
        ELSE 'F'
      END AS is_transfer, -- Confirm with BA
      CASE
        WHEN sobcurr_term_code_init = maxEffectiveTerm.maxTerm THEN 'T'
        ELSE 'F'
      END AS is_active
    FROM sobcurr LEFT JOIN stvterm ON sobcurr_term_code_init = stvterm_code
                 LEFT JOIN smrprle ON smrprle_program = sobcurr_program
                 LEFT JOIN maxEffectiveTerm ON maxEffectiveTerm.pgrm = sobcurr_program
                 LEFT JOIN stvmajr ON stvmajr_code = sobcurr_program --(SUBSTR(sobcurr_program,1,CAST(INSTR(sobcurr_program,'_') AS NUMBER)-1))   -- Logic may be member specific depending on how sobcurr_program is defined at the college. For example, the data could contain dashes '-' instead of underscores '_'. Confirm with BA/Memeber. Should match with area_of_study in SELECT portion of query.
                 LEFT JOIN programCredits ON sobcurr_program = smbpgen_program
                 LEFT JOIN prog_desc on sobcurr_program = smrpcmt_program
   where  smbpgen_term_code_eff >= '201212' -- per Bruce
    and  smbpgen_active_ind = 'Y' -- per Bruce
)

-- Wrapper query
SELECT * FROM program
","Programs"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"core.student","WITH pop as (
  
select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,b.max_term as max_term_2
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select student_id, max_term
            from (
                  select b.emplid as student_id
                  , min(b.strm) as term
                  , max(b.strm) as max_term
                  --, b.strm as strm
                  from ps_stdnt_car_term b
                  where 1=1
                  and institution = 'TN293'
                  and ACAD_CAREER = 'CRED'
                  group by b.emplid
                  ) car_term
            where 1=1
            and term = (
                   select distinct strm
                   from (select strm, ACAD_CAREER, institution 
                          from PS_TERM_TBL 
                          where strm <= (SELECT MIN(SUBSTR(STRM, 1, 2) || SUBSTR(STRM, 3, 1)+1 || SUBSTR(STRM, 4, 1)) AS strm
                                         FROM PS_TERM_TBL
                                         WHERE STRM = (select MIN(strm) AS strm 
                                                       from PS_TERM_TBL 
                                                       where acad_career = 'CRED'
                                                          AND term_end_dt > sysdate))
                   order by strm desc) a
                    where 
                    rownum < 8
                    --and term_begin_dt < '31-JUL-15'
                    and institution = 'TN293' 
                    and ACAD_CAREER = 'CRED'
                    and a.strm = term
                    )
           ) b
           on b.student_id = a.emplid
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid and effdt=a.effdt)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid       
WHERE  1=1
        --and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                      where a.emplid = b.emplid 
                      )
        and a.effseq = (select max(effseq) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                        where a.emplid = b.emplid 
                        and a.effdt = b.effdt)
        and a.plan_sequence = (select min(plan_sequence) from ps_acad_plan b
                      inner join (select distinct acad_plan 
                                  from ps_acad_plan_tbl 
                                  where institution = 'TN293') tbl 
                      on b.acad_plan = tbl.acad_plan 
                              where a.emplid = b.emplid
                              and a.effdt = b.effdt
                              and a.effseq = b.effseq)

)                  

Select distinct a.EMPLID as NK
, NVL(lower(replace(EMAIL.EMAIL_ADDR,'@email.vccs.edu','')), a.emplid) username
, Nvl(email.EMAIL_ADDR, a.emplid || '@missing.nova.edu') as email
, a.FIRST_NAME as FIRST_NAME
, a.LAST_NAME as LAST_NAME
, to_char(a.BIRTHDATE,'YYYY-MM-DD') as birthday
, 'T' as is_active

FROM   PS_STDNT_CAR_TERM b
       
       --MOST STUDENT GENERAL DATA  
       INNER JOIN PS_PERSONAL_DATA a 
               ON b.EMPLID = a.EMPLID 
               
       --E-MAIL  
       LEFT JOIN PS_EMAIL_ADDRESSES email 
              ON email.EMPLID = a.EMPLID 
                 AND email.E_ADDR_TYPE IN ( 'VCCS' )         --Update, member-specific looking for campus email
         --AND PREF_EMAIL_FLAG = 'Y'  


WHERE  1 = 1 
and b.emplid in (select student_id from pop)
ORDER  BY 1 ","Student"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.StudentCourse","-- get five terms including next available term for registration based on term with start date greater than current date
WITH getLastXTerms AS (
SELECT szvterm_code
FROM szvterm
WHERE szvterm_code <= (
                      SELECT MIN(szvterm_code)
                      FROM szvterm
                        WHERE szvterm_start_date > sysdate
                      )
AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
AND szvterm_vpdi_code = 'ACC'
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code LIKE 'R_'
  AND sfrstcr_vpdi_code = 'ACC'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = saradap_term_code_entry
WHERE 1=1
      AND saradap_vpdi_code = 'ACC'
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
  LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
  WHERE 
        szvcamp_vpdi_code = 'ACC'
        AND szvcamp_eab_enable = 'Y'
        AND sfrstca_vpdi_code = 'ACC'
        AND ssbsect_vpdi_code = 'ACC'
        AND substr(sfrstca_term_code, 1, 1) NOT IN ('6', '7', '8')
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr 
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
    WHERE sfrstcr_vpdi_code = 'ACC'
          AND ssbsect_vpdi_code = 'ACC'
          AND substr(sfrstcr_term_code, 1, 1) NOT IN ('6', '7', '8')
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
WHERE ssbsect_vpdi_code = 'ACC'
      AND substr(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
UNION
SELECT 'A*' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'B*' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C*' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D*' AS code
  , 1.0 AS gradePoint
FROM dual
UNION
SELECT 'CPL' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'PLA' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'S/A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'S/B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'S/C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'P' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'S' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'S*' AS code
  , 2.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || szvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , szvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code LIKE 'R_' -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code LIKE 'R_'  AND szvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code LIKE 'R_' AND szvterm_start_date <= sysdate AND szvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code LIKE 'R_' AND sfrstcr_grde_code IN ('A%', 'B%', 'C%', 'D%', 'S%', 'CPL', 'P%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN szvterm ON szvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
  LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
WHERE 1=1
  AND szvcamp_vpdi_code = 'ACC'
  AND szvcamp_eab_enable = 'Y'
  AND substr(sobptrm_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND substr(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND substr(sfrstcr_term_code, 1, 1) NOT IN ('6', '7', '8')
  AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
  AND ssbsect_vpdi_code = 'ACC'
  AND szvterm_vpdi_code = 'ACC'
  AND sfrstcr_vpdi_code = 'ACC'
  AND sobptrm_vpdi_code = 'ACC'
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                    AND substr(shrtckn_term_code, 1, 1) NOT IN ('6', '7', '8')
                    AND shrtckn_vpdi_code = 'ACC'
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm,
       shrtckg_tckn_seq_no,
       maxSeq,
       shrtckg_term_code term_code
FROM
(
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
  ,shrtckg_term_code
FROM shrtckg, getLastXTerms
WHERE shrtckg_vpdi_code = 'ACC'
      AND substr(shrtckg_term_code, 1, 1) NOT IN ('6', '7', '8')
      and szvterm_code = shrtckg_term_code
GROUP BY shrtckg_term_code, shrtckg_pidm, shrtckg_tckn_seq_no) JOIN shrtckn ON shrtckn_term_code = shrtckg_term_code
WHERE shrtckn_pidm = shrtckg_pidm
      AND shrtckn_term_code = shrtckg_term_code
      AND shrtckg_tckn_seq_no = shrtckn_seq_no
      AND shrtckn_vpdi_code = 'ACC'
),

-- extract student course data for completed courses. 
-- This query extracts from shrtckn and shrtckg and because of that needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , szvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN szvterm ON szvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            AND maxCompCrseGrade.term_code = shrtckg.shrtckg_term_code
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
  LEFT JOIN stugrcccs.szvcamp ON ssbsect_camp_code = szvcamp_code
WHERE szvcamp_vpdi_code = 'ACC'
      AND szvcamp_eab_enable = 'Y'
      AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
      AND substr(shrtckn_term_code, 1, 1) NOT IN ('6', '7', '8')
      AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
      AND substr(ssbsect_term_code, 1, 1) NOT IN ('6', '7', '8')
      AND substr(shrtckg_term_code, 1, 1) NOT IN ('6', '7', '8')
      AND shrtckn_vpdi_code = 'ACC'
      AND szvterm_vpdi_code = 'ACC'
      AND ssbsect_vpdi_code = 'ACC'
      AND shrtckg_vpdi_code = 'ACC'
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","Student Courses"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"major_lkp","select major_cd,
major_name,
cip_cd
 from atlantatech.osf_mjl_major_lkp","SSF_major_lkp"
1097,"Trident Technical College",10456,"",48087,"Navigate:Trident Technical College",47972,"Navigate",20,"cat.Subject","WITH 

defaultValues AS (
  SELECT
    'default' nk,
    'default' \\\""name\\\"",
    'F'       is_active
  FROM dual
),

validSubjects AS (
  SELECT DISTINCT SUBJECTS_ID nk,
      SUBJ_DESC \\\""name\\\"",
        'T' is_active
    FROM COLL_PRODUCTION.SUBJECTS 
    WHERE SUBJ_DESC NOT IN ('Ability to Benefit', 'Basic Math Equivalency', 
                          'Basic Skills Development', 'Communications I Equivalency', 
                          'Communications II Equivalency', 'Course Waiver') AND
          SUBJ_DESC NOT LIKE 'DO NOT USE%'
),

finalDataSet AS (
  SELECT * FROM validSubjects
  UNION 
  SELECT * FROM defaultValues
)

SELECT * FROM finalDataSet","Subject"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.section","WITH 
SFRRSTS_DROP_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.Sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('DW')

--and rsts.Sfrrsts_Term_Code = 201110 and rsts.Sfrrsts_ptrm_code = '16'
),
SFRRSTS_WITHDRAW_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('WW')
)

SELECT
  a.SSBSECT_CRN  || '$$' || a.SSBSECT_TERM_CODE  AS NK
  , a.SSBSECT_CRN AS CD
  , case when a.SSBSECT_SCHD_CODE <> 'B'
  then a.SSBSECT_SUBJ_CODE || a.SSBSECT_CRSE_NUMB
  else a.SSBSECT_SUBJ_CODE || a.SSBSECT_CRSE_NUMB || a.SSBSECT_SCHD_CODE end AS COURSE
  , stvterm.stvterm_code as term 
  , nvl(stvcamp_code,'DEFAULT') as CAMPUS
  , a.SSBSECT_MAX_ENRL AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , CASE WHEN instructor.SPRIDEN_LAST_NAME IS NULL THEN 'TBD' 
  ELSE instructor.SPRIDEN_LAST_NAME || ', ' || instructor.SPRIDEN_FIRST_NAME
  END AS INSTRUCTOR_NAME
  , nvl(to_char(b.SSRMEET_START_DATE,'YYYY-MM-DD'),'2000-01-01') AS CLASS_START_DT
  , nvl(to_char(b.SSRMEET_END_DATE, 'YYYY-MM-DD'), '2000-01-02') AS CLASS_END_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_Start_Date,'YYYY-MM-DD'), to_char(ssrmeet_start_date, 'YYYY-MM-DD'),'2000-01-01') as DROP_START_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as DROP_END_DT
  , coalesce(to_char(SFRRSTS_WITHDRAW_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as WITHDRAW_END_DT
  , CASE WHEN a.SSBSECT_SSTS_CODE = 'A' THEN 'T' ELSE 'F' END AS IS_ACTIVE
FROM ssbsect a
  --creating campus lookup
  join stvcamp on stvcamp_code = SSBSECT_CAMP_CODE
  --creating term lookup
  join stvterm on stvterm_code = ssbsect_term_code
  --instructor info
  LEFT OUTER JOIN (
    SELECT SIRASGN_TERM_CODE, SIRASGN_CRN, SIRASGN_PIDM, SIRASGN_PRIMARY_IND, SPRIDEN_ID, SPRIDEN_FIRST_NAME, SPRIDEN_LAST_NAME
    FROM SIRASGN a
      JOIN SPRIDEN b ON a.sirasgn_pidm = b.spriden_pidm AND b.spriden_change_ind IS NULL  
      WHERE SIRASGN_CATEGORY = '01' AND SIRASGN_PRIMARY_IND = 'Y'
    )  instructor
    ON instructor.SIRASGN_TERM_CODE = a.SSBSECT_TERM_CODE AND instructor.SIRASGN_CRN = a.SSBSECT_CRN
  --meeting info
  LEFT OUTER JOIN (
    SELECT * FROM SSRMEET)
     b ON b.SSRMEET_TERM_CODE = a.SSBSECT_TERM_CODE AND b.SSRMEET_CRN = a.SSBSECT_CRN
  --joins for drop and withdraw dates
  LEFT JOIN SFRRSTS_DROP_DATES on ssbsect_term_code = SFRRSTS_DROP_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_DROP_DATES.Sfrrsts_ptrm_code
  LEFT JOIN SFRRSTS_WITHDRAW_DATES on ssbsect_term_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_ptrm_code
  left join scrlevl
  on a.SSBSECT_SUBJ_CODE = scrlevl_subj_code
  and a.SSBSECT_CRSE_NUMB = scrlevl_crse_numb
where 1=1
and SCRLEVL_LEVL_CODE = 'NC'                      
 
UNION
  select 'UNKNOWN' as NK
  , 'UNKNOWN' as CD
  , 'UNKNOWN' as COURSE
  , '201410' as TERM    --[Member Specific] Change to a valid default term
  ,  'DEFAULT' as CAMPUS
  ,  0 AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , 'TBD' AS INSTRUCTOR_NAME
  , '2000-01-01' AS CLASS_START_DT
  , '2000-01-01' AS CLASS_END_DATE
  , '2000-01-01' AS DROP_START_DT
  , '2000-01-01' AS DROP_END_DT
  , '2000-01-01' AS WITHDRAW_END_DT
  , 'T' AS IS_ACTIVE
  from dual
  order by 2,4 ","Section"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"inst.Location","SELECT DISTINCT REPLACE(ROOMS_ID, '*', ' ')  nk, -- ROOM BLDG AND ROOM ID
  ISNULL(BLDG_LOCATION,'') campus,
      B.BLDG_DESC + ' - ' + replace(ROOM_NAME, '*', ' ') + REPLACE(ROOMS_ID, '*', ' ')   name,
      '' latitude,
      '' longitude,
      isnull(B.BLDG_CITY,'') + ', ' + isnull(B.BLDG_STATE,'') + ' ' + isnull(B.BLDG_ZIP,'') address,
      '' comments,
      'T' is_active

 FROM ROOMS_VIEW
 LEFT JOIN BUILDINGS B
 ON B.BUILDINGS_ID = ROOMS_BLDG_ID  

--ROOMS -- changed 20161114
-- SELECT * FROM ROOMS_VIEW
-- select * from BUILDINGS where BLDG_LATITUDE is not null
-- select * from ROOMS_VIEW
-- ","Location"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.sectiontime","SELECT ssbsect_crn || '$$' || ssbsect_term_code || '$$' || COALESCE(day_of_week, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') || '$$' nk, 
       ssbsect_crn || '$$' || ssbsect_term_code section,
       CASE day_of_week
         WHEN 'Sunday' THEN 1
         WHEN 'Monday' THEN 2
         WHEN 'Tuesday' THEN 3
         WHEN 'Wednesday' THEN 4
         WHEN 'Thursday' THEN 5
         WHEN 'Friday' THEN 6
         WHEN 'SATURDAY' THEN 7
         ELSE 8
       END day_of_week,
       CASE 
         WHEN ssrmeet_begin_time IS NOT NULL THEN SUBSTR(ssrmeet_begin_time, 1, 2) || ':' || SUBSTR(ssrmeet_begin_time, 3, 2) || ':00'
         ELSE NULL
       END from_tm, 
       CASE 
         WHEN ssrmeet_end_time IS NOT NULL THEN SUBSTR(ssrmeet_end_time, 1, 2) || ':' || SUBSTR(ssrmeet_end_time, 3, 2) || ':00'
         ELSE NULL
      END to_tm,
      CASE 
        WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code || '$$' || ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL THEN ssrmeet_bldg_code 
        ELSE 'WEB' 
      END location,
      CASE 
        WHEN ssbsect_ssts_code = 'A' THEN 'T' 
        ELSE 'F' 
      END is_active
FROM ssrmeet JOIN ssbsect ON ssbsect_term_code = ssrmeet_term_code
                         AND ssbsect_crn = ssrmeet_crn
        LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                         AND ssbsect_crn = sirasgn_crn
        LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
     UNPIVOT EXCLUDE NULLS
     (
       VAL FOR ( day_of_week ) IN 
          (
             ssrmeet_sun_day AS 'Sunday', 
             ssrmeet_mon_day AS 'Monday', 
             ssrmeet_tue_day AS 'Tuesday',
             ssrmeet_wed_day AS 'Wednesday',
             ssrmeet_thu_day AS 'Thursday',
             ssrmeet_fri_day AS 'Friday', 
             ssrmeet_sat_day AS 'Saturday'
          )
     )
WHERE ssbsect_term_code >= '201015'
  AND spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
ORDER BY ssbsect_crn, ssbsect_term_code, day_of_week
","Section Time"
1208,"Wiregrass Georgia Technical College",10505,"",48356,"Navigate:Wiregrass Georgia Technical College",47972,"Navigate",20,"cat.StudentCourse","WITH getLastXTerms AS (
SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for the 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- get all student registration audit data. This is extracted to figure out which courses the student ever registered for.
studentRegAuditRecs AS (
SELECT DISTINCT sfrstca_pidm AS pidm 
  , sfrstca_crn AS crn 
  , sfrstca_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
FROM sfrstca 
  LEFT JOIN ssbsect ON (ssbsect_crn = sfrstca_crn 
                        AND ssbsect_term_code = sfrstca_term_code
                        ) 
), 

-- get all student current registration data.
studentRegRecs AS ( 
SELECT DISTINCT sfrstcr_pidm AS pidm 
  , sfrstcr_crn AS crn 
  , sfrstcr_term_code AS term
  , ssbsect_subj_code AS subCode
  , ssbsect_crse_numb AS crseNumb
  FROM sfrstcr
    LEFT JOIN ssbsect ON ssbsect_crn = sfrstcr_crn 
),

-- compute students with dropped course by comparing the registration audit data to current registration data and determing all courses that exist in registration audits but no longer exist in current registration data.
studentDroppedCrse AS ( 
SELECT * 
FROM studentRegAuditRecs
  WHERE NOT EXISTS (
                    SELECT * 
                    FROM studentRegRecs
                      WHERE studentRegAuditRecs.pidm = studentRegRecs.pidm 
                        AND studentRegAuditRecs.term = studentRegRecs.term
                        --AND studentRegAuditRecs.crn = studentRegRecs.crn -- I THINK THIS SHOULD BE ADDED; NEED TO CONFIRM DURING SCRIPT REVIEW
                        AND studentRegAuditRecs.subCode = studentRegRecs.subCode 
                        AND studentRegAuditRecs.crseNumb = studentRegRecs.crseNumb
                    )
),

-- get max term code from ssbsect by ssbsect_crn 
maxSsbsectTerm AS (
SELECT MAX(ssbsect_term_code) AS maxterm
  , ssbsect_crn AS crn
FROM ssbsect
  GROUP BY ssbsect_crn
),

-- define grades points by grade code. Use this to assign grade points to each grade code in the system. Default grade codes have already been added. There may be college specific grade codes that need to be added to this list.
-- The conversion defined here is utilized by queries below to compute grade points based on grade codes from the system. 
grades AS (
SELECT 'A' AS code
  , 4.0 AS gradePoint
FROM dual
UNION
SELECT 'A-' AS code
  , 3.5 AS gradePoint
FROM dual
UNION
SELECT 'B' AS code
  , 3.0 AS gradePoint
FROM dual
UNION
SELECT 'C' AS code
  , 2.0 AS gradePoint
FROM dual
UNION
SELECT 'D' AS code
  , 1.0 AS gradePoint
FROM dual
),

-- extract student course information for non-completed courses
studentCourse AS (
SELECT DISTINCT
  spriden_id || '$$' || stvterm_code || '$$' || ssbsect_subj_code || '$$' || ssbsect_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , sfrstcr_grde_code AS grade_cd
  , CASE WHEN sfrstcr_rsts_code IN ('RE') -- These filter out completed courses and are the only ones for which we need to identify grade points. These can vary for different Members. Confirm with BA. 
          THEN NVL(grades.gradePoint,0.0)
          ELSE 0.0
          END AS grade_points -- Identify the grade points for students with specific registration codes. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(sfrstcr_credit_hr, 0) AS credits_attempted
  , 0 AS credits_earned
  , CASE WHEN sfrstcr_rsts_code IN ('RE') AND stvterm_start_date > sysdate
          THEN 'REGISTERED'
        WHEN sfrstcr_rsts_code IN ('RE') AND stvterm_start_date <= sysdate AND stvterm_end_date > sysdate
          THEN 'IN_PROGRESS'
        WHEN sfrstcr_rsts_code IN ('RE') AND (sfrstcr_grde_code LIKE 'A%' OR sfrstcr_grde_code LIKE 'B%' OR sfrstcr_grde_code LIKE 'C%' OR sfrstcr_grde_code LIKE 'D%') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
        WHEN sfrstcr_rsts_code IN ('WL') -- Waitlisted students.
          THEN 'WAITLISTED'
        ELSE 'UNKNOWN'
        END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN sfrstcr ON sfrstcr_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = sfrstcr_term_code
  JOIN stvrsts ON stvrsts_code = sfrstcr_rsts_code
  JOIN ssbsect ON (ssbsect_term_code = sfrstcr_term_code
                  AND sfrstcr_crn = ssbsect_crn)
  JOIN sobptrm ON (sobptrm_ptrm_code = ssbsect_ptrm_code
                  AND sobptrm_term_code = ssbsect_term_code)
  JOIN maxSsbsectTerm ON (maxSsbsectTerm.crn = ssbsect_crn
                          AND maxSsbsectTerm.maxterm = ssbsect_term_code)
  LEFT JOIN grades ON grades.code = sfrstcr_grde_code
WHERE 1=1
  AND spriden_entity_ind = 'P' -- Filter for spriden records that are 'Persons'
  AND spriden_change_ind IS NULL -- Filter for most recent student record
  AND (stvrsts_withdraw_ind = 'N'
      AND (stvrsts_incl_sect_enrl = 'Y' OR stvrsts_wait_ind = 'Y')
      )
  -- This excludes completed courses
  AND NOT EXISTS (SELECT *
                  FROM shrtckn
                  WHERE shrtckn_crn = sfrstcr_crn
                    AND shrtckn_term_code = sfrstcr_term_code
                    AND shrtckn_pidm = sfrstcr_pidm
                )
),

-- compute max sequence number for final grade
maxCompCrseGrade AS (
SELECT shrtckg_pidm
  , shrtckg_tckn_seq_no
  , MAX(shrtckg_seq_no) AS maxSeq
FROM shrtckg
GROUP BY shrtckg_pidm, shrtckg_tckn_seq_no
),

-- extract student course data for completed courses. This query extracts from shrtckn and shrtckg and hence needs to be it's own query from the query above.
completedCourses AS (
SELECT DISTINCT
  spriden_id || '$$' || shrtckn_term_code || '$$' || shrtckn_subj_code || '$$' || shrtckn_crse_numb AS nk
  , spriden_id AS student
  , stvterm_code AS term
  , shrtckn_subj_code || shrtckn_crse_numb AS course
  , NVL(ssbsect_crn || '$$' || ssbsect_term_code, 'UNKNOWN') AS section
  , shrtckg_grde_code_final AS grade_cd
  , NVL(grades.gradePoint,0.0) AS grade_points -- Identify grade points for students. This logic utilizes the grades WITH statement above to identify grade points against grade codes.
  , NVL(shrtckg_hours_attempted, 0) AS credits_attempted
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN NVL(shrtckg_hours_attempted, 0)
          ELSE 0
          END AS credits_earned
  , CASE WHEN shrtckg_grde_code_final IN ('A', 'B', 'C', 'D') -- Grade codes are Member specific. Confirm with BA.
          THEN 'COMPLETED'
          ELSE 'UNKNOWN'
          END AS status
  , 'T' AS is_active
FROM spriden
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  JOIN shrtckn ON shrtckn_pidm = spriden_pidm
  JOIN stvterm ON stvterm_code = shrtckn_term_code
  JOIN ssbsect ON (ssbsect_crn = shrtckn_crn 
                AND ssbsect_term_code = shrtckn_term_code
                )
  JOIN shrtckg ON (shrtckg_pidm = spriden_pidm
                  AND shrtckg_tckn_seq_no = shrtckn_seq_no
                  AND shrtckg_term_code = shrtckn_term_code
                  )
  JOIN maxCompCrseGrade ON (maxCompCrseGrade.shrtckg_pidm = shrtckg.shrtckg_pidm
                            AND maxCompCrseGrade.shrtckg_tckn_seq_no = shrtckg.shrtckg_tckn_seq_no
                            AND maxCompCrseGrade.maxSeq = shrtckg.shrtckg_seq_no
                            )
  LEFT JOIN grades ON grades.code = shrtckg_grde_code_final
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
),

-- extract student course data based on student dropped courses determined in studentDroppedCrse WITH statement
droppedCourses AS (
SELECT DISTINCT spriden_id || '$$' || studentDroppedCrse.term || '$$' || studentDroppedCrse.subCode || '$$' || studentDroppedCrse.crseNumb AS nk
  , spriden_id AS student
  , studentDroppedCrse.term AS term
  , studentDroppedCrse.subCode || studentDroppedCrse.crseNumb AS course
  , '' AS section
  , '' as grade_cd
  , 0.0 AS grade_points
  , 0 AS credits_atempted
  , 0 AS credits_earned
  , 'UNKNOWN' AS status
  , 'T' AS is_active
FROM studentDroppedCrse
  LEFT JOIN spriden ON spriden_pidm = studentDroppedCrse.pidm
  JOIN studentPopulation ON studentPopulation.studentPidm = studentDroppedCrse.pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND studentDroppedCrse.term > TO_CHAR(sysdate, 'YYYY') || 01 -- Filter data to terms in current year and greater. We do not need to extract history from last 5 years based on student population.
),

-- Combine all above categories
finalDataSet AS (
SELECT * FROM studentCourse
UNION
SELECT * FROM completedCourses
UNION
SELECT * FROM droppedCourses
)

-- Wrapper query
SELECT * FROM finalDataSet","StudentCourse"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"reg.StudentTestScore","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'P'
 order by nk desc),

cur_stu as (
select id as stu_id
  from eab_stdnt_active
 where current_enroll_pc = 'Y'
   and academic_period in (select nk from cur_terms))

 SELECT
   nk,
   student,
   test_subject,
   score,
   CASE
     WHEN is_active = 'Y' THEN 'T'
     ELSE 'F'
   END AS is_active
FROM EAB_STUDENT_TEST_SCORE
WHERE student IN (SELECT stu_id from cur_stu)","Student Test Score"
1219,"Broward College",10510,"",48378,"Navigate:Broward College",47972,"Navigate",20,"cat.Term","SELECT 
TERM_ID AS nk
, replace(TERM_DESCRIPTION, 'Winter Term SPRING', 'Spring Term ') as name
, SUBSTRING(CONVERT(VARCHAR,TERM_ID),1,4) AS cat_yr
, ISNULL(CONVERT(VARCHAR(10),REG_START_DT_OPEN_REG,121),'1900-01-01') AS registration_start_dt
, ISNULL(CONVERT(VARCHAR(10),REG_END_DT,121),'1900-01-01') AS registration_end_dt
, CONVERT(VARCHAR(10),TERM_START_DT,121) AS term_start_dt
, CONVERT(VARCHAR(10),TERM_END_DT,121) AS term_end_dt
, 'T' AS is_active

FROM TERM_MASTER tm
ORDER BY 1
","Terms"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"cat.Subject","WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  'T' AS is_active
FROM stvsubj
),

-- Assign default values
defaultValues AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM subject
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Subject"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.Section","-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN CCCD_EAB_GENERAL_PERSON ON sirasgn_pidm = spriden_pidm -- Custom view for Coastline since no access to SPRIDEN
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , stvterm_code AS term
  , CASE
      WHEN ssbsect_insm_code = '72' THEN 'ONLINE'
      ELSE NVL(stvcamp_code, 'DEFAULT')
    END AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , CASE WHEN ssbsect_ssts_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- Identify if section is active by comparing the value in ssbsect_ssts_code. The default is 'A'. Confirm with BA/Member if this is different at their college.
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
WHERE ssbsect_camp_code = 'G' --Golden West
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Sections"
1218,"Atlanta Technical College",10508,"",48664,"SSC Foundation:Atlanta Technical College",48663,"SSC Foundation",31,"department_lkp","select department_cd,
department_desc
 from atlantatech.osf_dpl_department_lkp","SSF_department_lkp"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"core.advisor","

select a.emplid as nk
, a.emplid as username
, Nvl(email.EMAIL_ADDR, a.emplid || '@missing.nova.edu') as email
, b.first_name as first_name
, b.last_name as first_name
, 'T' as is_active

from PS_INSTR_ADVISOR a
left join PS_PERSONAL_DATA b
on a.emplid = b.emplid
LEFT JOIN PS_EMAIL_ADDRESSES email 
              ON email.EMPLID = a.EMPLID 
                 AND email.E_ADDR_TYPE IN ( 'VCCS' ) 
where a.ADVISOR = 'Y' 
and a.INSTITUTION = 'DC279'
and a.eff_status = 'A'","advisor"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.seatsavail","with section_pop as ( --this is to make sure the sections we select are in line with sections in the Section file.

select section.crse_id || '$$' 
                            || section.strm || '$$' 
                            || section.CLASS_SECTION as nk
from PS_CLASS_TBL section
where 1=1
  and section.institution = 'NV280'
  and section.start_dt > sysdate-365 
),

location_pop as (
select
distinct a.facility_id as nk,
b.location

from PS_FACILITY_TBL a
left join PS_CAMPUS_TBL b on a.setid = b.institution
and a.location = b.location

where b.CAMPUS in ('A','L','M','N','W','H')
and a.setid = 'NV280'
and a.effdt = (select max(c.effdt) 
                from ps_facility_tbl c 
                where a.facility_id = c.facility_id 
                and a.setid = c.setid) 
),

dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'NV280'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

),

course_pop as (

SELECT o.CRSE_ID
FROM PS_CRSE_OFFER o
WHERE o.EFFDT = (SELECT MAX(EFFDT)
                FROM   PS_CRSE_OFFER
                WHERE  o.CRSE_ID = CRSE_ID)
and o.INSTITUTION = 'NV280'
--and o.acad_career = 'CRED'
and o.acad_org <> 'LCREDIT'
and o.crse_offer_nbr <> '1'
and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))

)

select distinct section.crse_id || '$$' || section.strm || '$$' || section.session_code || '$$'
                || dates.date_diff || '$$' || section.CLASS_SECTION as nk

, section.ENRL_CAP - section.ENRL_TOT as seats_avail
, 'T' as is_active
from PS_CLASS_TBL section
left join PS_CLASS_MTG_PAT meetings on section.strm = meetings.strm
                  and section.session_code = meetings.session_code
                  and section.class_section = meetings.class_section
                  and section.crse_offer_nbr = meetings.crse_offer_nbr
                  and section.crse_id = meetings.crse_id
left join dates on section.strm = dates.strm --added dates for nk link
          and section.session_code = dates.session_code
where 1=1 
and section.institution = 'NV280' --member specific
and section.start_dt > sysdate-365 --designed to limit the sections to only relevant ones in the present and future
and section.crse_id || '$$' || section.strm || '$$' || section.class_section in (select * from section_pop) --population
and meetings.facility_id in (select nk from location_pop)
and section.crse_id in (select * from course_pop)","SeatsAvail"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"cat.Course","-- Fields	nk,cd,level,subject,dept,title,desc,course_type,credits,is_active
-- ModelName	cat.Course
-- Name		Course
-- Output	Course_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE
      WHEN (SUBSTR(scbcrky_term_code_start, 1, 5) <= (SELECT SUBSTR(MIN(stvterm_code), 1, 5) FROM stvterm WHERE SYSDATE <= stvterm_end_date) 
	          AND (SUBSTR(scbcrky_term_code_end, 1, 5) >= (SELECT SUBSTR(MIN(stvterm_code), 1, 5) FROM stvterm WHERE SYSDATE <= stvterm_end_date) 
			           OR scbcrky_term_code_end IN '999999')) 
           THEN CASE
                  WHEN scbcrse.scbcrse_csta_code = 'A' THEN 'T'
                  ELSE 'F'
                END 
      ELSE 'F'
    END AS is_active -- determine is courses are active by first checking if it is still active by scbcrky term standards, then by evaluating the scbcrse_csta_code field. If this field is set to 'A', set the course to active.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbcrky 
       ON scbcrky_subj_code = scbcrse.scbcrse_subj_code
          AND scbcrky_crse_numb = scbcrse.scbcrse_crse_numb
JOIN (SELECT DISTINCT ssbsect_subj_code, ssbsect_crse_numb
      FROM ssbsect s
      WHERE 1=1
      AND ssbsect_camp_code = 'C' --Coastline
      AND ssbsect_ssts_code = 'A'
      AND ssbsect_term_code >= (SELECT MIN(t.stvterm_code)
                                FROM stvterm t
                                WHERE 1=1
                                   AND t.stvterm_end_date >= SYSDATE
                                   AND t.stvterm_code LIKE '%3')) sec
  ON sec.ssbsect_subj_code = scbcrse.scbcrse_subj_code
     AND sec.ssbsect_crse_numb = scbcrse.scbcrse_crse_numb
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM course
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Courses"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"cat.EnrollmentApplication","with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),

CUR_TERM AS (
  SELECT DISTINCT STVTERM_CODE
    FROM STVTERM JOIN SFRRSTS ON STVTERM_CODE = SFRRSTS_TERM_CODE
   WHERE SFRRSTS_RSTS_CODE IN ('RE', 'RA', 'RW', 'WR')
     AND SFRRSTS_PTRM_CODE = '1'
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-3*365
     AND UPPER(STVTERM_DESC) NOT LIKE '%NONCREDIT%'
     ORDER BY STVTERM_CODE DESC
),

STU_POP AS (
  SELECT SFRSTCR_PIDM AS PIDM
    FROM SFRSTCR
   WHERE SFRSTCR_TERM_CODE IN (SELECT * from cur_term)
  UNION
  SELECT SARADAP_PIDM AS PIDM
    FROM SARADAP
   WHERE SARADAP_TERM_CODE_ENTRY IN (SELECT * from cur_term)
),

email_list as (
  select goremal_pidm, goremal_email_address, goremal_version
    from goremal g join (select goremal_pidm pidm,
                                max(goremal_version) max_ver 
                         from goremal
                        where goremal_status_ind = 'A'
                          and goremal_emal_code = 'IND'
                        group by goremal_pidm) me on g.goremal_pidm = me.pidm
                                                 and g.goremal_version = me.max_ver
   where goremal_status_ind = 'A'
     and goremal_emal_code = 'IND'
     and upper(goremal_email_address) not like '%HACC%'
),
app_list as (
  select p.spriden_id as nk,
         p.spriden_id as student,
         saradap_term_code_entry as app_term,
         saradap_appl_no as app_number,
         to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
         trim(goremal_email_address) as personal_email,
         'T' as is_active
    from saradap join max_list ml on saradap_pidm = ml.pidm
                                 and saradap_term_code_entry = ml.max_term
            left join email_list el on saradap_pidm = el.goremal_pidm
            left join spriden p on saradap_pidm = spriden_pidm
                               and spriden_change_ind is null
   where saradap_pidm in (select * from stu_pop)
     and SARADAP_APST_CODE= 'D'
)
select nk, student, app_term, app_number, app_dt, personal_email, is_active
  from app_list
 where to_date(app_dt, 'YYYY-MM-DD') >= to_date('2016-06-01', 'YYYY-MM-DD')","EnrollmentApplication"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Section","-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date, Sfrrsts_vpdi_Code
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
      AND SFRRSTS_VPDI_CODE = 'PPCC'
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date, Sfrrsts_vpdi_Code
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WW') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
      AND SFRRSTS_VPDI_CODE = 'PPCC'
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code
                      AND ssbsect_vpdi_code = sobptrm_vpdi_code)
WHERE ssbsect_vpdi_code = 'PPCC'
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
      AND sirasgn_vpdi_code = 'PPCC'
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , szvterm_code AS term
  , NVL(szvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(SSBSECT_CENSUS_ENRL_DATE,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(SSBSECT_CENSUS_2_DATE,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , CASE WHEN ssbsect_ssts_code = 'O' and ssbsect_voice_avail = 'Y'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- Identify if section is active by comparing the value in ssbsect_ssts_code. The default is 'A'. Confirm with BA/Member if this is different at their college.
FROM ssbsect
  JOIN stugrcccs.szvcamp ON szvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN szvterm ON (szvterm_code = ssbsect_term_code AND -- term lookup
                   szvterm_vpdi_code = ssbsect_vpdi_code)
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn -- meeting lookup
                        AND ssrmeet_vpdi_code = ssbsect_vpdi_code) 
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code -- drop dates loookup
                                AND sfrrstsDropDates.sfrrsts_vpdi_code = ssbsect_vpdi_code) 
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code-- withdraw dates lookup
                                    AND sfrrstsWithdrawDates.sfrrsts_vpdi_code = ssbsect_vpdi_code)
  WHERE ssbsect_vpdi_code = 'PPCC'
        AND szvcamp_vpdi_code = 'PPCC'
        AND szvcamp_eab_enable = 'Y' 
        AND SUBSTR(szvterm_code, 1, 1) NOT IN ('6', '7', '8')

-- WHERE ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Comented out by default. Confirm with BA/Member.
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Sections"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.Term","SELECT DISTINCT SUBSTRING(TERMS_ID,1,6) nk,
      TERM_DESC name,
      CAST ( TERM_REPORTING_YEAR AS CHAR(4)) cat_yr,
      REPLACE(CONVERT(CHAR(10), TERM_REG_START_DATE, 111) , '/','-') registration_start_dt,
      REPLACE(CONVERT(CHAR(10), TERM_REG_END_DATE, 111) , '/','-') registration_end_dt,
      REPLACE(CONVERT(CHAR(10), TERM_START_DATE, 111) , '/','-') term_start_dt,
      REPLACE(CONVERT(CHAR(10), TERM_END_DATE, 111) , '/','-') term_end_dt, 
    
	 case when TERMS_ID like '%CE' OR TERMS_ID like 'P%'  OR TERMS_ID like '%CL' 
	  OR TERMS_ID like '%C2' 

		THEN 'F'   ELSE 'T' END AS is_active 
--per NAVBA-339
  --as line
  FROM TERMS
    where TERM_REPORTING_YEAR >= (YEAR(GETDATE()) - 10) and
          TERMS_ID is not NULL and
          TERM_REG_START_DATE is not null

","Term"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.EnrollmentApplication","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Enrollment Application File

Fields nk,student,app_term,app_number,app_dt,personal_email,is_active
*/

SELECT adm.id || '$$' || adm.app_no                                         AS nk
       , NVL(adm.id, '')                                                    AS student
       , NVL(adm.plan_enr_yr || '$$' || TRIM(adm.plan_enr_sess), '')        AS app_term
       , NVL(adm.app_no, '')                                                AS app_number
       , NVL(TO_CHAR(adm.add_date, '%Y-%m-%d'), '')                         AS app_dt
       , NVL(TRIM(getemail(adm.id)), '')                                    AS personal_email
       , 'T'                                                                AS is_active

FROM informix.adm_rec adm
WHERE 1=1
   AND adm.primary_app = 'Y'
   AND adm.enrstat IN ('ACCEPTED', 'ENROLLED')
   AND adm.add_date >= (SELECT acr.beg_date  --only include applicants or enrollees who's app date is more recent than the start of the current term
                        FROM informix.acad_cal_rec acr
                        WHERE acr.subsess = ''
                           AND acr.yr || CASE
                                           WHEN acr.sess = 'WI' THEN 1
                                           WHEN acr.sess = 'SP' THEN 2
                                           WHEN acr.sess = 'SU' THEN 3
                                           ELSE 4
                                         END = (SELECT MIN(acr1.yr || CASE
                                                                        WHEN acr1.sess = 'WI' THEN 1
                                                                        WHEN acr1.sess = 'SP' THEN 2
                                                                        WHEN acr1.sess = 'SU' THEN 3
                                                                        ELSE 4
                                                                      END)
                                                FROM informix.acad_cal_rec acr1
                                                WHERE acr1.end_date >= TODAY))","EnrollmentApplication"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.SectionTime","with cur_terms as (
select distinct nk
  from eab_trm
 where trunc(to_date(term_start_dt, 'YYYY-MM-DD'), 'YYYY') >= TRUNC(sysdate, 'YYYY')-5*365
   and substr(college, 0, 1) = 'P'),

sect_time as (
select distinct *
  from eab_sect_time
 where substr(campus,0,1)='P'
   and academic_period in (select nk from cur_terms)),

list_loc as (
select distinct location as loc
  from (select
    CASE
      when substr(location, -1, 1) = '$' then substr(location, 0, instr(location, '$')-1)
      else location
    END location
    from sect_time))

select distinct nk,section,day_of_week,from_tm,to_tm,location,is_active from (
SELECT
  section ||'$$'|| coalesce(day_of_week, 8) ||'$$'||
  coalesce(substr(from_tm, 0, 2), '00')||coalesce(substr(from_tm, 4, 2), '00') ||'$$'||
  coalesce(substr(to_tm, 0, 2),'00')||coalesce(substr(to_tm, 4, 2), '00') nk,
  section,
  coalesce(day_of_week, 8) day_of_week,
  from_tm,
  to_tm,
  CASE
    when substr(location, -1, 1) = '$' then substr(location, 0, instr(location, '$')-1)
    else location
  END location,
  CASE 
    WHEN is_active = 'Y' THEN 'T'
    ELSE 'F'
  END AS is_active
FROM SECT_TIME
WHERE campus LIKE 'P%'
  and academic_period in (select nk from cur_terms)
  and location in (select loc from list_loc))","Section Time"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.Section","SELECT distinct 
      COURSE_SECTIONS_termlimits.COURSE_SECTIONS_ID nk,
       COURSE_SECTIONS_termlimits.COURSE_SECTIONS_ID   cd, 
     COURSE_SECTIONS_termlimits.SEC_NO display_cd,
      SEC_SUBJECT + '-' + SEC_COURSE_NO  course, 
      SEC_TERM     term, 
      ISNULL(SEC_LOCATION, 'MAIN')  campus,
      cast(ISNULL(SEC_CAPACITY, 0) as Varchar)  seats_offered, 
     '' as waitlist_capacity,
       'F' is_unlimited_seating ,
      CASE
        WHEN  LAST_NAME IS NULL THEN 
           'TBD' 
        ELSE
           LAST_NAME  + ', ' + 
           REPLACE(ISNULL(FIRST_NAME,''), '`', '``') 
       END
       instructor_name ,



      REPLACE(CONVERT(CHAR(10), SEC_START_DATE, 111) , '/','-') class_start_dt ,


      REPLACE(CONVERT(CHAR(10), SEC_END_DATE, 111) , '/','-') class_end_dt
	  
	  
	/*  , ORIGINAL EAB 
      case
          when SEC_OVR_CENSUS_DATES IS NULL then
         REPLACE(CONVERT(CHAR(10), TERM_CENSUS_DATES, 111), '/','-')
        else
         REPLACE(CONVERT(CHAR(10), SEC_OVR_CENSUS_DATES , 111) , '/','-')       
       end
        drop_start_dt

	*/ 
	-- PER CASSANDRA 
	,REPLACE(CONVERT(CHAR(10), TERMS.TERM_REG_START_DATE, 111) , '/','-') AS drop_start_dt
		
		
		-- original EAB logic 
		
   /*,  case
          when SEC_OVR_CENSUS_DATES  IS NULL then
         REPLACE(CONVERT(CHAR(10), TERM_CENSUS_DATES, 111), '/','-') 
        else
         REPLACE(CONVERT(CHAR(10), SEC_OVR_CENSUS_DATES , 111) , '/','-')  
       end
        drop_end_dt
		*/ 
	
	-- Adrienne's logic 
, REPLACE(CONVERT(CHAR(10),(CASE WHEN SUBSTRING(COURSE_SECTIONS_termlimits.SEC_NO, 1, 2) = 'FN' THEN COURSE_SECTIONS_termlimits.SEC_START_DATE + (DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE+7 , COURSE_SECTIONS_termlimits.SEC_END_DATE) * 0.0680)
  WHEN DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE , COURSE_SECTIONS_termlimits.SEC_END_DATE) < 19 THEN COURSE_SECTIONS_termlimits.SEC_START_DATE + 1
 WHEN DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE , COURSE_SECTIONS_termlimits.SEC_END_DATE) >= 100 THEN COURSE_SECTIONS_termlimits.SEC_START_DATE + 7
 ELSE COURSE_SECTIONS_termlimits.SEC_START_DATE + (DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE+7 , COURSE_SECTIONS_termlimits.SEC_END_DATE) * 0.0680) END	
 ),111), '/','-') AS drop_end_dt 

, REPLACE(CONVERT(CHAR(10),
(CASE WHEN SUBSTRING(COURSE_SECTIONS_termlimits.SEC_TERM, 1, 1) = 'P' THEN COURSE_SECTIONS_termlimits.SEC_END_DATE - 7 
WHEN COURSE_SECTIONS_termlimits.SEC_TERM LIKE '%SU' THEN COURSE_SECTIONS_termlimits.SEC_END_DATE - 7 
WHEN DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE , COURSE_SECTIONS_termlimits.SEC_END_DATE) > 106 OR SUBSTRING(COURSE_SECTIONS_termlimits.SEC_NO, 1, 2) = 'FN' THEN TERMS.TERM_USER6
WHEN DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE , COURSE_SECTIONS_termlimits.SEC_END_DATE) > 63 THEN COURSE_SECTIONS_termlimits.SEC_END_DATE - 13 
WHEN DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE , COURSE_SECTIONS_termlimits.SEC_END_DATE) > 53 THEN COURSE_SECTIONS_termlimits.SEC_END_DATE - 11 
WHEN DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE , COURSE_SECTIONS_termlimits.SEC_END_DATE) > 43 THEN COURSE_SECTIONS_termlimits.SEC_END_DATE - 9 
WHEN DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE , COURSE_SECTIONS_termlimits.SEC_END_DATE) > 33 THEN COURSE_SECTIONS_termlimits.SEC_END_DATE - 7
WHEN DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE , COURSE_SECTIONS_termlimits.SEC_END_DATE) > 23 THEN COURSE_SECTIONS_termlimits.SEC_END_DATE - 5 
WHEN DATEDIFF(d, COURSE_SECTIONS_termlimits.SEC_START_DATE , COURSE_SECTIONS_termlimits.SEC_END_DATE) > 13 THEN COURSE_SECTIONS_termlimits.SEC_END_DATE - 3 ELSE COURSE_SECTIONS_termlimits.SEC_END_DATE - 2 END
),111), '/','-') AS withdraw_end_dt		

,'' as note

  --    CASE
   --       WHEN  SEC_STATUS = 'A' THEN 'T' 
  --        WHEN  (SEC_STATUS = 'C' OR SEC_STATUS = 'GH') THEN 'F' 
 --      END 
,'T' is_active

  FROM (SELECT * 
			FROM COURSE_SECTIONS 
			WHERE SEC_TERM NOT LIKE 'P%'
			AND SEC_TERM NOT LIKE '%CE'
			AND SEC_TERM NOT LIKE '%CL'
			AND SEC_LOCATION  IN ('WCCTR','SLCTR','FDCTR','FLEX')
			) COURSE_SECTIONS_termlimits
		
   LEFT OUTER JOIN COURSE_SEC_FACULTY
     ON COURSE_SECTIONS_termlimits.COURSE_SECTIONS_ID = COURSE_SEC_FACULTY.CSF_COURSE_SECTION
   LEFT OUTER JOIN PERSON
     ON COURSE_SEC_FACULTY.CSF_FACULTY = PERSON.ID
   LEFT OUTER JOIN COURSE_SECTIONS_LS
      ON COURSE_SECTIONS_termlimits.COURSE_SECTIONS_ID = COURSE_SECTIONS_LS.COURSE_SECTIONS_ID AND
         COURSE_SECTIONS_LS.POS = '1'
    JOIN TERMS_LS
      ON SEC_TERM = TERMS_ID AND
          TERMS_LS.POS = '1'
	LEFT JOIN TERMS 
		ON TERMS.TERMS_ID = TERMS_LS.TERMS_ID 
			AND TERMS_LS.POS = 1
    JOIN SEC_STATUSES
      ON COURSE_SECTIONS_termlimits.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID AND
         SEC_STATUSES.POS = '1' 
     --AND (SEC_STATUS = 'A' OR  SEC_STATUS = 'C' OR SEC_STATUS = 'GH')
    Where 1=1 
	AND  (CAST(LEFT(replace(COURSE_SECTIONS_termlimits.SEC_TERM,'P090','9999'),4) AS INT) > YEAR(GETDATE()) - 2 )
     --  AND (SEC_NO < '600' OR SEC_NO > '799')

	/*   SELECT * FROM SEC_STATUSES
	   SELECT * FROM TERMS_LS
	   SELECT * FROM COURSE_SECTIONS_LS
	   SELECT * FROM COURSE_SECTIONS
	   SELECT DISTINCT SEC_STATUS FROM SEC_STATUSES
	   */

","Section"
1185,"Georgia Piedmont Technical College",10498,"",48327,"Navigate:Georgia Piedmont Technical College",47972,"Navigate",20,"inst.Campus","WITH campus AS (
SELECT DISTINCT stvcamp_code nk
                , stvcamp_desc \\\""name\\\""
                , CASE WHEN stvcamp_code = 'O' -- Logic to identify online campuses. Confirm with BA.
                			THEN 'T'
                			ELSE 'F' END is_online
                , 'T' is_active
FROM stvcamp
where stvcamp_code in ('1','7','8','9','3','5','0')
),

-- Assign default values
defaultValues AS (
SELECT 'DEFAULT' nk
       , 'EAB Default Code' \\\""name\\\""
       , 'F' is_online
       , 'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS(
SELECT * FROM campus
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet","Campus"
945,"Bucks County Community College",10340,"",47967,"Navigate:Bucks County Community College",47972,"Navigate",20,"inst.Location","WITH TBA AS (
SELECT 'TBA' nk, 'OC' campus, 'TBA' name,     '' latitude,
    '' longitude,
    '' address,
    '' comments,
    'T' is_active)
	
SELECT replace(ROOMS_ID, '*', ' ') nk,
    UPPER(B.BLDG_LOCATION) campus,
    replace(ROOMS_ID, '*', ' ') name,
    '' latitude,
    '' longitude,
    '' address,
    '' comments,
    'T' is_active
FROM BUILDINGS B
INNER JOIN ROOMS_VIEW R
ON B.BUILDINGS_ID = R.ROOMS_BLDG_ID
WHERE UPPER(B.BLDG_LOCATION) IN ('LBC','UBC','MC','OC','CWW')
UNION SELECT * FROM TBA","Location"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.section","WITH 
SFRRSTS_DROP_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.Sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('DW')

--and rsts.Sfrrsts_Term_Code = 201110 and rsts.Sfrrsts_ptrm_code = '16'
),
SFRRSTS_WITHDRAW_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('WD')
)


SELECT DISTINCT 
  a.SSBSECT_CRN  || '$$' || a.SSBSECT_TERM_CODE  AS NK
  , a.SSBSECT_CRN AS CD
  , a.SSBSECT_SUBJ_CODE || a.SSBSECT_CRSE_NUMB AS COURSE
  , stvterm.stvterm_code as term 
  , nvl(stvcamp_code,'DEFAULT') as CAMPUS
  , a.SSBSECT_MAX_ENRL AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , CASE WHEN instructor.SPRIDEN_LAST_NAME IS NULL THEN 'TBD' 
  ELSE instructor.SPRIDEN_LAST_NAME || ', ' || instructor.SPRIDEN_FIRST_NAME
  END AS INSTRUCTOR_NAME
  , nvl(to_char(b.SSRMEET_START_DATE,'YYYY-MM-DD'),'2000-01-01') AS CLASS_START_DT
  , nvl(to_char(b.SSRMEET_END_DATE, 'YYYY-MM-DD'), '2000-01-02') AS CLASS_END_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_Start_Date,'YYYY-MM-DD'), to_char(ssrmeet_start_date, 'YYYY-MM-DD'),'2000-01-01') as DROP_START_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as DROP_END_DT
  , coalesce(to_char(SFRRSTS_WITHDRAW_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as WITHDRAW_END_DT
  , CASE WHEN a.SSBSECT_SSTS_CODE = 'A' THEN 'T' ELSE 'F' END AS IS_ACTIVE
FROM ssbsect a
  --creating campus lookup
  join stvcamp on stvcamp_code = SSBSECT_CAMP_CODE
  --creating term lookup
  join stvterm on stvterm_code = ssbsect_term_code
  --instructor info
  LEFT OUTER JOIN (
    SELECT SIRASGN_TERM_CODE, SIRASGN_CRN, SIRASGN_PIDM, SIRASGN_PRIMARY_IND, SPRIDEN_ID, SPRIDEN_FIRST_NAME, SPRIDEN_LAST_NAME
    FROM SIRASGN a
      JOIN SPRIDEN b ON a.sirasgn_pidm = b.spriden_pidm AND b.spriden_change_ind IS NULL  
      WHERE SIRASGN_CATEGORY = '01' AND SIRASGN_PRIMARY_IND = 'Y'
    )  instructor
    ON instructor.SIRASGN_TERM_CODE = a.SSBSECT_TERM_CODE AND instructor.SIRASGN_CRN = a.SSBSECT_CRN
  --meeting info
  LEFT OUTER JOIN (
    SELECT * FROM SSRMEET)
     b ON b.SSRMEET_TERM_CODE = a.SSBSECT_TERM_CODE AND b.SSRMEET_CRN = a.SSBSECT_CRN
  --joins for drop and withdraw dates
  INNER JOIN SFRRSTS_DROP_DATES on ssbsect_term_code = SFRRSTS_DROP_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_DROP_DATES.Sfrrsts_ptrm_code
  LEFT JOIN SFRRSTS_WITHDRAW_DATES on ssbsect_term_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_ptrm_code
--where SSBSECT_VOICE_AVAIL = 'Y'
where 1=1
AND ssbsect_gmod_code <> 'C'
UNION
  select 'UNKNOWN' as NK
  , 'UNKNOWN' as CD
  , 'UNKNOWN' as COURSE
  , '201410' as TERM    --[Member Specific] Change to a valid default term
  ,  'DEFAULT' as CAMPUS
  ,  0 AS SEATS_OFFERED
  , 'N' AS IS_UNLIMITED_SEATING
  , 'TBD' AS INSTRUCTOR_NAME
  , '2000-01-01' AS CLASS_START_DT
  , '2000-01-01' AS CLASS_END_DATE
  , '2000-01-01' AS DROP_START_DT
  , '2000-01-01' AS DROP_END_DT
  , '2000-01-01' AS WITHDRAW_END_DT
  , 'T' AS IS_ACTIVE
  from dual
  order by 2,4  ","Section"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.SeatsAvail","SELECT NVL(TRIM(sr.crs_no), '') || '$$' || NVL(TRIM(sr.sec_no), '') 
       || '$$' || NVL(TRIM(sr.sess), '') || '$$' || NVL(sr.yr, '')        AS nk
       , NVL(sr.max_reg - reg_num, ' ')                                        AS avail_seats
       , 'T'                                                                                         AS is_active
FROM informix.sec_rec sr       
WHERE 1=1
ORDER BY 1","SeatsAvail"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"inst.Location","WITH buildings AS (
SELECT stvbldg_code nk,
       slbbldg_camp_code campus,
       stvbldg_desc \\\""name\\\"",
       '' latitude,
       '' longitude,
       CASE
           WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
           ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
       END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
       '' comments,
       'T' is_active
FROM stvbldg
LEFT JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
LEFT JOIN stugrcccs.szvcamp ON slbbldg_camp_code = szvcamp_code
WHERE slbbldg_camp_code IS NOT NULL
      AND szvcamp_vpdi_code = 'ACC' 
      AND szvcamp_eab_enable = 'Y'
      
),

-- get building rooms data from Banner. This query is used along with the above query to identify any building + room combinations.
buildingRooms AS (
SELECT DISTINCT CASE
                    WHEN ssrmeet_room_code IS NULL THEN ssrmeet_bldg_code
                    ELSE ssrmeet_bldg_code || '$$' || ssrmeet_room_code
                END AS nk,
                slbbldg_camp_code campus,
                CASE
                    WHEN ssrmeet_room_code IS NULL THEN stvbldg_desc
                    ELSE stvbldg_desc || ' Room# ' || ssrmeet_room_code
                END AS \\\""name\\\"",
                '' latitude,
                '' longitude,
                CASE
                    WHEN COALESCE(slbbldg_street_line1, slbbldg_street_line2, slbbldg_city, slbbldg_zip, 'NA') = 'NA' THEN 'Address Not Available'
                    ELSE slbbldg_street_line1 || ' ' || slbbldg_street_line2 || ' ' || slbbldg_city || ', ' || slbbldg_zip
                END address, -- Check all slbbldg address fields to see if an address is available. If available, concatenate and use that else, use a default text
                '' comments,
                'T' is_active
FROM stvbldg
INNER JOIN slbbldg ON stvbldg_code = slbbldg_bldg_code
INNER JOIN ssrmeet ON stvbldg_code = ssrmeet_bldg_code
LEFT JOIN stugrcccs.szvcamp ON slbbldg_camp_code = szvcamp_code
WHERE slbbldg_camp_code IS NOT NULL
      AND szvcamp_vpdi_code = 'ACC' 
      AND szvcamp_eab_enable = 'Y'
),

-- Assign default values
defaultValues AS (
SELECT 'EAB0' nk,
       'DEFAULT' campus,
       'EAB default code' \\\""name\\\"",
       '' latitude,
       '' longitude,
       'Address Not Available' address,
       '' comments,
       'F' is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM buildings
UNION
SELECT * FROM buildingRooms
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT *  FROM finalDataSet","Locations"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"reg.StudentTestScore","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT szvterm_code
FROM szvterm
WHERE szvterm_code <= (
                      SELECT MIN(szvterm_code)
                      FROM szvterm
                        WHERE szvterm_start_date > sysdate
                      )
AND substr(szvterm_code, 1, 1) NOT IN ('6', '7', '8')
AND szvterm_vpdi_code = 'PCC'
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = sfrstcr_term_code
WHERE sfrstcr_rsts_code LIKE 'R_'
      AND sfrstcr_vpdi_code = 'PCC'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = saradap_term_code_entry
WHERE saradap_vpdi_code = 'PCC' 
),

-- get student test scores
studentTestScore AS (
SELECT 
  spriden_id || '$$' || stvtesc_code AS nk
  , spriden_id AS student
  , stvtesc_code AS test_subject
  , MAX(TO_NUMBER(sortest_test_score)) AS score -- Extract the max sortest_test_score value from banner.
  , 'T' AS is_active
FROM sortest
  JOIN spriden ON spriden_pidm = sortest_pidm
  JOIN stvtesc ON stvtesc_code = sortest_tesc_code
  JOIN studentPopulation ON studentPidm = sortest_pidm
WHERE spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND stvtesc_data_type = 'N' -- filter only numeric values for sortest_test_score. sortest_test_score also stores non-numeric data based on the stvtesc_data_type code.
  AND substr(stvtesc_code, 2, 1) != 'Z' 
GROUP BY spriden_id || '$$' || stvtesc_code, spriden_id, stvtesc_code, 'T'
)

-- wrapper query
SELECT * FROM studentTestScore","Student Test Scores"
898,"Member deleted from panto",10357,"",30740,"Navigate:Jackson State CC",47972,"Navigate",20,"cat.Term","with term_list as (
  select stvterm_code
    from stvterm
   where stvterm_acyr_code not in ('0000','9999')
),
GRAD_RSTS as (
  select stvrsts_code
    from stvrsts
   where upper(stvrsts_gradable_ind) = 'Y'
    and upper(stvrsts_withdraw_ind) = 'N'
    and upper(stvrsts_system_req_ind) = 'Y'
    and rownum = 1
),
REG_DATES AS (
  SELECT DISTINCT RSTS.SFRRSTS_TERM_CODE,
         RSTS.SFRRSTS_START_DATE,
         RSTS.SFRRSTS_END_DATE
    FROM SFRRSTS RSTS
   WHERE RSTS.SFRRSTS_RSTS_CODE IN (select * from grad_rsts)
     AND RSTS.SFRRSTS_PTRM_CODE = '1'
)
SELECT stvterm_code nk,
       stvterm_desc name,
       stvterm_acyr_code cat_yr,
       nvl(to_char(sfrrsts_start_date,'YYYY-MM-DD'),'1900-01-01') registration_start_dt,
       nvl(to_char(sfrrsts_end_date,'YYYY-MM-DD'),'1900-01-02') registration_end_dt,
       to_char(stvterm_start_date,'YYYY-MM-DD') term_start_dt,
       to_char(stvterm_end_date,'YYYY-MM-DD') term_end_dt,
       case
        when stvterm_code in (select * from term_list) then 'T'
        else 'F'
       end as is_active
  FROM stvterm left join REG_DATES on stvterm_code = sfrrsts_term_code
 order by 1","Term"
1234,"Iowa Central Community College",10517,"",48397,"Navigate:Iowa Central Community College",47972,"Navigate",20,"cat.SectionTime","WITH SECTIONS_0 AS
(
SELECT 
         COURSE_SEC_MEETING_ID + '$$'+ CAST('8' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         8 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'') location,
         'T' is_active

      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1' 
                  AND
               (
                  SEC_STATUS = 'A'                   OR 
                  SEC_STATUS = 'C'                   OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (SEC_TERM like '2015%' or SEC_TERM like '2016%')   AND 
         (SEC_NO < '600' OR SEC_NO > '799')        AND 
         COURSE_SEC_MEETING.CSM_MONDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_TUESDAY IS NULL        AND 
         COURSE_SEC_MEETING.CSM_WEDNESDAY IS NULL      AND 
         COURSE_SEC_MEETING.CSM_THURSDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_FRIDAY IS NULL         AND 
         COURSE_SEC_MEETING.CSM_SATURDAY IS NULL       AND 
         COURSE_SEC_MEETING.CSM_SUNDAY IS NULL
),

SECTIONS_1 AS
(
SELECT * FROM SECTIONS_0 UNION 

SELECT
         COURSE_SEC_MEETING_ID+'$$'+CAST('1' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         1 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (SEC_TERM like '2015%' or SEC_TERM like '2016%')     AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_SUNDAY = 'Y'),

SECTIONS_2 AS
(
SELECT * FROM SECTIONS_1 UNION 

SELECT
         COURSE_SEC_MEETING_ID+'$$'+CAST('2' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         2 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
        (SEC_TERM like '2015%' or SEC_TERM like '2016%')   AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_MONDAY = 'Y'),

SECTIONS_3 AS
(
SELECT * FROM SECTIONS_2 UNION 

SELECT
         COURSE_SEC_MEETING_ID+'$$'+CAST('3' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         3 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
        (SEC_TERM like '2015%' or SEC_TERM like '2016%')   AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_TUESDAY = 'Y'),

SECTIONS_4 AS
(
SELECT * FROM SECTIONS_3 UNION 

SELECT
         COURSE_SEC_MEETING_ID+'$$'+CAST('4' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         4 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (SEC_TERM like '2015%' or SEC_TERM like '2016%')    AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_WEDNESDAY = 'Y'),

SECTIONS_5 AS
(
SELECT * FROM SECTIONS_4 UNION 

SELECT
         COURSE_SEC_MEETING_ID+'$$'+CAST('5' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         5 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (SEC_TERM like '2015%' or SEC_TERM like '2016%')   AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_THURSDAY = 'Y'),

SECTIONS_6 AS
(
SELECT * FROM SECTIONS_5 UNION 

SELECT
         COURSE_SEC_MEETING_ID+'$$'+CAST('6' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         6 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (SEC_TERM like '2015%' or SEC_TERM like '2016%')     AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_FRIDAY = 'Y'),

SECTIONS_7 AS
(
SELECT * FROM SECTIONS_6 UNION 

SELECT
         COURSE_SEC_MEETING_ID+'$$'+CAST('7' AS VARCHAR(10)) nk,
         ISNULL(CSM_COURSE_SECTION,'') section, 
         7 day_of_week,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_START_TIME,''), 108))) from_tm,
         RTRIM(LTRIM(CONVERT(CHAR(10), ISNULL(CSM_END_TIME,''), 108))) to_tm,
         ISNULL(CSM_BLDG + ' ' + CSM_ROOM,'')  location,
         'T' is_active      
      FROM 
         COURSE_SECTIONS
            JOIN COURSE_SEC_MEETING ON 
               COURSE_SECTIONS_ID = CSM_COURSE_SECTION
            JOIN SEC_STATUSES ON 
               COURSE_SECTIONS.COURSE_SECTIONS_ID = SEC_STATUSES.COURSE_SECTIONS_ID 
                  AND
               SEC_STATUSES.POS = '1'
                  AND
               (
                  SEC_STATUS = 'A'                     OR 
                  SEC_STATUS = 'C'                     OR
                  SEC_STATUS = 'GH'
               )
      WHERE 
         (SEC_TERM like '2015%' or SEC_TERM like '2016%')   AND 
         (SEC_NO < '600'  OR SEC_NO > '799')             AND 
         COURSE_SEC_MEETING.CSM_SATURDAY = 'Y')

SELECT  DISTINCT
		nk+'$$'+REPLACE(CONVERT(VARCHAR,from_tm,108)+'$$'+CONVERT(VARCHAR,to_tm,108),':','') as nk,
         section, 
         day_of_week,
         from_tm,
         to_tm,
         location,
         is_active   

 FROM SECTIONS_7 order by 1,2,3,4,5,6,7","SectionTime"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"cat.sectiontime","SELECT a.ssbsect_term_code || '$$' || a.ssbsect_crn || '$$'
       || COALESCE(b.Day_of_Week, '') || '$$'    
       || COALESCE(b.ssrmeet_begin_time, '') || '$$'
       || COALESCE(b.ssrmeet_end_time, '') || '$$'         AS NK 
       , a.ssbsect_crn || '$$' || a.ssbsect_term_code     AS Section 
       , CASE b.Day_of_Week 
            WHEN 'U' THEN 1 
            WHEN 'M' THEN 2 
            WHEN 'T' THEN 3 
            WHEN 'W' THEN 4 
            WHEN 'R' THEN 5 
            WHEN 'F' THEN 6 
            WHEN 'S' THEN 7 
           ELSE 8 
          END                                    AS Day_of_Week 
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_begin_time,1,2) || ':' || SUBSTR(b.ssrmeet_begin_time,3,2) || ':00'  
            ELSE ''
          END                                    AS From_Tm
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_end_time,1,2)   || ':' || SUBSTR(b.ssrmeet_end_time,3,2) || ':00' 
            ELSE ''
          END                                    AS To_Tm
        , CASE WHEN a.SSBSECT_SSTS_CODE = 'A' THEN 'T' ELSE 'F' END AS IS_ACTIVE   
        , CASE WHEN b.SSRMEET_ROOM_CODE is not null and b.SSRMEET_BLDG_CODE is not null then b.SSRMEET_BLDG_CODE||'$$'||b.SSRMEET_ROOM_CODE
          when b.ssrmeet_room_code is null and b.ssrmeet_bldg_code is null then
(select CASE WHEN c.SSRMEET_BLDG_CODE || c.SSRMEET_ROOM_CODE is null 
                    then 'EAB0'
                    when c.SSRMEET_ROOM_CODE is null and c.SSRMEET_BLDG_CODE is not null
                    then c.SSRMEET_BLDG_CODE
                    else c.SSRMEET_BLDG_CODE || '$$' || c.SSRMEET_ROOM_CODE
                    end
             from ssrmeet c 
              where c.ssrmeet_crn = ssbsect_crn and c.ssrmeet_term_code = ssbsect_term_code and rownum = 1)
          when b.SSRMEET_ROOM_CODE is null and b.SSRMEET_BLDG_CODE is not null then b.SSRMEET_BLDG_CODE 
          --when SSRMEET_ROOM_CODE
          else 'EAB0' end as \\\""Location\\\""
FROM ssbsect a 
LEFT OUTER JOIN ( SELECT ssrmeet_crn
                          , ssrmeet_term_code
                          , Day_of_Week
                          , ssrmeet_begin_time
                          , ssrmeet_end_time
                          , ssrmeet_bldg_code
                          , ssrmeet_room_code
                   FROM   ( SELECT ssrmeet_crn
                                   , ssrmeet_term_code
                                   , ssrmeet_begin_time
                                   , ssrmeet_end_time
                                   , ssrmeet_bldg_code
                                   , ssrmeet_room_code
                                   , ssrmeet_Sun_day
                                   , ssrmeet_Mon_day
                                   , ssrmeet_Tue_day
                                   , ssrmeet_Wed_day
                                   , ssrmeet_Thu_day
                                   , ssrmeet_Fri_day
                                   , ssrmeet_Sat_day 
                             FROM   ssrmeet) 
                  UNPIVOT(Day_of_week FOR sk IN (ssrmeet_sun_day
                                                 , ssrmeet_Mon_day
                                                 , ssrmeet_Tue_day
                                                 , ssrmeet_Wed_day
                                                 , ssrmeet_Thu_day
                                                 , ssrmeet_Fri_day
                                                 , ssrmeet_Sat_day))
                  WHERE  1=1 
                     --AND ssrmeet_term_code = '201402' 
                     --AND ssrmeet_crn = '24016' 
                ) b ON b.ssrmeet_crn = a.ssbsect_crn 
                       AND b.ssrmeet_term_code = a.ssbsect_term_code 
WHERE 1=1 
   AND ssbsect_term_code > '201510'  -- Hard coded term that will need to be removed
   and SSBSECT_VOICE_AVAIL = 'Y'
   AND ssbsect_gmod_code <> 'C'
ORDER BY 1 desc","Section Time"
1219,"Broward College",10510,"",48378,"Navigate:Broward College",47972,"Navigate",20,"core.Advisor","SELECT 
a.USERNAME AS nk
, a.USERNAME AS username
, em.EMAIL AS email
, FIRST_NM AS first_name
, LAST_NM AS last_name
, CASE
	WHEN TYPE = 'X' THEN'F'
	ELSE 'T'
	END is_active

FROM ADVISORS a
JOIN EMPLOYEE_MASTER em ON a.USERNAME = em.USERNAME

ORDER BY 5, 4
","Advisor"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"core.Student","-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT szvterm_code
FROM szvterm
WHERE szvterm_code <= (
                      SELECT MIN(szvterm_code)
                      FROM szvterm
                        WHERE szvterm_start_date > sysdate AND
                              SUBSTR(SZVTERM_CODE, 1, 1) NOT IN ('6', '7' ,'8')
                              AND SZVTERM_VPDI_CODE = 'PPCC'
                      )
      AND SUBSTR(SZVTERM_CODE, 1, 1) NOT IN ('6', '7' ,'8')
      AND SZVTERM_VPDI_CODE = 'PPCC'
AND ROWNUM < 6
ORDER BY 1 DESC
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code LIKE 'R%'
  AND sfrstcr_vpdi_code = 'PPCC'
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.szvterm_code = saradap_term_code_entry
WHERE saradap_vpdi_code = 'PPCC'
),

-- get student details
student AS (
SELECT DISTINCT 
  spriden_id AS nk
  , spriden_id AS username
  , TRIM(COALESCE(
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address like '%student.cccs.edu' AND  goremal_status_ind = 'A' AND ROWNUM < 2
                ),
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address like '%student.cccs.edu' AND  goremal_status_ind = 'I' AND ROWNUM < 2
                ),
                (SELECT goremal_email_address FROM goremal
                   WHERE goremal_pidm = spriden_pidm AND goremal_email_address not like '%student.cccs.edu' AND  goremal_status_ind = 'A' AND ROWNUM < 2
                )
                , LOWER(spriden_id) || '@missingemail.org' -- set default email if none above available
                  )
        ) AS email
  , spriden_first_name AS first_name
  , spriden_last_name AS last_name
  , NVL(TO_CHAR(spbpers_birth_date, 'YYYY-MM-DD'), '2000-01-01') AS birthdate
  , 'T' AS is_active
FROM SPRIDEN
  JOIN studentPopulation ON studentPopulation.studentPidm = spriden_pidm
  RIGHT JOIN spbpers ON spriden_pidm = spbpers_pidm
WHERE 1=1
  AND spriden_change_ind IS NULL -- Ensure most recent student record is extracted
  AND spriden_entity_ind = 'P' -- Indicates that the record is a person. 'C' indicates a non-person such as a location.
)

-- wrapper query
select * from student","Students"
407,"Nashua Community College",10206,"",47964,"Navigate:Nashua Community College",47972,"Navigate",20,"cat.sectiontime","SELECT a.ssbsect_term_code || '$$' || a.ssbsect_crn || '$$'
       || COALESCE(b.Day_of_Week, '') || '$$'    
       || COALESCE(b.ssrmeet_begin_time, '') || '$$'
       || COALESCE(b.ssrmeet_end_time, '') || '$$'         AS NK 
       , a.ssbsect_crn || '$$' || a.ssbsect_term_code     AS Section 
       , CASE b.Day_of_Week 
            WHEN 'U' THEN 1 
            WHEN 'M' THEN 2 
            WHEN 'T' THEN 3 
            WHEN 'W' THEN 4 
            WHEN 'R' THEN 5 
            WHEN 'F' THEN 6 
            WHEN 'S' THEN 7 
           ELSE 8 
          END                                    AS Day_of_Week 
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_begin_time,1,2) || ':' || SUBSTR(b.ssrmeet_begin_time,3,2) || ':00'  
            ELSE ''
          END                                    AS From_Tm
        , CASE
            WHEN b.ssrmeet_begin_time IS NOT NULL THEN SUBSTR(b.ssrmeet_end_time,1,2)   || ':' || SUBSTR(b.ssrmeet_end_time,3,2) || ':00' 
            ELSE ''
          END                                    AS To_Tm
        , CASE WHEN a.SSBSECT_SSTS_CODE = 'A' THEN 'T' ELSE 'F' END AS IS_ACTIVE   
        , CASE WHEN b.SSRMEET_ROOM_CODE is not null and b.SSRMEET_BLDG_CODE is not null then b.SSRMEET_BLDG_CODE||'$$'||b.SSRMEET_ROOM_CODE
          when b.ssrmeet_room_code is null and b.ssrmeet_bldg_code is null then
           (select CASE WHEN c.SSRMEET_BLDG_CODE || c.SSRMEET_ROOM_CODE is null 
                    then 'EAB0'
                    when c.SSRMEET_ROOM_CODE is null and c.SSRMEET_BLDG_CODE is not null
                    then c.SSRMEET_BLDG_CODE
                    else c.SSRMEET_BLDG_CODE || '$$' || c.SSRMEET_ROOM_CODE
                    end
             from ssrmeet c 
              where c.ssrmeet_crn = ssbsect_crn and c.ssrmeet_term_code = ssbsect_term_code and rownum = 1)
          when SSRMEET_ROOM_CODE is null and SSRMEET_BLDG_CODE is not null then SSRMEET_BLDG_CODE 
          --when SSRMEET_ROOM_CODE
          else 'EAB0' end as \\\""Location\\\""
FROM ssbsect a 
LEFT OUTER JOIN ( SELECT ssrmeet_crn
                          , ssrmeet_term_code
                          , Day_of_Week
                          , ssrmeet_begin_time
                          , ssrmeet_end_time
                          , ssrmeet_bldg_code
                          , ssrmeet_room_code
                   FROM   ( SELECT ssrmeet_crn
                                   , ssrmeet_term_code
                                   , ssrmeet_begin_time
                                   , ssrmeet_end_time
                                   , ssrmeet_bldg_code
                                   , ssrmeet_room_code
                                   , ssrmeet_Sun_day
                                   , ssrmeet_Mon_day
                                   , ssrmeet_Tue_day
                                   , ssrmeet_Wed_day
                                   , ssrmeet_Thu_day
                                   , ssrmeet_Fri_day
                                   , ssrmeet_Sat_day 
                             FROM   ssrmeet) 
                  UNPIVOT(Day_of_week FOR sk IN (ssrmeet_sun_day
                                                 , ssrmeet_Mon_day
                                                 , ssrmeet_Tue_day
                                                 , ssrmeet_Wed_day
                                                 , ssrmeet_Thu_day
                                                 , ssrmeet_Fri_day
                                                 , ssrmeet_Sat_day))
                  WHERE  1=1 
                     --AND ssrmeet_term_code = '201402' 
                     --AND ssrmeet_crn = '4757' 
                ) b ON b.ssrmeet_crn = a.ssbsect_crn 
                       AND b.ssrmeet_term_code = a.ssbsect_term_code 
  left join scrlevl
  on a.SSBSECT_SUBJ_CODE = scrlevl_subj_code
  and a.SSBSECT_CRSE_NUMB = scrlevl_crse_numb
where 1=1
and SCRLEVL_LEVL_CODE = 'NC' 
AND ssbsect_term_code > '201510'  
and SSBSECT_CAMP_CODE = 'NCC'
and ssrmeet_bldg_code in ('GREGG',
'INTERN',
'NAUTO',
'NMAIN',
'NWELL',
'ONLINE')
ORDER BY 1 desc, 3, 4","Section Time"
884,"Golden West Community College",10258,"",11291,"Navigate:Golden West Community College",47972,"Navigate",20,"cat.FirstTermFeed","-- Fields: nk,student,term,is_active
-- Model Name: cat.FirstTermFeed
-- Name: FirstTermFeed
-- Query:

-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),



-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

firstTermFeed as (
select
    spriden_id as nk,
    spriden_id as student,   
    min(saradap_term_code_entry) as term,
    'T' as is_active
  from studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  WHERE spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
 group by spriden_id
)

select * from firstTermFeed","FirstTermFeed"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.Department","-- Fields: nk,name,is_active
-- Model Name: cat.Department
-- Name: Department
-- Output: Department_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get department data from Banner 
WITH department AS (
SELECT stvdept_code nk,
stvdept_desc \\\""name\\\"",
'T' is_active
FROM stvdept
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 
  '0000' nk,
  'Default' \\\""name\\\"",
  'F' is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM department
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Departments"
1099,"Alamo Community College District",10441,"",48089,"Navigate:Alamo Community College District",47972,"Navigate",20,"cat.sectiontime","WITH Campuses as (
select stvcamp_code
from stvcamp
where stvcamp_code in ('NLC','NVC','PAC','SAC','SPC','O')
),
unpivotDayOfWeek AS (
SELECT ssrmeet_crn
  , ssrmeet_term_code
  , dayOfWeek
  , ssrmeet_begin_time
  , ssrmeet_end_time
  , ssrmeet_bldg_code
  , ssrmeet_room_code
  , ssrmeet_schd_code
  FROM ssrmeet 
    UNPIVOT(DayOfWeek FOR dayValue IN (ssrmeet_sun_day
                                        , ssrmeet_Mon_day
                                        , ssrmeet_Tue_day
                                        , ssrmeet_Wed_day
                                        , ssrmeet_Thu_day
                                        , ssrmeet_Fri_day
                                        , ssrmeet_Sat_day))
),

-- extract section times from banner
sectionTime AS (
SELECT ssbsect_term_code || '$$' || ssbsect_crn || '$$' || COALESCE(unpivotDayOfWeek.DayOfWeek, '') || '$$' || COALESCE(ssrmeet_begin_time, '') || '$$' || COALESCE(ssrmeet_end_time, '') AS nk 
  , ssbsect_crn || '$$' || ssbsect_term_code AS section 
  , CASE unpivotDayOfWeek.DayOfWeek 
        WHEN 'U' THEN 1 
        WHEN 'M' THEN 2 
        WHEN 'T' THEN 3 
        WHEN 'W' THEN 4 
        WHEN 'R' THEN 5 
        WHEN 'F' THEN 6 
        WHEN 'S' THEN 7 
        ELSE 8 
        END AS day_of_week -- Convert day of week code to number of week with Sunday as start of week.
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_begin_time,1,2) || ':' || SUBSTR(ssrmeet_begin_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS from_tm
  , CASE WHEN ssrmeet_begin_time IS NOT NULL 
          THEN SUBSTR(ssrmeet_end_time,1,2)   || ':' || SUBSTR(ssrmeet_end_time,3,2) || ':00' -- Convert to valid time format
          ELSE ''
          END AS to_tm
  , CASE WHEN ssrmeet_room_code IS NOT NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code ||'$$'|| ssrmeet_room_code
        WHEN ssrmeet_room_code IS NULL AND ssrmeet_bldg_code IS NOT NULL
          THEN ssrmeet_bldg_code
        WHEN ssrmeet_schd_code = 2 and ssrmeet_room_code is null and ssrmeet_bldg_code is null
          then 'ONL'
        ELSE 'EAB0' 
        END AS \\\""location\\\""
  , CASE WHEN SSBSECT_SSTS_CODE = '1'  and ssbsect_camp_code in (select * from campuses) and ssbsect_max_enrl <> 0
          THEN 'T' 
          ELSE 'F' 
          END AS IS_ACTIVE -- Identify active sections by comparing the value in ssbsec_ssts_code. By default, we look for this value to be 'A' for an active section.
FROM ssbsect 
LEFT JOIN unpivotDayOfWeek ON (unpivotDayOfWeek.ssrmeet_crn = ssbsect_crn
                              AND unpivotDayOfWeek.ssrmeet_term_code = ssbsect_term_code) -- Lookup day of week code
WHERE 1=1
  AND ssbsect_term_code > TO_CHAR(sysdate, 'YYYY') || '01' -- limit query to current and future year terms
--  AND ssbsect_camp_code = 'M' 
-- in case of multiple campuses, filter data to campus that purchased Navigate. Commented out by default
and ssbsect_max_enrl <> 0
and ssbsect_term_code not like '8%'
)

-- wrapper query
SELECT * FROM sectionTime","Section Time"
902,"Porterville",10358,"",29128,"Navigate:Porterville",47972,"Navigate",20,"cat.EnrollmentApplication","with max_list as (
  select saradap_pidm as pidm,
         max(saradap_term_code_entry) as max_term
    from saradap
   group by saradap_pidm
),
term_list as (
  SELECT STVTERM_CODE term
    FROM STVTERM
   where STVTERM_CODE <= (Select min(Stvterm_Code)
                            From Stvterm 
                           where sysdate < stvterm_start_date)
     and stvterm_code not in ('000000','999999')
     and rownum < 3
   order by 1 desc
),
pop as (
  select distinct s.saradap_pidm as pidm, esa.id as student_id
    from saradap s join eab_stdnt_active esa on s.saradap_pidm = esa.person_uid
                                            and esa.current_enroll_pc = 'Y'
   where s.saradap_term_code_entry in (select * from term_list)
),
app_list as (
select p.student_id as nk,
       p.student_id as student,
       saradap_term_code_entry as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       el.email as personal_email,
       case
        when ml.max_term is not null then 'T'
        else 'F'
       end as is_active
  from saradap left join max_list ml on saradap_pidm = ml.pidm
                                    and saradap_term_code_entry = ml.max_term
               left join pop p on saradap_pidm = p.pidm
               left join eab_stdnt_persmail el on p.student_id = el.student
 where saradap_term_code_entry in (select term from term_list)
   and saradap_levl_code = 'PC'
   and p.student_id is not null
)
select  /*csv*/ nk, student, app_term, app_number, app_dt, personal_email, is_active
  from app_list","Enrollment Application"
954,"Gavilan College",10360,"",47981,"Navigate:Gavilan College",47972,"Navigate",20,"cat.Section","-- get drop dates
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW')
),

-- get withdraw dates
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WD')
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code)
),

-- get instructors
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course -- Modified to remove $$ in concatenation and match with Course nk
  , stvterm_code AS term
  , NVL(stvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , 'N' AS is_unlimited_seating
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt
  , CASE WHEN ssbsect_ssts_code = 'A'
          THEN 'T'
          ELSE 'F'
          END AS is_active
FROM ssbsect
  JOIN stvcamp ON stvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN stvterm ON stvterm_code = ssbsect_term_code -- term lookup
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn) -- meeting lookup
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code) -- drop dates loookup
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code)-- withdraw dates lookup
 WHERE ssbsect_camp_code IN ('G', 'H', 'M', 'O') -- in case of multiple campuses, filter data to campus that purchased Navigate. Comented out by default. Confirm with BA.
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM section
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""","Section"
946,"College of Marin",10339,"",47959,"Navigate:College of Marin",47972,"Navigate",20,"cat.StudentTerm","WITH PMT as ( --this is the lookup of program codes so we pull in the right program code from PRGM lkp
select * from (select distinct sobcurr_program as pgrm,
                               max(sobcurr_term_code_init) as prog_max_term,
                               stvterm_acyr_code as acyr
                 from sobcurr left join stvterm on stvterm_code = sobcurr_term_code_init
                where stvterm_code is not null
                group by sobcurr_program, stvterm_acyr_code) b
 where prog_max_term = (select max(sobcurr_term_code_init)
                        from sobcurr
                       where sobcurr.sobcurr_program = b.pgrm)),
--
SGB as ( --this is the list of students and terms and appropriate program information
select * from (select sgbstdn_pidm,
                      sgbstdn_program_1,
                      sgbstdn_stst_code,
                      sgbstdn_term_code_eff as max_eff_term,
                      sgbstdn_term_code_ctlg_1,
                      stvstst_reg_ind
                 from sgbstdn
                 left join stvstst on stvstst_code = sgbstdn_stst_code
                where sgbstdn_program_1 is not null and stvstst_code is not null) a
 where max_eff_term = (select max(sgbstdn_term_code_eff)
                         from sgbstdn right join stvterm on sgbstdn_term_code_eff = stvterm_code
                        where a.sgbstdn_pidm = sgbstdn_pidm 
                          and stvterm_end_date <= sysdate + 365)
 order by 1,4),
--
term_list as (
  select distinct stvterm_code as term_code
    from stvterm join sfrrsts on stvterm_code = sfrrsts_term_code
   where sfrrsts_rsts_code in ('RA', 'RW', 'RE')
     and SFRRSTS_PTRM_CODE = '1'
     and substr(stvterm_code, -1, 1) IN ('0','9')
     AND trunc(SFRRSTS_START_DATE, 'YYYY') >= TRUNC(sysdate, 'YYYY')-(365*2)
   order by stvterm_code desc
),
--
pop AS ( --this is your population of students to include
select distinct pidm from (Select Sfrstcr_Pidm pidm,
                                  Sfrstcr_Term_Code term
                             From Sfrstcr
                            Where sfrstcr_rsts_code in ('RA', 'RW', 'RE')
                              and sfrstcr_term_code in (select term_code from term_list)
                            UNION
                           (select saradap_pidm pidm,
                                   saradap_term_code_entry term
                              from saradap
                             where saradap_term_code_entry in (select term_code from term_list))))

select spriden_id || '$$' || SGB.max_eff_term nk,
       spriden_id student,
       SGB.max_eff_term term,
       SGB.sgbstdn_program_1 || '$$' || PMT.acyr \\\""program\\\"",
       decode(stvstst_reg_ind,'Y','T','F') is_active
  from spriden
 right join SGB on spriden_pidm = SGB.sgbstdn_pidm 
  join PMT on SGB.sgbstdn_program_1 = PMT.pgrm 
 where spriden_change_ind is null
   and spriden_entity_ind = 'P'
   AND EXISTS (SELECT 1 -- Just wants any results
                 FROM sgbstdn
                WHERE sgbstdn_program_1 IS NOT NULL
                  And Sgbstdn_Stst_Code = 'AS')
   And Spriden_Pidm In (Select * From Pop)
   And UPPER(spriden_id) NOT LIKE 'DELET%' 
 order by 2","Student Term"
712,"Tulsa Community College",10205,"",47944,"Navigate:Tulsa Community College",47972,"Navigate",20,"noah_studentgrad","
WITH population AS (
select distinct pidm from (
select  sfrstcr_pidm pidm, 
        sfrstcr_term_code term 
from sfrstcr
where sfrstcr_rsts_code in ('RE','RW')
and sfrstcr_term_code in (select term from 
(SELECT STVTERM_CODE term FROM STVTERM
--WHERE STVTERM_END_DATE > SYSDATE - 
WHERE STVTERM_FA_SUMMER_IND IS NULL
and STVTERM_SYSTEM_REQ_IND is null
and STVTERM_CODE <= (Select min(Stvterm_Code) From Stvterm 
                      where sysdate < stvterm_start_date
                      and STVTERM_FA_SUMMER_IND IS NULL
                      and STVTERM_SYSTEM_REQ_IND is null)
and rownum < 30
ORDER BY 1 desc)
)

))

select spriden_id student_id
, grad.SHRDGMR_TERM_CODE_GRAD as term_id
, 'Y' as graduation_ind
from SHRDGMR grad
left join (select spriden_id,spriden_pidm from spriden where spriden_change_ind is null) on SHRDGMR_pidm = spriden_pidm
where 1=1
and grad.shrdgmr_seq_no = (select max(shrdgmr_seq_no) from shrdgmr where shrdgmr_term_code_grad is not null 
and shrdgmr_pidm = grad.shrdgmr_pidm)
and grad.shrdgmr_term_code_grad is not null
and grad.shrdgmr_pidm in (select population.pidm from population)

","Grad Lookup"
1236,"Mt Hood Community College",10519,"",48498,"Navigate:Mt Hood Community College",47972,"Navigate",20,"cat.Subject","/*
Navigate 1.0
Mt Hood
Jenzabar CX
Subject File

Fields	nk,name,is_active
*/

SELECT DISTINCT NVL(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    SUBSTR(REPLACE(cr.crs_no, ' ', ''), 1, 5)
                    , '1', ''), '2', ''), '3', ''), '4', '')
                    , '5', ''), '6', ''), '7', ''), '8', '')
                    , '9', ''), '0', ''), '') AS nk
                , NVL(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
                    SUBSTR(REPLACE(cr.crs_no, ' ', ''), 1, 5)
                    , '1', ''), '2', ''), '3', ''), '4', '')
                    , '5', ''), '6', ''), '7', ''), '8', '')
                    , '9', ''), '0', ''), '') AS name
                , 'T' AS is_active 
FROM informix.crs_rec cr  
WHERE 1=1
   AND cr.crs_no <> ''
ORDER BY 1","Subjects"
966,"George C Wallace State Community College",10365,"",47998,"Navigate:George C Wallace State Community College",47972,"Navigate",20,"cat.enrollmentApplication","with studentPopulation AS (
select  saradap_pidm AS pidm,
        saradap_term_code_entry AS term,
        saradap_appl_no AS appl_no
from saradap
where saradap_term_code_entry in 
      (        
      select term from (           
          Select Stvterm_Code Term 
          FROM STVTERM
          Where STVTERM_CODE >= (
                      
                      SELECT MAX(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date < sysdate
                      And Stvterm_Desc Not Like '%CE' 
                      and stvterm_desc not like '%Continuing Education'
                                )
                      )
      )
),

studentMaxTerm AS (
SELECT pidm AS pidm
  , MAX(term) AS maxTerm
  , MAX (appl_no) AS maxApplNo
FROM studentPopulation
  GROUP BY pidm
),

email_list as (
  select goremal_pidm as pidm,
         coalesce(
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'PERS' and rownum = 1),
          (select goremal_email_address from goremal where goremal_pidm = g.goremal_pidm and goremal_status_ind = 'A' and goremal_emal_code = 'CAMP' and rownum = 1),
          ''
         ) as email
    from goremal g
),

enrollmentApplication as (
select DISTINCT spriden_id as nk,
       spriden_id as student,
       studentMaxTerm.maxTerm as app_term,
       saradap_appl_no as app_number,
       to_char(saradap_appl_date, 'YYYY-MM-DD') as app_dt,
       TRIM(email_list.email) as personal_email,
       case
        when saradap_term_code_entry is not null then 'T'
        else 'F'
       end as is_active
  from saradap
    join studentMaxTerm on saradap_pidm = studentMaxTerm.pidm
                              and saradap_term_code_entry = studentMaxTerm.maxTerm
                              and saradap_appl_no = studentMaxTerm.maxApplNo
    join spriden on saradap_pidm = spriden_pidm
    left join email_list on saradap_pidm = email_list.pidm
  where spriden_change_ind is NULL
    and spriden_entity_ind = 'P'
)

select  *
  from enrollmentApplication","Enrollment Application"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.Course","SELECT DISTINCT 
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb nk,
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb cd,
  CASE    
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = 0 THEN 0   
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = 1 THEN 1
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = 2 THEN 2
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = 3 THEN 3
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = 4 THEN 4
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = 5 THEN 5
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = 6 THEN 6
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = 7 THEN 7
    WHEN SUBSTR(scbcrse.scbcrse_crse_numb, 1, 1) = 8 THEN 8
    Else 0
  End As \\\""level\\\""
  ,
  scbcrse.scbcrse_subj_code subject,
  NVL(scbcrse.scbcrse_divs_code, '0000') dept, 
  scbcrse.scbcrse_title title,
  Dbms_Lob.Substr(Scbdesc.Scbdesc_Text_Narrative, 3000) As \\\""desc\\\"",
  '' Course_Type, 
  CASE 
    WHEN scbcrse.scbcrse_credit_hr_ind IS NULL THEN scbcrse_credit_hr_low 
    when scbcrse.scbcrse_credit_hr_ind IS NOT NULL THEN scbcrse_credit_hr_high
    ELSE NULL
  END credits,
  CASE scbcrse.scbcrse_csta_code
    WHEN 'A' THEN 'T'
  ELSE 'F' 
  END is_active
FROM scbcrse  INNER JOIN stvsubj ON scbcrse_subj_code = stvsubj_code
             left join scbdesc on scbdesc_subj_code = scbcrse_subj_code 
                and scbdesc_crse_numb = scbcrse_crse_numb 
             INNER JOIN (
                          SELECT scbcrse_subj_code, scbcrse_crse_numb, MAX(scbcrse_eff_term) AS max_term
                          FROM scbcrse
                          GROUP BY scbcrse_subj_code, scbcrse_crse_numb
                        ) t ON scbcrse.scbcrse_subj_code = t.scbcrse_subj_code
                               AND scbcrse.scbcrse_crse_numb = t.scbcrse_crse_numb
                               AND t.max_term = scbcrse_eff_term
             LEFT JOIN ssbsect ON scbcrse.scbcrse_crse_numb = ssbsect_crse_numb
                               AND scbcrse.scbcrse_subj_code = ssbsect_subj_code
WHERE
scbdesc_term_code_eff = (select max(b.scbdesc_term_code_eff) from scbdesc b
          Where Scbcrse.Scbcrse_Subj_Code = B.Scbdesc_Subj_Code 
          And Scbcrse.Scbcrse_Crse_Numb = B.Scbdesc_Crse_Numb)
","Course"
877,"Snead State Community College",10305,"",4938,"Navigate:Snead Community College",47972,"Navigate",20,"cat.Section","WITH 
SFRRSTS_DROP_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.Sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('DW')

--and rsts.Sfrrsts_Term_Code = 201110 and rsts.Sfrrsts_ptrm_code = '16'
),
SFRRSTS_WITHDRAW_DATES as (
Select distinct rsts.Sfrrsts_Term_Code, rsts.Sfrrsts_Ptrm_Code,rsts.sfrrsts_rsts_code, rsts.sfrrsts_activity_date, rsts.Sfrrsts_Start_Date, rsts.Sfrrsts_End_Date
From Sfrrsts rsts
where rsts.Sfrrsts_rsts_code in ('WS')
)

SELECT 
  ssbsect_crn || '$$' || ssbsect_term_code nk, -- <- ssbsect's primary key
  ssbsect_crn cd,
  ssbsect_subj_code || ssbsect_crse_numb course,
  ssbsect_term_code term,
  CASE 
    WHEN NVL(ssbsect_camp_code, 'DEFAULT') = 'M' THEN 'Main' 
    WHEN NVL(ssbsect_camp_code, 'DEFAULT') = 'ARB' THEN 'Arab' 
    ELSE 'Default' 
  END campus,
  ssbsect_max_enrl seats_offered, 
  'N' is_unlimited_seating, -- Defaulting to unlimited seating to being no, need to find out
                            -- if this is ok or should we find data to indicate otherwise.
  CASE 
    When Spriden_Last_Name Is Null Then 'TBD'
    when spriden_first_name is null then 'TBD'
    ELSE spriden_last_name || ', ' || spriden_first_name
  END instructor_name,
  NVL(to_char(ssrmeet_start_date, 'YYYY-MM-DD'), '2000-01-01') class_start_dt,
  NVL(to_char(ssrmeet_end_date, 'YYYY-MM-DD'), '2000-01-02') class_end_dt,
  coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_Start_Date,'YYYY-MM-DD'), to_char(ssrmeet_start_date, 'YYYY-MM-DD'),'2000-01-01') as DROP_START_DT
  , coalesce(to_char(SFRRSTS_DROP_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as DROP_END_DT
  , coalesce(to_char(SFRRSTS_WITHDRAW_DATES.Sfrrsts_End_Date,'YYYY-MM-DD'), to_char(ssrmeet_end_date, 'YYYY-MM-DD'),'2000-01-02') as WITHDRAW_END_DT

  , CASE 
    WHEN ssbsect_ssts_code = 'A' AND ssrmeet_start_date > (sysdate - 184) THEN 'T'
    ELSE 'F'
  END is_active
FROM ssbsect LEFT JOIN sirasgn ON ssbsect_term_code = sirasgn_term_code 
                              AND ssbsect_crn = sirasgn_crn
             LEFT JOIN spriden ON spriden_pidm = sirasgn_pidm
                  JOIN ssrmeet ON ssbsect_crn = ssrmeet_crn
                              AND ssbsect_term_code = ssrmeet_term_code
             LEFT JOIN SFRRSTS_DROP_DATES on ssbsect_term_code = SFRRSTS_DROP_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_DROP_DATES.Sfrrsts_ptrm_code
             LEFT JOIN SFRRSTS_WITHDRAW_DATES on ssbsect_term_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_term_code 
                              and ssbsect_ptrm_code = SFRRSTS_WITHDRAW_DATES.Sfrrsts_ptrm_code
WHERE spriden_change_ind IS NULL 
  AND sirasgn_category = '01'
  AND sirasgn_primary_ind = 'Y'
  AND ssbsect_term_code >= '201015'","Section"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.course","with course_bank as (

select course_cd,
SUBJ,
sum(institution_count) as inst
from (
      SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','') as course_cd,
      trim(C.SUBJECT) as SUBJ,
      case when c.institution = 'DC279' then '1' else '0' end as institution_count
      from (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    --and o.acad_org <> 'LCREDIT'
--and o.crse_offer_nbr <> 1
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
                    ) C
        )
group by course_cd, SUBJ

)

SELECT course_cd    as NK
, course_cd         as cd
, '1'               as \\\""LEVEL\\\""
, SUBJ              as SUBJECT
, '1'               AS DEPARTMENT_CD 
, 'DUMMY'           as \\\""desc\\\""
, ''                as COURSE_TYPE
, 'DUMMY'           AS TITLE
, 0                 AS CREDITS
, 0                 AS REPEATABLE_COUNT
, 'F'               AS IS_ACTIVE 
from course_bank
where inst = 0","Inactive Courses"
894,"Coastline Community College",10259,"",19793,"Navigate:Coastline Community College",47972,"Navigate",20,"event.TaskStatusFeed","--Fields  nk,student,event,repeated_by_nk,status,status_changed_ts,is_active
--Model Name  event.TaskStatusFeed
--Name  TaskStatusFeed
--Output  TaskStatusFeed_{data#DateStamp}.csv
--Query :


-- get last five terms based on current term
WITH getLastXTerms AS (
SELECT * FROM
(SELECT stvterm_code
FROM stvterm
WHERE stvterm_code <= (
                      SELECT MIN(stvterm_code)
                      FROM stvterm
                        WHERE stvterm_start_date > sysdate
                      )
ORDER BY 1 DESC
)
WHERE ROWNUM < 6
),

-- get student population for last 5 terms determined in getLastXTerms
studentPopulation AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm -- Get students who have registered
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
  
UNION

SELECT DISTINCT saradap_pidm AS studentPidm -- get students who have applied
FROM saradap
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = saradap_term_code_entry
WHERE 1=1
),

-- Extract E_ORIENTATION related events - no repeat
E_ORIENTATION AS (
SELECT
  spriden_id || '$$E_ORIENTATION$$' AS nk
  , spriden_id AS student
  , 'E_ORIENTATION' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP -- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVRORNT
    ON SVRORNT_PIDM = studentPopulation.studentPidm
WHERE SVRORNT_DICD_CODE = 831		-- Coastline students
	AND SVRORNT_OSST_CODE IN ('ORIENT','ONLINE','LEGACY','SOAR')
       AND SVRORNT_ACTIVITY_DATE > SYSDATE - (1/24)
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),



-- Extract each student's FIRST_TERM
FIRST_TERM AS(
select
    spriden_id
    ,saradap_pidm as student_pidm
    ,min(saradap_term_code_entry) as first_term_code
  from studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  WHERE spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
 group by spriden_id, saradap_pidm
),



-- Extract E_FIRST_ADVISOR_MEET related events - repeats on first term registration
E_FIRST_ADVISOR_MEET AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_FIRST_ADVISOR_MEET$$' || FIRST_TERM.FIRST_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_FIRST_ADVISOR_MEET' AS event
  , FIRST_TERM.FIRST_TERM_CODE  AS repeated_by_nk	
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVREDPL
    ON SVREDPL_PIDM = studentPopulation.studentPidm
  JOIN FIRST_TERM
    ON FIRST_TERM.STUDENT_PIDM = SVREDPL.SVREDPL_PIDM
    AND FIRST_TERM.FIRST_TERM_CODE = SVREDPL.SVREDPL_TERM_CODE
WHERE SVREDPL_DICD_CODE = 831		-- Coastline students
	AND SVREDPL_EPST_CODE IN ('ABBREV', 'COMPR')
       AND SVREDPL_ACTIVITY_DATE > SYSDATE - (1/24)
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


  
-- Extract each student's NEXT_TERM
NEXT_TERM AS(
select
  spriden_id
  ,saradap_pidm as student_pidm   
	,LEAD(STVTERM.STVTERM_CODE, 1) OVER(PARTITION BY spriden_id, SARADAP_PIDM ORDER BY STVTERM.STVTERM_CODE) AS NEXT_TERM_CODE
  from studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN saradap 
    on saradap_pidm = spriden_pidm
  JOIN STVTERM
    ON STVTERM.STVTERM_CODE = saradap.saradap_term_code_entry
  WHERE SYSDATE BETWEEN STVTERM.STVTERM_START_DATE AND STVTERM.STVTERM_END_DATE
    and spriden_change_ind IS NULL
    AND spriden_entity_ind = 'P'
),




-- Extract E_MEET_ADVISOR related events - repeats each next term
E_MEET_ADVISOR AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_MEET_ADVISOR$$' || NEXT_TERM.NEXT_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_MEET_ADVISOR' AS event
  , NEXT_TERM.NEXT_TERM_CODE AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SVREDPL
    ON SVREDPL_PIDM = studentPopulation.studentPidm
  JOIN NEXT_TERM
    ON NEXT_TERM.STUDENT_PIDM = SVREDPL.SVREDPL_PIDM
    AND NEXT_TERM.NEXT_TERM_CODE = SVREDPL.SVREDPL_TERM_CODE
WHERE SVREDPL_DICD_CODE = 831		-- Coastline students
	AND SVREDPL_EPST_CODE IN ('ABBREV', 'COMPR')
  AND SVREDPL_ACTIVITY_DATE > SYSDATE - (1/24)
	AND NEXT_TERM.NEXT_TERM_CODE IS NOT NULL
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),

-- Extract E_PLACEMENT related events - no repeat
E_PLACEMENT AS (
SELECT
  spriden_id || '$$E_PLACEMENT$$' AS nk
  , spriden_id AS student
  , 'E_PLACEMENT' AS event
  , NULL AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM studentPopulation
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = studentPopulation.studentPidm
  JOIN SORTEST
    ON SORTEST_PIDM = studentPopulation.studentPidm
WHERE SORTEST_TESC_CODE IN ('1PEN','1PES','1PRD','2PEN','2PES','2PLI','2PRD','3PEN','3PES','3PRD','6RLG','6RLL','6RLR','1PMA','2PMA','3PMA') 
  AND (SORTEST_TSRC_CODE = 'TAPE' OR SORTEST_TSRC_CODE IS NULL)
  AND SORTEST_ACTIVITY_DATE > SYSDATE - (1/24)
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),



-- Get students who have registered
REGISTERED_STUDENTS AS (
SELECT DISTINCT sfrstcr_pidm AS studentPidm 
FROM sfrstcr  
  JOIN getLastXTerms ON getLastXTerms.stvterm_code = sfrstcr_term_code
WHERE 1=1
  AND sfrstcr_rsts_code IN ('RE','RW')
),


-- Extract E_REGISTER_FIRST_TERM related events - repeats on first term registration
E_REGISTER_FIRST_TERM AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_REGISTER_FIRST_TERM$$' || FIRST_TERM.FIRST_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_REGISTER_FIRST_TERM' AS event
  , FIRST_TERM.FIRST_TERM_CODE  AS repeated_by_nk	
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN FIRST_TERM
    ON FIRST_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),


-- Extract E_REGISTER_NEXT_TERM related events - repeats each next term
E_REGISTER_NEXT_TERM AS (
SELECT DISTINCT
  SPRIDENGP.spriden_id || '$$E_REGISTER_NEXT_TERM$$' || NEXT_TERM.NEXT_TERM_CODE AS nk
  , SPRIDENGP.spriden_id AS student
  , 'E_REGISTER_NEXT_TERM' AS event
  , NEXT_TERM.NEXT_TERM_CODE AS repeated_by_nk
  , 'COMPLETED' AS status						
  , to_char(sysdate, 'YYYY-MM-DD') || 'T' || to_char(sysdate, 'HH24:MI:SS') AS status_changed_ts
  , 'T' AS is_active
FROM REGISTERED_STUDENTS
  JOIN CCCD_EAB_GENERAL_PERSON SPRIDENGP 		-- Custom view at Coastline since no access to SPRIDEN
    ON SPRIDENGP.spriden_pidm = REGISTERED_STUDENTS.studentPidm
  JOIN NEXT_TERM
    ON NEXT_TERM.STUDENT_PIDM = REGISTERED_STUDENTS.studentPidm
WHERE NEXT_TERM.NEXT_TERM_CODE IS NOT NULL
	AND spriden_change_ind IS NULL
	AND spriden_entity_ind = 'P'
),




finalDataSet AS (
SELECT * FROM E_ORIENTATION
UNION
SELECT * FROM E_FIRST_ADVISOR_MEET
UNION
SELECT * FROM E_MEET_ADVISOR
UNION
SELECT * FROM E_PLACEMENT       
UNION
SELECT * FROM E_REGISTER_FIRST_TERM    
UNION
SELECT * FROM E_REGISTER_NEXT_TERM 
)

SELECT * from finalDataSet","TaskStatusFeed"
1057,"Navigate Banner Master Scripts",21212121,"",48032,"Navigate:Navigate Banner Master Scripts",47972,"Navigate",20,"cat.Subject","-- Fields: nk,name,is_active
-- Model Name: cat.Subject
-- Name: Subject
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- get subject data from Banner  
WITH subject AS (
	SELECT stvsubj_code AS nk,
  stvsubj_desc AS \\\""name\\\"",
  'T' AS is_active
FROM stvsubj
),

-- Assign default values
\\\""default\\\"" AS (
Select 'DEFAULT' as NK
, 'DEFAULT' as \\\""Name\\\""
, 'F' as IS_ACTIVE
from dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS(
SELECT * FROM subject
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Subjects"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.course","with course_bank as (

select course_cd,
sum(institution_count) as inst
from (
      SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','') as course_cd,
      case when c.institution = 'NV280' then '1' else '0' end as institution_count
      from (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.acad_org <> 'LCREDIT'
                    and o.crse_offer_nbr <> 1
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from ps_crse_offer x where x.crse_id = o.crse_id
                                                  and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))
                    ) C
        )
group by course_cd

)

SELECT REPLACE(c.SUBJECT, ' ','') || REPLACE(c.CATALOG_NBR, ' ','')
 --|| '-' || REPLACE(b.SSR_COMPONENT, ' ','')
 || REPLACE('-' || C.institution, '-NV280', '') as NK
, C.CRSE_ID as cd
, case when acad_group = 'DEV' then '0' else '1' end  as \\\""level\\\""
, REPLACE(c.SUBJECT, ' ','') as SUBJECT
, '1'                                                                               AS DEPARTMENT_CD 
, nvl(b.DESCRLONG,  b.DESCR)                                                        as \\\""desc\\\""
, b.SSR_COMPONENT COURSE_TYPE
, nvl(b.COURSE_TITLE_LONG, b.descr)                                                 AS TITLE
, b.UNITS_ACAD_PROG                                                                   AS CREDITS
, case when b.crse_repeatable = 'N' then 0
else crse_repeat_limit - 1 end                                                      AS REPEATABLE_COUNT
, case when b.EFF_STATUS = 'A' 
        and C.INSTITUTION = 'NV280' 
        then 'T' 
        else 'F' 
  end                                                                               AS IS_ACTIVE 
FROM (SELECT o.CRSE_ID
                          , o.ACAD_GROUP
                          , o.ACAD_ORG
                          , o.SUBJECT
                          , o.CATALOG_NBR
                          , o.CRSE_OFFER_NBR
                          , o.INSTITUTION 
                   FROM PS_CRSE_OFFER o
                   WHERE o.EFFDT = (SELECT MAX(EFFDT)
                                    FROM   PS_CRSE_OFFER
                                    WHERE  o.CRSE_ID = CRSE_ID)
                    and o.INSTITUTION = 'NV280'
                    --and o.acad_career = 'CRED'
                    and o.acad_org <> 'LCREDIT'
                    and o.crse_offer_nbr <> '1'
                    and o.crse_offer_nbr = (select max(x.crse_offer_nbr) from PS_CRSE_OFFER x where o.crse_id = x.crse_id
                                              and x.EFFDT =(SELECT MAX(EFFDT)
                                                  FROM   PS_CRSE_OFFER
                                                  WHERE  x.CRSE_ID = CRSE_ID))

                    ) C

LEFT JOIN (SELECT mainB.CRSE_ID 
               , UNITS_ACAD_PROG
               , COURSE_TITLE_LONG 
               , DESCR
               , DESCRLONG
               , EFF_STATUS
               , CRSE_REPEATABLE
               , CRSE_REPEAT_LIMIT
               , SSR_COMPONENT
        FROM   PS_CRSE_CATALOG mainB 
        WHERE  mainB.EFFDT = (SELECT Max(EFFDT) 
                              FROM   PS_CRSE_CATALOG c 
                              WHERE  c.crse_id = mainb.crse_id)) B
        on B.CRSE_ID = C.CRSE_ID
WHERE  1 = 1 

ORDER  BY 1, 2","Course"
904,"Harrisburg Area Community College",10292,"",33316,"Navigate:Harrisburg Area CC - Test",47972,"Navigate",20,"core.FacultyType","SELECT 
  stvfstp_Code AS nk,
  stvfstp_Code AS \\\""type\\\"",
  stvfstp_desc AS description
FROM stvfstp

UNION

SELECT 
  stvfctg_Code AS nk,
  stvfctg_Code AS \\\""type\\\"",
  stvfctg_Desc AS description
FROM stvfctg
union 
select 'Staff' as Nk,
'Staff' as \\\""type\\\"",
'Staff' as Description
from dual","Faculty Type"
1145,"Colorado Community College System",10479,"",48477,"Navigate:Colorado Community College System",47972,"Navigate",20,"cat.Section","-- get drop dates from sfrrsts for specific registration drop codes
WITH sfrrstsDropDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, Sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date, Sfrrsts_vpdi_Code
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('DW') -- This is the default registration drop code. Ensure this is valid at Member site. Confirm with BA.
      AND SFRRSTS_VPDI_CODE = 'ACC'
),

-- get withdraw dates from sfrrsts for specific registration withdraw codes
sfrrstsWithdrawDates AS (
SELECT DISTINCT Sfrrsts_Term_Code, Sfrrsts_Ptrm_Code, sfrrsts_rsts_code, sfrrsts_activity_date, Sfrrsts_Start_Date, Sfrrsts_End_Date, Sfrrsts_vpdi_Code
FROM Sfrrsts
WHERE Sfrrsts_rsts_code IN ('WW') -- This is the default registration withdraw code. Ensure this is valid at Member site. Confirm with BA.
      AND SFRRSTS_VPDI_CODE = 'ACC'
),

-- get ptrm description
ptrmDesc AS (
SELECT Ssbsect_Crn crn, Ssbsect_Term_Code term, Ssbsect_Ptrm_Code ptrm, 
Sobptrm_Desc || ' (' 
|| Sobptrm_Weeks 
|| ' Weeks)' AS ptrm_desc
FROM Ssbsect
LEFT JOIN sobptrm ON (Ssbsect_Ptrm_Code = sobptrm_ptrm_code 
                      AND ssbsect_term_code = sobptrm_term_code
                      AND ssbsect_vpdi_code = sobptrm_vpdi_code)
WHERE ssbsect_vpdi_code = 'ACC'
),

-- get instructors from sirasgn and compare with spriden to ensure they exist as well as are the latest record.
instructor AS (
SELECT sirasgn_term_code, sirasgn_crn, sirasgn_pidm, sirasgn_primary_ind, spriden_id, spriden_first_name, spriden_last_name
FROM SIRASGN
  JOIN SPRIDEN ON sirasgn_pidm = spriden_pidm
WHERE sirasgn_category = '01' AND sirasgn_primary_ind = 'Y' AND spriden_change_ind IS NULL -- By default, we look for sirasgn_category = '01' and sirasgn_primary_ind = 'Y'. Confirm with BA/Member if this logic holds true for determining instructors. 
      AND sirasgn_vpdi_code = 'ACC'
),

-- extract section from banner
section AS (
SELECT DISTINCT
  ssbsect_crn || '$$' || ssbsect_term_code AS nk
  , ssbsect_crn AS cd
  , ssbsect_subj_code || ssbsect_crse_numb AS course
  , szvterm_code AS term
  , NVL(szvcamp_code, 'DEFAULT') AS campus
  , ssbsect_max_enrl AS seats_offered
  , ssbsect_wait_capacity AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  -- Check for valida instructor names. If no valid name exists, use default text.
  , CASE WHEN instructor.spriden_last_name IS NULL
          THEN 'TBD'
          ELSE instructor.spriden_last_name || ', ' || instructor.spriden_first_name 
          END AS instructor_name
  , NVL(TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS class_start_dt
  , NVL(TO_CHAR(ssrmeet_end_date,'YYYY-MM-DD'), '2000-01-02') AS class_end_dt
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_Start_Date, 'YYYY-MM-DD'), TO_CHAR(ssrmeet_start_date,'YYYY-MM-DD'), '2000-01-01') AS drop_start_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsDropDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(SSBSECT_CENSUS_ENRL_DATE,'YYYY-MM-DD'), '2000-01-02') AS drop_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , COALESCE(TO_CHAR(sfrrstsWithdrawDates.Sfrrsts_end_Date, 'YYYY-MM-DD'), TO_CHAR(SSBSECT_CENSUS_2_DATE,'YYYY-MM-DD'), '2000-01-02') AS withdraw_end_dt -- look for date in sfrrsts; if not exists, look for date in ssrmeet; if not exists use default date.
  , CASE WHEN ssbsect_ssts_code = 'O' and ssbsect_voice_avail = 'Y'
          THEN 'T'
          ELSE 'F'
          END AS is_active -- Identify if section is active by comparing the value in ssbsect_ssts_code. The default is 'A'. Confirm with BA/Member if this is different at their college.
FROM ssbsect
  JOIN stugrcccs.szvcamp ON szvcamp_code = ssbsect_camp_code -- Campus lookup
  JOIN szvterm ON (szvterm_code = ssbsect_term_code AND -- term lookup
                   szvterm_vpdi_code = ssbsect_vpdi_code)
  LEFT JOIN instructor ON (instructor.sirasgn_term_code = ssbsect_term_code -- Instructor lookup
                          AND instructor.sirasgn_crn = ssbsect_crn)
  LEFT JOIN ssrmeet ON (ssrmeet_term_code = ssbsect_term_code
                        AND ssrmeet_crn = ssbsect_crn -- meeting lookup
                        AND ssrmeet_vpdi_code = ssbsect_vpdi_code) 
  LEFT JOIN sfrrstsDropDates ON (sfrrstsDropDates.Sfrrsts_Term_Code = ssbsect_term_code
                                AND sfrrstsDropDates.Sfrrsts_Ptrm_Code = ssbsect_ptrm_code -- drop dates loookup
                                AND sfrrstsDropDates.sfrrsts_vpdi_code = ssbsect_vpdi_code) 
  LEFT JOIN sfrrstsWithdrawDates ON (sfrrstsWithdrawDates.sfrrsts_term_code = ssbsect_term_code
                                    AND sfrrstsWithdrawDates.sfrrsts_ptrm_code = ssbsect_ptrm_code-- withdraw dates lookup
                                    AND sfrrstsWithdrawDates.sfrrsts_vpdi_code = ssbsect_vpdi_code)
  WHERE ssbsect_vpdi_code = 'ACC'
        AND szvcamp_vpdi_code = 'ACC'
        AND szvcamp_eab_enable = 'Y' 
        AND SUBSTR(szvterm_code, 1, 1) NOT IN ('6', '7', '8')

-- WHERE ssbsect_camp_code = 'M' -- in case of multiple campuses, filter data to campus that purchased Navigate. Comented out by default. Confirm with BA/Member.
),

-- Assign default values
defaultValues AS (
SELECT 'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 'UNKNOWN' AS course
  , '201570' AS term -- Member specific, change to a valid default term. Confirm with BA/Member.
  , 'DEFAULT' AS campus
  , 0 AS seats_offered
  , 0 AS waitlist_capacity
  , 'N' AS is_unlimited_seating
  , 'TBD' AS instructor_name
  , '2000-01-01' AS class_start_dt
  , '2000-01-02' AS class_end_dt
  , '2000-01-01' AS drop_start_dt
  , '2000-01-02' AS drop_end_dt
  , '2000-01-02' AS withdraw_end_dt
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
finalDataSet AS (
SELECT * FROM section
UNION
SELECT * FROM defaultValues
)

-- Wrapper query
SELECT * FROM finalDataSet

","Sections"
227,"Georgia State University",9990,"",48202,"Navigate:Georgia State University",47972,"Navigate",20,"cat.Course","-- Fields	nk,cd,level,subject,dept,title,desc,course_type,credits,is_active
-- ModelName	cat.Course
-- Name		Course
-- Output	Course_{data#DateStamp}.csv
-- Script Version (Product.Major.Minor.Custom): Nav.1.0.0
-- schema spec version:
-- Author: Doug Menezes
-- Query:

-- determine most recent term for each subject code and course number
WITH maxEffectiveTerm AS (
SELECT
  MAX(scbcrse_eff_term) AS maxTerm
  , scbcrse_subj_code
  , scbcrse_crse_numb
FROM scbcrse
GROUP BY scbcrse_subj_code, scbcrse_crse_numb),

-- extract course data from Banner
course AS (
SELECT DISTINCT
  scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS nk
  , scbcrse.scbcrse_subj_code || scbcrse.scbcrse_crse_numb AS cd
  , DECODE(scrattr_attr_code, 'ZZZ', 0, 1) AS \\\""level\\\"" -- Member specific. Confirm with BA
  , scbcrse.scbcrse_subj_code AS subject
  , NVL(scbcrse.scbcrse_dept_code, '0000') AS dept
  , SUBSTR(scbcrse.scbcrse_title,1,100) AS title
  , dbms_lob.SUBSTR(scbdesc.scbdesc_text_narrative,3000) AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , CASE WHEN scbcrse.scbcrse_credit_hr_ind IS NULL
          THEN scbcrse.scbcrse_credit_hr_low
          ELSE scbcrse.scbcrse_credit_hr_high
          END AS credits -- determine if low or high credits should be extracted depending on the scbcrse_credit_hr_ind field. If this field is NULL, always extract the scbcrse_credit_hr_low value.
  , CASE
      WHEN scbcrse.scbcrse_crse_numb NOT LIKE '%.' THEN CASE 
                                                          WHEN scbcrse.scbcrse_csta_code = 'A' THEN 'T'
                                                          ELSE 'F'
                                                        END
      ELSE 'F'
    END AS is_active --check that catalog number does not end in '.', then check for csta_code for whether the course is active or not.
FROM scbcrse
JOIN maxEffectiveTerm ON (scbcrse.scbcrse_subj_code = maxEffectiveTerm.scbcrse_subj_code 
                          AND scbcrse.scbcrse_crse_numb = maxEffectiveTerm.scbcrse_crse_numb
                          AND scbcrse.scbcrse_eff_term = maxEffectiveTerm.maxTerm)
LEFT JOIN scbdesc ON (scbcrse.scbcrse_subj_code = scbdesc.scbdesc_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scbdesc.scbdesc_crse_numb
                          AND scbdesc.scbdesc_term_code_eff = maxEffectiveTerm.maxTerm)
LEFT JOIN scrattr ON (scbcrse.scbcrse_subj_code = scrattr.scrattr_subj_code 
                          AND scbcrse.scbcrse_crse_numb = scrattr.scrattr_crse_numb
                          AND scrattr.scrattr_eff_term = maxEffectiveTerm.maxTerm)
),

-- Assign default values
\\\""default\\\"" AS (
SELECT 
  'UNKNOWN' AS nk
  , 'UNKNOWN' AS cd
  , 1 AS \\\""level\\\""
  , 'DEFAULT' AS subject
  , '0000' AS dept
  , 'UNKNOWN' AS title
  , '' AS \\\""desc\\\""
  , 'DEFAULT' AS course_type
  , 0 AS credits
  , 'F' AS is_active
FROM dual
),

-- Combine Banner data and default values
\\\""final\\\"" AS (
SELECT * FROM course
UNION
SELECT * FROM \\\""default\\\""
)

-- Wrapper query
SELECT * FROM \\\""final\\\""
","Courses"
855,"Cerro Coso Community College",10260,"",875,"Community College",47972,"Navigate",20,"cat.CourseType","SELECT DISTINCT 
  course_type nk, 
    course_type name, 
      is_active
      FROM EAB_CRSE
      ","Course Type"
948,"Northern Virginia Community College (NOVA)",10346,"",48000,"Navigate:Northern Virginia Community College (NOVA)",47972,"Navigate",20,"cat.studentcourse","WITH pop as (

select distinct a.EMPLID as student_id
        ,a.req_term AS max_term
        ,a.acad_plan
        ,a.declare_dt
from ps_acad_plan a
inner join (select emplid, max(strm)
              from ps_stdnt_car_term b
              where institution = 'NV280'
              and ACAD_CAREER = 'CRED'

              group by emplid) b
              on a.emplid = b.emplid         
inner join (select emplid from ps_acad_prog a 
            where effdt = (select max(effdt) from ps_acad_prog where emplid = a.emplid)
            and effseq = (select max(effseq) from ps_acad_prog where emplid = a.emplid)
            and PROG_STATUS = 'AC') c
            on a.emplid = c.emplid  
WHERE  1=1
        and req_term > 2100
        and ACAD_CAREER = 'CRED'   
        and a.effdt = (select max(effdt) from ps_acad_plan b 
                      where a.emplid = b.emplid 
                      ) 
        and acad_plan in ('2120','2124','2130','3400','2990')

),
dates as (

select STRM,
session_code,
last_wait_dt,
weeks_of_instruct,
enroll_open_dt,
sess_begin_dt,
sess_end_dt,
sixty_pct_dt,
first_enrl_dt,
sess_end_dt - sess_begin_dt as date_diff
from PS_SESSION_TBL
where institution = 'NV280'
--and session_code <> 'DYN'
--and session_code = '1'
--and session_code = 'DYN' and strm = '2152'

)                    

--Institutional coursework
SELECT 
a.EMPLID || '$$' || a.strm || '$$' || REPLACE(b.SUBJECT, ' ', '') || REPLACE(b.CATALOG_NBR, ' ', '') as NK 
,a.EMPLID                                                                            AS STUDENT
, a.STRM                                                                            AS TERM
, REPLACE(b.SUBJECT, ' ', '') || REPLACE(b.CATALOG_NBR, ' ', '')                    AS COURSE
, case when b.start_dt > sysdate-365 and b.institution = 'NV280' 
then b.crse_id || '$$' 
|| b.strm || '$$' 
|| b.session_code || '$$'
|| dates.date_diff || '$$'
|| b.CLASS_SECTION
else '' end                                                                         AS SECTION
, a.CRSE_GRADE_OFF                                                                  AS GRADE_CD
, a.GRADE_POINTS                                                                    AS GRADE_POINTS
, a.UNT_TAKEN                                                                       AS ATTEMPTED_CREDITS
, CASE 
            WHEN ( a.EARN_CREDIT = 'Y' 
                   --AND a.STDNT_ENRL_STATUS = 'E'                                                                          --Update, member-specific
                   AND a.GRADE_DT IS NOT NULL ) THEN a.UNT_EARNED 
            ELSE 0 
  END                                                                               AS EARNED_CREDITS
, CASE WHEN a.STDNT_ENRL_STATUS = 'E'
        --and a.GRADING_SCHEME = 'STD'
        and a.ACAD_CAREER='CRED'
        and a.GRADING_BASIS_ENRL in ('GRD','HNR','PNP') 
        and a.CRSE_GRADE_OFF in ('A', 'B', 'C', 'D','P')
  THEN 'COMPLETED'
  WHEN A.ACAD_CAREER='CRED'
       and A.STDNT_ENRL_STATUS='E'
       and A.GRADING_BASIS_ENRL IN ('AUD','DEV','GRD','HNR','PNP')
       and A.GRADE_DT is null
       and a.UNITS_ATTEMPTED <> 'I'
  then 'REGISTERED'
  WHEN a.UNITS_ATTEMPTED = 'I' 
  then 'IN_PROGRESS' --might want to check via dates here
  ELSE 'UNKNOWN'
  END                                                                               AS STATUS
, 'T'                                                                               as is_active
        
FROM 
(SELECT * 
            FROM   PS_STDNT_ENRL 
            WHERE  ACAD_CAREER IN ( 'CRED' )) a             --Update, member-specific 
        
--COURSE INFO 
LEFT JOIN PS_CLASS_TBL b 
       ON b.CLASS_NBR = a.CLASS_NBR 
          AND b.STRM = a.STRM 
--          AND b.ACAD_CAREER IN ( 'UGRD' )                 --Removed to bring in all coursework even if it isn't UGRD   
left join dates on b.strm = dates.strm
and b.session_code = dates.session_code             
     
WHERE  1 = 1
and a.EMPLID in (select student_id from pop)
and a.INSTITUTION = 'NV280'","Student Course"